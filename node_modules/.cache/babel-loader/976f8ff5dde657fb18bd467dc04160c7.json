{"ast":null,"code":"import { message } from \"antd\";\nimport TonWeb from \"tonweb\";\nimport { Cell } from \"ton\";\nimport { encodeOffChainContent, decodeOffChainContent } from \"./BOCcontent\";\nconst MakeTONTrx = async (activeBtn, setIsload, TONAmount, walletTo, netTo, hexString, openData, add, params) => {\n  if (activeBtn) {\n    setIsload(true);\n    listener(walletTo, netTo, hexString, setIsload, openData, add, params);\n\n    //@ts-ignore\n    const ton = window.ton;\n    ton.send(\"ton_sendTransaction\", [{\n      to: process.env.REACT_APP_BACK_TON_WALLET,\n      value: TonWeb.utils.toNano(Number(TONAmount)).toString(),\n      data: encodeOffChainContent(`${openData ? \"SM#\" : \"\"}${netTo}#${openData ? add : walletTo}${openData ? `#${btoa(params)}` : \"\"}`).toBoc().toString(\"base64\"),\n      dataType: \"boc\"\n    }]);\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n_c = MakeTONTrx;\nconst listener = (walletTo, netTo, hexString, setIsload, openData, add, params) => {\n  let trxs = [];\n  const int = setInterval(() => {\n    message.success(\"Wait BE trx pending...\", 2);\n    fetch(`https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`).then(e => e.json()).then(e => {\n      const data = e.result.filter(e => {\n        console.log(e.in_msg.msg_data.body);\n        console.log(Cell.fromBoc(Buffer.from(TonWeb.utils.base64ToBytes(e.in_msg.msg_data.body)))[0]);\n        return decodeOffChainContent(Cell.fromBoc(Buffer.from(TonWeb.utils.base64ToBytes(e.in_msg.msg_data.body)))[0]) === `${openData ? \"SM#\" : \"\"}${netTo}#${openData ? add : walletTo}${openData ? `#${btoa(params)}` : \"\"}`;\n      });\n      if (!data[0] && trxs.length === 0) trxs.push({\n        transaction_id: {\n          hash: \"test\"\n        }\n      });\n      if (trxs.length === 0 && data[0]) trxs = data;\n      if (data[0].transaction_id.hash !== trxs[0].transaction_id.hash && trxs.length !== 0) {\n        clearInterval(int);\n        message.success(\"Done BE trx!\", 10);\n        fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\" : \"https://api.tonana.org/\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            hash: data[0].transaction_id.hash,\n            sourceChain: \"ton\"\n          })\n        });\n        setIsload(false);\n        message.success(\"Done trx!\", 10);\n      }\n    });\n  }, 10000);\n};\nexport default MakeTONTrx;\nvar _c;\n$RefreshReg$(_c, \"MakeTONTrx\");","map":{"version":3,"names":["message","TonWeb","Cell","encodeOffChainContent","decodeOffChainContent","MakeTONTrx","activeBtn","setIsload","TONAmount","walletTo","netTo","hexString","openData","add","params","listener","ton","window","send","to","process","env","REACT_APP_BACK_TON_WALLET","value","utils","toNano","Number","toString","data","btoa","toBoc","dataType","error","trxs","int","setInterval","success","fetch","then","e","json","result","filter","console","log","in_msg","msg_data","body","fromBoc","Buffer","from","base64ToBytes","length","push","transaction_id","hash","clearInterval","REACT_APP_STATE","method","headers","JSON","stringify","sourceChain"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeTONTrx.ts"],"sourcesContent":["import { message } from \"antd\";\nimport TonWeb from \"tonweb\";\nimport { Cell } from \"ton\";\nimport { encodeOffChainContent, decodeOffChainContent } from \"./BOCcontent\";\n\nconst MakeTONTrx = async (\n\tactiveBtn: any,\n\tsetIsload: any,\n\tTONAmount: any,\n\twalletTo: any,\n\tnetTo: string,\n\thexString: any,\n\topenData: boolean,\n\tadd: string,\n\tparams: string\n) => {\n\tif (activeBtn) {\n\t\tsetIsload(true);\n\t\tlistener(walletTo, netTo, hexString, setIsload, openData, add, params);\n\n\t\t//@ts-ignore\n\t\tconst ton = window.ton;\n\t\tton.send(\"ton_sendTransaction\", [\n\t\t\t{\n\t\t\t\tto: process.env.REACT_APP_BACK_TON_WALLET,\n\t\t\t\tvalue: TonWeb.utils.toNano(Number(TONAmount)).toString(),\n\t\t\t\tdata: encodeOffChainContent(\n\t\t\t\t\t`${openData ? \"SM#\" : \"\"}${netTo}#${openData ? add : walletTo}${\n\t\t\t\t\t\topenData ? `#${btoa(params)}` : \"\"\n\t\t\t\t\t}`\n\t\t\t\t)\n\t\t\t\t\t.toBoc()\n\t\t\t\t\t.toString(\"base64\"),\n\t\t\t\tdataType: \"boc\",\n\t\t\t},\n\t\t]);\n\t} else {\n\t\tmessage.error(\"Fill all forms and connect wallets!\", 10);\n\t}\n};\n\nconst listener = (\n\twalletTo: any,\n\tnetTo: string,\n\thexString: any,\n\tsetIsload: any,\n\topenData: boolean,\n\tadd: string,\n\tparams: string\n) => {\n\tlet trxs: any = [];\n\tconst int = setInterval(() => {\n\t\tmessage.success(\"Wait BE trx pending...\", 2);\n\t\tfetch(\n\t\t\t`https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`\n\t\t)\n\t\t\t.then((e: any) => e.json())\n\t\t\t.then((e: any) => {\n\t\t\t\tconst data = e.result.filter((e: any) => {\n\t\t\t\t\tconsole.log(e.in_msg.msg_data.body);\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\tCell.fromBoc(\n\t\t\t\t\t\t\tBuffer.from(TonWeb.utils.base64ToBytes(e.in_msg.msg_data.body))\n\t\t\t\t\t\t)[0]\n\t\t\t\t\t);\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdecodeOffChainContent(\n\t\t\t\t\t\t\tCell.fromBoc(\n\t\t\t\t\t\t\t\tBuffer.from(TonWeb.utils.base64ToBytes(e.in_msg.msg_data.body))\n\t\t\t\t\t\t\t)[0]\n\t\t\t\t\t\t) ===\n\t\t\t\t\t\t`${openData ? \"SM#\" : \"\"}${netTo}#${openData ? add : walletTo}${\n\t\t\t\t\t\t\topenData ? `#${btoa(params)}` : \"\"\n\t\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tif (!data[0] && trxs.length === 0)\n\t\t\t\t\ttrxs.push({ transaction_id: { hash: \"test\" } });\n\t\t\t\tif (trxs.length === 0 && data[0]) trxs = data;\n\n\t\t\t\tif (\n\t\t\t\t\tdata[0].transaction_id.hash !== trxs[0].transaction_id.hash &&\n\t\t\t\t\ttrxs.length !== 0\n\t\t\t\t) {\n\t\t\t\t\tclearInterval(int);\n\n\t\t\t\t\tmessage.success(\"Done BE trx!\", 10);\n\n\t\t\t\t\tfetch(\n\t\t\t\t\t\tprocess.env.REACT_APP_STATE === \"dev\"\n\t\t\t\t\t\t\t? \"http://localhost:8092\"\n\t\t\t\t\t\t\t: process.env.REACT_APP_STATE === \"dev-remote\"\n\t\t\t\t\t\t\t? \"https://dev.api.tonana.org\"\n\t\t\t\t\t\t\t: \"https://api.tonana.org/\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\thash: data[0].transaction_id.hash,\n\t\t\t\t\t\t\t\tsourceChain: \"ton\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tsetIsload(false);\n\n\t\t\t\t\tmessage.success(\"Done trx!\", 10);\n\t\t\t\t}\n\t\t\t});\n\t}, 10000);\n};\n\nexport default MakeTONTrx;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}