{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toRfc3339 = exports.fromRfc3339 = void 0;\nvar rfc3339Matcher = /^(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?((?:[+-]\\d{2}:\\d{2})|Z)$/;\nfunction padded(integer) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var filled = \"00000\" + integer.toString();\n  return filled.substring(filled.length - length);\n}\nfunction fromRfc3339(str) {\n  var matches = rfc3339Matcher.exec(str);\n  if (!matches) {\n    throw new Error(\"Date string is not in RFC3339 format\");\n  }\n  var year = +matches[1];\n  var month = +matches[2];\n  var day = +matches[3];\n  var hour = +matches[4];\n  var minute = +matches[5];\n  var second = +matches[6];\n  // fractional seconds match either undefined or a string like \".1\", \".123456789\"\n  var milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;\n  var tzOffsetSign;\n  var tzOffsetHours;\n  var tzOffsetMinutes;\n  // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).\n  if (matches[8] === \"Z\") {\n    tzOffsetSign = 1;\n    tzOffsetHours = 0;\n    tzOffsetMinutes = 0;\n  } else {\n    tzOffsetSign = matches[8].substring(0, 1) === \"-\" ? -1 : 1;\n    tzOffsetHours = +matches[8].substring(1, 3);\n    tzOffsetMinutes = +matches[8].substring(4, 6);\n  }\n  var tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds\n  var timestamp = Date.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000;\n  return new Date(timestamp);\n}\nexports.fromRfc3339 = fromRfc3339;\nfunction toRfc3339(date) {\n  var year = date.getUTCFullYear();\n  var month = padded(date.getUTCMonth() + 1);\n  var day = padded(date.getUTCDate());\n  var hour = padded(date.getUTCHours());\n  var minute = padded(date.getUTCMinutes());\n  var second = padded(date.getUTCSeconds());\n  var ms = padded(date.getUTCMilliseconds(), 3);\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second, \".\").concat(ms, \"Z\");\n}\nexports.toRfc3339 = toRfc3339;","map":{"version":3,"sources":["../src/rfc3339.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toRfc3339 = exports.fromRfc3339 = void 0;\nconst rfc3339Matcher = /^(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?((?:[+-]\\d{2}:\\d{2})|Z)$/;\nfunction padded(integer, length = 2) {\n    const filled = \"00000\" + integer.toString();\n    return filled.substring(filled.length - length);\n}\nfunction fromRfc3339(str) {\n    const matches = rfc3339Matcher.exec(str);\n    if (!matches) {\n        throw new Error(\"Date string is not in RFC3339 format\");\n    }\n    const year = +matches[1];\n    const month = +matches[2];\n    const day = +matches[3];\n    const hour = +matches[4];\n    const minute = +matches[5];\n    const second = +matches[6];\n    // fractional seconds match either undefined or a string like \".1\", \".123456789\"\n    const milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;\n    let tzOffsetSign;\n    let tzOffsetHours;\n    let tzOffsetMinutes;\n    // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).\n    if (matches[8] === \"Z\") {\n        tzOffsetSign = 1;\n        tzOffsetHours = 0;\n        tzOffsetMinutes = 0;\n    }\n    else {\n        tzOffsetSign = matches[8].substring(0, 1) === \"-\" ? -1 : 1;\n        tzOffsetHours = +matches[8].substring(1, 3);\n        tzOffsetMinutes = +matches[8].substring(4, 6);\n    }\n    const tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds\n    const timestamp = Date.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000;\n    return new Date(timestamp);\n}\nexports.fromRfc3339 = fromRfc3339;\nfunction toRfc3339(date) {\n    const year = date.getUTCFullYear();\n    const month = padded(date.getUTCMonth() + 1);\n    const day = padded(date.getUTCDate());\n    const hour = padded(date.getUTCHours());\n    const minute = padded(date.getUTCMinutes());\n    const second = padded(date.getUTCSeconds());\n    const ms = padded(date.getUTCMilliseconds(), 3);\n    return `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}Z`;\n}\nexports.toRfc3339 = toRfc3339;\n//# sourceMappingURL=rfc3339.js.map"]},"metadata":{},"sourceType":"script"}