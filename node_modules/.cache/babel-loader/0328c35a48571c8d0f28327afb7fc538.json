{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  return sha512(ed25519.utils.concatBytes(...arguments));\n};\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.sync.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.sync.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nlet _Symbol$toStringTag;\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n\n  /* eslint-disable require-await */\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\nconst voteAuthorizeWithSeedArgs = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(_ref => {\n      let [, meta] = _ref;\n      return meta.isSigner && meta.isWritable;\n    });\n    const readonlySigners = mapEntries.filter(_ref2 => {\n      let [, meta] = _ref2;\n      return meta.isSigner && !meta.isWritable;\n    });\n    const writableNonSigners = mapEntries.filter(_ref3 => {\n      let [, meta] = _ref3;\n      return !meta.isSigner && meta.isWritable;\n    });\n    const readonlyNonSigners = mapEntries.filter(_ref4 => {\n      let [, meta] = _ref4;\n      return !meta.isSigner && !meta.isWritable;\n    });\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(_ref5 => {\n      let [address] = _ref5;\n      return new PublicKey(address);\n    }), ...readonlySigners.map(_ref6 => {\n      let [address] = _ref6;\n      return new PublicKey(address);\n    }), ...writableNonSigners.map(_ref7 => {\n      let [address] = _ref7;\n      return new PublicKey(address);\n    }), ...readonlyNonSigners.map(_ref8 => {\n      let [address] = _ref8;\n      return new PublicKey(address);\n    })];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref9 => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref9;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref10 => {\n        let {\n          publicKey\n        } = _ref10;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref11 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref11;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref12, index) => {\n      let {\n        signature\n      } = _ref12;\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref13, customMessage) {\n    let {\n      code,\n      message,\n      data\n    } = _ref13;\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\nvar _process$env$npm_pack;\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n/** @internal */\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429\n        /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/** @internal */\n\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string())\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\n\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\n\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\n\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\n\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      var _config$abortSignal;\n      const config = strategy;\n      if ((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise(_ref14) {\n    let {\n      commitment,\n      signature\n    } = _ref14;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value !== null && value !== void 0 && value.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy(_ref15) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        lastValidBlockHeight,\n        signature\n      }\n    } = _ref15;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy(_ref16) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        minContextSlot,\n        nonceAccountPubkey,\n        nonceValue,\n        signature\n      }\n    } = _ref16;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        var _signatureStatus;\n\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          var _outcome$slotInWhichN;\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if ((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy(_ref17) {\n    let {\n      commitment,\n      signature\n    } = _ref17;\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(_ref18 => {\n                let {\n                  transaction,\n                  meta,\n                  version\n                } = _ref18;\n                return {\n                  meta,\n                  transaction: {\n                    ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version\n                };\n              })\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref19 => {\n        let {\n          transaction,\n          meta\n        } = _ref19;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref20 => {\n        let {\n          transaction,\n          meta\n        } = _ref20;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref21 => {\n      let [hash, subscription] = _ref21;\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _setSubscription(hash, nextSubscription) {\n    var _this$_subscriptionsB;\n    const prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state); // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */);\n\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64'\n    /* encoding */, filters ? {\n      filters: filters\n    } : undefined\n    /* extra */);\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  const h = hmac.create(sha256, key);\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref22) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref22;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref23) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref23;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref24) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref24;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"names":["ed25519","utils","sha512Sync","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","default","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","accountKeys","recentBlockhash","indexToProgramIds","args","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","_keypair","keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as HttpAgent} from 'http';\nimport {Agent as HttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: HttpAgent | HttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager:\n    | {requestEnd(): void; requestStart(): HttpAgent | HttpsAgent}\n    | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        agentManager = new AgentManager(\n          url.startsWith('https:') /* useHttps */,\n        );\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof HttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof HttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agentManager = {requestEnd() {}, requestStart: () => httpAgent};\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: HttpAgent | HttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | DurableNonceTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as\n        | BlockheightBasedTransactionConfirmationStrategy\n        | DurableNonceTransactionConfirmationStrategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | DurableNonceTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | DurableNonceTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}