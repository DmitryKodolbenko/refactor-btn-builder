{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction encodePubkey(pubkey) {\n  if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n    const pubkeyProto = keys_2.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n    const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n  }\n}\nexports.encodePubkey = encodePubkey;\nfunction decodeSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_2.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeSecp256k1Pubkey)(key);\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n  }\n}\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        return decodeSinglePubkey(pubkey);\n      }\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(decodeSinglePubkey)\n          }\n        };\n        return out;\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n  }\n}\nexports.decodePubkey = decodePubkey;","map":{"version":3,"sources":["../src/pubkey.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction encodePubkey(pubkey) {\n    if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n        const pubkeyProto = keys_2.PubKey.fromPartial({\n            key: (0, encoding_1.fromBase64)(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n        const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n            threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n            publicKeys: pubkey.value.pubkeys.map(encodePubkey),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n            value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else {\n        throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n    }\n}\nexports.encodePubkey = encodePubkey;\nfunction decodeSinglePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            const { key } = keys_2.PubKey.decode(pubkey.value);\n            return (0, amino_1.encodeSecp256k1Pubkey)(key);\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n    }\n}\nfunction decodePubkey(pubkey) {\n    if (!pubkey || !pubkey.value) {\n        return null;\n    }\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            return decodeSinglePubkey(pubkey);\n        }\n        case \"/cosmos.crypto.multisig.LegacyAminoPubKey\": {\n            const { threshold, publicKeys } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n            const out = {\n                type: \"tendermint/PubKeyMultisigThreshold\",\n                value: {\n                    threshold: threshold.toString(),\n                    pubkeys: publicKeys.map(decodeSinglePubkey),\n                },\n            };\n            return out;\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n    }\n}\nexports.decodePubkey = decodePubkey;\n//# sourceMappingURL=pubkey.js.map"]},"metadata":{},"sourceType":"script"}