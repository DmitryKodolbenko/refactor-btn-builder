{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\nexport var monitorCharacteristic = function monitorCharacteristic(characteristic) {\n  return Observable.create(function (o) {\n    log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n    function onCharacteristicValueChanged(event) {\n      var characteristic = event.target;\n      if (characteristic.value) {\n        o.next(Buffer.from(characteristic.value.buffer));\n      }\n    }\n    characteristic.startNotifications().then(function () {\n      characteristic.addEventListener(\"characteristicvaluechanged\", onCharacteristicValueChanged);\n    });\n    return function () {\n      log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n      characteristic.stopNotifications();\n    };\n  });\n};","map":{"version":3,"sources":["../src/monitorCharacteristic.js"],"names":["Observable","log","monitorCharacteristic","characteristic","create","o","uuid","onCharacteristicValueChanged","event","target","value","next","Buffer","from","buffer","startNotifications","then","addEventListener","stopNotifications"],"mappings":"AACA,SAASA,UAAT,QAA2B,MAA3B;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAO,IAAMC,qBAAqB,GAChCC,SADWD,qBAAqB,CAChCC,cADmC;EAAA,OAGnC,UAAU,CAACC,MAAX,CAAmBC,UAAAA,CAAD,EAAO;IACvBJ,GAAG,CAAC,aAAD,EAAgB,gBAAA,GAAmBE,cAAc,CAACG,IAAlD,CAAHL;IAEA,SAASM,4BAAT,CAAsCC,KAAtC,EAA6C;MAC3C,IAAML,cAAc,GAAGK,KAAK,CAACC,MAA7B;MACA,IAAIN,cAAc,CAACO,KAAnB,EAA0B;QACxBL,CAAC,CAACM,IAAFN,CAAOO,MAAM,CAACC,IAAPD,CAAYT,cAAc,CAACO,KAAfP,CAAqBW,MAAjCF,CAAPP,CAAAA;MACD;IACF;IAEDF,cAAc,CAACY,kBAAfZ,EAAAA,CAAoCa,IAApCb,CAAyC,YAAM;MAC7CA,cAAc,CAACc,gBAAfd,CACE,4BADFA,EAEEI,4BAFFJ,CAAAA;IAID,CALDA,CAAAA;IAOA,OAAO,YAAM;MACXF,GAAG,CAAC,aAAD,EAAgB,cAAA,GAAiBE,cAAc,CAACG,IAAhD,CAAHL;MACAE,cAAc,CAACe,iBAAff,EAAAA;IACD,CAHD;EAID,CArBD,CAHK;AAAA","sourcesContent":["// @flow\nimport { Observable } from \"rxjs\";\nimport type { Characteristic } from \"./types\";\nimport { log } from \"@ledgerhq/logs\";\n\nexport const monitorCharacteristic = (\n  characteristic: Characteristic\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n\n    function onCharacteristicValueChanged(event) {\n      const characteristic = event.target;\n      if (characteristic.value) {\n        o.next(Buffer.from(characteristic.value.buffer));\n      }\n    }\n\n    characteristic.startNotifications().then(() => {\n      characteristic.addEventListener(\n        \"characteristicvaluechanged\",\n        onCharacteristicValueChanged\n      );\n    });\n\n    return () => {\n      log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n      characteristic.stopNotifications();\n    };\n  });\n"]},"metadata":{},"sourceType":"module"}