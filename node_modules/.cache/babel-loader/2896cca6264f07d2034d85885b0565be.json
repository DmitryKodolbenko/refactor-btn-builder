{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAPDU = void 0;\nvar _rxjs = require(\"rxjs\");\nvar _logs = require(\"@ledgerhq/logs\");\nvar TagId = 0x05;\nfunction chunkBuffer(buffer, sizeForIndex) {\n  var chunks = [];\n  for (var i = 0, size = sizeForIndex(0); i < buffer.length; i += size, size = sizeForIndex(i)) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n  return chunks;\n}\nvar sendAPDU = function sendAPDU(write, apdu, mtuSize) {\n  var chunks = chunkBuffer(apdu, function (i) {\n    return mtuSize - (i === 0 ? 5 : 3);\n  }).map(function (buffer, i) {\n    var head = Buffer.alloc(i === 0 ? 5 : 3);\n    head.writeUInt8(TagId, 0);\n    head.writeUInt16BE(i, 1);\n    if (i === 0) {\n      head.writeUInt16BE(apdu.length, 3);\n    }\n    return Buffer.concat([head, buffer]);\n  });\n  return _rxjs.Observable.create(function (o) {\n    var terminated = false;\n    function main() {\n      return _main.apply(this, arguments);\n    }\n    function _main() {\n      _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iterator, _step, chunk;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(chunks);\n                _context.prev = 1;\n                _iterator.s();\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 11;\n                  break;\n                }\n                chunk = _step.value;\n                if (!terminated) {\n                  _context.next = 7;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 7:\n                _context.next = 9;\n                return write(chunk);\n              case 9:\n                _context.next = 3;\n                break;\n              case 11:\n                _context.next = 16;\n                break;\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](1);\n                _iterator.e(_context.t0);\n              case 16:\n                _context.prev = 16;\n                _iterator.f();\n                return _context.finish(16);\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 13, 16, 19]]);\n      }));\n      return _main.apply(this, arguments);\n    }\n    main().then(function () {\n      terminated = true;\n      o.complete();\n    }, function (e) {\n      terminated = true;\n      (0, _logs.log)(\"ble-error\", \"sendAPDU failure \" + String(e));\n      o.error(e);\n    });\n    var unsubscribe = function unsubscribe() {\n      if (!terminated) {\n        (0, _logs.log)(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n    return unsubscribe;\n  });\n};\nexports.sendAPDU = sendAPDU;","map":{"version":3,"sources":["../../src/ble/sendAPDU.js"],"names":["TagId","chunkBuffer","buffer","sizeForIndex","chunks","i","size","length","push","slice","sendAPDU","write","apdu","mtuSize","map","head","Buffer","alloc","writeUInt8","writeUInt16BE","concat","create","o","terminated","main","chunk","then","complete","e","String","error","unsubscribe"],"mappings":"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","sourcesContent":["// @flow\n\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\nfunction chunkBuffer(\n  buffer: Buffer,\n  sizeForIndex: (number) => number\n): Array<Buffer> {\n  const chunks = [];\n  for (\n    let i = 0, size = sizeForIndex(0);\n    i < buffer.length;\n    i += size, size = sizeForIndex(i)\n  ) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n  return chunks;\n}\n\nexport const sendAPDU = (\n  write: (Buffer) => Promise<void>,\n  apdu: Buffer,\n  mtuSize: number\n): Observable<void> => {\n  const chunks = chunkBuffer(apdu, (i) => mtuSize - (i === 0 ? 5 : 3)).map(\n    (buffer, i) => {\n      const head = Buffer.alloc(i === 0 ? 5 : 3);\n      head.writeUInt8(TagId, 0);\n      head.writeUInt16BE(i, 1);\n      if (i === 0) {\n        head.writeUInt16BE(apdu.length, 3);\n      }\n      return Buffer.concat([head, buffer]);\n    }\n  );\n\n  return Observable.create((o) => {\n    let terminated = false;\n\n    async function main() {\n      for (const chunk of chunks) {\n        if (terminated) return;\n        await write(chunk);\n      }\n    }\n\n    main().then(\n      () => {\n        terminated = true;\n        o.complete();\n      },\n      (e) => {\n        terminated = true;\n        log(\"ble-error\", \"sendAPDU failure \" + String(e));\n        o.error(e);\n      }\n    );\n\n    const unsubscribe = () => {\n      if (!terminated) {\n        log(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n\n    return unsubscribe;\n  });\n};\n"]},"metadata":{},"sourceType":"script"}