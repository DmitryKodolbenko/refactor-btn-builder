{"ast":null,"code":"import { fromEquals } from './Eq';\nimport { flow, identity, pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport * as S from './string';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * Builds a `ReadonlyRecord` by copying a `Record`.\n *\n * @example\n * import { ReadonlyRecord, fromRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: Record<string, number> = { a: 1, b: 2 };\n * const y: ReadonlyRecord<string, number> = fromRecord(x);\n * assert.deepStrictEqual(x,y);\n * // `y.a = 5` gives compiler error\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var fromRecord = function (r) {\n  return Object.assign({}, r);\n};\n/**\n * Builds a mutable `Record` from a `ReadonlyRecord`.\n *\n * @example\n * import { ReadonlyRecord, toRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: ReadonlyRecord<string, number> = { a: 1, b: 2 };\n * const y: Record<string, number> = toRecord(x);\n * assert.deepStrictEqual(x,y);\n * y.a = 5; // it's ok, y is mutable\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toRecord = function (r) {\n  return Object.assign({}, r);\n};\n/**\n * Calculate the number of key/value pairs in a `ReadonlyRecord`,\n *\n * @example\n * import { size } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(size({ a: true, b: 2, c: \"three\" }), 3);\n *\n * @since 2.5.0\n */\nexport var size = function (r) {\n  return Object.keys(r).length;\n};\n/**\n * Test whether a `ReadonlyRecord` is empty.\n *\n * @example\n * import { isEmpty } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(isEmpty({}), true);\n * assert.deepStrictEqual(isEmpty({ a: 3 }), false);\n * @since 2.5.0\n */\nexport var isEmpty = function (r) {\n  for (var k in r) {\n    if (_.has.call(r, k)) {\n      return false;\n    }\n  }\n  return true;\n};\nvar keys_ = function (O) {\n  return function (r) {\n    return Object.keys(r).sort(O.compare);\n  };\n};\n/**\n * @since 2.5.0\n */\nexport var keys = /*#__PURE__*/keys_(S.Ord);\nexport function collect(O) {\n  if (typeof O === 'function') {\n    return collect(S.Ord)(O);\n  }\n  var keysO = keys_(O);\n  return function (f) {\n    return function (r) {\n      var out = [];\n      for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {\n        var key = _a[_i];\n        out.push(f(key, r[key]));\n      }\n      return out;\n    };\n  };\n}\n/**\n * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.\n *\n * @example\n * import { toReadonlyArray } from 'fp-ts/ReadonlyRecord'\n *\n * const x = { c: 3, a: \"foo\", b: false };\n * assert.deepStrictEqual(toReadonlyArray(x), [\n *   [\"a\", \"foo\"],\n *   [\"b\", false],\n *   [\"c\", 3],\n * ]);\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toReadonlyArray = /*#__PURE__*/collect(S.Ord)(function (k, a) {\n  return [k, a];\n});\nexport function toUnfoldable(U) {\n  return function (r) {\n    var sas = toReadonlyArray(r);\n    var len = sas.length;\n    return U.unfold(0, function (b) {\n      return b < len ? _.some([sas[b], b + 1]) : _.none;\n    });\n  };\n}\n/**\n * Insert or replace a key/value pair in a `ReadonlyRecord`.\n *\n * @example\n * import { upsertAt } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(upsertAt(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(upsertAt(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.10.0\n */\nexport var upsertAt = function (k, a) {\n  return function (r) {\n    if (_.has.call(r, k) && r[k] === a) {\n      return r;\n    }\n    var out = Object.assign({}, r);\n    out[k] = a;\n    return out;\n  };\n};\n/**\n * Test whether or not a key exists in a `ReadonlyRecord`.\n *\n * Note. This function is not pipeable because is a `Refinement`.\n *\n * @example\n * import { has } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(has(\"a\", { a: 1, b: 2 }), true);\n * assert.deepStrictEqual(has(\"c\", { a: 1, b: 2 }), false);\n *\n * @since 2.10.0\n */\nexport var has = function (k, r) {\n  return _.has.call(r, k);\n};\nexport function deleteAt(k) {\n  return function (r) {\n    if (!_.has.call(r, k)) {\n      return r;\n    }\n    var out = Object.assign({}, r);\n    delete out[k];\n    return out;\n  };\n}\n/**\n * Replace a key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(updateAt(\"a\", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(updateAt(\"c\", 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var updateAt = function (k, a) {\n  return function (r) {\n    if (!has(k, r)) {\n      return _.none;\n    }\n    if (r[k] === a) {\n      return _.some(r);\n    }\n    var out = Object.assign({}, r);\n    out[k] = a;\n    return _.some(out);\n  };\n};\n/**\n * Applies a mapping function to one specific key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(modifyAt(\"a\", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(modifyAt(\"c\", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var modifyAt = function (k, f) {\n  return function (r) {\n    if (!has(k, r)) {\n      return _.none;\n    }\n    var next = f(r[k]);\n    if (next === r[k]) {\n      return _.some(r);\n    }\n    var out = Object.assign({}, r);\n    out[k] = next;\n    return _.some(out);\n  };\n};\nexport function pop(k) {\n  var deleteAtk = deleteAt(k);\n  return function (r) {\n    var oa = lookup(k, r);\n    return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);\n  };\n}\nexport function isSubrecord(E) {\n  return function (me, that) {\n    if (that === undefined) {\n      var isSubrecordE_1 = isSubrecord(E);\n      return function (that) {\n        return isSubrecordE_1(that, me);\n      };\n    }\n    for (var k in me) {\n      if (!_.has.call(that, k) || !E.equals(me[k], that[k])) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\nexport function lookup(k, r) {\n  if (r === undefined) {\n    return function (r) {\n      return lookup(k, r);\n    };\n  }\n  return _.has.call(r, k) ? _.some(r[k]) : _.none;\n}\n/**\n * @since 2.5.0\n */\nexport var empty = {};\nexport function mapWithIndex(f) {\n  return function (r) {\n    var out = {};\n    for (var k in r) {\n      if (_.has.call(r, k)) {\n        out[k] = f(k, r[k]);\n      }\n    }\n    return out;\n  };\n}\nexport function map(f) {\n  return mapWithIndex(function (_, a) {\n    return f(a);\n  });\n}\nexport function reduceWithIndex() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length === 2) {\n    return reduceWithIndex(S.Ord).apply(void 0, args);\n  }\n  var keysO = keys_(args[0]);\n  return function (b, f) {\n    return function (fa) {\n      var out = b;\n      var ks = keysO(fa);\n      var len = ks.length;\n      for (var i = 0; i < len; i++) {\n        var k = ks[i];\n        out = f(k, out, fa[k]);\n      }\n      return out;\n    };\n  };\n}\nexport function foldMapWithIndex(O) {\n  if ('compare' in O) {\n    var keysO_1 = keys_(O);\n    return function (M) {\n      return function (f) {\n        return function (fa) {\n          var out = M.empty;\n          var ks = keysO_1(fa);\n          var len = ks.length;\n          for (var i = 0; i < len; i++) {\n            var k = ks[i];\n            out = M.concat(out, f(k, fa[k]));\n          }\n          return out;\n        };\n      };\n    };\n  }\n  return foldMapWithIndex(S.Ord)(O);\n}\nexport function reduceRightWithIndex() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length === 2) {\n    return reduceRightWithIndex(S.Ord).apply(void 0, args);\n  }\n  var keysO = keys_(args[0]);\n  return function (b, f) {\n    return function (fa) {\n      var out = b;\n      var ks = keysO(fa);\n      var len = ks.length;\n      for (var i = len - 1; i >= 0; i--) {\n        var k = ks[i];\n        out = f(k, fa[k], out);\n      }\n      return out;\n    };\n  };\n}\n/**\n * Create a `ReadonlyRecord` with one key/value pair.\n *\n * @example\n * import { singleton } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(singleton(\"a\", 1), { a: 1 });\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (k, a) {\n  var _a;\n  return _a = {}, _a[k] = a, _a;\n};\nexport function traverseWithIndex(F) {\n  var traverseWithIndexOF = _traverseWithIndex(S.Ord)(F);\n  return function (f) {\n    return function (ta) {\n      return traverseWithIndexOF(ta, f);\n    };\n  };\n}\nexport function traverse(F) {\n  var traverseOF = _traverse(S.Ord)(F);\n  return function (f) {\n    return function (ta) {\n      return traverseOF(ta, f);\n    };\n  };\n}\nexport function sequence(F) {\n  return _sequence(S.Ord)(F);\n}\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n  var traverseF = traverse(F);\n  return function (f) {\n    return function (fa) {\n      return F.map(pipe(fa, traverseF(f)), compact);\n    };\n  };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n  var traverseF = traverse(F);\n  return function (f) {\n    return function (fa) {\n      return F.map(pipe(fa, traverseF(f)), separate);\n    };\n  };\n};\nexport function partitionMapWithIndex(f) {\n  return function (r) {\n    var left = {};\n    var right = {};\n    for (var k in r) {\n      if (_.has.call(r, k)) {\n        var e = f(k, r[k]);\n        switch (e._tag) {\n          case 'Left':\n            left[k] = e.left;\n            break;\n          case 'Right':\n            right[k] = e.right;\n            break;\n        }\n      }\n    }\n    return separated(left, right);\n  };\n}\nexport function partitionWithIndex(predicateWithIndex) {\n  return function (r) {\n    var left = {};\n    var right = {};\n    for (var k in r) {\n      if (_.has.call(r, k)) {\n        var a = r[k];\n        if (predicateWithIndex(k, a)) {\n          right[k] = a;\n        } else {\n          left[k] = a;\n        }\n      }\n    }\n    return separated(left, right);\n  };\n}\nexport function filterMapWithIndex(f) {\n  return function (r) {\n    var out = {};\n    for (var k in r) {\n      if (_.has.call(r, k)) {\n        var ob = f(k, r[k]);\n        if (_.isSome(ob)) {\n          out[k] = ob.value;\n        }\n      }\n    }\n    return out;\n  };\n}\nexport function filterWithIndex(predicateWithIndex) {\n  return function (fa) {\n    var out = {};\n    var changed = false;\n    for (var key in fa) {\n      if (_.has.call(fa, key)) {\n        var a = fa[key];\n        if (predicateWithIndex(key, a)) {\n          out[key] = a;\n        } else {\n          changed = true;\n        }\n      }\n    }\n    return changed ? out : fa;\n  };\n}\nexport function fromFoldable(M, F) {\n  var fromFoldableMapM = fromFoldableMap(M, F);\n  return function (fka) {\n    return fromFoldableMapM(fka, identity);\n  };\n}\nexport function fromFoldableMap(M, F) {\n  return function (ta, f) {\n    return F.reduce(ta, {}, function (r, a) {\n      var _a = f(a),\n        k = _a[0],\n        b = _a[1];\n      r[k] = _.has.call(r, k) ? M.concat(r[k], b) : b;\n      return r;\n    });\n  };\n}\n/**\n * Alias of [`toReadonlyArray`](#toreadonlyarray).\n *\n * @example\n * import { toEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])\n *\n * @category conversions\n * @since 2.12.0\n */\nexport var toEntries = toReadonlyArray;\n/**\n * Converts a `ReadonlyArray` of `[key, value]` tuples into a `ReadonlyRecord`.\n *\n * @example\n * import { fromEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })\n *\n * @since 2.12.0\n * @category conversions\n */\nexport var fromEntries = function (fa) {\n  var out = {};\n  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n    var a = fa_1[_i];\n    out[a[0]] = a[1];\n  }\n  return out;\n};\nexport function every(predicate) {\n  return function (r) {\n    for (var k in r) {\n      if (!predicate(r[k])) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n/**\n * Test if at least one value in a `ReadonlyRecord` satisfies the predicate.\n *\n * @example\n * import { some } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);\n *\n * @since 2.5.0\n */\nexport function some(predicate) {\n  return function (r) {\n    for (var k in r) {\n      if (predicate(r[k])) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\nexport function elem(E) {\n  return function (a, fa) {\n    if (fa === undefined) {\n      var elemE_1 = elem(E);\n      return function (fa) {\n        return elemE_1(a, fa);\n      };\n    }\n    for (var k in fa) {\n      if (E.equals(fa[k], a)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n/**\n * Union of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining all the\n * entries of the two inputs.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements with the same key.\n *\n * @example\n * import { union } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var union = function (M) {\n  return function (second) {\n    return function (first) {\n      if (isEmpty(first)) {\n        return second;\n      }\n      if (isEmpty(second)) {\n        return first;\n      }\n      var out = {};\n      for (var k in first) {\n        if (has(k, second)) {\n          out[k] = M.concat(first[k], second[k]);\n        } else {\n          out[k] = first[k];\n        }\n      }\n      for (var k in second) {\n        if (!has(k, out)) {\n          out[k] = second[k];\n        }\n      }\n      return out;\n    };\n  };\n};\n/**\n * Intersection of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining only the\n * entries of the two inputswith the same key.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements.\n *\n * @example\n * import { intersection } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});\n *\n * @since 2.11.0\n */\nexport var intersection = function (M) {\n  return function (second) {\n    return function (first) {\n      if (isEmpty(first) || isEmpty(second)) {\n        return empty;\n      }\n      var out = {};\n      for (var k in first) {\n        if (has(k, second)) {\n          out[k] = M.concat(first[k], second[k]);\n        }\n      }\n      return out;\n    };\n  };\n};\n/**\n * Difference between two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` composed by the\n * entries of the two inputs, removing the entries with the same\n * key in both inputs.\n *\n * @example\n * import { difference } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var difference = function (second) {\n  return function (first) {\n    if (isEmpty(first)) {\n      return second;\n    }\n    if (isEmpty(second)) {\n      return first;\n    }\n    var out = {};\n    for (var k in first) {\n      if (!has(k, second)) {\n        out[k] = first[k];\n      }\n    }\n    for (var k in second) {\n      if (!has(k, first)) {\n        out[k] = second[k];\n      }\n    }\n    return out;\n  };\n};\n/** @internal */\nexport var _map = function (fa, f) {\n  return pipe(fa, map(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _mapWithIndex = function (fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduce = function (O) {\n  var reduceO = reduce(O);\n  return function (fa, b, f) {\n    return pipe(fa, reduceO(b, f));\n  };\n};\n/** @internal */\nexport var _foldMap = function (O) {\n  return function (M) {\n    var foldMapM = foldMap(O)(M);\n    return function (fa, f) {\n      return pipe(fa, foldMapM(f));\n    };\n  };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRight = function (O) {\n  var reduceRightO = reduceRight(O);\n  return function (fa, b, f) {\n    return pipe(fa, reduceRightO(b, f));\n  };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filter = function (fa, predicate) {\n  return pipe(fa, filter(predicate));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMap = function (fa, f) {\n  return pipe(fa, filterMap(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partition = function (fa, predicate) {\n  return pipe(fa, partition(predicate));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMap = function (fa, f) {\n  return pipe(fa, partitionMap(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceWithIndex = function (O) {\n  var reduceWithIndexO = reduceWithIndex(O);\n  return function (fa, b, f) {\n    return pipe(fa, reduceWithIndexO(b, f));\n  };\n};\n/** @internal */\nexport var _foldMapWithIndex = function (O) {\n  var foldMapWithIndexO = foldMapWithIndex(O);\n  return function (M) {\n    var foldMapWithIndexM = foldMapWithIndexO(M);\n    return function (fa, f) {\n      return pipe(fa, foldMapWithIndexM(f));\n    };\n  };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRightWithIndex = function (O) {\n  var reduceRightWithIndexO = reduceRightWithIndex(O);\n  return function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndexO(b, f));\n  };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMapWithIndex = function (fa, f) {\n  return pipe(fa, partitionMapWithIndex(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionWithIndex = function (fa, predicateWithIndex) {\n  return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMapWithIndex = function (fa, f) {\n  return pipe(fa, filterMapWithIndex(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterWithIndex = function (fa, predicateWithIndex) {\n  return pipe(fa, filterWithIndex(predicateWithIndex));\n};\n/** @internal */\nexport var _traverse = function (O) {\n  var traverseWithIndexO = _traverseWithIndex(O);\n  return function (F) {\n    var traverseWithIndexOF = traverseWithIndexO(F);\n    return function (ta, f) {\n      return traverseWithIndexOF(ta, flow(SK, f));\n    };\n  };\n};\n/** @internal */\nexport var _sequence = function (O) {\n  var traverseO = _traverse(O);\n  return function (F) {\n    var traverseOF = traverseO(F);\n    return function (ta) {\n      return traverseOF(ta, identity);\n    };\n  };\n};\nvar _traverseWithIndex = function (O) {\n  return function (F) {\n    var keysO = keys_(O);\n    return function (ta, f) {\n      var ks = keysO(ta);\n      if (ks.length === 0) {\n        return F.of(empty);\n      }\n      var fr = F.of({});\n      var _loop_1 = function (key) {\n        fr = F.ap(F.map(fr, function (r) {\n          return function (b) {\n            var _a;\n            return Object.assign({}, r, (_a = {}, _a[key] = b, _a));\n          };\n        }), f(key, ta[key]));\n      };\n      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n        var key = ks_1[_i];\n        _loop_1(key);\n      }\n      return fr;\n    };\n  };\n};\n/**\n * Given a `Predicate`, it produces a new `ReadonlyRecord` keeping only the entries with a\n * value that satisfies the provided predicate.\n *\n * @example\n * import { filter } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo\",\n *   b: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n  return filterWithIndex(function (_, a) {\n    return predicate(a);\n  });\n};\n/**\n * Maps a `ReadonlyRecord` with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from \"fp-ts/ReadonlyRecord\"\n * import { option } from \"fp-ts\"\n *\n * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none\n * assert.deepStrictEqual(filterMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo is short\",\n *   b: \"bar is short\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMap = function (f) {\n  return filterMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Partition a `ReadonlyRecord` into two parts according to a `Predicate`.\n *\n * @example\n * import { partition } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left:{\n *     c: \"verylong\"\n *   },\n *   right: {\n *     a: \"foo\",\n *     b: \"bar\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n  return partitionWithIndex(function (_, a) {\n    return predicate(a);\n  });\n};\n/**\n * Maps a `ReadonlyRecord` with a function returning an `Either` and\n * partitions the resulting `ReadonlyRecord` into `Left`s and `Right`s.\n *\n * @example\n * import { partitionMap } from \"fp-ts/ReadonlyRecord\"\n * import { either } from \"fp-ts\"\n *\n * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));\n * assert.deepStrictEqual(partitionMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left: {\n *     c: \"verylong is not short\",\n *   },\n *   right: {\n *     a: \"foo is short\",\n *     b: \"bar is short\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n  return partitionMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\nexport function reduce() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length === 1) {\n    var reduceWithIndexO_1 = reduceWithIndex(args[0]);\n    return function (b, f) {\n      return reduceWithIndexO_1(b, function (_, b, a) {\n        return f(b, a);\n      });\n    };\n  }\n  return reduce(S.Ord).apply(void 0, args);\n}\nexport function foldMap(O) {\n  if ('compare' in O) {\n    var foldMapWithIndexO_1 = foldMapWithIndex(O);\n    return function (M) {\n      var foldMapWithIndexM = foldMapWithIndexO_1(M);\n      return function (f) {\n        return foldMapWithIndexM(function (_, a) {\n          return f(a);\n        });\n      };\n    };\n  }\n  return foldMap(S.Ord)(O);\n}\nexport function reduceRight() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length === 1) {\n    var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);\n    return function (b, f) {\n      return reduceRightWithIndexO_1(b, function (_, b, a) {\n        return f(b, a);\n      });\n    };\n  }\n  return reduceRight(S.Ord).apply(void 0, args);\n}\n/**\n * Compact a `ReadonlyRecord` of `Option`s discarding the `None` values and\n * keeping the `Some` values.\n *\n * @example\n * import { compact } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(compact({ a: option.some(\"foo\"), b: option.none, c: option.some(\"bar\") }), {\n *   a: \"foo\",\n *   c: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var compact = function (r) {\n  var out = {};\n  for (var k in r) {\n    if (_.has.call(r, k)) {\n      var oa = r[k];\n      if (_.isSome(oa)) {\n        out[k] = oa.value;\n      }\n    }\n  }\n  return out;\n};\n/**\n * Separate a `ReadonlyRecord` of `Either`s into `Left`s and `Right`s.\n *\n * @example\n * import { separate } from 'fp-ts/ReadonlyRecord'\n * import { either } from 'fp-ts'\n *\n * assert.deepStrictEqual(\n *   separate({ a: either.right(\"foo\"), b: either.left(\"bar\"), c: either.right(\"baz\") }),\n *   {\n *     right: {\n *       a: \"foo\",\n *       c: \"baz\",\n *     },\n *     left: {\n *       b: \"bar\",\n *     },\n *   }\n * );\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var separate = function (r) {\n  var left = {};\n  var right = {};\n  for (var k in r) {\n    if (_.has.call(r, k)) {\n      var e = r[k];\n      if (_.isLeft(e)) {\n        left[k] = e.left;\n      } else {\n        right[k] = e.right;\n      }\n    }\n  }\n  return separated(left, right);\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyRecord';\nexport function getShow(O) {\n  if ('compare' in O) {\n    return function (S) {\n      return {\n        show: function (r) {\n          var elements = collect(O)(function (k, a) {\n            return \"\".concat(JSON.stringify(k), \": \").concat(S.show(a));\n          })(r).join(', ');\n          return elements === '' ? '{}' : \"{ \".concat(elements, \" }\");\n        }\n      };\n    };\n  }\n  return getShow(S.Ord)(O);\n}\nexport function getEq(E) {\n  var isSubrecordE = isSubrecord(E);\n  return fromEquals(function (x, y) {\n    return isSubrecordE(x)(y) && isSubrecordE(y)(x);\n  });\n}\nexport function getMonoid(S) {\n  return {\n    concat: function (first, second) {\n      if (isEmpty(first)) {\n        return second;\n      }\n      if (isEmpty(second)) {\n        return first;\n      }\n      var r = Object.assign({}, first);\n      for (var k in second) {\n        if (_.has.call(second, k)) {\n          r[k] = _.has.call(first, k) ? S.concat(first[k], second[k]) : second[k];\n        }\n      }\n      return r;\n    },\n    empty: empty\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Takes a value and a `ReadonlyRecord` of functions and returns a\n * `ReadonlyRecord` by applying each function to the input value.\n *\n * @example\n * import { flap } from \"fp-ts/ReadonlyRecord\"\n *\n * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };\n * assert.deepStrictEqual(flap(3)(fab), {\n *   x: \"3 times 2\",\n *   y: \"6\",\n * });\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * Produces a `Foldable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldable = function (O) {\n  return {\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O)\n  };\n};\n/**\n * Produces a `FoldableWithIndex1` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldableWithIndex = function (O) {\n  return {\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O)\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n  URI: URI,\n  compact: compact,\n  separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex\n};\n/**\n * Produces a `Traversable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversable = function (O) {\n  return {\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O)\n  };\n};\n/**\n * Produces a `TraversableWithIndex` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversableWithIndex = function (O) {\n  return {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O),\n    traverseWithIndex: _traverseWithIndex(O)\n  };\n};\n/**\n * @category filtering\n * @since 2.11.0\n */\nexport var getWitherable = function (O) {\n  var T = getTraversable(O);\n  return {\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: T.traverse,\n    sequence: T.sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: witherDefault(T, Compactable),\n    wilt: wiltDefault(T, Compactable)\n  };\n};\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `union`.\n *\n * @example\n * import { getUnionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getUnionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (S) {\n  var unionS = union(S);\n  return {\n    concat: function (first, second) {\n      return unionS(second)(first);\n    }\n  };\n};\n/**\n * Same as `getMonoid`.\n * Returns a `Monoid` instance for `ReadonlyRecord`s given a `Semigroup`\n * instance for the base type.\n * The `Monoid` makes the union of two `ReadonlyRecord`s combining the\n * entries that have the same key with the provided `Semigroup`.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n * import { getUnionMonoid } from 'fp-ts/ReadonlyRecord'\n *\n * const M = getUnionMonoid(SemigroupSum);\n * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (S) {\n  return {\n    concat: getUnionSemigroup(S).concat,\n    empty: empty\n  };\n};\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `intersection`.\n *\n * @example\n * import { getIntersectionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getIntersectionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (S) {\n  var intersectionS = intersection(S);\n  return {\n    concat: function (first, second) {\n      return intersectionS(second)(first);\n    }\n  };\n};\n/**\n * Produces a `Magma` with a `concat` function that combines\n * two `ReadonlyRecord`s by making the `difference`.\n *\n * @example\n * import { getDifferenceMagma, difference, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Magma } from \"fp-ts/Magma\"\n *\n * const r1 = { a: 3, c: 3 };\n * const r2 = { a: 1, b: 2 };\n * const m: Magma<ReadonlyRecord<string, number>> = getDifferenceMagma<number>();\n * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));\n * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function () {\n  return {\n    concat: function (first, second) {\n      return difference(second)(first);\n    }\n  };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `getFoldable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Foldable = {\n  URI: URI,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord)\n};\n/**\n * Use `getFoldableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord),\n  reduceWithIndex: /*#__PURE__*/_reduceWithIndex(S.Ord),\n  foldMapWithIndex: /*#__PURE__*/_foldMapWithIndex(S.Ord),\n  reduceRightWithIndex: /*#__PURE__*/_reduceRightWithIndex(S.Ord)\n};\n/**\n * Use `getTraversable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord),\n  traverse: /*#__PURE__*/_traverse(S.Ord),\n  sequence: sequence\n};\n/**\n * Use `getTraversableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord),\n  reduceWithIndex: /*#__PURE__*/_reduceWithIndex(S.Ord),\n  foldMapWithIndex: /*#__PURE__*/_foldMapWithIndex(S.Ord),\n  reduceRightWithIndex: /*#__PURE__*/_reduceRightWithIndex(S.Ord),\n  traverse: /*#__PURE__*/_traverse(S.Ord),\n  sequence: sequence,\n  traverseWithIndex: /*#__PURE__*/_traverseWithIndex(S.Ord)\n};\nvar _wither = /*#__PURE__*/witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/wiltDefault(Traversable, Compactable);\n/**\n * Use `getWitherable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Witherable = {\n  URI: URI,\n  map: _map,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord),\n  traverse: /*#__PURE__*/_traverse(S.Ord),\n  sequence: sequence,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  wither: _wither,\n  wilt: _wilt\n};\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\nexport function hasOwnProperty(k, r) {\n  return _.has.call(r === undefined ? this : r, k);\n}\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RR.Functor` instead of `RR.readonlyRecord`\n * (where `RR` is from `import RR from 'fp-ts/ReadonlyRecord'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyRecord = {\n  URI: URI,\n  map: _map,\n  reduce: /*#__PURE__*/_reduce(S.Ord),\n  foldMap: /*#__PURE__*/_foldMap(S.Ord),\n  reduceRight: /*#__PURE__*/_reduceRight(S.Ord),\n  traverse: /*#__PURE__*/_traverse(S.Ord),\n  sequence: sequence,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  mapWithIndex: _mapWithIndex,\n  reduceWithIndex: /*#__PURE__*/_reduceWithIndex(S.Ord),\n  foldMapWithIndex: /*#__PURE__*/_foldMapWithIndex(S.Ord),\n  reduceRightWithIndex: /*#__PURE__*/_reduceRightWithIndex(S.Ord),\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  traverseWithIndex: /*#__PURE__*/_traverseWithIndex(S.Ord),\n  wither: _wither,\n  wilt: _wilt\n};","map":{"version":3,"names":["fromEquals","flow","identity","pipe","SK","flap","flap_","_","separated","S","wiltDefault","witherDefault","fromRecord","r","Object","assign","toRecord","size","keys","length","isEmpty","k","has","call","keys_","O","sort","compare","Ord","collect","keysO","f","out","_i","_a","key","push","toReadonlyArray","a","toUnfoldable","U","sas","len","unfold","b","some","none","upsertAt","deleteAt","updateAt","modifyAt","next","pop","deleteAtk","oa","lookup","isNone","value","isSubrecord","E","me","that","undefined","isSubrecordE_1","equals","empty","mapWithIndex","map","reduceWithIndex","args","arguments","apply","fa","ks","i","foldMapWithIndex","keysO_1","M","concat","reduceRightWithIndex","singleton","traverseWithIndex","F","traverseWithIndexOF","_traverseWithIndex","ta","traverse","traverseOF","_traverse","sequence","_sequence","wither","traverseF","compact","wilt","separate","partitionMapWithIndex","left","right","e","_tag","partitionWithIndex","predicateWithIndex","filterMapWithIndex","ob","isSome","filterWithIndex","changed","fromFoldable","fromFoldableMapM","fromFoldableMap","fka","reduce","toEntries","fromEntries","fa_1","every","predicate","elem","elemE_1","union","second","first","intersection","difference","_map","_mapWithIndex","_reduce","reduceO","_foldMap","foldMapM","foldMap","_reduceRight","reduceRightO","reduceRight","_filter","filter","_filterMap","filterMap","_partition","partition","_partitionMap","partitionMap","_reduceWithIndex","reduceWithIndexO","_foldMapWithIndex","foldMapWithIndexO","foldMapWithIndexM","_reduceRightWithIndex","reduceRightWithIndexO","_partitionMapWithIndex","_partitionWithIndex","_filterMapWithIndex","_filterWithIndex","traverseWithIndexO","traverseO","of","fr","_loop_1","ap","ks_1","reduceWithIndexO_1","foldMapWithIndexO_1","reduceRightWithIndexO_1","isLeft","URI","getShow","show","elements","JSON","stringify","join","getEq","isSubrecordE","x","y","getMonoid","Functor","FunctorWithIndex","getFoldable","getFoldableWithIndex","Compactable","Filterable","FilterableWithIndex","getTraversable","getTraversableWithIndex","getWitherable","T","getUnionSemigroup","unionS","getUnionMonoid","getIntersectionSemigroup","intersectionS","getDifferenceMagma","Foldable","FoldableWithIndex","Traversable","TraversableWithIndex","_wither","_wilt","Witherable","insertAt","hasOwnProperty","readonlyRecord"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/fp-ts/es6/ReadonlyRecord.js"],"sourcesContent":["import { fromEquals } from './Eq';\nimport { flow, identity, pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport * as S from './string';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * Builds a `ReadonlyRecord` by copying a `Record`.\n *\n * @example\n * import { ReadonlyRecord, fromRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: Record<string, number> = { a: 1, b: 2 };\n * const y: ReadonlyRecord<string, number> = fromRecord(x);\n * assert.deepStrictEqual(x,y);\n * // `y.a = 5` gives compiler error\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var fromRecord = function (r) { return Object.assign({}, r); };\n/**\n * Builds a mutable `Record` from a `ReadonlyRecord`.\n *\n * @example\n * import { ReadonlyRecord, toRecord } from \"fp-ts/ReadonlyRecord\"\n *\n * const x: ReadonlyRecord<string, number> = { a: 1, b: 2 };\n * const y: Record<string, number> = toRecord(x);\n * assert.deepStrictEqual(x,y);\n * y.a = 5; // it's ok, y is mutable\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toRecord = function (r) { return Object.assign({}, r); };\n/**\n * Calculate the number of key/value pairs in a `ReadonlyRecord`,\n *\n * @example\n * import { size } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(size({ a: true, b: 2, c: \"three\" }), 3);\n *\n * @since 2.5.0\n */\nexport var size = function (r) { return Object.keys(r).length; };\n/**\n * Test whether a `ReadonlyRecord` is empty.\n *\n * @example\n * import { isEmpty } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(isEmpty({}), true);\n * assert.deepStrictEqual(isEmpty({ a: 3 }), false);\n * @since 2.5.0\n */\nexport var isEmpty = function (r) {\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            return false;\n        }\n    }\n    return true;\n};\nvar keys_ = function (O) {\n    return function (r) {\n        return Object.keys(r).sort(O.compare);\n    };\n};\n/**\n * @since 2.5.0\n */\nexport var keys = /*#__PURE__*/ keys_(S.Ord);\nexport function collect(O) {\n    if (typeof O === 'function') {\n        return collect(S.Ord)(O);\n    }\n    var keysO = keys_(O);\n    return function (f) {\n        return function (r) {\n            var out = [];\n            for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {\n                var key = _a[_i];\n                out.push(f(key, r[key]));\n            }\n            return out;\n        };\n    };\n}\n/**\n * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.\n *\n * @example\n * import { toReadonlyArray } from 'fp-ts/ReadonlyRecord'\n *\n * const x = { c: 3, a: \"foo\", b: false };\n * assert.deepStrictEqual(toReadonlyArray(x), [\n *   [\"a\", \"foo\"],\n *   [\"b\", false],\n *   [\"c\", 3],\n * ]);\n *\n * @category conversions\n * @since 2.5.0\n */\nexport var toReadonlyArray = \n/*#__PURE__*/ collect(S.Ord)(function (k, a) { return [k, a]; });\nexport function toUnfoldable(U) {\n    return function (r) {\n        var sas = toReadonlyArray(r);\n        var len = sas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([sas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `ReadonlyRecord`.\n *\n * @example\n * import { upsertAt } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(upsertAt(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(upsertAt(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.10.0\n */\nexport var upsertAt = function (k, a) {\n    return function (r) {\n        if (_.has.call(r, k) && r[k] === a) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        out[k] = a;\n        return out;\n    };\n};\n/**\n * Test whether or not a key exists in a `ReadonlyRecord`.\n *\n * Note. This function is not pipeable because is a `Refinement`.\n *\n * @example\n * import { has } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(has(\"a\", { a: 1, b: 2 }), true);\n * assert.deepStrictEqual(has(\"c\", { a: 1, b: 2 }), false);\n *\n * @since 2.10.0\n */\nexport var has = function (k, r) { return _.has.call(r, k); };\nexport function deleteAt(k) {\n    return function (r) {\n        if (!_.has.call(r, k)) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        delete out[k];\n        return out;\n    };\n}\n/**\n * Replace a key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(updateAt(\"a\", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(updateAt(\"c\", 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var updateAt = function (k, a) {\n    return function (r) {\n        if (!has(k, r)) {\n            return _.none;\n        }\n        if (r[k] === a) {\n            return _.some(r);\n        }\n        var out = Object.assign({}, r);\n        out[k] = a;\n        return _.some(out);\n    };\n};\n/**\n * Applies a mapping function to one specific key/value pair in a `ReadonlyRecord`.\n *\n * @returns If the specified key exists it returns an `Option` containing a new `Record`\n * with the entry updated, otherwise it returns `None`\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(modifyAt(\"a\", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));\n * assert.deepStrictEqual(modifyAt(\"c\", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);\n *\n * @since 2.5.0\n */\nexport var modifyAt = function (k, f) {\n    return function (r) {\n        if (!has(k, r)) {\n            return _.none;\n        }\n        var next = f(r[k]);\n        if (next === r[k]) {\n            return _.some(r);\n        }\n        var out = Object.assign({}, r);\n        out[k] = next;\n        return _.some(out);\n    };\n};\nexport function pop(k) {\n    var deleteAtk = deleteAt(k);\n    return function (r) {\n        var oa = lookup(k, r);\n        return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);\n    };\n}\nexport function isSubrecord(E) {\n    return function (me, that) {\n        if (that === undefined) {\n            var isSubrecordE_1 = isSubrecord(E);\n            return function (that) { return isSubrecordE_1(that, me); };\n        }\n        for (var k in me) {\n            if (!_.has.call(that, k) || !E.equals(me[k], that[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\nexport function lookup(k, r) {\n    if (r === undefined) {\n        return function (r) { return lookup(k, r); };\n    }\n    return _.has.call(r, k) ? _.some(r[k]) : _.none;\n}\n/**\n * @since 2.5.0\n */\nexport var empty = {};\nexport function mapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                out[k] = f(k, r[k]);\n            }\n        }\n        return out;\n    };\n}\nexport function map(f) {\n    return mapWithIndex(function (_, a) { return f(a); });\n}\nexport function reduceWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = 0; i < len; i++) {\n            var k = ks[i];\n            out = f(k, out, fa[k]);\n        }\n        return out;\n    }; };\n}\nexport function foldMapWithIndex(O) {\n    if ('compare' in O) {\n        var keysO_1 = keys_(O);\n        return function (M) {\n            return function (f) {\n                return function (fa) {\n                    var out = M.empty;\n                    var ks = keysO_1(fa);\n                    var len = ks.length;\n                    for (var i = 0; i < len; i++) {\n                        var k = ks[i];\n                        out = M.concat(out, f(k, fa[k]));\n                    }\n                    return out;\n                };\n            };\n        };\n    }\n    return foldMapWithIndex(S.Ord)(O);\n}\nexport function reduceRightWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceRightWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var k = ks[i];\n            out = f(k, fa[k], out);\n        }\n        return out;\n    }; };\n}\n/**\n * Create a `ReadonlyRecord` with one key/value pair.\n *\n * @example\n * import { singleton } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(singleton(\"a\", 1), { a: 1 });\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (k, a) {\n    var _a;\n    return (_a = {}, _a[k] = a, _a);\n};\nexport function traverseWithIndex(F) {\n    var traverseWithIndexOF = _traverseWithIndex(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseWithIndexOF(ta, f); }; };\n}\nexport function traverse(F) {\n    var traverseOF = _traverse(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseOF(ta, f); }; };\n}\nexport function sequence(F) {\n    return _sequence(S.Ord)(F);\n}\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), compact); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), separate); }; };\n};\nexport function partitionMapWithIndex(f) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var e = f(k, r[k]);\n                switch (e._tag) {\n                    case 'Left':\n                        left[k] = e.left;\n                        break;\n                    case 'Right':\n                        right[k] = e.right;\n                        break;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var a = r[k];\n                if (predicateWithIndex(k, a)) {\n                    right[k] = a;\n                }\n                else {\n                    left[k] = a;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function filterMapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var ob = f(k, r[k]);\n                if (_.isSome(ob)) {\n                    out[k] = ob.value;\n                }\n            }\n        }\n        return out;\n    };\n}\nexport function filterWithIndex(predicateWithIndex) {\n    return function (fa) {\n        var out = {};\n        var changed = false;\n        for (var key in fa) {\n            if (_.has.call(fa, key)) {\n                var a = fa[key];\n                if (predicateWithIndex(key, a)) {\n                    out[key] = a;\n                }\n                else {\n                    changed = true;\n                }\n            }\n        }\n        return changed ? out : fa;\n    };\n}\nexport function fromFoldable(M, F) {\n    var fromFoldableMapM = fromFoldableMap(M, F);\n    return function (fka) { return fromFoldableMapM(fka, identity); };\n}\nexport function fromFoldableMap(M, F) {\n    return function (ta, f) {\n        return F.reduce(ta, {}, function (r, a) {\n            var _a = f(a), k = _a[0], b = _a[1];\n            r[k] = _.has.call(r, k) ? M.concat(r[k], b) : b;\n            return r;\n        });\n    };\n}\n/**\n * Alias of [`toReadonlyArray`](#toreadonlyarray).\n *\n * @example\n * import { toEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])\n *\n * @category conversions\n * @since 2.12.0\n */\nexport var toEntries = toReadonlyArray;\n/**\n * Converts a `ReadonlyArray` of `[key, value]` tuples into a `ReadonlyRecord`.\n *\n * @example\n * import { fromEntries } from 'fp-ts/ReadonlyRecord'\n *\n * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })\n *\n * @since 2.12.0\n * @category conversions\n */\nexport var fromEntries = function (fa) {\n    var out = {};\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var a = fa_1[_i];\n        out[a[0]] = a[1];\n    }\n    return out;\n};\nexport function every(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (!predicate(r[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n/**\n * Test if at least one value in a `ReadonlyRecord` satisfies the predicate.\n *\n * @example\n * import { some } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);\n * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);\n *\n * @since 2.5.0\n */\nexport function some(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (predicate(r[k])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nexport function elem(E) {\n    return function (a, fa) {\n        if (fa === undefined) {\n            var elemE_1 = elem(E);\n            return function (fa) { return elemE_1(a, fa); };\n        }\n        for (var k in fa) {\n            if (E.equals(fa[k], a)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Union of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining all the\n * entries of the two inputs.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements with the same key.\n *\n * @example\n * import { union } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var union = function (M) {\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var out = {};\n            for (var k in first) {\n                if (has(k, second)) {\n                    out[k] = M.concat(first[k], second[k]);\n                }\n                else {\n                    out[k] = first[k];\n                }\n            }\n            for (var k in second) {\n                if (!has(k, out)) {\n                    out[k] = second[k];\n                }\n            }\n            return out;\n        };\n    };\n};\n/**\n * Intersection of two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining only the\n * entries of the two inputswith the same key.\n * It uses the `concat` function of the provided `Magma` to\n * combine the elements.\n *\n * @example\n * import { intersection } from \"fp-ts/ReadonlyRecord\";\n * import { Magma } from \"fp-ts/Magma\";\n *\n * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };\n * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});\n * const m2: Magma<number> = { concat: (x: number) => x };\n * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});\n *\n * @since 2.11.0\n */\nexport var intersection = function (M) {\n    return function (second) {\n        return function (first) {\n            if (isEmpty(first) || isEmpty(second)) {\n                return empty;\n            }\n            var out = {};\n            for (var k in first) {\n                if (has(k, second)) {\n                    out[k] = M.concat(first[k], second[k]);\n                }\n            }\n            return out;\n        };\n    };\n};\n/**\n * Difference between two `ReadonlyRecord`s.\n * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` composed by the\n * entries of the two inputs, removing the entries with the same\n * key in both inputs.\n *\n * @example\n * import { difference } from \"fp-ts/ReadonlyRecord\";\n *\n * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });\n * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });\n *\n * @since 2.11.0\n */\nexport var difference = function (second) {\n    return function (first) {\n        if (isEmpty(first)) {\n            return second;\n        }\n        if (isEmpty(second)) {\n            return first;\n        }\n        var out = {};\n        for (var k in first) {\n            if (!has(k, second)) {\n                out[k] = first[k];\n            }\n        }\n        for (var k in second) {\n            if (!has(k, first)) {\n                out[k] = second[k];\n            }\n        }\n        return out;\n    };\n};\n/** @internal */\nexport var _map = function (fa, f) { return pipe(fa, map(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduce = function (O) {\n    var reduceO = reduce(O);\n    return function (fa, b, f) { return pipe(fa, reduceO(b, f)); };\n};\n/** @internal */\nexport var _foldMap = function (O) { return function (M) {\n    var foldMapM = foldMap(O)(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n}; };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRight = function (O) {\n    var reduceRightO = reduceRight(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partition = function (fa, predicate) { return pipe(fa, partition(predicate)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceWithIndex = function (O) {\n    var reduceWithIndexO = reduceWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceWithIndexO(b, f)); };\n};\n/** @internal */\nexport var _foldMapWithIndex = function (O) {\n    var foldMapWithIndexO = foldMapWithIndex(O);\n    return function (M) {\n        var foldMapWithIndexM = foldMapWithIndexO(M);\n        return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n    };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRightWithIndex = function (O) {\n    var reduceRightWithIndexO = reduceRightWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightWithIndexO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionWithIndex = function (fa, predicateWithIndex) {\n    return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\n/** @internal */\nexport var _traverse = function (O) {\n    var traverseWithIndexO = _traverseWithIndex(O);\n    return function (F) {\n        var traverseWithIndexOF = traverseWithIndexO(F);\n        return function (ta, f) { return traverseWithIndexOF(ta, flow(SK, f)); };\n    };\n};\n/** @internal */\nexport var _sequence = function (O) {\n    var traverseO = _traverse(O);\n    return function (F) {\n        var traverseOF = traverseO(F);\n        return function (ta) { return traverseOF(ta, identity); };\n    };\n};\nvar _traverseWithIndex = function (O) {\n    return function (F) {\n        var keysO = keys_(O);\n        return function (ta, f) {\n            var ks = keysO(ta);\n            if (ks.length === 0) {\n                return F.of(empty);\n            }\n            var fr = F.of({});\n            var _loop_1 = function (key) {\n                fr = F.ap(F.map(fr, function (r) { return function (b) {\n                    var _a;\n                    return Object.assign({}, r, (_a = {}, _a[key] = b, _a));\n                }; }), f(key, ta[key]));\n            };\n            for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n                var key = ks_1[_i];\n                _loop_1(key);\n            }\n            return fr;\n        };\n    };\n};\n/**\n * Given a `Predicate`, it produces a new `ReadonlyRecord` keeping only the entries with a\n * value that satisfies the provided predicate.\n *\n * @example\n * import { filter } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo\",\n *   b: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Maps a `ReadonlyRecord` with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from \"fp-ts/ReadonlyRecord\"\n * import { option } from \"fp-ts\"\n *\n * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none\n * assert.deepStrictEqual(filterMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   a: \"foo is short\",\n *   b: \"bar is short\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var filterMap = function (f) { return filterMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * Partition a `ReadonlyRecord` into two parts according to a `Predicate`.\n *\n * @example\n * import { partition } from \"fp-ts/ReadonlyRecord\"\n *\n * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left:{\n *     c: \"verylong\"\n *   },\n *   right: {\n *     a: \"foo\",\n *     b: \"bar\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Maps a `ReadonlyRecord` with a function returning an `Either` and\n * partitions the resulting `ReadonlyRecord` into `Left`s and `Right`s.\n *\n * @example\n * import { partitionMap } from \"fp-ts/ReadonlyRecord\"\n * import { either } from \"fp-ts\"\n *\n * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));\n * assert.deepStrictEqual(partitionMap(f)({ a: \"foo\", b: \"bar\", c: \"verylong\" }), {\n *   left: {\n *     c: \"verylong is not short\",\n *   },\n *   right: {\n *     a: \"foo is short\",\n *     b: \"bar is short\",\n *   },\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n    return partitionMapWithIndex(function (_, a) { return f(a); });\n};\nexport function reduce() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceWithIndexO_1 = reduceWithIndex(args[0]);\n        return function (b, f) { return reduceWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduce(S.Ord).apply(void 0, args);\n}\nexport function foldMap(O) {\n    if ('compare' in O) {\n        var foldMapWithIndexO_1 = foldMapWithIndex(O);\n        return function (M) {\n            var foldMapWithIndexM = foldMapWithIndexO_1(M);\n            return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n        };\n    }\n    return foldMap(S.Ord)(O);\n}\nexport function reduceRight() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);\n        return function (b, f) { return reduceRightWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduceRight(S.Ord).apply(void 0, args);\n}\n/**\n * Compact a `ReadonlyRecord` of `Option`s discarding the `None` values and\n * keeping the `Some` values.\n *\n * @example\n * import { compact } from 'fp-ts/ReadonlyRecord'\n * import { option } from 'fp-ts'\n *\n * assert.deepStrictEqual(compact({ a: option.some(\"foo\"), b: option.none, c: option.some(\"bar\") }), {\n *   a: \"foo\",\n *   c: \"bar\",\n * });\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var compact = function (r) {\n    var out = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var oa = r[k];\n            if (_.isSome(oa)) {\n                out[k] = oa.value;\n            }\n        }\n    }\n    return out;\n};\n/**\n * Separate a `ReadonlyRecord` of `Either`s into `Left`s and `Right`s.\n *\n * @example\n * import { separate } from 'fp-ts/ReadonlyRecord'\n * import { either } from 'fp-ts'\n *\n * assert.deepStrictEqual(\n *   separate({ a: either.right(\"foo\"), b: either.left(\"bar\"), c: either.right(\"baz\") }),\n *   {\n *     right: {\n *       a: \"foo\",\n *       c: \"baz\",\n *     },\n *     left: {\n *       b: \"bar\",\n *     },\n *   }\n * );\n *\n * @category filtering\n * @since 2.5.0\n */\nexport var separate = function (r) {\n    var left = {};\n    var right = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var e = r[k];\n            if (_.isLeft(e)) {\n                left[k] = e.left;\n            }\n            else {\n                right[k] = e.right;\n            }\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyRecord';\nexport function getShow(O) {\n    if ('compare' in O) {\n        return function (S) { return ({\n            show: function (r) {\n                var elements = collect(O)(function (k, a) { return \"\".concat(JSON.stringify(k), \": \").concat(S.show(a)); })(r).join(', ');\n                return elements === '' ? '{}' : \"{ \".concat(elements, \" }\");\n            }\n        }); };\n    }\n    return getShow(S.Ord)(O);\n}\nexport function getEq(E) {\n    var isSubrecordE = isSubrecord(E);\n    return fromEquals(function (x, y) { return isSubrecordE(x)(y) && isSubrecordE(y)(x); });\n}\nexport function getMonoid(S) {\n    return {\n        concat: function (first, second) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var r = Object.assign({}, first);\n            for (var k in second) {\n                if (_.has.call(second, k)) {\n                    r[k] = _.has.call(first, k) ? S.concat(first[k], second[k]) : second[k];\n                }\n            }\n            return r;\n        },\n        empty: empty\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Takes a value and a `ReadonlyRecord` of functions and returns a\n * `ReadonlyRecord` by applying each function to the input value.\n *\n * @example\n * import { flap } from \"fp-ts/ReadonlyRecord\"\n *\n * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };\n * assert.deepStrictEqual(flap(3)(fab), {\n *   x: \"3 times 2\",\n *   y: \"6\",\n * });\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * Produces a `Foldable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldable = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O)\n}); };\n/**\n * Produces a `FoldableWithIndex1` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category folding\n * @since 2.11.0\n */\nexport var getFoldableWithIndex = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O)\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex\n};\n/**\n * Produces a `Traversable` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversable = function (O) { return ({\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O)\n}); };\n/**\n * Produces a `TraversableWithIndex` instance for a `ReadonlyRecord`, using the\n * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var getTraversableWithIndex = function (O) { return ({\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O),\n    traverseWithIndex: _traverseWithIndex(O)\n}); };\n/**\n * @category filtering\n * @since 2.11.0\n */\nexport var getWitherable = function (O) {\n    var T = getTraversable(O);\n    return {\n        URI: URI,\n        map: _map,\n        reduce: _reduce(O),\n        foldMap: _foldMap(O),\n        reduceRight: _reduceRight(O),\n        traverse: T.traverse,\n        sequence: T.sequence,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        wither: witherDefault(T, Compactable),\n        wilt: wiltDefault(T, Compactable)\n    };\n};\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `union`.\n *\n * @example\n * import { getUnionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getUnionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (S) {\n    var unionS = union(S);\n    return {\n        concat: function (first, second) { return unionS(second)(first); }\n    };\n};\n/**\n * Same as `getMonoid`.\n * Returns a `Monoid` instance for `ReadonlyRecord`s given a `Semigroup`\n * instance for the base type.\n * The `Monoid` makes the union of two `ReadonlyRecord`s combining the\n * entries that have the same key with the provided `Semigroup`.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n * import { getUnionMonoid } from 'fp-ts/ReadonlyRecord'\n *\n * const M = getUnionMonoid(SemigroupSum);\n * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (S) { return ({\n    concat: getUnionSemigroup(S).concat,\n    empty: empty\n}); };\n/**\n * Given a `Semigroup` in the base type, it produces a `Semigroup`\n * in the `ReadonlyRecord` of the base type.\n * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by\n * `intersection`.\n *\n * @example\n * import { getIntersectionSemigroup, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Semigroup } from \"fp-ts/Semigroup\"\n *\n * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };\n * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getIntersectionSemigroup(sNumber);\n * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (S) {\n    var intersectionS = intersection(S);\n    return {\n        concat: function (first, second) { return intersectionS(second)(first); }\n    };\n};\n/**\n * Produces a `Magma` with a `concat` function that combines\n * two `ReadonlyRecord`s by making the `difference`.\n *\n * @example\n * import { getDifferenceMagma, difference, ReadonlyRecord } from \"fp-ts/ReadonlyRecord\"\n * import { Magma } from \"fp-ts/Magma\"\n *\n * const r1 = { a: 3, c: 3 };\n * const r2 = { a: 1, b: 2 };\n * const m: Magma<ReadonlyRecord<string, number>> = getDifferenceMagma<number>();\n * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));\n * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function () { return ({\n    concat: function (first, second) { return difference(second)(first); }\n}); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `getFoldable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord)\n};\n/**\n * Use `getFoldableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord)\n};\n/**\n * Use `getTraversable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence\n};\n/**\n * Use `getTraversableWithIndex` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord)\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * Use `getWitherable` instead.\n *\n * @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\nexport function hasOwnProperty(k, r) {\n    return _.has.call(r === undefined ? this : r, k);\n}\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RR.Functor` instead of `RR.readonlyRecord`\n * (where `RR` is from `import RR from 'fp-ts/ReadonlyRecord'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyRecord = {\n    URI: URI,\n    map: _map,\n    reduce: /*#__PURE__*/ _reduce(S.Ord),\n    foldMap: /*#__PURE__*/ _foldMap(S.Ord),\n    reduceRight: /*#__PURE__*/ _reduceRight(S.Ord),\n    traverse: /*#__PURE__*/ _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(S.Ord),\n    foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(S.Ord),\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord),\n    wither: _wither,\n    wilt: _wilt\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}