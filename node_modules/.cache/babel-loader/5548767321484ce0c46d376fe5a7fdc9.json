{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitStringReader = void 0;\nvar bn_js_1 = require(\"bn.js\");\nvar __1 = require(\"..\");\nvar BitStringReader = /*#__PURE__*/function () {\n  function BitStringReader(string) {\n    _classCallCheck(this, BitStringReader);\n    this.offset = 0;\n    var r = Buffer.alloc(string.buffer.length);\n    string.buffer.copy(r);\n    this.buffer = r;\n    this.length = string.cursor;\n  }\n  _createClass(BitStringReader, [{\n    key: \"currentOffset\",\n    get: function get() {\n      return this.offset;\n    }\n  }, {\n    key: \"remaining\",\n    get: function get() {\n      return this.length - this.offset;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(bits) {\n      for (var i = 0; i < bits; i++) {\n        this.readBit();\n      }\n    }\n  }, {\n    key: \"readUint\",\n    value: function readUint(bits) {\n      if (bits == 0) {\n        return new bn_js_1.BN(0);\n      }\n      var res = '';\n      for (var i = 0; i < bits; i++) {\n        res += this.readBit() ? '1' : '0';\n      }\n      return new bn_js_1.BN(res, 2);\n    }\n  }, {\n    key: \"readUintNumber\",\n    value: function readUintNumber(bits) {\n      return this.readUint(bits).toNumber();\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(bits) {\n      if (bits === 0) {\n        return new bn_js_1.BN(0);\n      }\n      if (bits === 1) {\n        if (this.readBit() /* isNegative */) {\n          return new bn_js_1.BN(-1);\n        } else {\n          return new bn_js_1.BN(0);\n        }\n      }\n      if (this.readBit() /* isNegative */) {\n        var base = this.readUint(bits - 1);\n        var b = new bn_js_1.BN(2);\n        var nb = b.pow(new bn_js_1.BN(bits - 1));\n        return base.sub(nb);\n      } else {\n        return this.readUint(bits - 1);\n      }\n    }\n  }, {\n    key: \"readIntNumber\",\n    value: function readIntNumber(bits) {\n      return this.readInt(bits).toNumber();\n    }\n  }, {\n    key: \"readBuffer\",\n    value: function readBuffer(size) {\n      var res = [];\n      for (var i = 0; i < size; i++) {\n        res.push(this.readUintNumber(8));\n      }\n      return Buffer.from(res);\n    }\n  }, {\n    key: \"readBit\",\n    value: function readBit() {\n      var r = this.getBit(this.offset);\n      this.offset++;\n      return r;\n    }\n  }, {\n    key: \"readCoins\",\n    value: function readCoins() {\n      var bytes = this.readUintNumber(4);\n      if (bytes === 0) {\n        return new bn_js_1.BN(0);\n      }\n      return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n  }, {\n    key: \"readVarUInt\",\n    value: function readVarUInt(headerBits) {\n      var bytes = this.readUintNumber(headerBits);\n      if (bytes === 0) {\n        return new bn_js_1.BN(0);\n      }\n      return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n  }, {\n    key: \"readVarUIntNumber\",\n    value: function readVarUIntNumber(headerBits) {\n      return this.readVarUInt(headerBits).toNumber();\n    }\n  }, {\n    key: \"readUnaryLength\",\n    value: function readUnaryLength() {\n      var res = 0;\n      while (this.readBit()) {\n        res++;\n      }\n      return res;\n    }\n  }, {\n    key: \"readRemaining\",\n    value: function readRemaining() {\n      var res = __1.BitString.alloc(1023);\n      while (this.offset < this.length) {\n        res.writeBit(this.readBit());\n      }\n      return res;\n    }\n  }, {\n    key: \"readAddress\",\n    value: function readAddress() {\n      var type = this.readUintNumber(2);\n      if (type === 0) {\n        return null;\n      }\n      if (type !== 2) {\n        throw Error('Only STD address supported');\n      }\n      if (this.readUintNumber(1) !== 0) {\n        throw Error('Only STD address supported');\n      }\n      var wc = this.readIntNumber(8);\n      var hash = this.readBuffer(32);\n      return new __1.Address(wc, hash);\n    }\n  }, {\n    key: \"readBitString\",\n    value: function readBitString(n) {\n      var res = __1.BitString.alloc(1023);\n      for (var i = 0; i < n; i++) {\n        res.writeBit(this.readBit());\n      }\n      return res;\n    }\n  }, {\n    key: \"getBit\",\n    value: function getBit(n) {\n      if (n >= this.length || n < 0) {\n        throw Error('Out of range');\n      }\n      return (this.buffer[n / 8 | 0] & 1 << 7 - n % 8) > 0;\n    }\n  }]);\n  return BitStringReader;\n}();\nexports.BitStringReader = BitStringReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","BitStringReader","bn_js_1","require","__1","string","offset","r","Buffer","alloc","buffer","length","copy","cursor","bits","i","readBit","BN","res","readUint","toNumber","base","b","nb","pow","sub","readInt","size","push","readUintNumber","from","getBit","bytes","readBuffer","toString","headerBits","readVarUInt","BitString","writeBit","type","Error","wc","readIntNumber","hash","Address","n"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/BitStringReader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitStringReader = void 0;\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nclass BitStringReader {\n    constructor(string) {\n        this.offset = 0;\n        let r = Buffer.alloc(string.buffer.length);\n        string.buffer.copy(r);\n        this.buffer = r;\n        this.length = string.cursor;\n    }\n    get currentOffset() {\n        return this.offset;\n    }\n    get remaining() {\n        return this.length - this.offset;\n    }\n    skip(bits) {\n        for (let i = 0; i < bits; i++) {\n            this.readBit();\n        }\n    }\n    readUint(bits) {\n        if (bits == 0) {\n            return new bn_js_1.BN(0);\n        }\n        let res = '';\n        for (let i = 0; i < bits; i++) {\n            res += this.readBit() ? '1' : '0';\n        }\n        return new bn_js_1.BN(res, 2);\n    }\n    readUintNumber(bits) {\n        return this.readUint(bits).toNumber();\n    }\n    readInt(bits) {\n        if (bits === 0) {\n            return new bn_js_1.BN(0);\n        }\n        if (bits === 1) {\n            if (this.readBit() /* isNegative */) {\n                return new bn_js_1.BN(-1);\n            }\n            else {\n                return new bn_js_1.BN(0);\n            }\n        }\n        if (this.readBit() /* isNegative */) {\n            let base = this.readUint(bits - 1);\n            const b = new bn_js_1.BN(2);\n            const nb = b.pow(new bn_js_1.BN(bits - 1));\n            return base.sub(nb);\n        }\n        else {\n            return this.readUint(bits - 1);\n        }\n    }\n    readIntNumber(bits) {\n        return this.readInt(bits).toNumber();\n    }\n    readBuffer(size) {\n        let res = [];\n        for (let i = 0; i < size; i++) {\n            res.push(this.readUintNumber(8));\n        }\n        return Buffer.from(res);\n    }\n    readBit() {\n        let r = this.getBit(this.offset);\n        this.offset++;\n        return r;\n    }\n    readCoins() {\n        let bytes = this.readUintNumber(4);\n        if (bytes === 0) {\n            return new bn_js_1.BN(0);\n        }\n        return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n    readVarUInt(headerBits) {\n        let bytes = this.readUintNumber(headerBits);\n        if (bytes === 0) {\n            return new bn_js_1.BN(0);\n        }\n        return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n    readVarUIntNumber(headerBits) {\n        return this.readVarUInt(headerBits).toNumber();\n    }\n    readUnaryLength() {\n        let res = 0;\n        while (this.readBit()) {\n            res++;\n        }\n        return res;\n    }\n    readRemaining() {\n        let res = __1.BitString.alloc(1023);\n        while (this.offset < this.length) {\n            res.writeBit(this.readBit());\n        }\n        return res;\n    }\n    readAddress() {\n        let type = this.readUintNumber(2);\n        if (type === 0) {\n            return null;\n        }\n        if (type !== 2) {\n            throw Error('Only STD address supported');\n        }\n        if (this.readUintNumber(1) !== 0) {\n            throw Error('Only STD address supported');\n        }\n        const wc = this.readIntNumber(8);\n        const hash = this.readBuffer(32);\n        return new __1.Address(wc, hash);\n    }\n    readBitString(n) {\n        let res = __1.BitString.alloc(1023);\n        for (let i = 0; i < n; i++) {\n            res.writeBit(this.readBit());\n        }\n        return res;\n    }\n    getBit(n) {\n        if (n >= this.length || n < 0) {\n            throw Error('Out of range');\n        }\n        return (this.buffer[(n / 8) | 0] & (1 << (7 - (n % 8)))) > 0;\n    }\n}\nexports.BitStringReader = BitStringReader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}