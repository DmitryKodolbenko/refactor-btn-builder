{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"../boc\"),\n  Cell = _require.Cell;\nvar _require2 = require(\"../utils\"),\n  Address = _require2.Address,\n  BN = _require2.BN,\n  bytesToHex = _require2.bytesToHex;\nvar _require3 = require(\"../contract\"),\n  Contract = _require3.Contract;\nvar AppTon = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @param transport {Transport} @ledgerhq/hw-transport\n   * @param ton   {TonWeb}\n   */\n  function AppTon(transport, ton) {\n    _classCallCheck(this, AppTon);\n    this.transport = transport;\n    this.ton = ton;\n    this.ADDRESS_FORMAT_HEX = 0;\n    this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n    this.ADDRESS_FORMAT_URL_SAFE = 2;\n    this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n    this.ADDRESS_FORMAT_TEST_ONLY = 8;\n\n    // todo: узнать зачем вызывается decorateAppAPIMethods\n    // const scrambleKey = \"w0w\";\n    // transport.decorateAppAPIMethods(\n    //     this,\n    //     [\n    //         \"getAppConfiguration\",\n    //         \"getAddress\",\n    //         \"sign\",\n    //         \"signTransfer\",\n    //     ],\n    //     scrambleKey\n    // );\n  }\n\n  /***\n   * Get App version\n   * @return {{version: string}}\n   */\n  _createClass(AppTon, [{\n    key: \"getAppConfiguration\",\n    value: function () {\n      var _getAppConfiguration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.transport.send(0xe0, 0x01, 0x00, 0x00);\n              case 2:\n                response = _context.sent;\n                return _context.abrupt(\"return\", {\n                  version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n                });\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getAppConfiguration() {\n        return _getAppConfiguration.apply(this, arguments);\n      }\n      return getAppConfiguration;\n    }()\n    /**\n     * This command returns a public key for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display public key and confirm before returning\n     * @return {{publicKey: Uint8Array}}\n     */\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountNumber, isDisplay) {\n        var buffer, response, len, publicKey;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                buffer = Buffer.alloc(4);\n                buffer.writeInt32BE(accountNumber);\n                _context2.next = 4;\n                return this.transport.send(0xe0, 0x02, isDisplay ? 0x01 : 0x00, 0x00, buffer);\n              case 4:\n                response = _context2.sent;\n                len = response[0];\n                publicKey = new Uint8Array(response.slice(1, 1 + len));\n                return _context2.abrupt(\"return\", {\n                  publicKey: publicKey\n                });\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getPublicKey(_x, _x2) {\n        return _getPublicKey.apply(this, arguments);\n      }\n      return getPublicKey;\n    }()\n    /**\n     * This command returns a wallet v3R1 address for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display address and confirm before returning\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return {{address: Address}}\n     */\n  }, {\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(accountNumber, isDisplay, addressFormat) {\n        var buffer, response, len, addressHex, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                buffer = Buffer.alloc(4);\n                buffer.writeInt32BE(accountNumber);\n                _context3.next = 4;\n                return this.transport.send(0xe0, 0x05, isDisplay ? 0x01 : 0x00, addressFormat, buffer);\n              case 4:\n                response = _context3.sent;\n                len = response[0];\n                addressHex = new Uint8Array(response.slice(1, 1 + len));\n                address = new Address('0:' + bytesToHex(addressHex));\n                return _context3.abrupt(\"return\", {\n                  address: address\n                });\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getAddress(_x3, _x4, _x5) {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }()\n    /**\n     * Sign a bytes\n     * @param accountNumber {number}\n     * @param buffer    {Buffer}\n     * @return {{signature: Buffer}}\n     */\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accountNumber, buffer) {\n        var accountNumberBuffer, signBuffer, response, len, signature;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                accountNumberBuffer = Buffer.alloc(4);\n                accountNumberBuffer.writeInt32BE(accountNumber);\n                signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n                _context4.next = 5;\n                return this.transport.send(0xe0, 0x03, 0x00, 0x00, signBuffer);\n              case 5:\n                response = _context4.sent;\n                len = response[0];\n                signature = response.slice(1, 1 + len);\n                return _context4.abrupt(\"return\", {\n                  signature: signature\n                });\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function sign(_x6, _x7) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n    /**\n     * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n     * if seqno === 0 it will be deploy wallet + transfer coins message\n     * @param accountNumber {number}\n     * @param wallet {WalletContract}  Sender wallet\n     * @param toAddress {String | Address}  Destination address in any format\n     * @param amount    {BN | number}  Transfer value in nanograms\n     * @param seqno {number}\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return\n     */\n  }, {\n    key: \"transfer\",\n    value: function () {\n      var _transfer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n        var sendMode, query, accountNumberBuffer, msgBuffer, response, len, signatureBuffer, signature, body, stateInit, code, data, deploy, selfAddress, header, resultMessage, resultPromise;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                sendMode = 3;\n                _context5.next = 3;\n                return wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n              case 3:\n                query = _context5.sent;\n                accountNumberBuffer = Buffer.alloc(4);\n                accountNumberBuffer.writeInt32BE(accountNumber);\n                _context5.t0 = Buffer;\n                _context5.t1 = accountNumberBuffer;\n                _context5.t2 = Buffer;\n                _context5.next = 11;\n                return query.signingMessage.toBoc();\n              case 11:\n                _context5.t3 = _context5.sent;\n                _context5.t4 = _context5.t2.from.call(_context5.t2, _context5.t3);\n                _context5.t5 = [_context5.t1, _context5.t4];\n                msgBuffer = _context5.t0.concat.call(_context5.t0, _context5.t5);\n                _context5.next = 17;\n                return this.transport.send(0xe0, 0x04, addressFormat, 0x00, msgBuffer);\n              case 17:\n                response = _context5.sent;\n                len = response[0];\n                signatureBuffer = response.slice(1, 1 + len);\n                signature = new Uint8Array(signatureBuffer);\n                body = new Cell();\n                body.bits.writeBytes(signature);\n                body.writeCell(query.signingMessage);\n                stateInit = null, code = null, data = null;\n                if (!(seqno === 0)) {\n                  _context5.next = 32;\n                  break;\n                }\n                _context5.next = 28;\n                return wallet.createStateInit();\n              case 28:\n                deploy = _context5.sent;\n                stateInit = deploy.stateInit;\n                code = deploy.code;\n                data = deploy.data;\n              case 32:\n                _context5.next = 34;\n                return wallet.getAddress();\n              case 34:\n                selfAddress = _context5.sent;\n                header = Contract.createExternalMessageHeader(selfAddress);\n                resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n                resultPromise = new Promise(function (resolve) {\n                  resolve({\n                    address: selfAddress,\n                    message: resultMessage,\n                    // old wallet_send_generate_external_message\n\n                    body: body,\n                    signature: signature,\n                    signingMessage: query.signingMessage,\n                    stateInit: stateInit,\n                    code: code,\n                    data: data\n                  });\n                });\n                return _context5.abrupt(\"return\", Contract.createMethod(this.ton.provider, resultPromise));\n              case 39:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function transfer(_x8, _x9, _x10, _x11, _x12, _x13) {\n        return _transfer.apply(this, arguments);\n      }\n      return transfer;\n    }()\n  }]);\n  return AppTon;\n}();\nmodule.exports = AppTon;","map":{"version":3,"names":["require","Cell","Address","BN","bytesToHex","Contract","AppTon","transport","ton","ADDRESS_FORMAT_HEX","ADDRESS_FORMAT_USER_FRIENDLY","ADDRESS_FORMAT_URL_SAFE","ADDRESS_FORMAT_BOUNCEABLE","ADDRESS_FORMAT_TEST_ONLY","send","response","version","accountNumber","isDisplay","buffer","Buffer","alloc","writeInt32BE","len","publicKey","Uint8Array","slice","addressFormat","addressHex","address","accountNumberBuffer","signBuffer","concat","from","signature","wallet","toAddress","amount","seqno","sendMode","createTransferMessage","query","signingMessage","toBoc","msgBuffer","signatureBuffer","body","bits","writeBytes","writeCell","stateInit","code","data","createStateInit","deploy","getAddress","selfAddress","header","createExternalMessageHeader","resultMessage","createCommonMsgInfo","resultPromise","Promise","resolve","message","createMethod","provider","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/ledger/AppTon.js"],"sourcesContent":["const {Cell} = require(\"../boc\");\nconst {Address, BN, bytesToHex} = require(\"../utils\");\nconst {Contract} = require(\"../contract\");\n\nclass AppTon {\n\n    /**\n     * @param transport {Transport} @ledgerhq/hw-transport\n     * @param ton   {TonWeb}\n     */\n    constructor(transport, ton) {\n        this.transport = transport;\n        this.ton = ton;\n\n        this.ADDRESS_FORMAT_HEX = 0;\n        this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n        this.ADDRESS_FORMAT_URL_SAFE = 2;\n        this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n        this.ADDRESS_FORMAT_TEST_ONLY = 8;\n\n        // todo: узнать зачем вызывается decorateAppAPIMethods\n        // const scrambleKey = \"w0w\";\n        // transport.decorateAppAPIMethods(\n        //     this,\n        //     [\n        //         \"getAppConfiguration\",\n        //         \"getAddress\",\n        //         \"sign\",\n        //         \"signTransfer\",\n        //     ],\n        //     scrambleKey\n        // );\n    }\n\n    /***\n     * Get App version\n     * @return {{version: string}}\n     */\n    async getAppConfiguration() {\n        const response = await this.transport.send(0xe0, 0x01, 0x00, 0x00);\n        return {\n            version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n        };\n    }\n\n    /**\n     * This command returns a public key for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display public key and confirm before returning\n     * @return {{publicKey: Uint8Array}}\n     */\n    async getPublicKey(accountNumber, isDisplay) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x02,\n                isDisplay ? 0x01 : 0x00,\n                0x00,\n                buffer\n            );\n        const len = response[0];\n        const publicKey = new Uint8Array(response.slice(1, 1 + len));\n        return {publicKey};\n    }\n\n    /**\n     * This command returns a wallet v3R1 address for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display address and confirm before returning\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return {{address: Address}}\n     */\n    async getAddress(accountNumber, isDisplay, addressFormat) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x05,\n                isDisplay ? 0x01 : 0x00,\n                addressFormat,\n                buffer\n            );\n        const len = response[0];\n        const addressHex = new Uint8Array(response.slice(1, 1 + len));\n        const address = new Address('0:' + bytesToHex(addressHex));\n        return {address};\n    }\n\n    /**\n     * Sign a bytes\n     * @param accountNumber {number}\n     * @param buffer    {Buffer}\n     * @return {{signature: Buffer}}\n     */\n    async sign(accountNumber, buffer) {\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x03,\n                0x00,\n                0x00,\n                signBuffer\n            );\n\n        const len = response[0];\n        const signature = response.slice(1, 1 + len);\n        return {signature};\n    }\n\n    /**\n     * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n     * if seqno === 0 it will be deploy wallet + transfer coins message\n     * @param accountNumber {number}\n     * @param wallet {WalletContract}  Sender wallet\n     * @param toAddress {String | Address}  Destination address in any format\n     * @param amount    {BN | number}  Transfer value in nanograms\n     * @param seqno {number}\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return\n     */\n    async transfer(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n        const sendMode = 3;\n\n        const query = await wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const msgBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(await query.signingMessage.toBoc())]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x04,\n                addressFormat,\n                0x00,\n                msgBuffer\n            );\n\n        const len = response[0];\n        const signatureBuffer = response.slice(1, 1 + len);\n        const signature = new Uint8Array(signatureBuffer);\n\n        const body = new Cell();\n        body.bits.writeBytes(signature);\n        body.writeCell(query.signingMessage);\n\n        let stateInit = null, code = null, data = null;\n\n        if (seqno === 0) {\n            const deploy = await wallet.createStateInit();\n            stateInit = deploy.stateInit;\n            code = deploy.code;\n            data = deploy.data;\n        }\n\n        const selfAddress = await wallet.getAddress();\n        const header = Contract.createExternalMessageHeader(selfAddress);\n        const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n\n        const resultPromise = new Promise(resolve => {\n            resolve({\n                address: selfAddress,\n                message: resultMessage, // old wallet_send_generate_external_message\n\n                body: body,\n                signature: signature,\n                signingMessage: query.signingMessage,\n\n                stateInit,\n                code,\n                data,\n            });\n        });\n\n        return Contract.createMethod(\n            this.ton.provider,\n            resultPromise\n        );\n    }\n}\n\nmodule.exports = AppTon;"],"mappings":"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"},"metadata":{},"sourceType":"script"}