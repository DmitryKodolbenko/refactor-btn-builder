{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitStringReader = void 0;\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nclass BitStringReader {\n  constructor(string) {\n    this.offset = 0;\n    let r = Buffer.alloc(string.buffer.length);\n    string.buffer.copy(r);\n    this.buffer = r;\n    this.length = string.cursor;\n  }\n  get currentOffset() {\n    return this.offset;\n  }\n  get remaining() {\n    return this.length - this.offset;\n  }\n  skip(bits) {\n    for (let i = 0; i < bits; i++) {\n      this.readBit();\n    }\n  }\n  readUint(bits) {\n    if (bits == 0) {\n      return new bn_js_1.BN(0);\n    }\n    let res = '';\n    for (let i = 0; i < bits; i++) {\n      res += this.readBit() ? '1' : '0';\n    }\n    return new bn_js_1.BN(res, 2);\n  }\n  readUintNumber(bits) {\n    return this.readUint(bits).toNumber();\n  }\n  readInt(bits) {\n    if (bits === 0) {\n      return new bn_js_1.BN(0);\n    }\n    if (bits === 1) {\n      if (this.readBit() /* isNegative */) {\n        return new bn_js_1.BN(-1);\n      } else {\n        return new bn_js_1.BN(0);\n      }\n    }\n    if (this.readBit() /* isNegative */) {\n      let base = this.readUint(bits - 1);\n      const b = new bn_js_1.BN(2);\n      const nb = b.pow(new bn_js_1.BN(bits - 1));\n      return base.sub(nb);\n    } else {\n      return this.readUint(bits - 1);\n    }\n  }\n  readIntNumber(bits) {\n    return this.readInt(bits).toNumber();\n  }\n  readBuffer(size) {\n    let res = [];\n    for (let i = 0; i < size; i++) {\n      res.push(this.readUintNumber(8));\n    }\n    return Buffer.from(res);\n  }\n  readBit() {\n    let r = this.getBit(this.offset);\n    this.offset++;\n    return r;\n  }\n  readCoins() {\n    let bytes = this.readUintNumber(4);\n    if (bytes === 0) {\n      return new bn_js_1.BN(0);\n    }\n    return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n  }\n  readVarUInt(headerBits) {\n    let bytes = this.readUintNumber(headerBits);\n    if (bytes === 0) {\n      return new bn_js_1.BN(0);\n    }\n    return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n  }\n  readVarUIntNumber(headerBits) {\n    return this.readVarUInt(headerBits).toNumber();\n  }\n  readUnaryLength() {\n    let res = 0;\n    while (this.readBit()) {\n      res++;\n    }\n    return res;\n  }\n  readRemaining() {\n    let res = __1.BitString.alloc(1023);\n    while (this.offset < this.length) {\n      res.writeBit(this.readBit());\n    }\n    return res;\n  }\n  readAddress() {\n    let type = this.readUintNumber(2);\n    if (type === 0) {\n      return null;\n    }\n    if (type !== 2) {\n      throw Error('Only STD address supported');\n    }\n    if (this.readUintNumber(1) !== 0) {\n      throw Error('Only STD address supported');\n    }\n    const wc = this.readIntNumber(8);\n    const hash = this.readBuffer(32);\n    return new __1.Address(wc, hash);\n  }\n  readBitString(n) {\n    let res = __1.BitString.alloc(1023);\n    for (let i = 0; i < n; i++) {\n      res.writeBit(this.readBit());\n    }\n    return res;\n  }\n  getBit(n) {\n    if (n >= this.length || n < 0) {\n      throw Error('Out of range');\n    }\n    return (this.buffer[n / 8 | 0] & 1 << 7 - n % 8) > 0;\n  }\n}\nexports.BitStringReader = BitStringReader;","map":{"version":3,"names":["Object","defineProperty","exports","value","BitStringReader","bn_js_1","require","__1","constructor","string","offset","r","Buffer","alloc","buffer","length","copy","cursor","currentOffset","remaining","skip","bits","i","readBit","readUint","BN","res","readUintNumber","toNumber","readInt","base","b","nb","pow","sub","readIntNumber","readBuffer","size","push","from","getBit","readCoins","bytes","toString","readVarUInt","headerBits","readVarUIntNumber","readUnaryLength","readRemaining","BitString","writeBit","readAddress","type","Error","wc","hash","Address","readBitString","n"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/BitStringReader.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitStringReader = void 0;\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nclass BitStringReader {\n    constructor(string) {\n        this.offset = 0;\n        let r = Buffer.alloc(string.buffer.length);\n        string.buffer.copy(r);\n        this.buffer = r;\n        this.length = string.cursor;\n    }\n    get currentOffset() {\n        return this.offset;\n    }\n    get remaining() {\n        return this.length - this.offset;\n    }\n    skip(bits) {\n        for (let i = 0; i < bits; i++) {\n            this.readBit();\n        }\n    }\n    readUint(bits) {\n        if (bits == 0) {\n            return new bn_js_1.BN(0);\n        }\n        let res = '';\n        for (let i = 0; i < bits; i++) {\n            res += this.readBit() ? '1' : '0';\n        }\n        return new bn_js_1.BN(res, 2);\n    }\n    readUintNumber(bits) {\n        return this.readUint(bits).toNumber();\n    }\n    readInt(bits) {\n        if (bits === 0) {\n            return new bn_js_1.BN(0);\n        }\n        if (bits === 1) {\n            if (this.readBit() /* isNegative */) {\n                return new bn_js_1.BN(-1);\n            }\n            else {\n                return new bn_js_1.BN(0);\n            }\n        }\n        if (this.readBit() /* isNegative */) {\n            let base = this.readUint(bits - 1);\n            const b = new bn_js_1.BN(2);\n            const nb = b.pow(new bn_js_1.BN(bits - 1));\n            return base.sub(nb);\n        }\n        else {\n            return this.readUint(bits - 1);\n        }\n    }\n    readIntNumber(bits) {\n        return this.readInt(bits).toNumber();\n    }\n    readBuffer(size) {\n        let res = [];\n        for (let i = 0; i < size; i++) {\n            res.push(this.readUintNumber(8));\n        }\n        return Buffer.from(res);\n    }\n    readBit() {\n        let r = this.getBit(this.offset);\n        this.offset++;\n        return r;\n    }\n    readCoins() {\n        let bytes = this.readUintNumber(4);\n        if (bytes === 0) {\n            return new bn_js_1.BN(0);\n        }\n        return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n    readVarUInt(headerBits) {\n        let bytes = this.readUintNumber(headerBits);\n        if (bytes === 0) {\n            return new bn_js_1.BN(0);\n        }\n        return new bn_js_1.BN(this.readBuffer(bytes).toString('hex'), 'hex');\n    }\n    readVarUIntNumber(headerBits) {\n        return this.readVarUInt(headerBits).toNumber();\n    }\n    readUnaryLength() {\n        let res = 0;\n        while (this.readBit()) {\n            res++;\n        }\n        return res;\n    }\n    readRemaining() {\n        let res = __1.BitString.alloc(1023);\n        while (this.offset < this.length) {\n            res.writeBit(this.readBit());\n        }\n        return res;\n    }\n    readAddress() {\n        let type = this.readUintNumber(2);\n        if (type === 0) {\n            return null;\n        }\n        if (type !== 2) {\n            throw Error('Only STD address supported');\n        }\n        if (this.readUintNumber(1) !== 0) {\n            throw Error('Only STD address supported');\n        }\n        const wc = this.readIntNumber(8);\n        const hash = this.readBuffer(32);\n        return new __1.Address(wc, hash);\n    }\n    readBitString(n) {\n        let res = __1.BitString.alloc(1023);\n        for (let i = 0; i < n; i++) {\n            res.writeBit(this.readBit());\n        }\n        return res;\n    }\n    getBit(n) {\n        if (n >= this.length || n < 0) {\n            throw Error('Out of range');\n        }\n        return (this.buffer[(n / 8) | 0] & (1 << (7 - (n % 8)))) > 0;\n    }\n}\nexports.BitStringReader = BitStringReader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}