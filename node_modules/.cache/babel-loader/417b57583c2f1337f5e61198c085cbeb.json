{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\nvar hmac_1 = require(\"./hmac\");\nvar sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\nvar Slip10Curve;\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n    default:\n      throw new Error(\"Unknown curve string: '\".concat(curveString, \"'\"));\n  }\n}\nexports.slip10CurveFromString = slip10CurveFromString;\nvar Slip10RawIndex = /*#__PURE__*/function (_math_1$Uint) {\n  _inherits(Slip10RawIndex, _math_1$Uint);\n  var _super = _createSuper(Slip10RawIndex);\n  function Slip10RawIndex() {\n    _classCallCheck(this, Slip10RawIndex);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Slip10RawIndex, [{\n    key: \"isHardened\",\n    value: function isHardened() {\n      return this.data >= Math.pow(2, 31);\n    }\n  }], [{\n    key: \"hardened\",\n    value: function hardened(hardenedIndex) {\n      return new Slip10RawIndex(hardenedIndex + Math.pow(2, 31));\n    }\n  }, {\n    key: \"normal\",\n    value: function normal(normalIndex) {\n      return new Slip10RawIndex(normalIndex);\n    }\n  }]);\n  return Slip10RawIndex;\n}(math_1.Uint32);\nexports.Slip10RawIndex = Slip10RawIndex;\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\n// Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\nvar Slip10 = /*#__PURE__*/function () {\n  function Slip10() {\n    _classCallCheck(this, Slip10);\n  }\n  _createClass(Slip10, null, [{\n    key: \"derivePath\",\n    value: function derivePath(curve, seed, path) {\n      var result = this.master(curve, seed);\n      var _iterator = _createForOfIteratorHelper(path),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var rawIndex = _step.value;\n          result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"master\",\n    value: function master(curve, seed) {\n      var i = new hmac_1.Hmac(sha_1.Sha512, (0, encoding_1.toAscii)(curve)).update(seed).digest();\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64);\n      if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n        return this.master(curve, i);\n      }\n      return {\n        chainCode: ir,\n        privkey: il\n      };\n    }\n  }, {\n    key: \"child\",\n    value: function child(curve, parentPrivkey, parentChainCode, rawIndex) {\n      var i;\n      if (rawIndex.isHardened()) {\n        var payload = new Uint8Array([0x00].concat(_toConsumableArray(parentPrivkey), _toConsumableArray(rawIndex.toBytesBigEndian())));\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n      } else {\n        if (curve === Slip10Curve.Ed25519) {\n          throw new Error(\"Normal keys are not allowed with ed25519\");\n        } else {\n          // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n          // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n          // where the functions point() and ser_p() are defined in BIP-0032\n          var data = new Uint8Array([].concat(_toConsumableArray(Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey))), _toConsumableArray(rawIndex.toBytesBigEndian())));\n          i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n        }\n      }\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n  }, {\n    key: \"serializedPoint\",\n    value: function serializedPoint(curve, p) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return (0, encoding_1.fromHex)(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }, {\n    key: \"childImpl\",\n    value: function childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n      // step 2 (of the Private parent key â†’ private child key algorithm)\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64);\n      // step 3\n      var returnChainCode = ir;\n      // step 4\n      if (curve === Slip10Curve.Ed25519) {\n        return {\n          chainCode: returnChainCode,\n          privkey: il\n        };\n      }\n      // step 5\n      var n = this.n(curve);\n      var returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n      var returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32));\n      // step 6\n      if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n        var newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01].concat(_toConsumableArray(ir), _toConsumableArray(rawIndex.toBytesBigEndian())))).digest();\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n      }\n      // step 7\n      return {\n        chainCode: returnChainCode,\n        privkey: returnChildKey\n      };\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero(privkey) {\n      return privkey.every(function (byte) {\n        return byte === 0;\n      });\n    }\n  }, {\n    key: \"isGteN\",\n    value: function isGteN(curve, privkey) {\n      var keyAsNumber = new bn_js_1.default(privkey);\n      return keyAsNumber.gte(this.n(curve));\n    }\n  }, {\n    key: \"n\",\n    value: function n(curve) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }]);\n  return Slip10;\n}();\nexports.Slip10 = Slip10;\nfunction pathToString(path) {\n  return path.reduce(function (current, component) {\n    var componentString = component.isHardened() ? \"\".concat(component.toNumber() - Math.pow(2, 31), \"'\") : component.toString();\n    return current + \"/\" + componentString;\n  }, \"m\");\n}\nexports.pathToString = pathToString;\nfunction stringToPath(input) {\n  if (!input.startsWith(\"m\")) throw new Error(\"Path string must start with 'm'\");\n  var rest = input.slice(1);\n  var out = new Array();\n  while (rest) {\n    var match = rest.match(/^\\/([0-9]+)('?)/);\n    if (!match) throw new Error(\"Syntax error while reading path component\");\n    var _match = _slicedToArray(match, 3),\n      fullMatch = _match[0],\n      numberString = _match[1],\n      apostrophe = _match[2];\n    var value = math_1.Uint53.fromString(numberString).toNumber();\n    if (value >= Math.pow(2, 31)) throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n    if (apostrophe) out.push(Slip10RawIndex.hardened(value));else out.push(Slip10RawIndex.normal(value));\n    rest = rest.slice(fullMatch.length);\n  }\n  return out;\n}\nexports.stringToPath = stringToPath;","map":{"version":3,"sources":["../src/slip10.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst hmac_1 = require(\"./hmac\");\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\nvar Slip10Curve;\n(function (Slip10Curve) {\n    Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n    Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\nfunction slip10CurveFromString(curveString) {\n    switch (curveString) {\n        case Slip10Curve.Ed25519:\n            return Slip10Curve.Ed25519;\n        case Slip10Curve.Secp256k1:\n            return Slip10Curve.Secp256k1;\n        default:\n            throw new Error(`Unknown curve string: '${curveString}'`);\n    }\n}\nexports.slip10CurveFromString = slip10CurveFromString;\nclass Slip10RawIndex extends math_1.Uint32 {\n    static hardened(hardenedIndex) {\n        return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n    }\n    static normal(normalIndex) {\n        return new Slip10RawIndex(normalIndex);\n    }\n    isHardened() {\n        return this.data >= 2 ** 31;\n    }\n}\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\n// Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\nclass Slip10 {\n    static derivePath(curve, seed, path) {\n        let result = this.master(curve, seed);\n        for (const rawIndex of path) {\n            result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n        return result;\n    }\n    static master(curve, seed) {\n        const i = new hmac_1.Hmac(sha_1.Sha512, (0, encoding_1.toAscii)(curve)).update(seed).digest();\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n            return this.master(curve, i);\n        }\n        return {\n            chainCode: ir,\n            privkey: il,\n        };\n    }\n    static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n        let i;\n        if (rawIndex.isHardened()) {\n            const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n            i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n        }\n        else {\n            if (curve === Slip10Curve.Ed25519) {\n                throw new Error(\"Normal keys are not allowed with ed25519\");\n            }\n            else {\n                // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n                // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n                // where the functions point() and ser_p() are defined in BIP-0032\n                const data = new Uint8Array([\n                    ...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)),\n                    ...rawIndex.toBytesBigEndian(),\n                ]);\n                i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n            }\n        }\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n    static serializedPoint(curve, p) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return (0, encoding_1.fromHex)(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n    static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n        // step 2 (of the Private parent key â†’ private child key algorithm)\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        // step 3\n        const returnChainCode = ir;\n        // step 4\n        if (curve === Slip10Curve.Ed25519) {\n            return {\n                chainCode: returnChainCode,\n                privkey: il,\n            };\n        }\n        // step 5\n        const n = this.n(curve);\n        const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n        const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32));\n        // step 6\n        if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n            const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode)\n                .update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()]))\n                .digest();\n            return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n        }\n        // step 7\n        return {\n            chainCode: returnChainCode,\n            privkey: returnChildKey,\n        };\n    }\n    static isZero(privkey) {\n        return privkey.every((byte) => byte === 0);\n    }\n    static isGteN(curve, privkey) {\n        const keyAsNumber = new bn_js_1.default(privkey);\n        return keyAsNumber.gte(this.n(curve));\n    }\n    static n(curve) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n}\nexports.Slip10 = Slip10;\nfunction pathToString(path) {\n    return path.reduce((current, component) => {\n        const componentString = component.isHardened()\n            ? `${component.toNumber() - 2 ** 31}'`\n            : component.toString();\n        return current + \"/\" + componentString;\n    }, \"m\");\n}\nexports.pathToString = pathToString;\nfunction stringToPath(input) {\n    if (!input.startsWith(\"m\"))\n        throw new Error(\"Path string must start with 'm'\");\n    let rest = input.slice(1);\n    const out = new Array();\n    while (rest) {\n        const match = rest.match(/^\\/([0-9]+)('?)/);\n        if (!match)\n            throw new Error(\"Syntax error while reading path component\");\n        const [fullMatch, numberString, apostrophe] = match;\n        const value = math_1.Uint53.fromString(numberString).toNumber();\n        if (value >= 2 ** 31)\n            throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n        if (apostrophe)\n            out.push(Slip10RawIndex.hardened(value));\n        else\n            out.push(Slip10RawIndex.normal(value));\n        rest = rest.slice(fullMatch.length);\n    }\n    return out;\n}\nexports.stringToPath = stringToPath;\n//# sourceMappingURL=slip10.js.map"]},"metadata":{},"sourceType":"script"}