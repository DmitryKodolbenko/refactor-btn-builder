{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar depd_1 = __importDefault(require(\"depd\"));\nvar transaction_1 = require(\"./transaction\");\nvar providers_1 = require(\"./providers\");\nvar borsh_1 = require(\"borsh\");\nvar key_pair_1 = require(\"./utils/key_pair\");\nvar errors_1 = require(\"./utils/errors\");\nvar rpc_errors_1 = require(\"./utils/rpc_errors\");\nvar constants_1 = require(\"./constants\");\nvar exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nvar TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nvar TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nvar TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n  return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n  return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nvar Account = /*#__PURE__*/function () {\n  function Account(connection, accountId) {\n    _classCallCheck(this, Account);\n    /** @hidden */\n    this.accessKeyByPublicKeyCache = {};\n    this.connection = connection;\n    this.accountId = accountId;\n  }\n  /** @hidden */\n  _createClass(Account, [{\n    key: \"ready\",\n    get: function get() {\n      var deprecate = depd_1.default('Account.ready()');\n      deprecate('not needed anymore, always ready');\n      return Promise.resolve();\n    }\n  }, {\n    key: \"fetchState\",\n    value: function () {\n      var _fetchState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var deprecate;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                deprecate = depd_1.default('Account.fetchState()');\n                deprecate('use `Account.state()` instead');\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function fetchState() {\n        return _fetchState.apply(this, arguments);\n      }\n      return fetchState;\n    }()\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n  }, {\n    key: \"state\",\n    value: function () {\n      var _state = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.connection.provider.query({\n                  request_type: 'view_account',\n                  account_id: this.accountId,\n                  finality: 'optimistic'\n                }));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function state() {\n        return _state.apply(this, arguments);\n      }\n      return state;\n    }() /** @hidden */\n  }, {\n    key: \"printLogsAndFailures\",\n    value: function printLogsAndFailures(contractId, results) {\n      if (!process.env[\"NEAR_NO_LOGS\"]) {\n        var _iterator = _createForOfIteratorHelper(results),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var result = _step.value;\n            console.log(\"Receipt\".concat(result.receiptIds.length > 1 ? 's' : '', \": \").concat(result.receiptIds.join(', ')));\n            this.printLogs(contractId, result.logs, '\\t');\n            if (result.failure) {\n              console.warn(\"\\tFailure [\".concat(contractId, \"]: \").concat(result.failure));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /** @hidden */\n  }, {\n    key: \"printLogs\",\n    value: function printLogs(contractId, logs) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      if (!process.env[\"NEAR_NO_LOGS\"]) {\n        var _iterator2 = _createForOfIteratorHelper(logs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var log = _step2.value;\n            console.log(\"\".concat(prefix, \"Log [\").concat(contractId, \"]: \").concat(log));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(receiverId, actions) {\n        var accessKeyInfo, accessKey, block, blockHash, nonce;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.findAccessKey(receiverId, actions);\n              case 2:\n                accessKeyInfo = _context3.sent;\n                if (accessKeyInfo) {\n                  _context3.next = 5;\n                  break;\n                }\n                throw new providers_1.TypedError(\"Can not sign transactions for account \".concat(this.accountId, \" on network \").concat(this.connection.networkId, \", no matching key pair found in \").concat(this.connection.signer, \".\"), 'KeyNotFound');\n              case 5:\n                accessKey = accessKeyInfo.accessKey;\n                _context3.next = 8;\n                return this.connection.provider.block({\n                  finality: 'final'\n                });\n              case 8:\n                block = _context3.sent;\n                blockHash = block.header.hash;\n                nonce = ++accessKey.nonce;\n                _context3.next = 13;\n                return transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n              case 13:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function signTransaction(_x, _x2) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAndSendTransaction\",\n    value: function signAndSendTransaction() {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n        return this.signAndSendTransactionV1(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n      } else {\n        return this.signAndSendTransactionV2(arguments.length <= 0 ? undefined : arguments[0]);\n      }\n    }\n  }, {\n    key: \"signAndSendTransactionV1\",\n    value: function signAndSendTransactionV1(receiverId, actions) {\n      var deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n      deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n      return this.signAndSendTransactionV2({\n        receiverId: receiverId,\n        actions: actions\n      });\n    }\n  }, {\n    key: \"signAndSendTransactionV2\",\n    value: function () {\n      var _signAndSendTransactionV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref) {\n        var _this = this;\n        var receiverId, actions, returnError, txHash, signedTx, result, flatLogs;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                receiverId = _ref.receiverId, actions = _ref.actions, returnError = _ref.returnError;\n                _context5.next = 3;\n                return exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                  var _yield$_this$signTran, _yield$_this$signTran2, publicKey;\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return _this.signTransaction(receiverId, actions);\n                        case 2:\n                          _yield$_this$signTran = _context4.sent;\n                          _yield$_this$signTran2 = _slicedToArray(_yield$_this$signTran, 2);\n                          txHash = _yield$_this$signTran2[0];\n                          signedTx = _yield$_this$signTran2[1];\n                          publicKey = signedTx.transaction.publicKey;\n                          _context4.prev = 7;\n                          _context4.next = 10;\n                          return _this.connection.provider.sendTransaction(signedTx);\n                        case 10:\n                          return _context4.abrupt(\"return\", _context4.sent);\n                        case 13:\n                          _context4.prev = 13;\n                          _context4.t0 = _context4[\"catch\"](7);\n                          if (!(_context4.t0.type === 'InvalidNonce')) {\n                            _context4.next = 19;\n                            break;\n                          }\n                          errors_1.logWarning(\"Retrying transaction \".concat(receiverId, \":\").concat(borsh_1.baseEncode(txHash), \" with new nonce.\"));\n                          delete _this.accessKeyByPublicKeyCache[publicKey.toString()];\n                          return _context4.abrupt(\"return\", null);\n                        case 19:\n                          if (!(_context4.t0.type === 'Expired')) {\n                            _context4.next = 22;\n                            break;\n                          }\n                          errors_1.logWarning(\"Retrying transaction \".concat(receiverId, \":\").concat(borsh_1.baseEncode(txHash), \" due to expired block hash\"));\n                          return _context4.abrupt(\"return\", null);\n                        case 22:\n                          _context4.t0.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                          throw _context4.t0;\n                        case 24:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4, null, [[7, 13]]);\n                })));\n              case 3:\n                result = _context5.sent;\n                if (result) {\n                  _context5.next = 6;\n                  break;\n                }\n                throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n              case 6:\n                flatLogs = [result.transaction_outcome].concat(_toConsumableArray(result.receipts_outcome)).reduce(function (acc, it) {\n                  if (it.outcome.logs.length || typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object') {\n                    return acc.concat({\n                      'receiptIds': it.outcome.receipt_ids,\n                      'logs': it.outcome.logs,\n                      'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                    });\n                  } else return acc;\n                }, []);\n                this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n                if (!(!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object')) {\n                  _context5.next = 14;\n                  break;\n                }\n                if (!(result.status.Failure.error_message && result.status.Failure.error_type)) {\n                  _context5.next = 13;\n                  break;\n                }\n                throw new providers_1.TypedError(\"Transaction \".concat(result.transaction_outcome.id, \" failed. \").concat(result.status.Failure.error_message), result.status.Failure.error_type);\n              case 13:\n                throw rpc_errors_1.parseResultError(result);\n              case 14:\n                return _context5.abrupt(\"return\", result);\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function signAndSendTransactionV2(_x3) {\n        return _signAndSendTransactionV.apply(this, arguments);\n      }\n      return signAndSendTransactionV2;\n    }()\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n  }, {\n    key: \"findAccessKey\",\n    value: function () {\n      var _findAccessKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(receiverId, actions) {\n        var publicKey, cachedAccessKey, accessKey;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n              case 2:\n                publicKey = _context6.sent;\n                if (publicKey) {\n                  _context6.next = 5;\n                  break;\n                }\n                return _context6.abrupt(\"return\", null);\n              case 5:\n                cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n                if (!(cachedAccessKey !== undefined)) {\n                  _context6.next = 8;\n                  break;\n                }\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: cachedAccessKey\n                });\n              case 8:\n                _context6.prev = 8;\n                _context6.next = 11;\n                return this.connection.provider.query({\n                  request_type: 'view_access_key',\n                  account_id: this.accountId,\n                  public_key: publicKey.toString(),\n                  finality: 'optimistic'\n                });\n              case 11:\n                accessKey = _context6.sent;\n                if (!this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                  _context6.next = 14;\n                  break;\n                }\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()]\n                });\n              case 14:\n                this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n                return _context6.abrupt(\"return\", {\n                  publicKey: publicKey,\n                  accessKey: accessKey\n                });\n              case 18:\n                _context6.prev = 18;\n                _context6.t0 = _context6[\"catch\"](8);\n                if (!(_context6.t0.type == 'AccessKeyDoesNotExist')) {\n                  _context6.next = 22;\n                  break;\n                }\n                return _context6.abrupt(\"return\", null);\n              case 22:\n                throw _context6.t0;\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[8, 18]]);\n      }));\n      function findAccessKey(_x4, _x5) {\n        return _findAccessKey.apply(this, arguments);\n      }\n      return findAccessKey;\n    }()\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n  }, {\n    key: \"createAndDeployContract\",\n    value: function () {\n      var _createAndDeployContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(contractId, publicKey, data, amount) {\n        var accessKey, contractAccount;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                accessKey = transaction_1.fullAccessKey();\n                _context7.next = 3;\n                return this.signAndSendTransaction({\n                  receiverId: contractId,\n                  actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n                });\n              case 3:\n                contractAccount = new Account(this.connection, contractId);\n                return _context7.abrupt(\"return\", contractAccount);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function createAndDeployContract(_x6, _x7, _x8, _x9) {\n        return _createAndDeployContract.apply(this, arguments);\n      }\n      return createAndDeployContract;\n    }()\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n  }, {\n    key: \"sendMoney\",\n    value: function () {\n      var _sendMoney = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(receiverId, amount) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: receiverId,\n                  actions: [transaction_1.transfer(amount)]\n                }));\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function sendMoney(_x10, _x11) {\n        return _sendMoney.apply(this, arguments);\n      }\n      return sendMoney;\n    }()\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n  }, {\n    key: \"createAccount\",\n    value: function () {\n      var _createAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(newAccountId, publicKey, amount) {\n        var accessKey;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accessKey = transaction_1.fullAccessKey();\n                return _context9.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: newAccountId,\n                  actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n                }));\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function createAccount(_x12, _x13, _x14) {\n        return _createAccount.apply(this, arguments);\n      }\n      return createAccount;\n    }()\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n  }, {\n    key: \"deleteAccount\",\n    value: function () {\n      var _deleteAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(beneficiaryId) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deleteAccount(beneficiaryId)]\n                }));\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function deleteAccount(_x15) {\n        return _deleteAccount.apply(this, arguments);\n      }\n      return deleteAccount;\n    }()\n    /**\n     * @param data The compiled contract code\n     */\n  }, {\n    key: \"deployContract\",\n    value: function () {\n      var _deployContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(data) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deployContract(data)]\n                }));\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function deployContract(_x16) {\n        return _deployContract.apply(this, arguments);\n      }\n      return deployContract;\n    }() /** @hidden */\n  }, {\n    key: \"encodeJSContractArgs\",\n    value: function encodeJSContractArgs(contractId, method, args) {\n      return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n    }\n  }, {\n    key: \"functionCall\",\n    value: function () {\n      var _functionCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(typeof (_args12.length <= 0 ? undefined : _args12[0]) === 'string')) {\n                  _context12.next = 4;\n                  break;\n                }\n                return _context12.abrupt(\"return\", this.functionCallV1(_args12.length <= 0 ? undefined : _args12[0], _args12.length <= 1 ? undefined : _args12[1], _args12.length <= 2 ? undefined : _args12[2], _args12.length <= 3 ? undefined : _args12[3], _args12.length <= 4 ? undefined : _args12[4]));\n              case 4:\n                return _context12.abrupt(\"return\", this.functionCallV2(_args12.length <= 0 ? undefined : _args12[0]));\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function functionCall() {\n        return _functionCall.apply(this, arguments);\n      }\n      return functionCall;\n    }()\n  }, {\n    key: \"functionCallV1\",\n    value: function functionCallV1(contractId, methodName, args, gas, amount) {\n      var deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n      deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n      args = args || {};\n      this.validateArgs(args);\n      return this.signAndSendTransaction({\n        receiverId: contractId,\n        actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n      });\n    }\n  }, {\n    key: \"functionCallV2\",\n    value: function functionCallV2(_ref3) {\n      var contractId = _ref3.contractId,\n        methodName = _ref3.methodName,\n        _ref3$args = _ref3.args,\n        args = _ref3$args === void 0 ? {} : _ref3$args,\n        _ref3$gas = _ref3.gas,\n        gas = _ref3$gas === void 0 ? constants_1.DEFAULT_FUNCTION_CALL_GAS : _ref3$gas,\n        attachedDeposit = _ref3.attachedDeposit,\n        walletMeta = _ref3.walletMeta,\n        walletCallbackUrl = _ref3.walletCallbackUrl,\n        stringify = _ref3.stringify,\n        jsContract = _ref3.jsContract;\n      this.validateArgs(args);\n      var functionCallArgs;\n      if (jsContract) {\n        var encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n        functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];\n      } else {\n        var stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n        functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];\n      }\n      return this.signAndSendTransaction({\n        receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n        // eslint-disable-next-line prefer-spread\n        actions: [transaction_1.functionCall.apply(void 0, functionCallArgs)],\n        walletMeta: walletMeta,\n        walletCallbackUrl: walletCallbackUrl\n      });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n  }, {\n    key: \"addKey\",\n    value: function () {\n      var _addKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(publicKey, contractId, methodNames, amount) {\n        var accessKey;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!methodNames) {\n                  methodNames = [];\n                }\n                if (!Array.isArray(methodNames)) {\n                  methodNames = [methodNames];\n                }\n                if (!contractId) {\n                  accessKey = transaction_1.fullAccessKey();\n                } else {\n                  accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n                }\n                return _context13.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n                }));\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function addKey(_x17, _x18, _x19, _x20) {\n        return _addKey.apply(this, arguments);\n      }\n      return addKey;\n    }()\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n  }, {\n    key: \"deleteKey\",\n    value: function () {\n      var _deleteKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(publicKey) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n                }));\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function deleteKey(_x21) {\n        return _deleteKey.apply(this, arguments);\n      }\n      return deleteKey;\n    }()\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n  }, {\n    key: \"stake\",\n    value: function () {\n      var _stake = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(publicKey, amount) {\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this.signAndSendTransaction({\n                  receiverId: this.accountId,\n                  actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n                }));\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function stake(_x22, _x23) {\n        return _stake.apply(this, arguments);\n      }\n      return stake;\n    }() /** @hidden */\n  }, {\n    key: \"validateArgs\",\n    value: function validateArgs(args) {\n      var isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n      if (isUint8Array) {\n        return;\n      }\n      if (Array.isArray(args) || typeof args !== 'object') {\n        throw new errors_1.PositionalArgsError();\n      }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n     * @returns {Promise<any>}\n     */\n  }, {\n    key: \"viewFunction\",\n    value: function () {\n      var _viewFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(contractId, methodName) {\n        var args,\n          _ref4,\n          _ref4$parse,\n          parse,\n          _ref4$stringify,\n          stringify,\n          _ref4$jsContract,\n          jsContract,\n          encodedArgs,\n          result,\n          _args16 = arguments;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                args = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                _ref4 = _args16.length > 3 && _args16[3] !== undefined ? _args16[3] : {}, _ref4$parse = _ref4.parse, parse = _ref4$parse === void 0 ? parseJsonFromRawResponse : _ref4$parse, _ref4$stringify = _ref4.stringify, stringify = _ref4$stringify === void 0 ? bytesJsonStringify : _ref4$stringify, _ref4$jsContract = _ref4.jsContract, jsContract = _ref4$jsContract === void 0 ? false : _ref4$jsContract;\n                this.validateArgs(args);\n                if (jsContract) {\n                  encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');\n                } else {\n                  encodedArgs = stringify(args);\n                }\n                _context16.next = 6;\n                return this.connection.provider.query({\n                  request_type: 'call_function',\n                  account_id: jsContract ? this.connection.jsvmAccountId : contractId,\n                  method_name: jsContract ? 'view_js_contract' : methodName,\n                  args_base64: encodedArgs.toString('base64'),\n                  finality: 'optimistic'\n                });\n              case 6:\n                result = _context16.sent;\n                if (result.logs) {\n                  this.printLogs(contractId, result.logs);\n                }\n                return _context16.abrupt(\"return\", result.result && result.result.length > 0 && parse(Buffer.from(result.result)));\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function viewFunction(_x24, _x25) {\n        return _viewFunction.apply(this, arguments);\n      }\n      return viewFunction;\n    }()\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n  }, {\n    key: \"viewState\",\n    value: function () {\n      var _viewState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(prefix) {\n        var blockQuery,\n          _yield$this$connectio,\n          values,\n          _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                blockQuery = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {\n                  finality: 'optimistic'\n                };\n                _context17.next = 3;\n                return this.connection.provider.query(_objectSpread(_objectSpread({\n                  request_type: 'view_state'\n                }, blockQuery), {}, {\n                  account_id: this.accountId,\n                  prefix_base64: Buffer.from(prefix).toString('base64')\n                }));\n              case 3:\n                _yield$this$connectio = _context17.sent;\n                values = _yield$this$connectio.values;\n                return _context17.abrupt(\"return\", values.map(function (_ref5) {\n                  var key = _ref5.key,\n                    value = _ref5.value;\n                  return {\n                    key: Buffer.from(key, 'base64'),\n                    value: Buffer.from(value, 'base64')\n                  };\n                }));\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function viewState(_x26) {\n        return _viewState.apply(this, arguments);\n      }\n      return viewState;\n    }()\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n  }, {\n    key: \"getAccessKeys\",\n    value: function () {\n      var _getAccessKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.connection.provider.query({\n                  request_type: 'view_access_key_list',\n                  account_id: this.accountId,\n                  finality: 'optimistic'\n                });\n              case 2:\n                response = _context18.sent;\n                if (!Array.isArray(response)) {\n                  _context18.next = 5;\n                  break;\n                }\n                return _context18.abrupt(\"return\", response);\n              case 5:\n                return _context18.abrupt(\"return\", response.keys);\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function getAccessKeys() {\n        return _getAccessKeys.apply(this, arguments);\n      }\n      return getAccessKeys;\n    }()\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n  }, {\n    key: \"getAccountDetails\",\n    value: function () {\n      var _getAccountDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var accessKeys, authorizedApps;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getAccessKeys();\n              case 2:\n                accessKeys = _context19.sent;\n                authorizedApps = accessKeys.filter(function (item) {\n                  return item.access_key.permission !== 'FullAccess';\n                }).map(function (item) {\n                  var perm = item.access_key.permission;\n                  return {\n                    contractId: perm.FunctionCall.receiver_id,\n                    amount: perm.FunctionCall.allowance,\n                    publicKey: item.public_key\n                  };\n                });\n                return _context19.abrupt(\"return\", {\n                  authorizedApps: authorizedApps\n                });\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function getAccountDetails() {\n        return _getAccountDetails.apply(this, arguments);\n      }\n      return getAccountDetails;\n    }()\n    /**\n     * Returns calculated account balance\n     */\n  }, {\n    key: \"getAccountBalance\",\n    value: function () {\n      var _getAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var protocolConfig, state, costPerByte, stateStaked, staked, totalBalance, availableBalance;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.connection.provider.experimental_protocolConfig({\n                  finality: 'final'\n                });\n              case 2:\n                protocolConfig = _context20.sent;\n                _context20.next = 5;\n                return this.state();\n              case 5:\n                state = _context20.sent;\n                costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n                stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n                staked = new bn_js_1.default(state.locked);\n                totalBalance = new bn_js_1.default(state.amount).add(staked);\n                availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n                return _context20.abrupt(\"return\", {\n                  total: totalBalance.toString(),\n                  stateStaked: stateStaked.toString(),\n                  staked: staked.toString(),\n                  available: availableBalance.toString()\n                });\n              case 12:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function getAccountBalance() {\n        return _getAccountBalance.apply(this, arguments);\n      }\n      return getAccountBalance;\n    }()\n  }]);\n  return Account;\n}();\nexports.Account = Account;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account","bn_js_1","require","depd_1","transaction_1","providers_1","borsh_1","key_pair_1","errors_1","rpc_errors_1","constants_1","exponential_backoff_1","TX_NONCE_RETRY_NUMBER","TX_NONCE_RETRY_WAIT","TX_NONCE_RETRY_WAIT_BACKOFF","parseJsonFromRawResponse","response","JSON","parse","Buffer","from","toString","bytesJsonStringify","input","stringify","connection","accountId","accessKeyByPublicKeyCache","deprecate","default","Promise","resolve","provider","query","request_type","account_id","finality","contractId","results","process","env","result","console","log","receiptIds","length","join","printLogs","logs","failure","warn","prefix","receiverId","actions","findAccessKey","accessKeyInfo","TypedError","networkId","signer","accessKey","block","blockHash","header","hash","nonce","signTransaction","baseDecode","signAndSendTransactionV1","signAndSendTransactionV2","returnError","txHash","signedTx","publicKey","transaction","sendTransaction","type","logWarning","baseEncode","context","ErrorContext","flatLogs","transaction_outcome","receipts_outcome","reduce","acc","it","outcome","status","Failure","concat","receipt_ids","parseRpcError","printLogsAndFailures","error_message","error_type","id","parseResultError","getPublicKey","cachedAccessKey","undefined","public_key","data","amount","fullAccessKey","signAndSendTransaction","createAccount","transfer","addKey","PublicKey","deployContract","contractAccount","newAccountId","beneficiaryId","deleteAccount","method","args","functionCallV1","functionCallV2","methodName","gas","validateArgs","functionCall","DEFAULT_FUNCTION_CALL_GAS","attachedDeposit","walletMeta","walletCallbackUrl","jsContract","functionCallArgs","encodedArgs","encodeJSContractArgs","stringifyArg","stringifyJsonOrBytes","jsvmAccountId","apply","methodNames","Array","isArray","functionCallAccessKey","deleteKey","stake","isUint8Array","byteLength","PositionalArgsError","keys","method_name","args_base64","blockQuery","prefix_base64","values","map","key","getAccessKeys","accessKeys","authorizedApps","filter","item","access_key","permission","perm","FunctionCall","receiver_id","allowance","experimental_protocolConfig","protocolConfig","state","costPerByte","runtime_config","storage_amount_per_byte","stateStaked","storage_usage","mul","staked","locked","totalBalance","add","availableBalance","sub","max","total","available"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/account.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst borsh_1 = require(\"borsh\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst errors_1 = require(\"./utils/errors\");\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\nconst constants_1 = require(\"./constants\");\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nclass Account {\n    constructor(connection, accountId) {\n        /** @hidden */\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /** @hidden */\n    get ready() {\n        const deprecate = depd_1.default('Account.ready()');\n        deprecate('not needed anymore, always ready');\n        return Promise.resolve();\n    }\n    async fetchState() {\n        const deprecate = depd_1.default('Account.fetchState()');\n        deprecate('use `Account.state()` instead');\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n    async state() {\n        return this.connection.provider.query({\n            request_type: 'view_account',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n    }\n    /** @hidden */\n    printLogsAndFailures(contractId, results) {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const result of results) {\n                console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n                this.printLogs(contractId, result.logs, '\\t');\n                if (result.failure) {\n                    console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    printLogs(contractId, logs, prefix = '') {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const log of logs) {\n                console.log(`${prefix}Log [${contractId}]: ${log}`);\n            }\n        }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    async signTransaction(receiverId, actions) {\n        const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n        if (!accessKeyInfo) {\n            throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n        }\n        const { accessKey } = accessKeyInfo;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const nonce = ++accessKey.nonce;\n        return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this.signAndSendTransactionV1(args[0], args[1]);\n        }\n        else {\n            return this.signAndSendTransactionV2(args[0]);\n        }\n    }\n    signAndSendTransactionV1(receiverId, actions) {\n        const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n        deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n        return this.signAndSendTransactionV2({ receiverId, actions });\n    }\n    async signAndSendTransactionV2({ receiverId, actions, returnError }) {\n        let txHash, signedTx;\n        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n            [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n            const publicKey = signedTx.transaction.publicKey;\n            try {\n                return await this.connection.provider.sendTransaction(signedTx);\n            }\n            catch (error) {\n                if (error.type === 'InvalidNonce') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                    return null;\n                }\n                if (error.type === 'Expired') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n                    return null;\n                }\n                error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                throw error;\n            }\n        });\n        if (!result) {\n            // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n            throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n        }\n        const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n            if (it.outcome.logs.length ||\n                (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                return acc.concat({\n                    'receiptIds': it.outcome.receipt_ids,\n                    'logs': it.outcome.logs,\n                    'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                });\n            }\n            else\n                return acc;\n        }, []);\n        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n        if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n            if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n            }\n            else {\n                throw rpc_errors_1.parseResultError(result);\n            }\n        }\n        // TODO: if Tx is Unknown or Started.\n        return result;\n    }\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    async findAccessKey(receiverId, actions) {\n        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        if (!publicKey) {\n            return null;\n        }\n        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n        if (cachedAccessKey !== undefined) {\n            return { publicKey, accessKey: cachedAccessKey };\n        }\n        try {\n            const accessKey = await this.connection.provider.query({\n                request_type: 'view_access_key',\n                account_id: this.accountId,\n                public_key: publicKey.toString(),\n                finality: 'optimistic'\n            });\n            // this function can be called multiple times and retrieve the same access key\n            // this checks to see if the access key was already retrieved and cached while\n            // the above network call was in flight. To keep nonce values in line, we return\n            // the cached access key.\n            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n            }\n            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n            return { publicKey, accessKey };\n        }\n        catch (e) {\n            if (e.type == 'AccessKeyDoesNotExist') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    async createAndDeployContract(contractId, publicKey, data, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        await this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n        });\n        const contractAccount = new Account(this.connection, contractId);\n        return contractAccount;\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    async sendMoney(receiverId, amount) {\n        return this.signAndSendTransaction({\n            receiverId,\n            actions: [transaction_1.transfer(amount)]\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    async createAccount(newAccountId, publicKey, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        return this.signAndSendTransaction({\n            receiverId: newAccountId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    async deleteAccount(beneficiaryId) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteAccount(beneficiaryId)]\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    async deployContract(data) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deployContract(data)]\n        });\n    }\n    /** @hidden */\n    encodeJSContractArgs(contractId, method, args) {\n        return Buffer.concat([Buffer.from(contractId), Buffer.from([0]), Buffer.from(method), Buffer.from([0]), Buffer.from(args)]);\n    }\n    async functionCall(...args) {\n        if (typeof args[0] === 'string') {\n            return this.functionCallV1(args[0], args[1], args[2], args[3], args[4]);\n        }\n        else {\n            return this.functionCallV2(args[0]);\n        }\n    }\n    functionCallV1(contractId, methodName, args, gas, amount) {\n        const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n        deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n        args = args || {};\n        this.validateArgs(args);\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n        });\n    }\n    functionCallV2({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify, jsContract }) {\n        this.validateArgs(args);\n        let functionCallArgs;\n        if (jsContract) {\n            const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n            functionCallArgs = ['call_js_contract', encodedArgs, gas, attachedDeposit, null, true];\n        }\n        else {\n            const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n            functionCallArgs = [methodName, args, gas, attachedDeposit, stringifyArg, false];\n        }\n        return this.signAndSendTransaction({\n            receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n            // eslint-disable-next-line prefer-spread\n            actions: [transaction_1.functionCall.apply(void 0, functionCallArgs)],\n            walletMeta,\n            walletCallbackUrl\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    async addKey(publicKey, contractId, methodNames, amount) {\n        if (!methodNames) {\n            methodNames = [];\n        }\n        if (!Array.isArray(methodNames)) {\n            methodNames = [methodNames];\n        }\n        let accessKey;\n        if (!contractId) {\n            accessKey = transaction_1.fullAccessKey();\n        }\n        else {\n            accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n        }\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async deleteKey(publicKey) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    async stake(publicKey, amount) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new errors_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @param options.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n     * @returns {Promise<any>}\n     */\n    async viewFunction(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false } = {}) {\n        let encodedArgs;\n        this.validateArgs(args);\n        if (jsContract) {\n            encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : '');\n        }\n        else {\n            encodedArgs = stringify(args);\n        }\n        const result = await this.connection.provider.query({\n            request_type: 'call_function',\n            account_id: jsContract ? this.connection.jsvmAccountId : contractId,\n            method_name: jsContract ? 'view_js_contract' : methodName,\n            args_base64: encodedArgs.toString('base64'),\n            finality: 'optimistic'\n        });\n        if (result.logs) {\n            this.printLogs(contractId, result.logs);\n        }\n        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        const { values } = await this.connection.provider.query({\n            request_type: 'view_state',\n            ...blockQuery,\n            account_id: this.accountId,\n            prefix_base64: Buffer.from(prefix).toString('base64')\n        });\n        return values.map(({ key, value }) => ({\n            key: Buffer.from(key, 'base64'),\n            value: Buffer.from(value, 'base64')\n        }));\n    }\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n    async getAccessKeys() {\n        const response = await this.connection.provider.query({\n            request_type: 'view_access_key_list',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n        // A breaking API change introduced extra information into the\n        // response, so it now returns an object with a `keys` field instead\n        // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n        if (Array.isArray(response)) {\n            return response;\n        }\n        return response.keys;\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    async getAccountDetails() {\n        // TODO: update the response value to return all the different keys, not just app keys.\n        // Also if we need this function, or getAccessKeys is good enough.\n        const accessKeys = await this.getAccessKeys();\n        const authorizedApps = accessKeys\n            .filter(item => item.access_key.permission !== 'FullAccess')\n            .map(item => {\n            const perm = item.access_key.permission;\n            return {\n                contractId: perm.FunctionCall.receiver_id,\n                amount: perm.FunctionCall.allowance,\n                publicKey: item.public_key,\n            };\n        });\n        return { authorizedApps };\n    }\n    /**\n     * Returns calculated account balance\n     */\n    async getAccountBalance() {\n        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n        const state = await this.state();\n        const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n        const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n        const staked = new bn_js_1.default(state.locked);\n        const totalBalance = new bn_js_1.default(state.amount).add(staked);\n        const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n        return {\n            total: totalBalance.toString(),\n            stateStaked: stateStaked.toString(),\n            staked: staked.toString(),\n            available: availableBalance.toString()\n        };\n    }\n}\nexports.Account = Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}