{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebsocketClient = void 0;\nvar json_rpc_1 = require(\"@cosmjs/json-rpc\");\nvar socket_1 = require(\"@cosmjs/socket\");\nvar stream_1 = require(\"@cosmjs/stream\");\nvar xstream_1 = require(\"xstream\");\nvar rpcclient_1 = require(\"./rpcclient\");\nfunction defaultErrorHandler(error) {\n  throw error;\n}\nfunction toJsonRpcResponse(message) {\n  // this should never happen, but I want an alert if it does\n  if (message.type !== \"message\") {\n    throw new Error(\"Unexcepted message type on websocket: \".concat(message.type));\n  }\n  var jsonRpcEvent = (0, json_rpc_1.parseJsonRpcResponse)(JSON.parse(message.data));\n  return jsonRpcEvent;\n}\nvar RpcEventProducer = /*#__PURE__*/function () {\n  function RpcEventProducer(request, socket) {\n    _classCallCheck(this, RpcEventProducer);\n    this.running = false;\n    this.subscriptions = [];\n    this.request = request;\n    this.socket = socket;\n  }\n  /**\n   * Implementation of Producer.start\n   */\n  _createClass(RpcEventProducer, [{\n    key: \"start\",\n    value: function start(listener) {\n      if (this.running) {\n        throw Error(\"Already started. Please stop first before restarting.\");\n      }\n      this.running = true;\n      this.connectToClient(listener);\n      this.socket.queueRequest(JSON.stringify(this.request));\n    }\n    /**\n     * Implementation of Producer.stop\n     *\n     * Called by the stream when the stream's last listener stopped listening\n     * or when the producer completed.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n      // Tell the server we are done in order to save resources. We cannot wait for the result.\n      // This may fail when socket connection is not open, thus ignore errors in queueRequest\n      var endRequest = _objectSpread(_objectSpread({}, this.request), {}, {\n        method: \"unsubscribe\"\n      });\n      try {\n        this.socket.queueRequest(JSON.stringify(endRequest));\n      } catch (error) {\n        if (error instanceof Error && error.message.match(/socket has disconnected/i)) {\n          // ignore\n        } else {\n          throw error;\n        }\n      }\n    }\n  }, {\n    key: \"connectToClient\",\n    value: function connectToClient(listener) {\n      var _this = this;\n      var responseStream = this.socket.events.map(toJsonRpcResponse);\n      // this should unsubscribe itself, so doesn't need to be removed explicitly\n      var idSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            _this.closeSubscriptions();\n            listener.error(JSON.stringify(response.error));\n          }\n          idSubscription.unsubscribe();\n        }\n      });\n      // this will fire on a response (success or error)\n      // Tendermint adds an \"#event\" suffix for events that follow a previous subscription\n      // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107\n      var idEventSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            _this.closeSubscriptions();\n            listener.error(JSON.stringify(response.error));\n          } else {\n            listener.next(response.result);\n          }\n        }\n      });\n      // this will fire in case the websocket disconnects cleanly\n      var nonResponseSubscription = responseStream.subscribe({\n        error: function error(_error) {\n          _this.closeSubscriptions();\n          listener.error(_error);\n        },\n        complete: function complete() {\n          _this.closeSubscriptions();\n          listener.complete();\n        }\n      });\n      this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);\n    }\n  }, {\n    key: \"closeSubscriptions\",\n    value: function closeSubscriptions() {\n      var _iterator = _createForOfIteratorHelper(this.subscriptions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subscription = _step.value;\n          subscription.unsubscribe();\n        }\n        // clear unused subscriptions\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.subscriptions = [];\n    }\n  }]);\n  return RpcEventProducer;\n}();\nvar WebsocketClient = /*#__PURE__*/function () {\n  function WebsocketClient(baseUrl) {\n    var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultErrorHandler;\n    _classCallCheck(this, WebsocketClient);\n    // Lazily create streams and use the same stream when listening to the same query twice.\n    //\n    // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this\n    // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!\n    this.subscriptionStreams = new Map();\n    // accept host.name:port and assume ws protocol\n    // make sure we don't end up with ...//websocket\n    var path = baseUrl.endsWith(\"/\") ? \"websocket\" : \"/websocket\";\n    var cleanBaseUrl = (0, rpcclient_1.hasProtocol)(baseUrl) ? baseUrl : \"ws://\" + baseUrl;\n    this.url = cleanBaseUrl + path;\n    this.socket = new socket_1.ReconnectingSocket(this.url);\n    var errorSubscription = this.socket.events.subscribe({\n      error: function error(_error2) {\n        onError(_error2);\n        errorSubscription.unsubscribe();\n      }\n    });\n    this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);\n    this.socket.connect();\n  }\n  _createClass(WebsocketClient, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var pendingResponse, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                pendingResponse = this.responseForRequestId(request.id);\n                this.socket.queueRequest(JSON.stringify(request));\n                _context.next = 4;\n                return pendingResponse;\n              case 4:\n                response = _context.sent;\n                if (!(0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error(JSON.stringify(response.error));\n              case 7:\n                return _context.abrupt(\"return\", response);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }, {\n    key: \"listen\",\n    value: function listen(request) {\n      if (request.method !== \"subscribe\") {\n        throw new Error(\"Request method must be \\\"subscribe\\\" to start event listening\");\n      }\n      var query = request.params.query;\n      if (typeof query !== \"string\") {\n        throw new Error(\"request.params.query must be a string\");\n      }\n      if (!this.subscriptionStreams.has(query)) {\n        var producer = new RpcEventProducer(request, this.socket);\n        var stream = xstream_1.Stream.create(producer);\n        this.subscriptionStreams.set(query, stream);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.subscriptionStreams.get(query).filter(function (response) {\n        return response.query !== undefined;\n      });\n    }\n    /**\n     * Resolves as soon as websocket is connected. execute() queues requests automatically,\n     * so this should be required for testing purposes only.\n     */\n  }, {\n    key: \"connected\",\n    value: function () {\n      var _connected = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function connected() {\n        return _connected.apply(this, arguments);\n      }\n      return connected;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"responseForRequestId\",\n    value: function () {\n      var _responseForRequestId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", (0, stream_1.firstEvent)(this.jsonRpcResponseStream.filter(function (r) {\n                  return r.id === id;\n                })));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function responseForRequestId(_x2) {\n        return _responseForRequestId.apply(this, arguments);\n      }\n      return responseForRequestId;\n    }()\n  }]);\n  return WebsocketClient;\n}();\nexports.WebsocketClient = WebsocketClient;","map":{"version":3,"sources":["../../src/rpcclients/websocketclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebsocketClient = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst socket_1 = require(\"@cosmjs/socket\");\nconst stream_1 = require(\"@cosmjs/stream\");\nconst xstream_1 = require(\"xstream\");\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction defaultErrorHandler(error) {\n    throw error;\n}\nfunction toJsonRpcResponse(message) {\n    // this should never happen, but I want an alert if it does\n    if (message.type !== \"message\") {\n        throw new Error(`Unexcepted message type on websocket: ${message.type}`);\n    }\n    const jsonRpcEvent = (0, json_rpc_1.parseJsonRpcResponse)(JSON.parse(message.data));\n    return jsonRpcEvent;\n}\nclass RpcEventProducer {\n    constructor(request, socket) {\n        this.running = false;\n        this.subscriptions = [];\n        this.request = request;\n        this.socket = socket;\n    }\n    /**\n     * Implementation of Producer.start\n     */\n    start(listener) {\n        if (this.running) {\n            throw Error(\"Already started. Please stop first before restarting.\");\n        }\n        this.running = true;\n        this.connectToClient(listener);\n        this.socket.queueRequest(JSON.stringify(this.request));\n    }\n    /**\n     * Implementation of Producer.stop\n     *\n     * Called by the stream when the stream's last listener stopped listening\n     * or when the producer completed.\n     */\n    stop() {\n        this.running = false;\n        // Tell the server we are done in order to save resources. We cannot wait for the result.\n        // This may fail when socket connection is not open, thus ignore errors in queueRequest\n        const endRequest = { ...this.request, method: \"unsubscribe\" };\n        try {\n            this.socket.queueRequest(JSON.stringify(endRequest));\n        }\n        catch (error) {\n            if (error instanceof Error && error.message.match(/socket has disconnected/i)) {\n                // ignore\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    connectToClient(listener) {\n        const responseStream = this.socket.events.map(toJsonRpcResponse);\n        // this should unsubscribe itself, so doesn't need to be removed explicitly\n        const idSubscription = responseStream\n            .filter((response) => response.id === this.request.id)\n            .subscribe({\n            next: (response) => {\n                if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n                    this.closeSubscriptions();\n                    listener.error(JSON.stringify(response.error));\n                }\n                idSubscription.unsubscribe();\n            },\n        });\n        // this will fire on a response (success or error)\n        // Tendermint adds an \"#event\" suffix for events that follow a previous subscription\n        // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107\n        const idEventSubscription = responseStream\n            .filter((response) => response.id === this.request.id)\n            .subscribe({\n            next: (response) => {\n                if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n                    this.closeSubscriptions();\n                    listener.error(JSON.stringify(response.error));\n                }\n                else {\n                    listener.next(response.result);\n                }\n            },\n        });\n        // this will fire in case the websocket disconnects cleanly\n        const nonResponseSubscription = responseStream.subscribe({\n            error: (error) => {\n                this.closeSubscriptions();\n                listener.error(error);\n            },\n            complete: () => {\n                this.closeSubscriptions();\n                listener.complete();\n            },\n        });\n        this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);\n    }\n    closeSubscriptions() {\n        for (const subscription of this.subscriptions) {\n            subscription.unsubscribe();\n        }\n        // clear unused subscriptions\n        this.subscriptions = [];\n    }\n}\nclass WebsocketClient {\n    constructor(baseUrl, onError = defaultErrorHandler) {\n        // Lazily create streams and use the same stream when listening to the same query twice.\n        //\n        // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this\n        // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!\n        this.subscriptionStreams = new Map();\n        // accept host.name:port and assume ws protocol\n        // make sure we don't end up with ...//websocket\n        const path = baseUrl.endsWith(\"/\") ? \"websocket\" : \"/websocket\";\n        const cleanBaseUrl = (0, rpcclient_1.hasProtocol)(baseUrl) ? baseUrl : \"ws://\" + baseUrl;\n        this.url = cleanBaseUrl + path;\n        this.socket = new socket_1.ReconnectingSocket(this.url);\n        const errorSubscription = this.socket.events.subscribe({\n            error: (error) => {\n                onError(error);\n                errorSubscription.unsubscribe();\n            },\n        });\n        this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);\n        this.socket.connect();\n    }\n    async execute(request) {\n        const pendingResponse = this.responseForRequestId(request.id);\n        this.socket.queueRequest(JSON.stringify(request));\n        const response = await pendingResponse;\n        if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            throw new Error(JSON.stringify(response.error));\n        }\n        return response;\n    }\n    listen(request) {\n        if (request.method !== \"subscribe\") {\n            throw new Error(`Request method must be \"subscribe\" to start event listening`);\n        }\n        const query = request.params.query;\n        if (typeof query !== \"string\") {\n            throw new Error(\"request.params.query must be a string\");\n        }\n        if (!this.subscriptionStreams.has(query)) {\n            const producer = new RpcEventProducer(request, this.socket);\n            const stream = xstream_1.Stream.create(producer);\n            this.subscriptionStreams.set(query, stream);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.subscriptionStreams.get(query).filter((response) => response.query !== undefined);\n    }\n    /**\n     * Resolves as soon as websocket is connected. execute() queues requests automatically,\n     * so this should be required for testing purposes only.\n     */\n    async connected() {\n        await this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);\n    }\n    disconnect() {\n        this.socket.disconnect();\n    }\n    async responseForRequestId(id) {\n        return (0, stream_1.firstEvent)(this.jsonRpcResponseStream.filter((r) => r.id === id));\n    }\n}\nexports.WebsocketClient = WebsocketClient;\n//# sourceMappingURL=websocketclient.js.map"]},"metadata":{},"sourceType":"script"}