{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"../../boc\"),\n  Cell = _require.Cell;\nvar _require2 = require(\"../../utils\"),\n  Address = _require2.Address,\n  BN = _require2.BN,\n  toNano = _require2.toNano,\n  bytesToHex = _require2.bytesToHex,\n  hexToBytes = _require2.hexToBytes,\n  nacl = _require2.nacl,\n  stringToBytes = _require2.stringToBytes,\n  bytesToBase64 = _require2.bytesToBase64,\n  base64ToBytes = _require2.base64ToBytes;\nvar _require3 = require(\"../index.js\"),\n  Contract = _require3.Contract;\nvar _require4 = require(\"../wallet/WalletContract\"),\n  WalletContract = _require4.WalletContract;\nvar WALLET_ID_BASE = 698983191;\nvar LockupWalletV1 = /*#__PURE__*/function (_WalletContract) {\n  \"use strict\";\n\n  _inherits(LockupWalletV1, _WalletContract);\n  var _super = _createSuper(LockupWalletV1);\n  /**\n   * @param provider    {HttpProvider}\n   * @param options {{publicKey?: Uint8Array, address?: Address | string, wc?: number, config: any}}\n   *\n   * Config json is {config}\n   */\n  function LockupWalletV1(provider, options) {\n    var _this;\n    _classCallCheck(this, LockupWalletV1);\n    // options.config:\n    // {\n    //     wallet_type: \"lockup-0.1\",\n    //     config_pubkey: <base64-encoded pubkey>,\n    //     allowed_destinations: [ \"addr1\", \"addr2\", ... ]\n    // }\n\n    options.code = Cell.oneFromBocn    _this = _super.call(this, provider, options);\n    if (!_this.options.walletId) _this.options.walletId = WALLET_ID_BASE + _this.options.wc;\n    _this.methods.getPublicKey = _this.getPublicKey.bind(_assertThisInitialized(_this));\n    _this.methods.getWalletId = _this.getWalletId.bind(_assertThisInitialized(_this));\n    _this.methods.getLiquidBalance = _this.getLiquidBalance.bind(_assertThisInitialized(_this));\n    _this.methods.getNominalRestrictedBalance = _this.getNominalRestrictedBalance.bind(_assertThisInitialized(_this));\n    _this.methods.getNominalLockedBalance = _this.getNominalLockedBalance.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(LockupWalletV1, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'lockup-0.1';\n    }\n\n    /**\n     * @override\n     * @private\n     * @param   seqno?   {number}\n     * @param   withoutOp? {boolean}\n     * @return {Cell}\n     */\n  }, {\n    key: \"createSigningMessage\",\n    value: function createSigningMessage(seqno, withoutOp) {\n      seqno = seqno || 0;\n      var message = new Cell();\n      message.bits.writeUint(this.options.walletId, 32);\n      if (seqno === 0) {\n        // message.bits.writeInt(-1, 32);// todo: dont work\n        for (var i = 0; i < 32; i++) {\n          message.bits.writeBit(1);\n        }\n      } else {\n        var date = new Date();\n        var timestamp = Math.floor(date.getTime() / 1e3);\n        message.bits.writeUint(timestamp + 60, 32);\n      }\n      message.bits.writeUint(seqno, 32);\n      return message;\n    }\n\n    /**\n     * @override\n     * @return {Cell} cell contains wallet data\n     */\n  }, {\n    key: \"createDataCell\",\n    value: function createDataCell() {\n      // from restricted.fc:\n      // .store_int(seqno, 32)\n      // .store_int(subwallet_id, 32)\n      // .store_uint(public_key, 256)\n      // .store_uint(config_public_key, 256)\n      // .store_dict(allowed_destinations)\n      // .store_grams(total_locked_value)\n      // .store_dict(locked)\n      // .store_grams(total_restricted_value)\n      // .store_dict(restricted).end_cell();\n\n      var cell = new Cell();\n      cell.bits.writeUint(0, 32); // seqno\n      cell.bits.writeUint(this.options.walletId, 32);\n      cell.bits.writeBytes(this.options.publicKey);\n\n      // TODO: write config.config_public_key (need to sort out encoding - the params come in base64),\n      // TODO: write the dict of allowed destinations (address is a key to an empty value).\n      cell.bits.writeBytes(base64ToBytes(this.options.config.config_public_key));\n      if (this.options.config.allowed_destinations) {\n        cell.bits.writeUint(1, 1);\n        cell.refs.push(Cell.oneFromBoc(base64ToBytes(this.options.config.allowed_destinations)));\n      } else {\n        cell.bits.writeUint(0, 1);\n      }\n      cell.bits.writeGrams(0); // .store_grams(total_locked_value)\n      cell.bits.writeUint(0, 1); // empty locked dict\n      cell.bits.writeGrams(0); // .store_grams(total_restricted_value)\n      cell.bits.writeUint(0, 1); // empty locked dict\n      return cell;\n    }\n\n    /**\n     * @return {Promise<number>}\n     */\n  }, {\n    key: \"getWalletId\",\n    value: function () {\n      var _getWalletId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var myAddress, id;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getAddress();\n              case 2:\n                myAddress = _context.sent;\n                _context.next = 5;\n                return this.provider.call2(myAddress.toString(), 'get_subwallet_id');\n              case 5:\n                id = _context.sent;\n                return _context.abrupt(\"return\", id.toNumber());\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getWalletId() {\n        return _getWalletId.apply(this, arguments);\n      }\n      return getWalletId;\n    }()\n    /**\n     * @return {Promise<BN>}\n     */\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var myAddress;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getAddress();\n              case 2:\n                myAddress = _context2.sent;\n                return _context2.abrupt(\"return\", this.provider.call2(myAddress.toString(), 'get_public_key'));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getPublicKey() {\n        return _getPublicKey.apply(this, arguments);\n      }\n      return getPublicKey;\n    }()\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent immediately.\n     */\n  }, {\n    key: \"getLiquidBalance\",\n    value: function () {\n      var _getLiquidBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var balances;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getBalances();\n              case 2:\n                balances = _context3.sent;\n                return _context3.abrupt(\"return\", balances[0] - balances[1] - balances[2]);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getLiquidBalance() {\n        return _getLiquidBalance.apply(this, arguments);\n      }\n      return getLiquidBalance;\n    }()\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock OR to the whitelisted addresses.\n     */\n  }, {\n    key: \"getNominalRestrictedBalance\",\n    value: function () {\n      var _getNominalRestrictedBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getBalances()[1];\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getNominalRestrictedBalance() {\n        return _getNominalRestrictedBalance.apply(this, arguments);\n      }\n      return getNominalRestrictedBalance;\n    }()\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock only (whitelisted addresses not used).\n     */\n  }, {\n    key: \"getNominalLockedBalance\",\n    value: function () {\n      var _getNominalLockedBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getBalances()[2];\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getNominalLockedBalance() {\n        return _getNominalLockedBalance.apply(this, arguments);\n      }\n      return getNominalLockedBalance;\n    }()\n    /**\n     * @return {Promise<[BN,BN,BN]>} Total amount of nanotoncoins on the contract,\n     * nominal restricted value\n     * nominal locked value\n     */\n  }, {\n    key: \"getBalances\",\n    value: function () {\n      var _getBalances = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var myAddress;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getAddress();\n              case 2:\n                myAddress = _context6.sent;\n                return _context6.abrupt(\"return\", this.provider.call2(myAddress.toString(), 'get_balances'));\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getBalances() {\n        return _getBalances.apply(this, arguments);\n      }\n      return getBalances;\n    }()\n  }]);\n  return LockupWalletV1;\n}(WalletContract);\nmodule.exports.default = {\n  LockupWalletV1: LockupWalletV1,\n  all: {\n    'lockup-0.1': LockupWalletV1\n  },\n  list: [LockupWalletV1]\n};","map":{"version":3,"names":["require","Cell","Address","BN","toNano","bytesToHex","hexToBytes","nacl","stringToBytes","bytesToBase64","base64ToBytes","Contract","WalletContract","WALLET_ID_BASE","LockupWalletV1","provider","options","code","oneFromBoc","walletId","wc","methods","getPublicKey","bind","getWalletId","getLiquidBalance","getNominalRestrictedBalance","getNominalLockedBalance","seqno","withoutOp","message","bits","writeUint","i","writeBit","date","Date","timestamp","Math","floor","getTime","cell","writeBytes","publicKey","config","config_public_key","allowed_destinations","refs","push","writeGrams","getAddress","myAddress","call2","toString","id","toNumber","getBalances","balances","module","exports","default","all","list"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/lockup/index.js"],"sourcesContent":["const {Cell} = require(\"../../boc\");\nconst {Address, BN, toNano, bytesToHex, hexToBytes, nacl, stringToBytes, bytesToBase64, base64ToBytes} = require(\"../../utils\");\nconst {Contract} = require(\"../index.js\");\nconst {WalletContract} = require(\"../wallet/WalletContract\");\n\nconst WALLET_ID_BASE = 698983191;\n\nclass LockupWalletV1 extends WalletContract {\n\n    /**\n     * @param provider    {HttpProvider}\n     * @param options {{publicKey?: Uint8Array, address?: Address | string, wc?: number, config: any}}\n     *\n     * Config json is {config}\n     */\n    constructor(provider, options) {\n        // options.config:\n        // {\n        //     wallet_type: \"lockup-0.1\",\n        //     config_pubkey: <base64-encoded pubkey>,\n        //     allowed_destinations: [ \"addr1\", \"addr2\", ... ]\n        // }\n\n        options.code = Cell.oneFromBocn        super(provider, options);\n        if (!this.options.walletId) this.options.walletId = WALLET_ID_BASE + this.options.wc;\n\n        this.methods.getPublicKey = this.getPublicKey.bind(this);\n        this.methods.getWalletId = this.getWalletId.bind(this);\n        this.methods.getLiquidBalance = this.getLiquidBalance.bind(this);\n        this.methods.getNominalRestrictedBalance = this.getNominalRestrictedBalance.bind(this);\n        this.methods.getNominalLockedBalance = this.getNominalLockedBalance.bind(this);\n    }\n\n    getName() {\n        return 'lockup-0.1';\n    }\n\n    /**\n     * @override\n     * @private\n     * @param   seqno?   {number}\n     * @param   withoutOp? {boolean}\n     * @return {Cell}\n     */\n    createSigningMessage(seqno, withoutOp) {\n        seqno = seqno || 0;\n        const message = new Cell();\n        message.bits.writeUint(this.options.walletId, 32);\n        if (seqno === 0) {\n            // message.bits.writeInt(-1, 32);// todo: dont work\n            for (let i = 0; i < 32; i++) {\n                message.bits.writeBit(1);\n            }\n        } else {\n            const date = new Date();\n            const timestamp = Math.floor(date.getTime() / 1e3);\n            message.bits.writeUint(timestamp + 60, 32);\n        }\n        message.bits.writeUint(seqno, 32);\n        return message;\n    }\n\n    /**\n     * @override\n     * @return {Cell} cell contains wallet data\n     */\n    createDataCell() {\n        // from restricted.fc:\n        // .store_int(seqno, 32)\n        // .store_int(subwallet_id, 32)\n        // .store_uint(public_key, 256)\n        // .store_uint(config_public_key, 256)\n        // .store_dict(allowed_destinations)\n        // .store_grams(total_locked_value)\n        // .store_dict(locked)\n        // .store_grams(total_restricted_value)\n        // .store_dict(restricted).end_cell();\n\n        const cell = new Cell();\n        cell.bits.writeUint(0, 32); // seqno\n        cell.bits.writeUint(this.options.walletId, 32);\n        cell.bits.writeBytes(this.options.publicKey);\n\n        // TODO: write config.config_public_key (need to sort out encoding - the params come in base64),\n        // TODO: write the dict of allowed destinations (address is a key to an empty value).\n        cell.bits.writeBytes(base64ToBytes(this.options.config.config_public_key));\n        if (this.options.config.allowed_destinations) {\n            cell.bits.writeUint(1, 1);\n            cell.refs.push(Cell.oneFromBoc(base64ToBytes(this.options.config.allowed_destinations)));\n        } else {\n            cell.bits.writeUint(0, 1);\n        }\n\n        cell.bits.writeGrams(0);   // .store_grams(total_locked_value)\n        cell.bits.writeUint(0, 1); // empty locked dict\n        cell.bits.writeGrams(0);   // .store_grams(total_restricted_value)\n        cell.bits.writeUint(0, 1); // empty locked dict\n        return cell;\n    }\n\n    /**\n     * @return {Promise<number>}\n     */\n    async getWalletId() {\n        const myAddress = await this.getAddress();\n        const id = await this.provider.call2(myAddress.toString(), 'get_subwallet_id');\n        return id.toNumber();\n    }\n\n    /**\n     * @return {Promise<BN>}\n     */\n    async getPublicKey() {\n        const myAddress = await this.getAddress();\n        return this.provider.call2(myAddress.toString(), 'get_public_key');\n    }\n\n\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent immediately.\n     */\n    async getLiquidBalance() {\n        const balances = await this.getBalances();\n        return balances[0]-balances[1]-balances[2];\n    }\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock OR to the whitelisted addresses.\n     */\n     async getNominalRestrictedBalance() {\n        return await this.getBalances()[1];\n    }\n\n    /**\n     * @return {Promise<BN>} Amount of nanotoncoins that can be spent after the timelock only (whitelisted addresses not used).\n     */\n     async getNominalLockedBalance() {\n        return await this.getBalances()[2];\n    }\n    /**\n     * @return {Promise<[BN,BN,BN]>} Total amount of nanotoncoins on the contract,\n     * nominal restricted value\n     * nominal locked value\n     */\n     async getBalances() {\n        const myAddress = await this.getAddress();\n        return this.provider.call2(myAddress.toString(), 'get_balances');\n    }\n}\n\nmodule.exports.default = {\n    LockupWalletV1,\n    all: {\n        'lockup-0.1': LockupWalletV1,\n    },\n    list: [LockupWalletV1]\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}