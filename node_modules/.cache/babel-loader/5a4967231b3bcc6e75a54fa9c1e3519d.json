{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NO_IL = exports.NO = exports.MemoryStream = exports.Stream = void 0;\nvar ponyfill_1 = require(\"symbol-observable/ponyfill\");\nvar globalthis_1 = require(\"globalthis\");\nvar $$observable = ponyfill_1.default(globalthis_1.getPolyfill());\nvar NO = {};\nexports.NO = NO;\nfunction noop() {}\nfunction cp(a) {\n  var l = a.length;\n  var b = Array(l);\n  for (var i = 0; i < l; ++i) {\n    b[i] = a[i];\n  }\n  return b;\n}\nfunction and(f1, f2) {\n  return function andFn(t) {\n    return f1(t) && f2(t);\n  };\n}\nfunction _try(c, t, u) {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\nvar NO_IL = {\n  _n: noop,\n  _e: noop,\n  _c: noop\n};\nexports.NO_IL = NO_IL;\n// mutates the input\nfunction internalizeProducer(producer) {\n  producer._start = function _start(il) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il);\n  };\n  producer._stop = producer.stop;\n}\nvar StreamSub = /** @class */function () {\n  function StreamSub(_stream, _listener) {\n    this._stream = _stream;\n    this._listener = _listener;\n  }\n  StreamSub.prototype.unsubscribe = function () {\n    this._stream._remove(this._listener);\n  };\n  return StreamSub;\n}();\nvar Observer = /** @class */function () {\n  function Observer(_listener) {\n    this._listener = _listener;\n  }\n  Observer.prototype.next = function (value) {\n    this._listener._n(value);\n  };\n  Observer.prototype.error = function (err) {\n    this._listener._e(err);\n  };\n  Observer.prototype.complete = function () {\n    this._listener._c();\n  };\n  return Observer;\n}();\nvar FromObservable = /** @class */function () {\n  function FromObservable(observable) {\n    this.type = 'fromObservable';\n    this.ins = observable;\n    this.active = false;\n  }\n  FromObservable.prototype._start = function (out) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  };\n  FromObservable.prototype._stop = function () {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  };\n  return FromObservable;\n}();\nvar Merge = /** @class */function () {\n  function Merge(insArr) {\n    this.type = 'merge';\n    this.insArr = insArr;\n    this.out = NO;\n    this.ac = 0;\n  }\n  Merge.prototype._start = function (out) {\n    this.out = out;\n    var s = this.insArr;\n    var L = s.length;\n    this.ac = L;\n    for (var i = 0; i < L; i++) {\n      s[i]._add(this);\n    }\n  };\n  Merge.prototype._stop = function () {\n    var s = this.insArr;\n    var L = s.length;\n    for (var i = 0; i < L; i++) {\n      s[i]._remove(this);\n    }\n    this.out = NO;\n  };\n  Merge.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  };\n  Merge.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Merge.prototype._c = function () {\n    if (--this.ac <= 0) {\n      var u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  };\n  return Merge;\n}();\nvar CombineListener = /** @class */function () {\n  function CombineListener(i, out, p) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n  CombineListener.prototype._n = function (t) {\n    var p = this.p,\n      out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      var b = cp(p.vals);\n      out._n(b);\n    }\n  };\n  CombineListener.prototype._e = function (err) {\n    var out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  };\n  CombineListener.prototype._c = function () {\n    var p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  };\n  return CombineListener;\n}();\nvar Combine = /** @class */function () {\n  function Combine(insArr) {\n    this.type = 'combine';\n    this.insArr = insArr;\n    this.out = NO;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n  Combine.prototype.up = function (t, i) {\n    var v = this.vals[i];\n    var Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  };\n  Combine.prototype._start = function (out) {\n    this.out = out;\n    var s = this.insArr;\n    var n = this.Nc = this.Nn = s.length;\n    var vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (var i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  };\n  Combine.prototype._stop = function () {\n    var s = this.insArr;\n    var n = s.length;\n    var ils = this.ils;\n    for (var i = 0; i < n; i++) {\n      s[i]._remove(ils[i]);\n    }\n    this.out = NO;\n    this.ils = [];\n    this.vals = [];\n  };\n  return Combine;\n}();\nvar FromArray = /** @class */function () {\n  function FromArray(a) {\n    this.type = 'fromArray';\n    this.a = a;\n  }\n  FromArray.prototype._start = function (out) {\n    var a = this.a;\n    for (var i = 0, n = a.length; i < n; i++) {\n      out._n(a[i]);\n    }\n    out._c();\n  };\n  FromArray.prototype._stop = function () {};\n  return FromArray;\n}();\nvar FromPromise = /** @class */function () {\n  function FromPromise(p) {\n    this.type = 'fromPromise';\n    this.on = false;\n    this.p = p;\n  }\n  FromPromise.prototype._start = function (out) {\n    var prod = this;\n    this.on = true;\n    this.p.then(function (v) {\n      if (prod.on) {\n        out._n(v);\n        out._c();\n      }\n    }, function (e) {\n      out._e(e);\n    }).then(noop, function (err) {\n      setTimeout(function () {\n        throw err;\n      });\n    });\n  };\n  FromPromise.prototype._stop = function () {\n    this.on = false;\n  };\n  return FromPromise;\n}();\nvar Periodic = /** @class */function () {\n  function Periodic(period) {\n    this.type = 'periodic';\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n  Periodic.prototype._start = function (out) {\n    var self = this;\n    function intervalHandler() {\n      out._n(self.i++);\n    }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  };\n  Periodic.prototype._stop = function () {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  };\n  return Periodic;\n}();\nvar Debug = /** @class */function () {\n  function Debug(ins, arg) {\n    this.type = 'debug';\n    this.ins = ins;\n    this.out = NO;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg;else if (typeof arg === 'function') this.s = arg;\n  }\n  Debug.prototype._start = function (out) {\n    this.out = out;\n    this.ins._add(this);\n  };\n  Debug.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  Debug.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var s = this.s,\n      l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t);else console.log(t);\n    u._n(t);\n  };\n  Debug.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Debug.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return Debug;\n}();\nvar Drop = /** @class */function () {\n  function Drop(max, ins) {\n    this.type = 'drop';\n    this.ins = ins;\n    this.out = NO;\n    this.max = max;\n    this.dropped = 0;\n  }\n  Drop.prototype._start = function (out) {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  };\n  Drop.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  Drop.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  };\n  Drop.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Drop.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return Drop;\n}();\nvar EndWhenListener = /** @class */function () {\n  function EndWhenListener(out, op) {\n    this.out = out;\n    this.op = op;\n  }\n  EndWhenListener.prototype._n = function () {\n    this.op.end();\n  };\n  EndWhenListener.prototype._e = function (err) {\n    this.out._e(err);\n  };\n  EndWhenListener.prototype._c = function () {\n    this.op.end();\n  };\n  return EndWhenListener;\n}();\nvar EndWhen = /** @class */function () {\n  function EndWhen(o, ins) {\n    this.type = 'endWhen';\n    this.ins = ins;\n    this.out = NO;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n  EndWhen.prototype._start = function (out) {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  };\n  EndWhen.prototype._stop = function () {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO;\n    this.oil = NO_IL;\n  };\n  EndWhen.prototype.end = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  EndWhen.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  };\n  EndWhen.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  EndWhen.prototype._c = function () {\n    this.end();\n  };\n  return EndWhen;\n}();\nvar Filter = /** @class */function () {\n  function Filter(passes, ins) {\n    this.type = 'filter';\n    this.ins = ins;\n    this.out = NO;\n    this.f = passes;\n  }\n  Filter.prototype._start = function (out) {\n    this.out = out;\n    this.ins._add(this);\n  };\n  Filter.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  Filter.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  };\n  Filter.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Filter.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return Filter;\n}();\nvar FlattenListener = /** @class */function () {\n  function FlattenListener(out, op) {\n    this.out = out;\n    this.op = op;\n  }\n  FlattenListener.prototype._n = function (t) {\n    this.out._n(t);\n  };\n  FlattenListener.prototype._e = function (err) {\n    this.out._e(err);\n  };\n  FlattenListener.prototype._c = function () {\n    this.op.inner = NO;\n    this.op.less();\n  };\n  return FlattenListener;\n}();\nvar Flatten = /** @class */function () {\n  function Flatten(ins) {\n    this.type = 'flatten';\n    this.ins = ins;\n    this.out = NO;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n  }\n  Flatten.prototype._start = function (out) {\n    this.out = out;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n    this.ins._add(this);\n  };\n  Flatten.prototype._stop = function () {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n  };\n  Flatten.prototype.less = function () {\n    var u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  };\n  Flatten.prototype._n = function (s) {\n    var u = this.out;\n    if (u === NO) return;\n    var _a = this,\n      inner = _a.inner,\n      il = _a.il;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  };\n  Flatten.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Flatten.prototype._c = function () {\n    this.open = false;\n    this.less();\n  };\n  return Flatten;\n}();\nvar Fold = /** @class */function () {\n  function Fold(f, seed, ins) {\n    var _this = this;\n    this.type = 'fold';\n    this.ins = ins;\n    this.out = NO;\n    this.f = function (t) {\n      return f(_this.acc, t);\n    };\n    this.acc = this.seed = seed;\n  }\n  Fold.prototype._start = function (out) {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  };\n  Fold.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n    this.acc = this.seed;\n  };\n  Fold.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r);\n  };\n  Fold.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Fold.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return Fold;\n}();\nvar Last = /** @class */function () {\n  function Last(ins) {\n    this.type = 'last';\n    this.ins = ins;\n    this.out = NO;\n    this.has = false;\n    this.val = NO;\n  }\n  Last.prototype._start = function (out) {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  };\n  Last.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n    this.val = NO;\n  };\n  Last.prototype._n = function (t) {\n    this.has = true;\n    this.val = t;\n  };\n  Last.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Last.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  };\n  return Last;\n}();\nvar MapOp = /** @class */function () {\n  function MapOp(project, ins) {\n    this.type = 'map';\n    this.ins = ins;\n    this.out = NO;\n    this.f = project;\n  }\n  MapOp.prototype._start = function (out) {\n    this.out = out;\n    this.ins._add(this);\n  };\n  MapOp.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  MapOp.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r);\n  };\n  MapOp.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  MapOp.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return MapOp;\n}();\nvar Remember = /** @class */function () {\n  function Remember(ins) {\n    this.type = 'remember';\n    this.ins = ins;\n    this.out = NO;\n  }\n  Remember.prototype._start = function (out) {\n    this.out = out;\n    this.ins._add(out);\n  };\n  Remember.prototype._stop = function () {\n    this.ins._remove(this.out);\n    this.out = NO;\n  };\n  return Remember;\n}();\nvar ReplaceError = /** @class */function () {\n  function ReplaceError(replacer, ins) {\n    this.type = 'replaceError';\n    this.ins = ins;\n    this.out = NO;\n    this.f = replacer;\n  }\n  ReplaceError.prototype._start = function (out) {\n    this.out = out;\n    this.ins._add(this);\n  };\n  ReplaceError.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  ReplaceError.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  };\n  ReplaceError.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  };\n  ReplaceError.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return ReplaceError;\n}();\nvar StartWith = /** @class */function () {\n  function StartWith(ins, val) {\n    this.type = 'startWith';\n    this.ins = ins;\n    this.out = NO;\n    this.val = val;\n  }\n  StartWith.prototype._start = function (out) {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  };\n  StartWith.prototype._stop = function () {\n    this.ins._remove(this.out);\n    this.out = NO;\n  };\n  return StartWith;\n}();\nvar Take = /** @class */function () {\n  function Take(max, ins) {\n    this.type = 'take';\n    this.ins = ins;\n    this.out = NO;\n    this.max = max;\n    this.taken = 0;\n  }\n  Take.prototype._start = function (out) {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c();else this.ins._add(this);\n  };\n  Take.prototype._stop = function () {\n    this.ins._remove(this);\n    this.out = NO;\n  };\n  Take.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var m = ++this.taken;\n    if (m < this.max) u._n(t);else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  };\n  Take.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  };\n  Take.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n    u._c();\n  };\n  return Take;\n}();\nvar Stream = /** @class */function () {\n  function Stream(producer) {\n    this._prod = producer || NO;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO;\n    this._d = false;\n    this._target = null;\n    this._err = NO;\n  }\n  Stream.prototype._n = function (t) {\n    var a = this._ils;\n    var L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t);else if (L == 0) return;else {\n      var b = cp(a);\n      for (var i = 0; i < L; i++) {\n        b[i]._n(t);\n      }\n    }\n  };\n  Stream.prototype._e = function (err) {\n    if (this._err !== NO) return;\n    this._err = err;\n    var a = this._ils;\n    var L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err);else if (L == 0) return;else {\n      var b = cp(a);\n      for (var i = 0; i < L; i++) {\n        b[i]._e(err);\n      }\n    }\n    if (!this._d && L == 0) throw this._err;\n  };\n  Stream.prototype._c = function () {\n    var a = this._ils;\n    var L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c();else if (L == 0) return;else {\n      var b = cp(a);\n      for (var i = 0; i < L; i++) {\n        b[i]._c();\n      }\n    }\n  };\n  Stream.prototype._x = function () {\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  };\n  Stream.prototype._stopNow = function () {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  };\n  Stream.prototype._add = function (il) {\n    var ta = this._target;\n    if (ta) return ta._add(il);\n    var a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      var p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  };\n  Stream.prototype._remove = function (il) {\n    var _this = this;\n    var ta = this._target;\n    if (ta) return ta._remove(il);\n    var a = this._ils;\n    var i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(function () {\n          return _this._stopNow();\n        });\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  };\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  Stream.prototype._pruneCycles = function () {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  };\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  Stream.prototype._hasNoSinks = function (x, trace) {\n    if (trace.indexOf(x) !== -1) return true;else if (x.out === this) return true;else if (x.out && x.out !== NO) return this._hasNoSinks(x.out, trace.concat(x));else if (x._ils) {\n      for (var i = 0, N = x._ils.length; i < N; i++) {\n        if (!this._hasNoSinks(x._ils[i], trace.concat(x))) return false;\n      }\n      return true;\n    } else return false;\n  };\n  Stream.prototype.ctor = function () {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  };\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  Stream.prototype.addListener = function (listener) {\n    listener._n = listener.next || noop;\n    listener._e = listener.error || noop;\n    listener._c = listener.complete || noop;\n    this._add(listener);\n  };\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  Stream.prototype.removeListener = function (listener) {\n    this._remove(listener);\n  };\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  Stream.prototype.subscribe = function (listener) {\n    this.addListener(listener);\n    return new StreamSub(this, listener);\n  };\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  Stream.prototype[$$observable] = function () {\n    return this;\n  };\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  Stream.create = function (producer) {\n    if (producer) {\n      if (typeof producer.start !== 'function' || typeof producer.stop !== 'function') throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n\n    return new Stream(producer);\n  };\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  Stream.createWithMemory = function (producer) {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream(producer);\n  };\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  Stream.never = function () {\n    return new Stream({\n      _start: noop,\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  Stream.empty = function () {\n    return new Stream({\n      _start: function _start(il) {\n        il._c();\n      },\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  Stream.throw = function (error) {\n    return new Stream({\n      _start: function _start(il) {\n        il._e(error);\n      },\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  Stream.from = function (input) {\n    if (typeof input[$$observable] === 'function') return Stream.fromObservable(input);else if (typeof input.then === 'function') return Stream.fromPromise(input);else if (Array.isArray(input)) return Stream.fromArray(input);\n    throw new TypeError(\"Type of input to from() must be an Array, Promise, or Observable\");\n  };\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  Stream.of = function () {\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      items[_i] = arguments[_i];\n    }\n    return Stream.fromArray(items);\n  };\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  Stream.fromArray = function (array) {\n    return new Stream(new FromArray(array));\n  };\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  Stream.fromPromise = function (promise) {\n    return new Stream(new FromPromise(promise));\n  };\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  Stream.fromObservable = function (obs) {\n    if (obs.endWhen !== undefined) return obs;\n    var o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream(new FromObservable(o));\n  };\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  Stream.periodic = function (period) {\n    return new Stream(new Periodic(period));\n  };\n  Stream.prototype._map = function (project) {\n    return new (this.ctor())(new MapOp(project, this));\n  };\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  Stream.prototype.map = function (project) {\n    return this._map(project);\n  };\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  Stream.prototype.mapTo = function (projectedValue) {\n    var s = this.map(function () {\n      return projectedValue;\n    });\n    var op = s._prod;\n    op.type = 'mapTo';\n    return s;\n  };\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  Stream.prototype.filter = function (passes) {\n    var p = this._prod;\n    if (p instanceof Filter) return new Stream(new Filter(and(p.f, passes), p.ins));\n    return new Stream(new Filter(passes, this));\n  };\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  Stream.prototype.take = function (amount) {\n    return new (this.ctor())(new Take(amount, this));\n  };\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  Stream.prototype.drop = function (amount) {\n    return new Stream(new Drop(amount, this));\n  };\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  Stream.prototype.last = function () {\n    return new Stream(new Last(this));\n  };\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  Stream.prototype.startWith = function (initial) {\n    return new MemoryStream(new StartWith(this, initial));\n  };\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  Stream.prototype.endWhen = function (other) {\n    return new (this.ctor())(new EndWhen(other, this));\n  };\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  Stream.prototype.fold = function (accumulate, seed) {\n    return new MemoryStream(new Fold(accumulate, seed, this));\n  };\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  Stream.prototype.replaceError = function (replace) {\n    return new (this.ctor())(new ReplaceError(replace, this));\n  };\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  Stream.prototype.flatten = function () {\n    return new Stream(new Flatten(this));\n  };\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  Stream.prototype.compose = function (operator) {\n    return operator(this);\n  };\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  Stream.prototype.remember = function () {\n    return new MemoryStream(new Remember(this));\n  };\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  Stream.prototype.debug = function (labelOrSpy) {\n    return new (this.ctor())(new Debug(this, labelOrSpy));\n  };\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  Stream.prototype.imitate = function (target) {\n    if (target instanceof MemoryStream) throw new Error('A MemoryStream was given to imitate(), but it only ' + 'supports a Stream. Read more about this restriction here: ' + 'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (var ils = this._ils, N = ils.length, i = 0; i < N; i++) {\n      target._add(ils[i]);\n    }\n    this._ils = [];\n  };\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  Stream.prototype.shamefullySendNext = function (value) {\n    this._n(value);\n  };\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  Stream.prototype.shamefullySendError = function (error) {\n    this._e(error);\n  };\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  Stream.prototype.shamefullySendComplete = function () {\n    this._c();\n  };\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  Stream.prototype.setDebugListener = function (listener) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO;\n    } else {\n      this._d = true;\n      listener._n = listener.next || noop;\n      listener._e = listener.error || noop;\n      listener._c = listener.complete || noop;\n      this._dl = listener;\n    }\n  };\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  Stream.merge = function merge() {\n    var streams = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      streams[_i] = arguments[_i];\n    }\n    return new Stream(new Merge(streams));\n  };\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  Stream.combine = function combine() {\n    var streams = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      streams[_i] = arguments[_i];\n    }\n    return new Stream(new Combine(streams));\n  };\n  return Stream;\n}();\nexports.Stream = Stream;\nvar MemoryStream = /** @class */function (_super) {\n  __extends(MemoryStream, _super);\n  function MemoryStream(producer) {\n    var _this = _super.call(this, producer) || this;\n    _this._has = false;\n    return _this;\n  }\n  MemoryStream.prototype._n = function (x) {\n    this._v = x;\n    this._has = true;\n    _super.prototype._n.call(this, x);\n  };\n  MemoryStream.prototype._add = function (il) {\n    var ta = this._target;\n    if (ta) return ta._add(il);\n    var a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v);else {\n      var p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  };\n  MemoryStream.prototype._stopNow = function () {\n    this._has = false;\n    _super.prototype._stopNow.call(this);\n  };\n  MemoryStream.prototype._x = function () {\n    this._has = false;\n    _super.prototype._x.call(this);\n  };\n  MemoryStream.prototype.map = function (project) {\n    return this._map(project);\n  };\n  MemoryStream.prototype.mapTo = function (projectedValue) {\n    return _super.prototype.mapTo.call(this, projectedValue);\n  };\n  MemoryStream.prototype.take = function (amount) {\n    return _super.prototype.take.call(this, amount);\n  };\n  MemoryStream.prototype.endWhen = function (other) {\n    return _super.prototype.endWhen.call(this, other);\n  };\n  MemoryStream.prototype.replaceError = function (replace) {\n    return _super.prototype.replaceError.call(this, replace);\n  };\n  MemoryStream.prototype.remember = function () {\n    return this;\n  };\n  MemoryStream.prototype.debug = function (labelOrSpy) {\n    return _super.prototype.debug.call(this, labelOrSpy);\n  };\n  return MemoryStream;\n}(Stream);\nexports.MemoryStream = MemoryStream;\nvar xs = Stream;\nexports.default = xs;","map":{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import ponyfillSymbolObservable from 'symbol-observable/ponyfill';\nimport { getPolyfill as getGlobalThis } from 'globalthis';\n\nconst $$observable = ponyfillSymbolObservable(getGlobalThis());\n\nconst NO = {};\nfunction noop() { }\n\nfunction cp<T>(a: Array<T>): Array<T> {\n  const l = a.length;\n  const b = Array(l);\n  for (let i = 0; i < l; ++i) b[i] = a[i];\n  return b;\n}\n\nfunction and<T>(f1: (t: T) => boolean, f2: (t: T) => boolean): (t: T) => boolean {\n  return function andFn(t: T): boolean {\n    return f1(t) && f2(t);\n  };\n}\n\ninterface FContainer<T, R> {\n  f(t: T): R;\n}\n\nfunction _try<T, R>(c: FContainer<T, R>, t: T, u: Stream<any>): R | {} {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\n\nexport interface InternalListener<T> {\n  _n: (v: T) => void;\n  _e: (err: any) => void;\n  _c: () => void;\n}\n\nconst NO_IL: InternalListener<any> = {\n  _n: noop,\n  _e: noop,\n  _c: noop,\n};\n\nexport interface InternalProducer<T> {\n  _start(listener: InternalListener<T>): void;\n  _stop: () => void;\n}\n\nexport interface OutSender<T> {\n  out: Stream<T>;\n}\n\nexport interface Operator<T, R> extends InternalProducer<R>, InternalListener<T>, OutSender<R> {\n  type: string;\n  ins: Stream<T>;\n  _start(out: Stream<R>): void;\n}\n\nexport interface Aggregator<T, U> extends InternalProducer<U>, OutSender<U> {\n  type: string;\n  insArr: Array<Stream<T>>;\n  _start(out: Stream<U>): void;\n}\n\nexport interface Producer<T> {\n  start: (listener: Listener<T>) => void;\n  stop: () => void;\n}\n\nexport interface Listener<T> {\n  next: (x: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\nexport interface Observable<T> {\n  subscribe(listener: Listener<T>): Subscription;\n}\n\n// mutates the input\nfunction internalizeProducer<T>(producer: Producer<T> & Partial<InternalProducer<T>>) {\n  producer._start = function _start(il: InternalListener<T> & Partial<Listener<T>>) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il as Listener<T>);\n  };\n  producer._stop = producer.stop;\n}\n\nclass StreamSub<T> implements Subscription {\n  constructor(private _stream: Stream<T>, private _listener: InternalListener<T>) { }\n\n  unsubscribe(): void {\n    this._stream._remove(this._listener);\n  }\n}\n\nclass Observer<T> implements Listener<T> {\n  constructor(private _listener: InternalListener<T>) { }\n\n  next(value: T) {\n    this._listener._n(value);\n  }\n\n  error(err: any) {\n    this._listener._e(err);\n  }\n\n  complete() {\n    this._listener._c();\n  }\n}\n\nclass FromObservable<T> implements InternalProducer<T> {\n  public type = 'fromObservable';\n  public ins: Observable<T>;\n  public out?: Stream<T>;\n  private active: boolean;\n  private _sub: Subscription | undefined;\n\n  constructor(observable: Observable<T>) {\n    this.ins = observable;\n    this.active = false;\n  }\n\n  _start(out: Stream<T>) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  }\n\n  _stop() {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  }\n}\n\nexport interface MergeSignature {\n  (): Stream<any>;\n  <T1>(s1: Stream<T1>): Stream<T1>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<T1 | T2>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<T1 | T2 | T3>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<T1 | T2 | T3 | T4>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<T1 | T2 | T3 | T4 | T5>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<T1 | T2 | T3 | T4 | T5 | T6>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;\n  <T>(...stream: Array<Stream<T>>): Stream<T>;\n}\n\nclass Merge<T> implements Aggregator<T, T>, InternalListener<T> {\n  public type = 'merge';\n  public insArr: Array<Stream<T>>;\n  public out: Stream<T>;\n  private ac: number; // ac is activeCount\n\n  constructor(insArr: Array<Stream<T>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<T>;\n    this.ac = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    const s = this.insArr;\n    const L = s.length;\n    this.ac = L;\n    for (let i = 0; i < L; i++) s[i]._add(this);\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const L = s.length;\n    for (let i = 0; i < L; i++) s[i]._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    if (--this.ac <= 0) {\n      const u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  }\n}\n\nexport interface CombineSignature {\n  (): Stream<Array<any>>;\n  <T1>(s1: Stream<T1>): Stream<[T1]>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<[T1, T2]>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<[T1, T2, T3]>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<[T1, T2, T3, T4]>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<[T1, T2, T3, T4, T5]>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<[T1, T2, T3, T4, T5, T6]>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<[T1, T2, T3, T4, T5, T6, T7]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n  <T>(...stream: Array<Stream<T>>): Stream<Array<T>>;\n  (...stream: Array<Stream<any>>): Stream<Array<any>>;\n}\n\nclass CombineListener<T> implements InternalListener<T>, OutSender<Array<T>> {\n  private i: number;\n  public out: Stream<Array<T>>;\n  private p: Combine<T>;\n\n  constructor(i: number, out: Stream<Array<T>>, p: Combine<T>) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  _n(t: T): void {\n    const p = this.p, out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      const b = cp(p.vals);\n      out._n(b);\n    }\n  }\n\n  _e(err: any): void {\n    const out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  }\n\n  _c(): void {\n    const p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  }\n}\n\nclass Combine<R> implements Aggregator<any, Array<R>> {\n  public type = 'combine';\n  public insArr: Array<Stream<any>>;\n  public out: Stream<Array<R>>;\n  public ils: Array<CombineListener<any>>;\n  public Nc: number; // *N*umber of streams still to send *c*omplete\n  public Nn: number; // *N*umber of streams still to send *n*ext\n  public vals: Array<R>;\n\n  constructor(insArr: Array<Stream<any>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  up(t: any, i: number): boolean {\n    const v = this.vals[i];\n    const Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  }\n\n  _start(out: Stream<Array<R>>): void {\n    this.out = out;\n    const s = this.insArr;\n    const n = this.Nc = this.Nn = s.length;\n    const vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (let i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const n = s.length;\n    const ils = this.ils;\n    for (let i = 0; i < n; i++) s[i]._remove(ils[i]);\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.vals = [];\n  }\n}\n\nclass FromArray<T> implements InternalProducer<T> {\n  public type = 'fromArray';\n  public a: Array<T>;\n\n  constructor(a: Array<T>) {\n    this.a = a;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const a = this.a;\n    for (let i = 0, n = a.length; i < n; i++) out._n(a[i]);\n    out._c();\n  }\n\n  _stop(): void {\n  }\n}\n\nclass FromPromise<T> implements InternalProducer<T> {\n  public type = 'fromPromise';\n  public on: boolean;\n  public p: PromiseLike<T>;\n\n  constructor(p: PromiseLike<T>) {\n    this.on = false;\n    this.p = p;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const prod = this;\n    this.on = true;\n    this.p.then(\n      (v: T) => {\n        if (prod.on) {\n          out._n(v);\n          out._c();\n        }\n      },\n      (e: any) => {\n        out._e(e);\n      },\n    ).then(noop, (err: any) => {\n      setTimeout(() => { throw err; });\n    });\n  }\n\n  _stop(): void {\n    this.on = false;\n  }\n}\n\nclass Periodic implements InternalProducer<number> {\n  public type = 'periodic';\n  public period: number;\n  private intervalID: any;\n  private i: number;\n\n  constructor(period: number) {\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  _start(out: InternalListener<number>): void {\n    const self = this;\n    function intervalHandler() { out._n(self.i++); }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  }\n\n  _stop(): void {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  }\n}\n\nclass Debug<T> implements Operator<T, T> {\n  public type = 'debug';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private s: (t: T) => any; // spy\n  private l: string; // label\n\n  constructor(ins: Stream<T>);\n  constructor(ins: Stream<T>, arg?: string);\n  constructor(ins: Stream<T>, arg?: (t: T) => any);\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any));\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any) | undefined) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg; else if (typeof arg === 'function') this.s = arg;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const s = this.s, l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t); else console.log(t);\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Drop<T> implements Operator<T, T> {\n  public type = 'drop';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private dropped: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass EndWhenListener<T> implements InternalListener<any> {\n  private out: Stream<T>;\n  private op: EndWhen<T>;\n\n  constructor(out: Stream<T>, op: EndWhen<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n() {\n    this.op.end();\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.end();\n  }\n}\n\nclass EndWhen<T> implements Operator<T, T> {\n  public type = 'endWhen';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public o: Stream<any>; // o = other\n  private oil: InternalListener<any>; // oil = other InternalListener\n\n  constructor(o: Stream<any>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO as Stream<T>;\n    this.oil = NO_IL;\n  }\n\n  end(): void {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.end();\n  }\n}\n\nclass Filter<T> implements Operator<T, T> {\n  public type = 'filter';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (t: T) => boolean;\n\n  constructor(passes: (t: T) => boolean, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = passes;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass FlattenListener<T> implements InternalListener<T> {\n  private out: Stream<T>;\n  private op: Flatten<T>;\n\n  constructor(out: Stream<T>, op: Flatten<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n(t: T) {\n    this.out._n(t);\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.inner = NO as Stream<T>;\n    this.op.less();\n  }\n}\n\nclass Flatten<T> implements Operator<Stream<T>, T> {\n  public type = 'flatten';\n  public ins: Stream<Stream<T>>;\n  public out: Stream<T>;\n  private open: boolean;\n  public inner: Stream<T>; // Current inner Stream\n  private il: InternalListener<T>; // Current inner InternalListener\n\n  constructor(ins: Stream<Stream<T>>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  less(): void {\n    const u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  }\n\n  _n(s: Stream<T>) {\n    const u = this.out;\n    if (u === NO) return;\n    const { inner, il } = this;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.open = false;\n    this.less();\n  }\n}\n\nclass Fold<T, R> implements Operator<T, R> {\n  public type = 'fold';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n  public seed: R;\n  private acc: R; // initialized as seed\n\n  constructor(f: (acc: R, t: T) => R, seed: R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = (t: T) => f(this.acc, t);\n    this.acc = this.seed = seed;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n    this.acc = this.seed;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Last<T> implements Operator<T, T> {\n  public type = 'last';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private has: boolean;\n  private val: T;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.has = false;\n    this.val = NO as T;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n    this.val = NO as T;\n  }\n\n  _n(t: T) {\n    this.has = true;\n    this.val = t;\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  }\n}\n\nclass MapOp<T, R> implements Operator<T, R> {\n  public type = 'map';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n\n  constructor(project: (t: T) => R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = project;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Remember<T> implements InternalProducer<T> {\n  public type = 'remember';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass ReplaceError<T> implements Operator<T, T> {\n  public type = 'replaceError';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (err: any) => Stream<T>;\n\n  constructor(replacer: (err: any) => Stream<T>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = replacer;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass StartWith<T> implements InternalProducer<T> {\n  public type = 'startWith';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public val: T;\n\n  constructor(ins: Stream<T>, val: T) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.val = val;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass Take<T> implements Operator<T, T> {\n  public type = 'take';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private taken: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c(); else this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const m = ++this.taken;\n    if (m < this.max) u._n(t); else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nexport class Stream<T> implements InternalListener<T> {\n  public _prod: InternalProducer<T>;\n  protected _ils: Array<InternalListener<T>>; // 'ils' = Internal listeners\n  protected _stopID: any;\n  protected _dl: InternalListener<T>; // the debug listener\n  protected _d: boolean; // flag indicating the existence of the debug listener\n  protected _target: Stream<T> | null; // imitation target if this Stream will imitate\n  protected _err: any;\n\n  constructor(producer?: InternalProducer<T>) {\n    this._prod = producer || NO as InternalProducer<T>;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO as InternalListener<T>;\n    this._d = false;\n    this._target = null;\n    this._err = NO;\n  }\n\n  _n(t: T): void {\n    const a = this._ils;\n    const L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._n(t);\n    }\n  }\n\n  _e(err: any): void {\n    if (this._err !== NO) return;\n    this._err = err;\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  }\n\n  _c(): void {\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c(); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._c();\n    }\n  }\n\n  _x(): void { // tear down logic, after error or complete\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  }\n\n  _stopNow() {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _remove(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._remove(il);\n    const a = this._ils;\n    const i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(() => this._stopNow());\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }\n\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  _pruneCycles() {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }\n\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  _hasNoSinks(x: InternalListener<any>, trace: Array<any>): boolean {\n    if (trace.indexOf(x) !== -1)\n      return true; else\n      if ((x as any as OutSender<any>).out === this)\n        return true; else\n        if ((x as any as OutSender<any>).out && (x as any as OutSender<any>).out !== NO)\n          return this._hasNoSinks((x as any as OutSender<any>).out, trace.concat(x)); else\n          if ((x as Stream<any>)._ils) {\n            for (let i = 0, N = (x as Stream<any>)._ils.length; i < N; i++)\n              if (!this._hasNoSinks((x as Stream<any>)._ils[i], trace.concat(x)))\n                return false;\n            return true;\n          } else return false;\n  }\n\n  private ctor(): typeof Stream {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  }\n\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  addListener(listener: Partial<Listener<T>>): void {\n    (listener as InternalListener<T>)._n = listener.next || noop;\n    (listener as InternalListener<T>)._e = listener.error || noop;\n    (listener as InternalListener<T>)._c = listener.complete || noop;\n    this._add(listener as InternalListener<T>);\n  }\n\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  removeListener(listener: Partial<Listener<T>>): void {\n    this._remove(listener as InternalListener<T>);\n  }\n\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  subscribe(listener: Partial<Listener<T>>): Subscription {\n    this.addListener(listener);\n    return new StreamSub<T>(this, listener as InternalListener<T>);\n  }\n\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  [$$observable](): Stream<T> {\n    return this;\n  }\n\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  static create<T>(producer?: Producer<T>): Stream<T> {\n    if (producer) {\n      if (typeof producer.start !== 'function'\n        || typeof producer.stop !== 'function')\n        throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n    return new Stream(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  static createWithMemory<T>(producer?: Producer<T>): MemoryStream<T> {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream<T>(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static never<T = any>(): Stream<T> {\n    return new Stream<T>({ _start: noop, _stop: noop });\n  }\n\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static empty<T = any>(): Stream<T> {\n    return new Stream<T>({\n      _start(il: InternalListener<any>) { il._c(); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  static throw(error: any): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._e(error); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  static from<T>(input: PromiseLike<T> | Stream<T> | Array<T> | Observable<T>): Stream<T> {\n    if (typeof input[$$observable] === 'function')\n      return Stream.fromObservable<T>(input as Observable<T>); else\n      if (typeof (input as PromiseLike<T>).then === 'function')\n        return Stream.fromPromise<T>(input as PromiseLike<T>); else\n        if (Array.isArray(input))\n          return Stream.fromArray<T>(input);\n\n    throw new TypeError(`Type of input to from() must be an Array, Promise, or Observable`);\n  }\n\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  static of<T>(...items: Array<T>): Stream<T> {\n    return Stream.fromArray<T>(items);\n  }\n\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromArray<T>(array: Array<T>): Stream<T> {\n    return new Stream<T>(new FromArray<T>(array));\n  }\n\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromPromise<T>(promise: PromiseLike<T>): Stream<T> {\n    return new Stream<T>(new FromPromise<T>(promise));\n  }\n\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromObservable<T>(obs: { subscribe: any }): Stream<T> {\n    if ((obs as Stream<T>).endWhen !== undefined) return obs as Stream<T>;\n    const o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream<T>(new FromObservable(o));\n  }\n\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  static periodic(period: number): Stream<number> {\n    return new Stream<number>(new Periodic(period));\n  }\n\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  static merge: MergeSignature = function merge(...streams: Array<Stream<any>>) {\n    return new Stream<any>(new Merge(streams));\n  } as MergeSignature;\n\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  static combine: CombineSignature = function combine(...streams: Array<Stream<any>>) {\n    return new Stream<Array<any>>(new Combine<any>(streams));\n  } as CombineSignature;\n\n  protected _map<U>(project: (t: T) => U): Stream<U> | MemoryStream<U> {\n    return new (this.ctor())<U>(new MapOp<T, U>(project, this));\n  }\n\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  map<U>(project: (t: T) => U): Stream<U> {\n    return this._map(project);\n  }\n\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  mapTo<U>(projectedValue: U): Stream<U> {\n    const s = this.map(() => projectedValue);\n    const op: Operator<T, U> = s._prod as Operator<T, U>;\n    op.type = 'mapTo';\n    return s;\n  }\n\n  filter<S extends T>(passes: (t: T) => t is S): Stream<S>;\n  filter(passes: (t: T) => boolean): Stream<T>;\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  filter(passes: (t: T) => boolean): Stream<T> {\n    const p = this._prod;\n    if (p instanceof Filter)\n      return new Stream<T>(new Filter<T>(\n        and((p as Filter<T>).f, passes),\n        (p as Filter<T>).ins\n      ));\n    return new Stream<T>(new Filter<T>(passes, this));\n  }\n\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  take(amount: number): Stream<T> {\n    return new (this.ctor())<T>(new Take<T>(amount, this));\n  }\n\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  drop(amount: number): Stream<T> {\n    return new Stream<T>(new Drop<T>(amount, this));\n  }\n\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  last(): Stream<T> {\n    return new Stream<T>(new Last<T>(this));\n  }\n\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  startWith(initial: T): MemoryStream<T> {\n    return new MemoryStream<T>(new StartWith<T>(this, initial));\n  }\n\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  endWhen(other: Stream<any>): Stream<T> {\n    return new (this.ctor())<T>(new EndWhen<T>(other, this));\n  }\n\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  fold<R>(accumulate: (acc: R, t: T) => R, seed: R): MemoryStream<R> {\n    return new MemoryStream<R>(new Fold<T, R>(accumulate, seed, this));\n  }\n\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  replaceError(replace: (err: any) => Stream<T>): Stream<T> {\n    return new (this.ctor())<T>(new ReplaceError<T>(replace, this));\n  }\n\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  flatten<R>(this: Stream<Stream<R> | MemoryStream<R>>): Stream<R> {\n    return new Stream<R>(new Flatten(this));\n  }\n\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  compose<U>(operator: (stream: Stream<T>) => U): U {\n    return operator(this);\n  }\n\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  remember(): MemoryStream<T> {\n    return new MemoryStream<T>(new Remember<T>(this));\n  }\n\n  debug(): Stream<T>;\n  debug(labelOrSpy: string): Stream<T>;\n  debug(labelOrSpy: (t: T) => any): Stream<T>;\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  debug(labelOrSpy?: string | ((t: T) => any)): Stream<T> {\n    return new (this.ctor())<T>(new Debug<T>(this, labelOrSpy));\n  }\n\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  imitate(target: Stream<T>): void {\n    if (target instanceof MemoryStream)\n      throw new Error('A MemoryStream was given to imitate(), but it only ' +\n        'supports a Stream. Read more about this restriction here: ' +\n        'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (let ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n    this._ils = [];\n  }\n\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  shamefullySendNext(value: T) {\n    this._n(value);\n  }\n\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  shamefullySendError(error: any) {\n    this._e(error);\n  }\n\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  shamefullySendComplete() {\n    this._c();\n  }\n\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  setDebugListener(listener: Partial<Listener<T>> | null | undefined) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO as InternalListener<T>;\n    } else {\n      this._d = true;\n      (listener as InternalListener<T>)._n = listener.next || noop;\n      (listener as InternalListener<T>)._e = listener.error || noop;\n      (listener as InternalListener<T>)._c = listener.complete || noop;\n      this._dl = listener as InternalListener<T>;\n    }\n  }\n}\n\nexport class MemoryStream<T> extends Stream<T> {\n  private _v?: T;\n  private _has?: boolean = false;\n  constructor(producer: InternalProducer<T>) {\n    super(producer);\n  }\n\n  _n(x: T) {\n    this._v = x;\n    this._has = true;\n    super._n(x);\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v!);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v!);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v!); else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _stopNow() {\n    this._has = false;\n    super._stopNow();\n  }\n\n  _x(): void {\n    this._has = false;\n    super._x();\n  }\n\n  map<U>(project: (t: T) => U): MemoryStream<U> {\n    return this._map(project) as MemoryStream<U>;\n  }\n\n  mapTo<U>(projectedValue: U): MemoryStream<U> {\n    return super.mapTo(projectedValue) as MemoryStream<U>;\n  }\n\n  take(amount: number): MemoryStream<T> {\n    return super.take(amount) as MemoryStream<T>;\n  }\n\n  endWhen(other: Stream<any>): MemoryStream<T> {\n    return super.endWhen(other) as MemoryStream<T>;\n  }\n\n  replaceError(replace: (err: any) => Stream<T>): MemoryStream<T> {\n    return super.replaceError(replace) as MemoryStream<T>;\n  }\n\n  remember(): MemoryStream<T> {\n    return this;\n  }\n\n  debug(): MemoryStream<T>;\n  debug(labelOrSpy: string): MemoryStream<T>;\n  debug(labelOrSpy: (t: T) => any): MemoryStream<T>;\n  debug(labelOrSpy?: string | ((t: T) => any) | undefined): MemoryStream<T> {\n    return super.debug(labelOrSpy as any) as MemoryStream<T>;\n  }\n}\n\nexport { NO, NO_IL };\nconst xs = Stream;\ntype xs<T> = Stream<T>;\nexport default xs;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}