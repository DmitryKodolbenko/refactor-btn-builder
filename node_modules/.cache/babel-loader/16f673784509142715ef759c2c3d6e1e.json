{"ast":null,"code":"import { constFalse, constTrue, flow, pipe } from './function';\nvar contramap_ = function (predicate, f) {\n  return pipe(predicate, contramap(f));\n};\n/**\n * @since 2.11.0\n */\nexport var contramap = function (f) {\n  return function (predicate) {\n    return flow(f, predicate);\n  };\n};\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport var URI = 'Predicate';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAny = function () {\n  return {\n    concat: function (first, second) {\n      return pipe(first, or(second));\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAny = function () {\n  return {\n    concat: getSemigroupAny().concat,\n    empty: constFalse\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAll = function () {\n  return {\n    concat: function (first, second) {\n      return pipe(first, and(second));\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAll = function () {\n  return {\n    concat: getSemigroupAll().concat,\n    empty: constTrue\n  };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Contravariant = {\n  URI: URI,\n  contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var not = function (predicate) {\n  return function (a) {\n    return !predicate(a);\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var or = function (second) {\n  return function (first) {\n    return function (a) {\n      return first(a) || second(a);\n    };\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var and = function (second) {\n  return function (first) {\n    return function (a) {\n      return first(a) && second(a);\n    };\n  };\n};","map":{"version":3,"names":["constFalse","constTrue","flow","pipe","contramap_","predicate","f","contramap","URI","getSemigroupAny","concat","first","second","or","getMonoidAny","empty","getSemigroupAll","and","getMonoidAll","Contravariant","not","a"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/fp-ts/es6/Predicate.js"],"sourcesContent":["import { constFalse, constTrue, flow, pipe } from './function';\nvar contramap_ = function (predicate, f) { return pipe(predicate, contramap(f)); };\n/**\n * @since 2.11.0\n */\nexport var contramap = function (f) {\n    return function (predicate) {\n        return flow(f, predicate);\n    };\n};\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport var URI = 'Predicate';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAny = function () { return ({\n    concat: function (first, second) { return pipe(first, or(second)); }\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAny = function () { return ({\n    concat: getSemigroupAny().concat,\n    empty: constFalse\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getSemigroupAll = function () { return ({\n    concat: function (first, second) { return pipe(first, and(second)); }\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getMonoidAll = function () { return ({\n    concat: getSemigroupAll().concat,\n    empty: constTrue\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var not = function (predicate) {\n    return function (a) {\n        return !predicate(a);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var or = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) || second(a);\n        };\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var and = function (second) {\n    return function (first) {\n        return function (a) {\n            return first(a) && second(a);\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,IAAI,EAAEC,IAAI,QAAQ,YAAY;AAC9D,IAAIC,UAAU,GAAG,UAAUC,SAAS,EAAEC,CAAC,EAAE;EAAE,OAAOH,IAAI,CAACE,SAAS,EAAEE,SAAS,CAACD,CAAC,CAAC,CAAC;AAAE,CAAC;AAClF;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAG,UAAUD,CAAC,EAAE;EAChC,OAAO,UAAUD,SAAS,EAAE;IACxB,OAAOH,IAAI,CAACI,CAAC,EAAED,SAAS,CAAC;EAC7B,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,IAAIG,GAAG,GAAG,WAAW;AAC5B;AACA;AACA;AACA;AACA,OAAO,IAAIC,eAAe,GAAG,YAAY;EAAE,OAAQ;IAC/CC,MAAM,EAAE,UAAUC,KAAK,EAAEC,MAAM,EAAE;MAAE,OAAOT,IAAI,CAACQ,KAAK,EAAEE,EAAE,CAACD,MAAM,CAAC,CAAC;IAAE;EACvE,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,IAAIE,YAAY,GAAG,YAAY;EAAE,OAAQ;IAC5CJ,MAAM,EAAED,eAAe,EAAE,CAACC,MAAM;IAChCK,KAAK,EAAEf;EACX,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,IAAIgB,eAAe,GAAG,YAAY;EAAE,OAAQ;IAC/CN,MAAM,EAAE,UAAUC,KAAK,EAAEC,MAAM,EAAE;MAAE,OAAOT,IAAI,CAACQ,KAAK,EAAEM,GAAG,CAACL,MAAM,CAAC,CAAC;IAAE;EACxE,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,IAAIM,YAAY,GAAG,YAAY;EAAE,OAAQ;IAC5CR,MAAM,EAAEM,eAAe,EAAE,CAACN,MAAM;IAChCK,KAAK,EAAEd;EACX,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,IAAIkB,aAAa,GAAG;EACvBX,GAAG,EAAEA,GAAG;EACRD,SAAS,EAAEH;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIgB,GAAG,GAAG,UAAUf,SAAS,EAAE;EAClC,OAAO,UAAUgB,CAAC,EAAE;IAChB,OAAO,CAAChB,SAAS,CAACgB,CAAC,CAAC;EACxB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIR,EAAE,GAAG,UAAUD,MAAM,EAAE;EAC9B,OAAO,UAAUD,KAAK,EAAE;IACpB,OAAO,UAAUU,CAAC,EAAE;MAChB,OAAOV,KAAK,CAACU,CAAC,CAAC,IAAIT,MAAM,CAACS,CAAC,CAAC;IAChC,CAAC;EACL,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIJ,GAAG,GAAG,UAAUL,MAAM,EAAE;EAC/B,OAAO,UAAUD,KAAK,EAAE;IACpB,OAAO,UAAUU,CAAC,EAAE;MAChB,OAAOV,KAAK,CAACU,CAAC,CAAC,IAAIT,MAAM,CAACS,CAAC,CAAC;IAChC,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module"}