{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxProof = exports.BlockMeta = exports.LightBlock = exports.SignedHeader = exports.Proposal = exports.CommitSig = exports.Commit = exports.Vote = exports.Data = exports.Header = exports.BlockID = exports.Part = exports.PartSetHeader = exports.signedMsgTypeToJSON = exports.signedMsgTypeFromJSON = exports.SignedMsgType = exports.blockIDFlagToJSON = exports.blockIDFlagFromJSON = exports.BlockIDFlag = exports.protobufPackage = void 0;\n/* eslint-disable */\nvar long_1 = __importDefault(require(\"long\"));\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nvar proof_1 = require(\"../../tendermint/crypto/proof\");\nvar types_1 = require(\"../../tendermint/version/types\");\nvar timestamp_1 = require(\"../../google/protobuf/timestamp\");\nvar validator_1 = require(\"../../tendermint/types/validator\");\nexports.protobufPackage = \"tendermint.types\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\nvar BlockIDFlag;\n(function (BlockIDFlag) {\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n  BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n  BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BlockIDFlag = exports.BlockIDFlag || (exports.BlockIDFlag = {}));\nfunction blockIDFlagFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"BLOCK_ID_FLAG_UNKNOWN\":\n      return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n    case 1:\n    case \"BLOCK_ID_FLAG_ABSENT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n    case 2:\n    case \"BLOCK_ID_FLAG_COMMIT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n    case 3:\n    case \"BLOCK_ID_FLAG_NIL\":\n      return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return BlockIDFlag.UNRECOGNIZED;\n  }\n}\nexports.blockIDFlagFromJSON = blockIDFlagFromJSON;\nfunction blockIDFlagToJSON(object) {\n  switch (object) {\n    case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n      return \"BLOCK_ID_FLAG_UNKNOWN\";\n    case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n      return \"BLOCK_ID_FLAG_ABSENT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n      return \"BLOCK_ID_FLAG_COMMIT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n      return \"BLOCK_ID_FLAG_NIL\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.blockIDFlagToJSON = blockIDFlagToJSON;\n/** SignedMsgType is a type of signed message in the consensus. */\nvar SignedMsgType;\n(function (SignedMsgType) {\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n  /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n  /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n  SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n  SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignedMsgType = exports.SignedMsgType || (exports.SignedMsgType = {}));\nfunction signedMsgTypeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"SIGNED_MSG_TYPE_UNKNOWN\":\n      return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n    case 1:\n    case \"SIGNED_MSG_TYPE_PREVOTE\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n    case 2:\n    case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n    case 32:\n    case \"SIGNED_MSG_TYPE_PROPOSAL\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignedMsgType.UNRECOGNIZED;\n  }\n}\nexports.signedMsgTypeFromJSON = signedMsgTypeFromJSON;\nfunction signedMsgTypeToJSON(object) {\n  switch (object) {\n    case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n      return \"SIGNED_MSG_TYPE_UNKNOWN\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n      return \"SIGNED_MSG_TYPE_PREVOTE\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n      return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n      return \"SIGNED_MSG_TYPE_PROPOSAL\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.signedMsgTypeToJSON = signedMsgTypeToJSON;\nvar basePartSetHeader = {\n  total: 0\n};\nexports.PartSetHeader = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.total !== 0) {\n      writer.uint32(8).uint32(message.total);\n    }\n    if (message.hash.length !== 0) {\n      writer.uint32(18).bytes(message.hash);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, basePartSetHeader);\n    message.hash = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.uint32();\n          break;\n        case 2:\n          message.hash = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, basePartSetHeader);\n    message.total = object.total !== undefined && object.total !== null ? Number(object.total) : 0;\n    message.hash = object.hash !== undefined && object.hash !== null ? bytesFromBase64(object.hash) : new Uint8Array();\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.total !== undefined && (obj.total = message.total);\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, basePartSetHeader);\n    message.total = (_a = object.total) !== null && _a !== void 0 ? _a : 0;\n    message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : new Uint8Array();\n    return message;\n  }\n};\nvar basePart = {\n  index: 0\n};\nexports.Part = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.index !== 0) {\n      writer.uint32(8).uint32(message.index);\n    }\n    if (message.bytes.length !== 0) {\n      writer.uint32(18).bytes(message.bytes);\n    }\n    if (message.proof !== undefined) {\n      proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, basePart);\n    message.bytes = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.index = reader.uint32();\n          break;\n        case 2:\n          message.bytes = reader.bytes();\n          break;\n        case 3:\n          message.proof = proof_1.Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, basePart);\n    message.index = object.index !== undefined && object.index !== null ? Number(object.index) : 0;\n    message.bytes = object.bytes !== undefined && object.bytes !== null ? bytesFromBase64(object.bytes) : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromJSON(object.proof) : undefined;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.index !== undefined && (obj.index = message.index);\n    message.bytes !== undefined && (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, basePart);\n    message.index = (_a = object.index) !== null && _a !== void 0 ? _a : 0;\n    message.bytes = (_b = object.bytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;\n    return message;\n  }\n};\nvar baseBlockID = {};\nexports.BlockID = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.hash.length !== 0) {\n      writer.uint32(10).bytes(message.hash);\n    }\n    if (message.partSetHeader !== undefined) {\n      exports.PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseBlockID);\n    message.hash = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.bytes();\n          break;\n        case 2:\n          message.partSetHeader = exports.PartSetHeader.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseBlockID);\n    message.hash = object.hash !== undefined && object.hash !== null ? bytesFromBase64(object.hash) : new Uint8Array();\n    message.partSetHeader = object.partSetHeader !== undefined && object.partSetHeader !== null ? exports.PartSetHeader.fromJSON(object.partSetHeader) : undefined;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.hash !== undefined && (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n    message.partSetHeader !== undefined && (obj.partSetHeader = message.partSetHeader ? exports.PartSetHeader.toJSON(message.partSetHeader) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = Object.assign({}, baseBlockID);\n    message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.partSetHeader = object.partSetHeader !== undefined && object.partSetHeader !== null ? exports.PartSetHeader.fromPartial(object.partSetHeader) : undefined;\n    return message;\n  }\n};\nvar baseHeader = {\n  chainId: \"\",\n  height: long_1.default.ZERO\n};\nexports.Header = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.version !== undefined) {\n      types_1.Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(18).string(message.chainId);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(24).int64(message.height);\n    }\n    if (message.time !== undefined) {\n      timestamp_1.Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.lastBlockId !== undefined) {\n      exports.BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.lastCommitHash.length !== 0) {\n      writer.uint32(50).bytes(message.lastCommitHash);\n    }\n    if (message.dataHash.length !== 0) {\n      writer.uint32(58).bytes(message.dataHash);\n    }\n    if (message.validatorsHash.length !== 0) {\n      writer.uint32(66).bytes(message.validatorsHash);\n    }\n    if (message.nextValidatorsHash.length !== 0) {\n      writer.uint32(74).bytes(message.nextValidatorsHash);\n    }\n    if (message.consensusHash.length !== 0) {\n      writer.uint32(82).bytes(message.consensusHash);\n    }\n    if (message.appHash.length !== 0) {\n      writer.uint32(90).bytes(message.appHash);\n    }\n    if (message.lastResultsHash.length !== 0) {\n      writer.uint32(98).bytes(message.lastResultsHash);\n    }\n    if (message.evidenceHash.length !== 0) {\n      writer.uint32(106).bytes(message.evidenceHash);\n    }\n    if (message.proposerAddress.length !== 0) {\n      writer.uint32(114).bytes(message.proposerAddress);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseHeader);\n    message.lastCommitHash = new Uint8Array();\n    message.dataHash = new Uint8Array();\n    message.validatorsHash = new Uint8Array();\n    message.nextValidatorsHash = new Uint8Array();\n    message.consensusHash = new Uint8Array();\n    message.appHash = new Uint8Array();\n    message.lastResultsHash = new Uint8Array();\n    message.evidenceHash = new Uint8Array();\n    message.proposerAddress = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.version = types_1.Consensus.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.chainId = reader.string();\n          break;\n        case 3:\n          message.height = reader.int64();\n          break;\n        case 4:\n          message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.lastBlockId = exports.BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.lastCommitHash = reader.bytes();\n          break;\n        case 7:\n          message.dataHash = reader.bytes();\n          break;\n        case 8:\n          message.validatorsHash = reader.bytes();\n          break;\n        case 9:\n          message.nextValidatorsHash = reader.bytes();\n          break;\n        case 10:\n          message.consensusHash = reader.bytes();\n          break;\n        case 11:\n          message.appHash = reader.bytes();\n          break;\n        case 12:\n          message.lastResultsHash = reader.bytes();\n          break;\n        case 13:\n          message.evidenceHash = reader.bytes();\n          break;\n        case 14:\n          message.proposerAddress = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseHeader);\n    message.version = object.version !== undefined && object.version !== null ? types_1.Consensus.fromJSON(object.version) : undefined;\n    message.chainId = object.chainId !== undefined && object.chainId !== null ? String(object.chainId) : \"\";\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n    message.time = object.time !== undefined && object.time !== null ? fromJsonTimestamp(object.time) : undefined;\n    message.lastBlockId = object.lastBlockId !== undefined && object.lastBlockId !== null ? exports.BlockID.fromJSON(object.lastBlockId) : undefined;\n    message.lastCommitHash = object.lastCommitHash !== undefined && object.lastCommitHash !== null ? bytesFromBase64(object.lastCommitHash) : new Uint8Array();\n    message.dataHash = object.dataHash !== undefined && object.dataHash !== null ? bytesFromBase64(object.dataHash) : new Uint8Array();\n    message.validatorsHash = object.validatorsHash !== undefined && object.validatorsHash !== null ? bytesFromBase64(object.validatorsHash) : new Uint8Array();\n    message.nextValidatorsHash = object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null ? bytesFromBase64(object.nextValidatorsHash) : new Uint8Array();\n    message.consensusHash = object.consensusHash !== undefined && object.consensusHash !== null ? bytesFromBase64(object.consensusHash) : new Uint8Array();\n    message.appHash = object.appHash !== undefined && object.appHash !== null ? bytesFromBase64(object.appHash) : new Uint8Array();\n    message.lastResultsHash = object.lastResultsHash !== undefined && object.lastResultsHash !== null ? bytesFromBase64(object.lastResultsHash) : new Uint8Array();\n    message.evidenceHash = object.evidenceHash !== undefined && object.evidenceHash !== null ? bytesFromBase64(object.evidenceHash) : new Uint8Array();\n    message.proposerAddress = object.proposerAddress !== undefined && object.proposerAddress !== null ? bytesFromBase64(object.proposerAddress) : new Uint8Array();\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.version !== undefined && (obj.version = message.version ? types_1.Consensus.toJSON(message.version) : undefined);\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.time !== undefined && (obj.time = fromTimestamp(message.time).toISOString());\n    message.lastBlockId !== undefined && (obj.lastBlockId = message.lastBlockId ? exports.BlockID.toJSON(message.lastBlockId) : undefined);\n    message.lastCommitHash !== undefined && (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined ? message.lastCommitHash : new Uint8Array()));\n    message.dataHash !== undefined && (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n    message.validatorsHash !== undefined && (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined ? message.validatorsHash : new Uint8Array()));\n    message.nextValidatorsHash !== undefined && (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));\n    message.consensusHash !== undefined && (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined ? message.consensusHash : new Uint8Array()));\n    message.appHash !== undefined && (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n    message.lastResultsHash !== undefined && (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined ? message.lastResultsHash : new Uint8Array()));\n    message.evidenceHash !== undefined && (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined ? message.evidenceHash : new Uint8Array()));\n    message.proposerAddress !== undefined && (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    var message = Object.assign({}, baseHeader);\n    message.version = object.version !== undefined && object.version !== null ? types_1.Consensus.fromPartial(object.version) : undefined;\n    message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : \"\";\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n    message.time = object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;\n    message.lastBlockId = object.lastBlockId !== undefined && object.lastBlockId !== null ? exports.BlockID.fromPartial(object.lastBlockId) : undefined;\n    message.lastCommitHash = (_b = object.lastCommitHash) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.dataHash = (_c = object.dataHash) !== null && _c !== void 0 ? _c : new Uint8Array();\n    message.validatorsHash = (_d = object.validatorsHash) !== null && _d !== void 0 ? _d : new Uint8Array();\n    message.nextValidatorsHash = (_e = object.nextValidatorsHash) !== null && _e !== void 0 ? _e : new Uint8Array();\n    message.consensusHash = (_f = object.consensusHash) !== null && _f !== void 0 ? _f : new Uint8Array();\n    message.appHash = (_g = object.appHash) !== null && _g !== void 0 ? _g : new Uint8Array();\n    message.lastResultsHash = (_h = object.lastResultsHash) !== null && _h !== void 0 ? _h : new Uint8Array();\n    message.evidenceHash = (_j = object.evidenceHash) !== null && _j !== void 0 ? _j : new Uint8Array();\n    message.proposerAddress = (_k = object.proposerAddress) !== null && _k !== void 0 ? _k : new Uint8Array();\n    return message;\n  }\n};\nvar baseData = {};\nexports.Data = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    var _iterator = _createForOfIteratorHelper(message.txs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        writer.uint32(10).bytes(v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseData);\n    message.txs = [];\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.txs.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var _a;\n    var message = Object.assign({}, baseData);\n    message.txs = ((_a = object.txs) !== null && _a !== void 0 ? _a : []).map(function (e) {\n      return bytesFromBase64(e);\n    });\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    if (message.txs) {\n      obj.txs = message.txs.map(function (e) {\n        return base64FromBytes(e !== undefined ? e : new Uint8Array());\n      });\n    } else {\n      obj.txs = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n    var message = Object.assign({}, baseData);\n    message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return e;\n    })) || [];\n    return message;\n  }\n};\nvar baseVote = {\n  type: 0,\n  height: long_1.default.ZERO,\n  round: 0,\n  validatorIndex: 0\n};\nexports.Vote = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(16).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      exports.BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(50).bytes(message.validatorAddress);\n    }\n    if (message.validatorIndex !== 0) {\n      writer.uint32(56).int32(message.validatorIndex);\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(66).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseVote);\n    message.validatorAddress = new Uint8Array();\n    message.signature = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n        case 2:\n          message.height = reader.int64();\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.blockId = exports.BlockID.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 7:\n          message.validatorIndex = reader.int32();\n          break;\n        case 8:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseVote);\n    message.type = object.type !== undefined && object.type !== null ? signedMsgTypeFromJSON(object.type) : 0;\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n    message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? fromJsonTimestamp(object.timestamp) : undefined;\n    message.validatorAddress = object.validatorAddress !== undefined && object.validatorAddress !== null ? bytesFromBase64(object.validatorAddress) : new Uint8Array();\n    message.validatorIndex = object.validatorIndex !== undefined && object.validatorIndex !== null ? Number(object.validatorIndex) : 0;\n    message.signature = object.signature !== undefined && object.signature !== null ? bytesFromBase64(object.signature) : new Uint8Array();\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.round !== undefined && (obj.round = message.round);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.validatorIndex !== undefined && (obj.validatorIndex = message.validatorIndex);\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e;\n    var message = Object.assign({}, baseVote);\n    message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n    message.round = (_b = object.round) !== null && _b !== void 0 ? _b : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromPartial(object.blockId) : undefined;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? timestamp_1.Timestamp.fromPartial(object.timestamp) : undefined;\n    message.validatorAddress = (_c = object.validatorAddress) !== null && _c !== void 0 ? _c : new Uint8Array();\n    message.validatorIndex = (_d = object.validatorIndex) !== null && _d !== void 0 ? _d : 0;\n    message.signature = (_e = object.signature) !== null && _e !== void 0 ? _e : new Uint8Array();\n    return message;\n  }\n};\nvar baseCommit = {\n  height: long_1.default.ZERO,\n  round: 0\n};\nexports.Commit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(16).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      exports.BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n    }\n    var _iterator2 = _createForOfIteratorHelper(message.signatures),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        exports.CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseCommit);\n    message.signatures = [];\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n        case 2:\n          message.round = reader.int32();\n          break;\n        case 3:\n          message.blockId = exports.BlockID.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signatures.push(exports.CommitSig.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var _a;\n    var message = Object.assign({}, baseCommit);\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n    message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n    message.signatures = ((_a = object.signatures) !== null && _a !== void 0 ? _a : []).map(function (e) {\n      return exports.CommitSig.fromJSON(e);\n    });\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.round !== undefined && (obj.round = message.round);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(function (e) {\n        return e ? exports.CommitSig.toJSON(e) : undefined;\n      });\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, baseCommit);\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n    message.round = (_a = object.round) !== null && _a !== void 0 ? _a : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromPartial(object.blockId) : undefined;\n    message.signatures = ((_b = object.signatures) === null || _b === void 0 ? void 0 : _b.map(function (e) {\n      return exports.CommitSig.fromPartial(e);\n    })) || [];\n    return message;\n  }\n};\nvar baseCommitSig = {\n  blockIdFlag: 0\n};\nexports.CommitSig = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.blockIdFlag !== 0) {\n      writer.uint32(8).int32(message.blockIdFlag);\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(18).bytes(message.validatorAddress);\n    }\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(34).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseCommitSig);\n    message.validatorAddress = new Uint8Array();\n    message.signature = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockIdFlag = reader.int32();\n          break;\n        case 2:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 3:\n          message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseCommitSig);\n    message.blockIdFlag = object.blockIdFlag !== undefined && object.blockIdFlag !== null ? blockIDFlagFromJSON(object.blockIdFlag) : 0;\n    message.validatorAddress = object.validatorAddress !== undefined && object.validatorAddress !== null ? bytesFromBase64(object.validatorAddress) : new Uint8Array();\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? fromJsonTimestamp(object.timestamp) : undefined;\n    message.signature = object.signature !== undefined && object.signature !== null ? bytesFromBase64(object.signature) : new Uint8Array();\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.blockIdFlag !== undefined && (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n    message.validatorAddress !== undefined && (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n    message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = Object.assign({}, baseCommitSig);\n    message.blockIdFlag = (_a = object.blockIdFlag) !== null && _a !== void 0 ? _a : 0;\n    message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? timestamp_1.Timestamp.fromPartial(object.timestamp) : undefined;\n    message.signature = (_c = object.signature) !== null && _c !== void 0 ? _c : new Uint8Array();\n    return message;\n  }\n};\nvar baseProposal = {\n  type: 0,\n  height: long_1.default.ZERO,\n  round: 0,\n  polRound: 0\n};\nexports.Proposal = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(16).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.polRound !== 0) {\n      writer.uint32(32).int32(message.polRound);\n    }\n    if (message.blockId !== undefined) {\n      exports.BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(58).bytes(message.signature);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseProposal);\n    message.signature = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32();\n          break;\n        case 2:\n          message.height = reader.int64();\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.polRound = reader.int32();\n          break;\n        case 5:\n          message.blockId = exports.BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseProposal);\n    message.type = object.type !== undefined && object.type !== null ? signedMsgTypeFromJSON(object.type) : 0;\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n    message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n    message.polRound = object.polRound !== undefined && object.polRound !== null ? Number(object.polRound) : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? fromJsonTimestamp(object.timestamp) : undefined;\n    message.signature = object.signature !== undefined && object.signature !== null ? bytesFromBase64(object.signature) : new Uint8Array();\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    message.round !== undefined && (obj.round = message.round);\n    message.polRound !== undefined && (obj.polRound = message.polRound);\n    message.blockId !== undefined && (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n    message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d;\n    var message = Object.assign({}, baseProposal);\n    message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n    message.height = object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n    message.round = (_b = object.round) !== null && _b !== void 0 ? _b : 0;\n    message.polRound = (_c = object.polRound) !== null && _c !== void 0 ? _c : 0;\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromPartial(object.blockId) : undefined;\n    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? timestamp_1.Timestamp.fromPartial(object.timestamp) : undefined;\n    message.signature = (_d = object.signature) !== null && _d !== void 0 ? _d : new Uint8Array();\n    return message;\n  }\n};\nvar baseSignedHeader = {};\nexports.SignedHeader = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.header !== undefined) {\n      exports.Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.commit !== undefined) {\n      exports.Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseSignedHeader);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = exports.Header.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commit = exports.Commit.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseSignedHeader);\n    message.header = object.header !== undefined && object.header !== null ? exports.Header.fromJSON(object.header) : undefined;\n    message.commit = object.commit !== undefined && object.commit !== null ? exports.Commit.fromJSON(object.commit) : undefined;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n    message.commit !== undefined && (obj.commit = message.commit ? exports.Commit.toJSON(message.commit) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = Object.assign({}, baseSignedHeader);\n    message.header = object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;\n    message.commit = object.commit !== undefined && object.commit !== null ? exports.Commit.fromPartial(object.commit) : undefined;\n    return message;\n  }\n};\nvar baseLightBlock = {};\nexports.LightBlock = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.signedHeader !== undefined) {\n      exports.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.validatorSet !== undefined) {\n      validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseLightBlock);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signedHeader = exports.SignedHeader.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseLightBlock);\n    message.signedHeader = object.signedHeader !== undefined && object.signedHeader !== null ? exports.SignedHeader.fromJSON(object.signedHeader) : undefined;\n    message.validatorSet = object.validatorSet !== undefined && object.validatorSet !== null ? validator_1.ValidatorSet.fromJSON(object.validatorSet) : undefined;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.signedHeader !== undefined && (obj.signedHeader = message.signedHeader ? exports.SignedHeader.toJSON(message.signedHeader) : undefined);\n    message.validatorSet !== undefined && (obj.validatorSet = message.validatorSet ? validator_1.ValidatorSet.toJSON(message.validatorSet) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = Object.assign({}, baseLightBlock);\n    message.signedHeader = object.signedHeader !== undefined && object.signedHeader !== null ? exports.SignedHeader.fromPartial(object.signedHeader) : undefined;\n    message.validatorSet = object.validatorSet !== undefined && object.validatorSet !== null ? validator_1.ValidatorSet.fromPartial(object.validatorSet) : undefined;\n    return message;\n  }\n};\nvar baseBlockMeta = {\n  blockSize: long_1.default.ZERO,\n  numTxs: long_1.default.ZERO\n};\nexports.BlockMeta = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.blockId !== undefined) {\n      exports.BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.blockSize.isZero()) {\n      writer.uint32(16).int64(message.blockSize);\n    }\n    if (message.header !== undefined) {\n      exports.Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.numTxs.isZero()) {\n      writer.uint32(32).int64(message.numTxs);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseBlockMeta);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockId = exports.BlockID.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.blockSize = reader.int64();\n          break;\n        case 3:\n          message.header = exports.Header.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.numTxs = reader.int64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseBlockMeta);\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n    message.blockSize = object.blockSize !== undefined && object.blockSize !== null ? long_1.default.fromString(object.blockSize) : long_1.default.ZERO;\n    message.header = object.header !== undefined && object.header !== null ? exports.Header.fromJSON(object.header) : undefined;\n    message.numTxs = object.numTxs !== undefined && object.numTxs !== null ? long_1.default.fromString(object.numTxs) : long_1.default.ZERO;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.blockId !== undefined && (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n    message.blockSize !== undefined && (obj.blockSize = (message.blockSize || long_1.default.ZERO).toString());\n    message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n    message.numTxs !== undefined && (obj.numTxs = (message.numTxs || long_1.default.ZERO).toString());\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = Object.assign({}, baseBlockMeta);\n    message.blockId = object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromPartial(object.blockId) : undefined;\n    message.blockSize = object.blockSize !== undefined && object.blockSize !== null ? long_1.default.fromValue(object.blockSize) : long_1.default.ZERO;\n    message.header = object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;\n    message.numTxs = object.numTxs !== undefined && object.numTxs !== null ? long_1.default.fromValue(object.numTxs) : long_1.default.ZERO;\n    return message;\n  }\n};\nvar baseTxProof = {};\nexports.TxProof = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.rootHash.length !== 0) {\n      writer.uint32(10).bytes(message.rootHash);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    if (message.proof !== undefined) {\n      proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseTxProof);\n    message.rootHash = new Uint8Array();\n    message.data = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rootHash = reader.bytes();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        case 3:\n          message.proof = proof_1.Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseTxProof);\n    message.rootHash = object.rootHash !== undefined && object.rootHash !== null ? bytesFromBase64(object.rootHash) : new Uint8Array();\n    message.data = object.data !== undefined && object.data !== null ? bytesFromBase64(object.data) : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromJSON(object.proof) : undefined;\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.rootHash !== undefined && (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, baseTxProof);\n    message.rootHash = (_a = object.rootHash) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;\n    return message;\n  }\n};\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n}();\nvar atob = globalThis.atob || function (b64) {\n  return globalThis.Buffer.from(b64, \"base64\").toString(\"binary\");\n};\nfunction bytesFromBase64(b64) {\n  var bin = atob(b64);\n  var arr = new Uint8Array(bin.length);\n  for (var i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nvar btoa = globalThis.btoa || function (bin) {\n  return globalThis.Buffer.from(bin, \"binary\").toString(\"base64\");\n};\nfunction base64FromBytes(arr) {\n  var bin = [];\n  var _iterator3 = _createForOfIteratorHelper(arr),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var byte = _step3.value;\n      bin.push(String.fromCharCode(byte));\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n  var seconds = numberToLong(date.getTime() / 1000);\n  var nanos = date.getTime() % 1000 * 1000000;\n  return {\n    seconds: seconds,\n    nanos: nanos\n  };\n}\nfunction fromTimestamp(t) {\n  var millis = t.seconds.toNumber() * 1000;\n  millis += t.nanos / 1000000;\n  return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n  if (o instanceof Date) {\n    return toTimestamp(o);\n  } else if (typeof o === \"string\") {\n    return toTimestamp(new Date(o));\n  } else {\n    return timestamp_1.Timestamp.fromJSON(o);\n  }\n}\nfunction numberToLong(number) {\n  return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../src/tendermint/types/types.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxProof = exports.BlockMeta = exports.LightBlock = exports.SignedHeader = exports.Proposal = exports.CommitSig = exports.Commit = exports.Vote = exports.Data = exports.Header = exports.BlockID = exports.Part = exports.PartSetHeader = exports.signedMsgTypeToJSON = exports.signedMsgTypeFromJSON = exports.SignedMsgType = exports.blockIDFlagToJSON = exports.blockIDFlagFromJSON = exports.BlockIDFlag = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst proof_1 = require(\"../../tendermint/crypto/proof\");\nconst types_1 = require(\"../../tendermint/version/types\");\nconst timestamp_1 = require(\"../../google/protobuf/timestamp\");\nconst validator_1 = require(\"../../tendermint/types/validator\");\nexports.protobufPackage = \"tendermint.types\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\nvar BlockIDFlag;\n(function (BlockIDFlag) {\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n    BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BlockIDFlag = exports.BlockIDFlag || (exports.BlockIDFlag = {}));\nfunction blockIDFlagFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"BLOCK_ID_FLAG_UNKNOWN\":\n            return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n        case 1:\n        case \"BLOCK_ID_FLAG_ABSENT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n        case 2:\n        case \"BLOCK_ID_FLAG_COMMIT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n        case 3:\n        case \"BLOCK_ID_FLAG_NIL\":\n            return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return BlockIDFlag.UNRECOGNIZED;\n    }\n}\nexports.blockIDFlagFromJSON = blockIDFlagFromJSON;\nfunction blockIDFlagToJSON(object) {\n    switch (object) {\n        case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n            return \"BLOCK_ID_FLAG_UNKNOWN\";\n        case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n            return \"BLOCK_ID_FLAG_ABSENT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n            return \"BLOCK_ID_FLAG_COMMIT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n            return \"BLOCK_ID_FLAG_NIL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.blockIDFlagToJSON = blockIDFlagToJSON;\n/** SignedMsgType is a type of signed message in the consensus. */\nvar SignedMsgType;\n(function (SignedMsgType) {\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n    /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n    SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignedMsgType = exports.SignedMsgType || (exports.SignedMsgType = {}));\nfunction signedMsgTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGNED_MSG_TYPE_UNKNOWN\":\n            return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n        case 1:\n        case \"SIGNED_MSG_TYPE_PREVOTE\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n        case 2:\n        case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n        case 32:\n        case \"SIGNED_MSG_TYPE_PROPOSAL\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignedMsgType.UNRECOGNIZED;\n    }\n}\nexports.signedMsgTypeFromJSON = signedMsgTypeFromJSON;\nfunction signedMsgTypeToJSON(object) {\n    switch (object) {\n        case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n            return \"SIGNED_MSG_TYPE_UNKNOWN\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n            return \"SIGNED_MSG_TYPE_PREVOTE\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n            return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n            return \"SIGNED_MSG_TYPE_PROPOSAL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.signedMsgTypeToJSON = signedMsgTypeToJSON;\nconst basePartSetHeader = { total: 0 };\nexports.PartSetHeader = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.total !== 0) {\n            writer.uint32(8).uint32(message.total);\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(18).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, basePartSetHeader);\n        message.hash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total = reader.uint32();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, basePartSetHeader);\n        message.total = object.total !== undefined && object.total !== null ? Number(object.total) : 0;\n        message.hash =\n            object.hash !== undefined && object.hash !== null ? bytesFromBase64(object.hash) : new Uint8Array();\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.total !== undefined && (obj.total = message.total);\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, basePartSetHeader);\n        message.total = (_a = object.total) !== null && _a !== void 0 ? _a : 0;\n        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nconst basePart = { index: 0 };\nexports.Part = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.index !== 0) {\n            writer.uint32(8).uint32(message.index);\n        }\n        if (message.bytes.length !== 0) {\n            writer.uint32(18).bytes(message.bytes);\n        }\n        if (message.proof !== undefined) {\n            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, basePart);\n        message.bytes = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.index = reader.uint32();\n                    break;\n                case 2:\n                    message.bytes = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = proof_1.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, basePart);\n        message.index = object.index !== undefined && object.index !== null ? Number(object.index) : 0;\n        message.bytes =\n            object.bytes !== undefined && object.bytes !== null ? bytesFromBase64(object.bytes) : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromJSON(object.proof) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.index !== undefined && (obj.index = message.index);\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, basePart);\n        message.index = (_a = object.index) !== null && _a !== void 0 ? _a : 0;\n        message.bytes = (_b = object.bytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;\n        return message;\n    },\n};\nconst baseBlockID = {};\nexports.BlockID = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        if (message.partSetHeader !== undefined) {\n            exports.PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseBlockID);\n        message.hash = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.partSetHeader = exports.PartSetHeader.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseBlockID);\n        message.hash =\n            object.hash !== undefined && object.hash !== null ? bytesFromBase64(object.hash) : new Uint8Array();\n        message.partSetHeader =\n            object.partSetHeader !== undefined && object.partSetHeader !== null\n                ? exports.PartSetHeader.fromJSON(object.partSetHeader)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.partSetHeader !== undefined &&\n            (obj.partSetHeader = message.partSetHeader ? exports.PartSetHeader.toJSON(message.partSetHeader) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseBlockID);\n        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.partSetHeader =\n            object.partSetHeader !== undefined && object.partSetHeader !== null\n                ? exports.PartSetHeader.fromPartial(object.partSetHeader)\n                : undefined;\n        return message;\n    },\n};\nconst baseHeader = { chainId: \"\", height: long_1.default.ZERO };\nexports.Header = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.version !== undefined) {\n            types_1.Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(18).string(message.chainId);\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.time !== undefined) {\n            timestamp_1.Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.lastBlockId !== undefined) {\n            exports.BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.lastCommitHash.length !== 0) {\n            writer.uint32(50).bytes(message.lastCommitHash);\n        }\n        if (message.dataHash.length !== 0) {\n            writer.uint32(58).bytes(message.dataHash);\n        }\n        if (message.validatorsHash.length !== 0) {\n            writer.uint32(66).bytes(message.validatorsHash);\n        }\n        if (message.nextValidatorsHash.length !== 0) {\n            writer.uint32(74).bytes(message.nextValidatorsHash);\n        }\n        if (message.consensusHash.length !== 0) {\n            writer.uint32(82).bytes(message.consensusHash);\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(90).bytes(message.appHash);\n        }\n        if (message.lastResultsHash.length !== 0) {\n            writer.uint32(98).bytes(message.lastResultsHash);\n        }\n        if (message.evidenceHash.length !== 0) {\n            writer.uint32(106).bytes(message.evidenceHash);\n        }\n        if (message.proposerAddress.length !== 0) {\n            writer.uint32(114).bytes(message.proposerAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseHeader);\n        message.lastCommitHash = new Uint8Array();\n        message.dataHash = new Uint8Array();\n        message.validatorsHash = new Uint8Array();\n        message.nextValidatorsHash = new Uint8Array();\n        message.consensusHash = new Uint8Array();\n        message.appHash = new Uint8Array();\n        message.lastResultsHash = new Uint8Array();\n        message.evidenceHash = new Uint8Array();\n        message.proposerAddress = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.version = types_1.Consensus.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.chainId = reader.string();\n                    break;\n                case 3:\n                    message.height = reader.int64();\n                    break;\n                case 4:\n                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.lastBlockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.lastCommitHash = reader.bytes();\n                    break;\n                case 7:\n                    message.dataHash = reader.bytes();\n                    break;\n                case 8:\n                    message.validatorsHash = reader.bytes();\n                    break;\n                case 9:\n                    message.nextValidatorsHash = reader.bytes();\n                    break;\n                case 10:\n                    message.consensusHash = reader.bytes();\n                    break;\n                case 11:\n                    message.appHash = reader.bytes();\n                    break;\n                case 12:\n                    message.lastResultsHash = reader.bytes();\n                    break;\n                case 13:\n                    message.evidenceHash = reader.bytes();\n                    break;\n                case 14:\n                    message.proposerAddress = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseHeader);\n        message.version =\n            object.version !== undefined && object.version !== null\n                ? types_1.Consensus.fromJSON(object.version)\n                : undefined;\n        message.chainId = object.chainId !== undefined && object.chainId !== null ? String(object.chainId) : \"\";\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n        message.time =\n            object.time !== undefined && object.time !== null ? fromJsonTimestamp(object.time) : undefined;\n        message.lastBlockId =\n            object.lastBlockId !== undefined && object.lastBlockId !== null\n                ? exports.BlockID.fromJSON(object.lastBlockId)\n                : undefined;\n        message.lastCommitHash =\n            object.lastCommitHash !== undefined && object.lastCommitHash !== null\n                ? bytesFromBase64(object.lastCommitHash)\n                : new Uint8Array();\n        message.dataHash =\n            object.dataHash !== undefined && object.dataHash !== null\n                ? bytesFromBase64(object.dataHash)\n                : new Uint8Array();\n        message.validatorsHash =\n            object.validatorsHash !== undefined && object.validatorsHash !== null\n                ? bytesFromBase64(object.validatorsHash)\n                : new Uint8Array();\n        message.nextValidatorsHash =\n            object.nextValidatorsHash !== undefined && object.nextValidatorsHash !== null\n                ? bytesFromBase64(object.nextValidatorsHash)\n                : new Uint8Array();\n        message.consensusHash =\n            object.consensusHash !== undefined && object.consensusHash !== null\n                ? bytesFromBase64(object.consensusHash)\n                : new Uint8Array();\n        message.appHash =\n            object.appHash !== undefined && object.appHash !== null\n                ? bytesFromBase64(object.appHash)\n                : new Uint8Array();\n        message.lastResultsHash =\n            object.lastResultsHash !== undefined && object.lastResultsHash !== null\n                ? bytesFromBase64(object.lastResultsHash)\n                : new Uint8Array();\n        message.evidenceHash =\n            object.evidenceHash !== undefined && object.evidenceHash !== null\n                ? bytesFromBase64(object.evidenceHash)\n                : new Uint8Array();\n        message.proposerAddress =\n            object.proposerAddress !== undefined && object.proposerAddress !== null\n                ? bytesFromBase64(object.proposerAddress)\n                : new Uint8Array();\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.version !== undefined &&\n            (obj.version = message.version ? types_1.Consensus.toJSON(message.version) : undefined);\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.time !== undefined && (obj.time = fromTimestamp(message.time).toISOString());\n        message.lastBlockId !== undefined &&\n            (obj.lastBlockId = message.lastBlockId ? exports.BlockID.toJSON(message.lastBlockId) : undefined);\n        message.lastCommitHash !== undefined &&\n            (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined ? message.lastCommitHash : new Uint8Array()));\n        message.dataHash !== undefined &&\n            (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n        message.validatorsHash !== undefined &&\n            (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined ? message.validatorsHash : new Uint8Array()));\n        message.nextValidatorsHash !== undefined &&\n            (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined ? message.nextValidatorsHash : new Uint8Array()));\n        message.consensusHash !== undefined &&\n            (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined ? message.consensusHash : new Uint8Array()));\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        message.lastResultsHash !== undefined &&\n            (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined ? message.lastResultsHash : new Uint8Array()));\n        message.evidenceHash !== undefined &&\n            (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined ? message.evidenceHash : new Uint8Array()));\n        message.proposerAddress !== undefined &&\n            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = Object.assign({}, baseHeader);\n        message.version =\n            object.version !== undefined && object.version !== null\n                ? types_1.Consensus.fromPartial(object.version)\n                : undefined;\n        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : \"\";\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n        message.time =\n            object.time !== undefined && object.time !== null ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;\n        message.lastBlockId =\n            object.lastBlockId !== undefined && object.lastBlockId !== null\n                ? exports.BlockID.fromPartial(object.lastBlockId)\n                : undefined;\n        message.lastCommitHash = (_b = object.lastCommitHash) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.dataHash = (_c = object.dataHash) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.validatorsHash = (_d = object.validatorsHash) !== null && _d !== void 0 ? _d : new Uint8Array();\n        message.nextValidatorsHash = (_e = object.nextValidatorsHash) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.consensusHash = (_f = object.consensusHash) !== null && _f !== void 0 ? _f : new Uint8Array();\n        message.appHash = (_g = object.appHash) !== null && _g !== void 0 ? _g : new Uint8Array();\n        message.lastResultsHash = (_h = object.lastResultsHash) !== null && _h !== void 0 ? _h : new Uint8Array();\n        message.evidenceHash = (_j = object.evidenceHash) !== null && _j !== void 0 ? _j : new Uint8Array();\n        message.proposerAddress = (_k = object.proposerAddress) !== null && _k !== void 0 ? _k : new Uint8Array();\n        return message;\n    },\n};\nconst baseData = {};\nexports.Data = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.txs) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseData);\n        message.txs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.txs.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseData);\n        message.txs = ((_a = object.txs) !== null && _a !== void 0 ? _a : []).map((e) => bytesFromBase64(e));\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.txs) {\n            obj.txs = message.txs.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.txs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseData);\n        message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nconst baseVote = { type: 0, height: long_1.default.ZERO, round: 0, validatorIndex: 0 };\nexports.Vote = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(50).bytes(message.validatorAddress);\n        }\n        if (message.validatorIndex !== 0) {\n            writer.uint32(56).int32(message.validatorIndex);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(66).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseVote);\n        message.validatorAddress = new Uint8Array();\n        message.signature = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int64();\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 7:\n                    message.validatorIndex = reader.int32();\n                    break;\n                case 8:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseVote);\n        message.type = object.type !== undefined && object.type !== null ? signedMsgTypeFromJSON(object.type) : 0;\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n        message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined;\n        message.validatorAddress =\n            object.validatorAddress !== undefined && object.validatorAddress !== null\n                ? bytesFromBase64(object.validatorAddress)\n                : new Uint8Array();\n        message.validatorIndex =\n            object.validatorIndex !== undefined && object.validatorIndex !== null\n                ? Number(object.validatorIndex)\n                : 0;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array();\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.round !== undefined && (obj.round = message.round);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n        message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n        message.validatorIndex !== undefined && (obj.validatorIndex = message.validatorIndex);\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = Object.assign({}, baseVote);\n        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n        message.round = (_b = object.round) !== null && _b !== void 0 ? _b : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? timestamp_1.Timestamp.fromPartial(object.timestamp)\n                : undefined;\n        message.validatorAddress = (_c = object.validatorAddress) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.validatorIndex = (_d = object.validatorIndex) !== null && _d !== void 0 ? _d : 0;\n        message.signature = (_e = object.signature) !== null && _e !== void 0 ? _e : new Uint8Array();\n        return message;\n    },\n};\nconst baseCommit = { height: long_1.default.ZERO, round: 0 };\nexports.Commit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(16).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            exports.CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseCommit);\n        message.signatures = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.int64();\n                    break;\n                case 2:\n                    message.round = reader.int32();\n                    break;\n                case 3:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signatures.push(exports.CommitSig.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseCommit);\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n        message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n        message.signatures = ((_a = object.signatures) !== null && _a !== void 0 ? _a : []).map((e) => exports.CommitSig.fromJSON(e));\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.round !== undefined && (obj.round = message.round);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (e ? exports.CommitSig.toJSON(e) : undefined));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseCommit);\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n        message.round = (_a = object.round) !== null && _a !== void 0 ? _a : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.signatures = ((_b = object.signatures) === null || _b === void 0 ? void 0 : _b.map((e) => exports.CommitSig.fromPartial(e))) || [];\n        return message;\n    },\n};\nconst baseCommitSig = { blockIdFlag: 0 };\nexports.CommitSig = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.blockIdFlag !== 0) {\n            writer.uint32(8).int32(message.blockIdFlag);\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(18).bytes(message.validatorAddress);\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(34).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseCommitSig);\n        message.validatorAddress = new Uint8Array();\n        message.signature = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockIdFlag = reader.int32();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 3:\n                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseCommitSig);\n        message.blockIdFlag =\n            object.blockIdFlag !== undefined && object.blockIdFlag !== null\n                ? blockIDFlagFromJSON(object.blockIdFlag)\n                : 0;\n        message.validatorAddress =\n            object.validatorAddress !== undefined && object.validatorAddress !== null\n                ? bytesFromBase64(object.validatorAddress)\n                : new Uint8Array();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array();\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockIdFlag !== undefined && (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined ? message.validatorAddress : new Uint8Array()));\n        message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseCommitSig);\n        message.blockIdFlag = (_a = object.blockIdFlag) !== null && _a !== void 0 ? _a : 0;\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? timestamp_1.Timestamp.fromPartial(object.timestamp)\n                : undefined;\n        message.signature = (_c = object.signature) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nconst baseProposal = { type: 0, height: long_1.default.ZERO, round: 0, polRound: 0 };\nexports.Proposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.polRound !== 0) {\n            writer.uint32(32).int32(message.polRound);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(58).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseProposal);\n        message.signature = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int64();\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.polRound = reader.int32();\n                    break;\n                case 5:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseProposal);\n        message.type = object.type !== undefined && object.type !== null ? signedMsgTypeFromJSON(object.type) : 0;\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromString(object.height) : long_1.default.ZERO;\n        message.round = object.round !== undefined && object.round !== null ? Number(object.round) : 0;\n        message.polRound =\n            object.polRound !== undefined && object.polRound !== null ? Number(object.polRound) : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined;\n        message.signature =\n            object.signature !== undefined && object.signature !== null\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array();\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        message.round !== undefined && (obj.round = message.round);\n        message.polRound !== undefined && (obj.polRound = message.polRound);\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n        message.timestamp !== undefined && (obj.timestamp = fromTimestamp(message.timestamp).toISOString());\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = Object.assign({}, baseProposal);\n        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n        message.height =\n            object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.ZERO;\n        message.round = (_b = object.round) !== null && _b !== void 0 ? _b : 0;\n        message.polRound = (_c = object.polRound) !== null && _c !== void 0 ? _c : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.timestamp =\n            object.timestamp !== undefined && object.timestamp !== null\n                ? timestamp_1.Timestamp.fromPartial(object.timestamp)\n                : undefined;\n        message.signature = (_d = object.signature) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nconst baseSignedHeader = {};\nexports.SignedHeader = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.header !== undefined) {\n            exports.Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            exports.Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignedHeader);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.header = exports.Header.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.commit = exports.Commit.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignedHeader);\n        message.header =\n            object.header !== undefined && object.header !== null ? exports.Header.fromJSON(object.header) : undefined;\n        message.commit =\n            object.commit !== undefined && object.commit !== null ? exports.Commit.fromJSON(object.commit) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n        message.commit !== undefined && (obj.commit = message.commit ? exports.Commit.toJSON(message.commit) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignedHeader);\n        message.header =\n            object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;\n        message.commit =\n            object.commit !== undefined && object.commit !== null ? exports.Commit.fromPartial(object.commit) : undefined;\n        return message;\n    },\n};\nconst baseLightBlock = {};\nexports.LightBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.signedHeader !== undefined) {\n            exports.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.validatorSet !== undefined) {\n            validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseLightBlock);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signedHeader = exports.SignedHeader.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseLightBlock);\n        message.signedHeader =\n            object.signedHeader !== undefined && object.signedHeader !== null\n                ? exports.SignedHeader.fromJSON(object.signedHeader)\n                : undefined;\n        message.validatorSet =\n            object.validatorSet !== undefined && object.validatorSet !== null\n                ? validator_1.ValidatorSet.fromJSON(object.validatorSet)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signedHeader !== undefined &&\n            (obj.signedHeader = message.signedHeader ? exports.SignedHeader.toJSON(message.signedHeader) : undefined);\n        message.validatorSet !== undefined &&\n            (obj.validatorSet = message.validatorSet ? validator_1.ValidatorSet.toJSON(message.validatorSet) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseLightBlock);\n        message.signedHeader =\n            object.signedHeader !== undefined && object.signedHeader !== null\n                ? exports.SignedHeader.fromPartial(object.signedHeader)\n                : undefined;\n        message.validatorSet =\n            object.validatorSet !== undefined && object.validatorSet !== null\n                ? validator_1.ValidatorSet.fromPartial(object.validatorSet)\n                : undefined;\n        return message;\n    },\n};\nconst baseBlockMeta = { blockSize: long_1.default.ZERO, numTxs: long_1.default.ZERO };\nexports.BlockMeta = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n        }\n        if (!message.blockSize.isZero()) {\n            writer.uint32(16).int64(message.blockSize);\n        }\n        if (message.header !== undefined) {\n            exports.Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n        }\n        if (!message.numTxs.isZero()) {\n            writer.uint32(32).int64(message.numTxs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseBlockMeta);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.blockSize = reader.int64();\n                    break;\n                case 3:\n                    message.header = exports.Header.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.numTxs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseBlockMeta);\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null ? exports.BlockID.fromJSON(object.blockId) : undefined;\n        message.blockSize =\n            object.blockSize !== undefined && object.blockSize !== null\n                ? long_1.default.fromString(object.blockSize)\n                : long_1.default.ZERO;\n        message.header =\n            object.header !== undefined && object.header !== null ? exports.Header.fromJSON(object.header) : undefined;\n        message.numTxs =\n            object.numTxs !== undefined && object.numTxs !== null ? long_1.default.fromString(object.numTxs) : long_1.default.ZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId ? exports.BlockID.toJSON(message.blockId) : undefined);\n        message.blockSize !== undefined && (obj.blockSize = (message.blockSize || long_1.default.ZERO).toString());\n        message.header !== undefined && (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n        message.numTxs !== undefined && (obj.numTxs = (message.numTxs || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseBlockMeta);\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.blockSize =\n            object.blockSize !== undefined && object.blockSize !== null\n                ? long_1.default.fromValue(object.blockSize)\n                : long_1.default.ZERO;\n        message.header =\n            object.header !== undefined && object.header !== null ? exports.Header.fromPartial(object.header) : undefined;\n        message.numTxs =\n            object.numTxs !== undefined && object.numTxs !== null ? long_1.default.fromValue(object.numTxs) : long_1.default.ZERO;\n        return message;\n    },\n};\nconst baseTxProof = {};\nexports.TxProof = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.rootHash.length !== 0) {\n            writer.uint32(10).bytes(message.rootHash);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.proof !== undefined) {\n            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseTxProof);\n        message.rootHash = new Uint8Array();\n        message.data = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rootHash = reader.bytes();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = proof_1.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseTxProof);\n        message.rootHash =\n            object.rootHash !== undefined && object.rootHash !== null\n                ? bytesFromBase64(object.rootHash)\n                : new Uint8Array();\n        message.data =\n            object.data !== undefined && object.data !== null ? bytesFromBase64(object.data) : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromJSON(object.proof) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.rootHash !== undefined &&\n            (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.proof !== undefined && (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseTxProof);\n        message.rootHash = (_a = object.rootHash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? proof_1.Proof.fromPartial(object.proof) : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = numberToLong(date.getTime() / 1000);\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds.toNumber() * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return toTimestamp(o);\n    }\n    else if (typeof o === \"string\") {\n        return toTimestamp(new Date(o));\n    }\n    else {\n        return timestamp_1.Timestamp.fromJSON(o);\n    }\n}\nfunction numberToLong(number) {\n    return long_1.default.fromNumber(number);\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}