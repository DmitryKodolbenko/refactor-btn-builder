{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClientImpl = exports.QueryConnectionConsensusStateResponse = exports.QueryConnectionConsensusStateRequest = exports.QueryConnectionClientStateResponse = exports.QueryConnectionClientStateRequest = exports.QueryClientConnectionsResponse = exports.QueryClientConnectionsRequest = exports.QueryConnectionsResponse = exports.QueryConnectionsRequest = exports.QueryConnectionResponse = exports.QueryConnectionRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst connection_1 = require(\"../../../../ibc/core/connection/v1/connection\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst pagination_1 = require(\"../../../../cosmos/base/query/v1beta1/pagination\");\nconst any_1 = require(\"../../../../google/protobuf/any\");\nexports.protobufPackage = \"ibc.core.connection.v1\";\nconst baseQueryConnectionRequest = {\n  connectionId: \"\"\n};\nexports.QueryConnectionRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.connectionId !== \"\") {\n      writer.uint32(10).string(message.connectionId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionRequest);\n    message.connectionId = object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionRequest);\n    message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\nconst baseQueryConnectionResponse = {};\nexports.QueryConnectionResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.connection !== undefined) {\n      connection_1.ConnectionEnd.encode(message.connection, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connection = connection_1.ConnectionEnd.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionResponse);\n    message.connection = object.connection !== undefined && object.connection !== null ? connection_1.ConnectionEnd.fromJSON(object.connection) : undefined;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.connection !== undefined && (obj.connection = message.connection ? connection_1.ConnectionEnd.toJSON(message.connection) : undefined);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionResponse);\n    message.connection = object.connection !== undefined && object.connection !== null ? connection_1.ConnectionEnd.fromPartial(object.connection) : undefined;\n    message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionsRequest = {};\nexports.QueryConnectionsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionsRequest);\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryConnectionsRequest);\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionsResponse = {};\nexports.QueryConnectionsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.connections) {\n      connection_1.IdentifiedConnection.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionsResponse);\n    message.connections = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connections.push(connection_1.IdentifiedConnection.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionsResponse);\n    message.connections = ((_a = object.connections) !== null && _a !== void 0 ? _a : []).map(e => connection_1.IdentifiedConnection.fromJSON(e));\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.connections) {\n      obj.connections = message.connections.map(e => e ? connection_1.IdentifiedConnection.toJSON(e) : undefined);\n    } else {\n      obj.connections = [];\n    }\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionsResponse);\n    message.connections = ((_a = object.connections) === null || _a === void 0 ? void 0 : _a.map(e => connection_1.IdentifiedConnection.fromPartial(e))) || [];\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryClientConnectionsRequest = {\n  clientId: \"\"\n};\nexports.QueryClientConnectionsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryClientConnectionsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryClientConnectionsRequest);\n    message.clientId = object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryClientConnectionsRequest);\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\nconst baseQueryClientConnectionsResponse = {\n  connectionPaths: \"\"\n};\nexports.QueryClientConnectionsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.connectionPaths) {\n      writer.uint32(10).string(v);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryClientConnectionsResponse);\n    message.connectionPaths = [];\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionPaths.push(reader.string());\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryClientConnectionsResponse);\n    message.connectionPaths = ((_a = object.connectionPaths) !== null && _a !== void 0 ? _a : []).map(e => String(e));\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.connectionPaths) {\n      obj.connectionPaths = message.connectionPaths.map(e => e);\n    } else {\n      obj.connectionPaths = [];\n    }\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryClientConnectionsResponse);\n    message.connectionPaths = ((_a = object.connectionPaths) === null || _a === void 0 ? void 0 : _a.map(e => e)) || [];\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionClientStateRequest = {\n  connectionId: \"\"\n};\nexports.QueryConnectionClientStateRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.connectionId !== \"\") {\n      writer.uint32(10).string(message.connectionId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n    message.connectionId = object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n    message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\nconst baseQueryConnectionClientStateResponse = {};\nexports.QueryConnectionClientStateResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.identifiedClientState !== undefined) {\n      client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n    message.identifiedClientState = object.identifiedClientState !== undefined && object.identifiedClientState !== null ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState) : undefined;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.identifiedClientState !== undefined && (obj.identifiedClientState = message.identifiedClientState ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState) : undefined);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n    message.identifiedClientState = object.identifiedClientState !== undefined && object.identifiedClientState !== null ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState) : undefined;\n    message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionConsensusStateRequest = {\n  connectionId: \"\",\n  revisionNumber: long_1.default.UZERO,\n  revisionHeight: long_1.default.UZERO\n};\nexports.QueryConnectionConsensusStateRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.connectionId !== \"\") {\n      writer.uint32(10).string(message.connectionId);\n    }\n    if (!message.revisionNumber.isZero()) {\n      writer.uint32(16).uint64(message.revisionNumber);\n    }\n    if (!message.revisionHeight.isZero()) {\n      writer.uint32(24).uint64(message.revisionHeight);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connectionId = reader.string();\n          break;\n        case 2:\n          message.revisionNumber = reader.uint64();\n          break;\n        case 3:\n          message.revisionHeight = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n    message.connectionId = object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n    message.revisionNumber = object.revisionNumber !== undefined && object.revisionNumber !== null ? long_1.default.fromString(object.revisionNumber) : long_1.default.UZERO;\n    message.revisionHeight = object.revisionHeight !== undefined && object.revisionHeight !== null ? long_1.default.fromString(object.revisionHeight) : long_1.default.UZERO;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n    message.revisionNumber !== undefined && (obj.revisionNumber = (message.revisionNumber || long_1.default.UZERO).toString());\n    message.revisionHeight !== undefined && (obj.revisionHeight = (message.revisionHeight || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n    message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n    message.revisionNumber = object.revisionNumber !== undefined && object.revisionNumber !== null ? long_1.default.fromValue(object.revisionNumber) : long_1.default.UZERO;\n    message.revisionHeight = object.revisionHeight !== undefined && object.revisionHeight !== null ? long_1.default.fromValue(object.revisionHeight) : long_1.default.UZERO;\n    return message;\n  }\n};\nconst baseQueryConnectionConsensusStateResponse = {\n  clientId: \"\"\n};\nexports.QueryConnectionConsensusStateResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.consensusState !== undefined) {\n      any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.clientId !== \"\") {\n      writer.uint32(18).string(message.clientId);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(26).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.consensusState = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.clientId = reader.string();\n          break;\n        case 3:\n          message.proof = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n    message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? any_1.Any.fromJSON(object.consensusState) : undefined;\n    message.clientId = object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.consensusState !== undefined && (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n    message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? any_1.Any.fromPartial(object.consensusState) : undefined;\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nclass QueryClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Connection = this.Connection.bind(this);\n    this.Connections = this.Connections.bind(this);\n    this.ClientConnections = this.ClientConnections.bind(this);\n    this.ConnectionClientState = this.ConnectionClientState.bind(this);\n    this.ConnectionConsensusState = this.ConnectionConsensusState.bind(this);\n  }\n  Connection(request) {\n    const data = exports.QueryConnectionRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"Connection\", data);\n    return promise.then(data => exports.QueryConnectionResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  Connections(request) {\n    const data = exports.QueryConnectionsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"Connections\", data);\n    return promise.then(data => exports.QueryConnectionsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ClientConnections(request) {\n    const data = exports.QueryClientConnectionsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ClientConnections\", data);\n    return promise.then(data => exports.QueryClientConnectionsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ConnectionClientState(request) {\n    const data = exports.QueryConnectionClientStateRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ConnectionClientState\", data);\n    return promise.then(data => exports.QueryConnectionClientStateResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ConnectionConsensusState(request) {\n    const data = exports.QueryConnectionConsensusStateRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ConnectionConsensusState\", data);\n    return promise.then(data => exports.QueryConnectionConsensusStateResponse.decode(new minimal_1.default.Reader(data)));\n  }\n}\nexports.QueryClientImpl = QueryClientImpl;\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/ibc/core/connection/v1/query.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryClientImpl = exports.QueryConnectionConsensusStateResponse = exports.QueryConnectionConsensusStateRequest = exports.QueryConnectionClientStateResponse = exports.QueryConnectionClientStateRequest = exports.QueryClientConnectionsResponse = exports.QueryClientConnectionsRequest = exports.QueryConnectionsResponse = exports.QueryConnectionsRequest = exports.QueryConnectionResponse = exports.QueryConnectionRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst connection_1 = require(\"../../../../ibc/core/connection/v1/connection\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst pagination_1 = require(\"../../../../cosmos/base/query/v1beta1/pagination\");\nconst any_1 = require(\"../../../../google/protobuf/any\");\nexports.protobufPackage = \"ibc.core.connection.v1\";\nconst baseQueryConnectionRequest = { connectionId: \"\" };\nexports.QueryConnectionRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.connectionId !== \"\") {\n            writer.uint32(10).string(message.connectionId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connectionId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionRequest);\n        message.connectionId =\n            object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionRequest);\n        message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nconst baseQueryConnectionResponse = {};\nexports.QueryConnectionResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.connection !== undefined) {\n            connection_1.ConnectionEnd.encode(message.connection, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connection = connection_1.ConnectionEnd.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionResponse);\n        message.connection =\n            object.connection !== undefined && object.connection !== null\n                ? connection_1.ConnectionEnd.fromJSON(object.connection)\n                : undefined;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.connection !== undefined &&\n            (obj.connection = message.connection ? connection_1.ConnectionEnd.toJSON(message.connection) : undefined);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionResponse);\n        message.connection =\n            object.connection !== undefined && object.connection !== null\n                ? connection_1.ConnectionEnd.fromPartial(object.connection)\n                : undefined;\n        message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionsRequest = {};\nexports.QueryConnectionsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionsRequest);\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromJSON(object.pagination)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryConnectionsRequest);\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromPartial(object.pagination)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionsResponse = {};\nexports.QueryConnectionsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.connections) {\n            connection_1.IdentifiedConnection.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionsResponse);\n        message.connections = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connections.push(connection_1.IdentifiedConnection.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionsResponse);\n        message.connections = ((_a = object.connections) !== null && _a !== void 0 ? _a : []).map((e) => connection_1.IdentifiedConnection.fromJSON(e));\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromJSON(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.connections) {\n            obj.connections = message.connections.map((e) => (e ? connection_1.IdentifiedConnection.toJSON(e) : undefined));\n        }\n        else {\n            obj.connections = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionsResponse);\n        message.connections = ((_a = object.connections) === null || _a === void 0 ? void 0 : _a.map((e) => connection_1.IdentifiedConnection.fromPartial(e))) || [];\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromPartial(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryClientConnectionsRequest = { clientId: \"\" };\nexports.QueryClientConnectionsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryClientConnectionsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryClientConnectionsRequest);\n        message.clientId =\n            object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.clientId !== undefined && (obj.clientId = message.clientId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryClientConnectionsRequest);\n        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nconst baseQueryClientConnectionsResponse = { connectionPaths: \"\" };\nexports.QueryClientConnectionsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.connectionPaths) {\n            writer.uint32(10).string(v);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryClientConnectionsResponse);\n        message.connectionPaths = [];\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connectionPaths.push(reader.string());\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryClientConnectionsResponse);\n        message.connectionPaths = ((_a = object.connectionPaths) !== null && _a !== void 0 ? _a : []).map((e) => String(e));\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.connectionPaths) {\n            obj.connectionPaths = message.connectionPaths.map((e) => e);\n        }\n        else {\n            obj.connectionPaths = [];\n        }\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryClientConnectionsResponse);\n        message.connectionPaths = ((_a = object.connectionPaths) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionClientStateRequest = { connectionId: \"\" };\nexports.QueryConnectionClientStateRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.connectionId !== \"\") {\n            writer.uint32(10).string(message.connectionId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connectionId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n        message.connectionId =\n            object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionClientStateRequest);\n        message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nconst baseQueryConnectionClientStateResponse = {};\nexports.QueryConnectionClientStateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.identifiedClientState !== undefined) {\n            client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n        message.identifiedClientState =\n            object.identifiedClientState !== undefined && object.identifiedClientState !== null\n                ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState)\n                : undefined;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identifiedClientState !== undefined &&\n            (obj.identifiedClientState = message.identifiedClientState\n                ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState)\n                : undefined);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionClientStateResponse);\n        message.identifiedClientState =\n            object.identifiedClientState !== undefined && object.identifiedClientState !== null\n                ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState)\n                : undefined;\n        message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionConsensusStateRequest = {\n    connectionId: \"\",\n    revisionNumber: long_1.default.UZERO,\n    revisionHeight: long_1.default.UZERO,\n};\nexports.QueryConnectionConsensusStateRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.connectionId !== \"\") {\n            writer.uint32(10).string(message.connectionId);\n        }\n        if (!message.revisionNumber.isZero()) {\n            writer.uint32(16).uint64(message.revisionNumber);\n        }\n        if (!message.revisionHeight.isZero()) {\n            writer.uint32(24).uint64(message.revisionHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connectionId = reader.string();\n                    break;\n                case 2:\n                    message.revisionNumber = reader.uint64();\n                    break;\n                case 3:\n                    message.revisionHeight = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n        message.connectionId =\n            object.connectionId !== undefined && object.connectionId !== null ? String(object.connectionId) : \"\";\n        message.revisionNumber =\n            object.revisionNumber !== undefined && object.revisionNumber !== null\n                ? long_1.default.fromString(object.revisionNumber)\n                : long_1.default.UZERO;\n        message.revisionHeight =\n            object.revisionHeight !== undefined && object.revisionHeight !== null\n                ? long_1.default.fromString(object.revisionHeight)\n                : long_1.default.UZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.connectionId !== undefined && (obj.connectionId = message.connectionId);\n        message.revisionNumber !== undefined &&\n            (obj.revisionNumber = (message.revisionNumber || long_1.default.UZERO).toString());\n        message.revisionHeight !== undefined &&\n            (obj.revisionHeight = (message.revisionHeight || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionConsensusStateRequest);\n        message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : \"\";\n        message.revisionNumber =\n            object.revisionNumber !== undefined && object.revisionNumber !== null\n                ? long_1.default.fromValue(object.revisionNumber)\n                : long_1.default.UZERO;\n        message.revisionHeight =\n            object.revisionHeight !== undefined && object.revisionHeight !== null\n                ? long_1.default.fromValue(object.revisionHeight)\n                : long_1.default.UZERO;\n        return message;\n    },\n};\nconst baseQueryConnectionConsensusStateResponse = { clientId: \"\" };\nexports.QueryConnectionConsensusStateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.consensusState !== undefined) {\n            any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.clientId !== \"\") {\n            writer.uint32(18).string(message.clientId);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(26).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.consensusState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.clientId = reader.string();\n                    break;\n                case 3:\n                    message.proof = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n        message.consensusState =\n            object.consensusState !== undefined && object.consensusState !== null\n                ? any_1.Any.fromJSON(object.consensusState)\n                : undefined;\n        message.clientId =\n            object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.consensusState !== undefined &&\n            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n        message.clientId !== undefined && (obj.clientId = message.clientId);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryConnectionConsensusStateResponse);\n        message.consensusState =\n            object.consensusState !== undefined && object.consensusState !== null\n                ? any_1.Any.fromPartial(object.consensusState)\n                : undefined;\n        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nclass QueryClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.Connection = this.Connection.bind(this);\n        this.Connections = this.Connections.bind(this);\n        this.ClientConnections = this.ClientConnections.bind(this);\n        this.ConnectionClientState = this.ConnectionClientState.bind(this);\n        this.ConnectionConsensusState = this.ConnectionConsensusState.bind(this);\n    }\n    Connection(request) {\n        const data = exports.QueryConnectionRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"Connection\", data);\n        return promise.then((data) => exports.QueryConnectionResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Connections(request) {\n        const data = exports.QueryConnectionsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"Connections\", data);\n        return promise.then((data) => exports.QueryConnectionsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ClientConnections(request) {\n        const data = exports.QueryClientConnectionsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ClientConnections\", data);\n        return promise.then((data) => exports.QueryClientConnectionsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ConnectionClientState(request) {\n        const data = exports.QueryConnectionClientStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ConnectionClientState\", data);\n        return promise.then((data) => exports.QueryConnectionClientStateResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ConnectionConsensusState(request) {\n        const data = exports.QueryConnectionConsensusStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.connection.v1.Query\", \"ConnectionConsensusState\", data);\n        return promise.then((data) => exports.QueryConnectionConsensusStateResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.QueryClientImpl = QueryClientImpl;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=query.js.map"]},"metadata":{},"sourceType":"script"}