{"ast":null,"code":"import { ethers } from \"ethers\";\nimport ABI from \"./auroraABI\";\nfunction ascii_to_hex(str) {\n  var arr1 = [];\n  for (var n = 0, l = str.length; n < l; n++) {\n    var hex = Number(str.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n}\nconst MakeAURORATrx = async (setIsload, walletDirKey, TRXDir, activeBtn, firstCurrAmount) => {\n  if (activeBtn) {\n    setIsload(true);\n    console.log(\"START\");\n\n    //@ts-ignore\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    let userAddress = await signer.getAddress();\n    const contract = new ethers.Contract(\"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\", ABI, signer);\n    // const price = await contract.getPrice();\n    const tx = await contract.populateTransaction.transfer(\"0x7858011704161f41880e7f7EaF1d4E3525094576\", ethers.BigNumber.from(firstCurrAmount * 1000000000000000000 + \"\"));\n    const transactionParameters = {\n      to: \"0xCA01Fe7Dcc547bf75d41a2786c24B12AF10B6e4E\",\n      from: userAddress,\n      data: `0x${ascii_to_hex(`<DATA>${TRXDir}#${walletDirKey}<DATA>`)}`,\n      value: ethers.BigNumber.from(firstCurrAmount * 1000000000000000000 + \"\"),\n      chainId: (await provider.getNetwork()).chainId // mainnet ETH\n    };\n\n    console.log(transactionParameters);\n    try {\n      console.log(\"START SIGN\");\n      const mintData = await signer.sendTransaction(transactionParameters);\n      fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\" : \"https://api.tonana.org/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          hash: mintData.hash,\n          sourceChain: \"eth\"\n        })\n      });\n      console.log(mintData); // const transactionParameters = {\n      //   to: '0x7858011704161f41880e7f7EaF1d4E3525094576', // Required except during contract publications.\n      //   from: userAddress, // must match user's active address.\n      //   value: '0x01', // Only required to send ether to the recipient from the initiating external account.\n      // };\n\n      // txHash is a hex string\n      // As with any RPC call, it may throw an error\n      setIsload(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};\n_c = MakeAURORATrx;\nexport default MakeAURORATrx;\nvar _c;\n$RefreshReg$(_c, \"MakeAURORATrx\");","map":{"version":3,"names":["ethers","ABI","ascii_to_hex","str","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","MakeAURORATrx","setIsload","walletDirKey","TRXDir","activeBtn","firstCurrAmount","console","log","provider","providers","Web3Provider","window","ethereum","signer","getSigner","userAddress","getAddress","contract","Contract","tx","populateTransaction","transfer","BigNumber","from","transactionParameters","to","data","value","chainId","getNetwork","mintData","sendTransaction","fetch","process","env","REACT_APP_STATE","method","headers","body","JSON","stringify","hash","sourceChain","e"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeETHTrx.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport ABI from \"./auroraABI\";\n\nfunction ascii_to_hex(str: string) {\n\tvar arr1 = [];\n\tfor (var n = 0, l = str.length; n < l; n++) {\n\t\tvar hex = Number(str.charCodeAt(n)).toString(16);\n\t\tarr1.push(hex);\n\t}\n\treturn arr1.join(\"\");\n}\n\nconst MakeAURORATrx = async (\n\tsetIsload: any,\n\twalletDirKey: any,\n\tTRXDir: any,\n\tactiveBtn: boolean,\n\tfirstCurrAmount: any\n) => {\n\tif (activeBtn) {\n\t\tsetIsload(true);\n\t\tconsole.log(\"START\");\n\n\t\t//@ts-ignore\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\n\t\tconst signer = provider.getSigner();\n\n\t\tlet userAddress = await signer.getAddress();\n\n\t\tconst contract = new ethers.Contract(\n\t\t\t\"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",\n\t\t\tABI,\n\t\t\tsigner\n\t\t);\n\t\t// const price = await contract.getPrice();\n\t\tconst tx = await contract.populateTransaction.transfer(\n\t\t\t\"0x7858011704161f41880e7f7EaF1d4E3525094576\",\n\t\t\tethers.BigNumber.from(firstCurrAmount * 1000000000000000000 + \"\")\n\t\t);\n\n\t\tconst transactionParameters = {\n\t\t\tto: \"0xCA01Fe7Dcc547bf75d41a2786c24B12AF10B6e4E\",\n\t\t\tfrom: userAddress,\n\t\t\tdata: `0x${ascii_to_hex(`<DATA>${TRXDir}#${walletDirKey}<DATA>`)}`,\n\t\t\tvalue: ethers.BigNumber.from(firstCurrAmount * 1000000000000000000 + \"\"),\n\t\t\tchainId: (await provider.getNetwork()).chainId, // mainnet ETH\n\t\t};\n\n\t\tconsole.log(transactionParameters);\n\t\ttry {\n\t\t\tconsole.log(\"START SIGN\");\n\n\t\t\tconst mintData = await signer.sendTransaction(transactionParameters);\n\n\t\t\tfetch(\n\t\t\t\tprocess.env.REACT_APP_STATE === \"dev\"\n\t\t\t\t\t? \"http://localhost:8092\"\n\t\t\t\t\t: process.env.REACT_APP_STATE === \"dev-remote\"\n\t\t\t\t\t? \"https://dev.api.tonana.org\"\n\t\t\t\t\t: \"https://api.tonana.org/\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\thash: mintData.hash,\n\t\t\t\t\t\tsourceChain: \"eth\",\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconsole.log(mintData); // const transactionParameters = {\n\t\t\t//   to: '0x7858011704161f41880e7f7EaF1d4E3525094576', // Required except during contract publications.\n\t\t\t//   from: userAddress, // must match user's active address.\n\t\t\t//   value: '0x01', // Only required to send ether to the recipient from the initiating external account.\n\t\t\t// };\n\n\t\t\t// txHash is a hex string\n\t\t\t// As with any RPC call, it may throw an error\n\t\t\tsetIsload(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n};\n\nexport default MakeAURORATrx;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}