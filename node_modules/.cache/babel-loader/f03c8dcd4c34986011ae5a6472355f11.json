{"ast":null,"code":"import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';\nimport { message } from \"antd\";\nimport \"dotenv/config\";\nconst connectWalletNear = async setNearWalletKey => {\n  try {\n    const connectionConfig = {\n      networkId: \"mainnet\",\n      keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n      nodeUrl: \"https://rpc.mainnet.near.org\",\n      walletUrl: \"https://wallet.mainnet.near.org\",\n      helperUrl: \"https://helper.mainnet.near.org\",\n      explorerUrl: \"https://explorer.mainnet.near.org\"\n    };\n\n    // (async ()=>{\n\n    //     const nearConnection = await connect(connectionConfig as any);\n    //     const receiver = process.env.REACT_APP_BACK_NEAR_WALLET ? process.env.REACT_APP_BACK_NEAR_WALLET : '';\n\n    //     const walletConnection = new WalletConnection(nearConnection, receiver);\n    //     await(await(await nearConnection.account('sepezho.near')).getAccountBalance()).available\n    //   })()\n\n    const nearConnection = await connect(connectionConfig);\n    const receiver = process.env.REACT_APP_NEAR_CONTRACT ? process.env.REACT_APP_NEAR_CONTRACT : '';\n    const walletConnection = new WalletConnection(nearConnection, receiver);\n    //@ts-ignore\n    window.contract = await new Contract(walletConnection.account(), receiver, {\n      changeMethods: ['payToWallet'],\n      viewMethods: []\n    });\n    if (walletConnection.isSignedIn()) {\n      const walletAccountId = walletConnection.getAccountId();\n      setNearWalletKey(walletAccountId);\n    } else {\n      await walletConnection.requestSignIn({\n        contractId: process.env.REACT_APP_NEAR_CONTRACT,\n        methodNames: ['payToWallet']\n      });\n    }\n  } catch (err) {\n    console.log(err);\n    message.error(\"Use NEAR wallet. Close all windows and try again pls\", 5);\n  }\n};\nexport default connectWalletNear;\n\n// NEAR CHECK FEES ALOWANCE \n//   const response = await near.connection.provider.query({\n//   request_type: \"view_access_key\",\n//   finality: \"final\",\n//   account_id: \"client.chainlink.testnet\",\n//   public_key: \"ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW\",\n// });","map":{"version":3,"names":["connect","Contract","keyStores","WalletConnection","message","connectWalletNear","setNearWalletKey","connectionConfig","networkId","keyStore","BrowserLocalStorageKeyStore","nodeUrl","walletUrl","helperUrl","explorerUrl","nearConnection","receiver","process","env","REACT_APP_NEAR_CONTRACT","walletConnection","window","contract","account","changeMethods","viewMethods","isSignedIn","walletAccountId","getAccountId","requestSignIn","contractId","methodNames","err","console","log","error"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/wallet/connectWalletNEAR.ts"],"sourcesContent":["\nimport { connect,Contract, utils,transactions, keyStores, WalletConnection } from 'near-api-js';\nimport { message } from \"antd\";\nimport \"dotenv/config\";\n\n\n\nconst connectWalletNear = async (setNearWalletKey: any) => {\n  try {\n\n    const connectionConfig = {\n      networkId: \"mainnet\",\n      keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n      nodeUrl: \"https://rpc.mainnet.near.org\",\n      walletUrl: \"https://wallet.mainnet.near.org\",\n      helperUrl: \"https://helper.mainnet.near.org\",\n      explorerUrl: \"https://explorer.mainnet.near.org\",\n    };\n    \n// (async ()=>{\n\n//     const nearConnection = await connect(connectionConfig as any);\n//     const receiver = process.env.REACT_APP_BACK_NEAR_WALLET ? process.env.REACT_APP_BACK_NEAR_WALLET : '';\n\n//     const walletConnection = new WalletConnection(nearConnection, receiver);\n//     await(await(await nearConnection.account('sepezho.near')).getAccountBalance()).available\n//   })()\n\n    const nearConnection = await connect(connectionConfig as any);\n    const receiver = process.env.REACT_APP_NEAR_CONTRACT ? process.env.REACT_APP_NEAR_CONTRACT : '';\n\n    const walletConnection = new WalletConnection(nearConnection, receiver);\n  //@ts-ignore\nwindow.contract = await new Contract(walletConnection.account(), receiver, {\n  changeMethods: ['payToWallet'],\n  viewMethods: []\n})\n    if (walletConnection.isSignedIn()) {\n      const walletAccountId = walletConnection.getAccountId();\n      setNearWalletKey(walletAccountId);\n    } else {\n      await walletConnection.requestSignIn(\n        {\n          contractId:process.env.REACT_APP_NEAR_CONTRACT,\n          methodNames:['payToWallet']\n      }\n        \n      );\n    }\n  } catch (err) {\n    console.log(err);\n    message.error(\n      \"Use NEAR wallet. Close all windows and try again pls\",\n      5\n    );\n  }\n};\n\n\n\nexport default connectWalletNear\n\n\n  // NEAR CHECK FEES ALOWANCE \n//   const response = await near.connection.provider.query({\n//   request_type: \"view_access_key\",\n//   finality: \"final\",\n//   account_id: \"client.chainlink.testnet\",\n//   public_key: \"ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW\",\n// });\n"],"mappings":"AACA,SAASA,OAAO,EAACC,QAAQ,EAAsBC,SAAS,EAAEC,gBAAgB,QAAQ,aAAa;AAC/F,SAASC,OAAO,QAAQ,MAAM;AAC9B,OAAO,eAAe;AAItB,MAAMC,iBAAiB,GAAG,MAAOC,gBAAqB,IAAK;EACzD,IAAI;IAEF,MAAMC,gBAAgB,GAAG;MACvBC,SAAS,EAAE,SAAS;MACpBC,QAAQ,EAAE,IAAIP,SAAS,CAACQ,2BAA2B,EAAE;MACrDC,OAAO,EAAE,8BAA8B;MACvCC,SAAS,EAAE,iCAAiC;MAC5CC,SAAS,EAAE,iCAAiC;MAC5CC,WAAW,EAAE;IACf,CAAC;;IAEL;;IAEA;IACA;;IAEA;IACA;IACA;;IAEI,MAAMC,cAAc,GAAG,MAAMf,OAAO,CAACO,gBAAgB,CAAQ;IAC7D,MAAMS,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB,GAAGF,OAAO,CAACC,GAAG,CAACC,uBAAuB,GAAG,EAAE;IAE/F,MAAMC,gBAAgB,GAAG,IAAIjB,gBAAgB,CAACY,cAAc,EAAEC,QAAQ,CAAC;IACzE;IACFK,MAAM,CAACC,QAAQ,GAAG,MAAM,IAAIrB,QAAQ,CAACmB,gBAAgB,CAACG,OAAO,EAAE,EAAEP,QAAQ,EAAE;MACzEQ,aAAa,EAAE,CAAC,aAAa,CAAC;MAC9BC,WAAW,EAAE;IACf,CAAC,CAAC;IACE,IAAIL,gBAAgB,CAACM,UAAU,EAAE,EAAE;MACjC,MAAMC,eAAe,GAAGP,gBAAgB,CAACQ,YAAY,EAAE;MACvDtB,gBAAgB,CAACqB,eAAe,CAAC;IACnC,CAAC,MAAM;MACL,MAAMP,gBAAgB,CAACS,aAAa,CAClC;QACEC,UAAU,EAACb,OAAO,CAACC,GAAG,CAACC,uBAAuB;QAC9CY,WAAW,EAAC,CAAC,aAAa;MAC9B,CAAC,CAEA;IACH;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB5B,OAAO,CAAC+B,KAAK,CACX,sDAAsD,EACtD,CAAC,CACF;EACH;AACF,CAAC;AAID,eAAe9B,iBAAiB;;AAG9B;AACF;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}