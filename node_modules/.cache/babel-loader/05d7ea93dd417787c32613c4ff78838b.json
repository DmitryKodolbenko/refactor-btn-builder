{"ast":null,"code":"const {\n  BN,\n  nacl,\n  sha256,\n  fromNano,\n  toNano,\n  bytesToHex,\n  hexToBytes,\n  stringToBytes,\n  crc32c,\n  crc16,\n  concatBytes,\n  bytesToBase64,\n  base64ToBytes,\n  base64toString,\n  stringToBase64,\n  compareBytes,\n  readNBytesUIntFromArray\n} = require(\"./Utils\");\nconst Address = require(\"./Address\").default;\n\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=data\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=foo%3A%2F%2Fbar%2C%2Fbaz%3Famount%3D1%26text%3D%D1%80%D1%83\n/**\n * @param url {string}\n * @return {{address: string, amount?: string, text?: string}}\n * @throws if invalid url\n */\nfunction parseTransferUrl(url) {\n  const PREFIX = 'ton://transfer/';\n  if (!url.startsWith(PREFIX)) {\n    throw new Error('must starts with ' + PREFIX);\n  }\n  const arr = url.substring(PREFIX.length).split('?');\n  if (arr.length > 2) {\n    throw new Error('multiple \"?\"');\n  }\n  const address = arr[0];\n  if (!Address.isValid(address)) {\n    throw new Error('invalid address format ' + address);\n  }\n  const result = {\n    address: address\n  };\n  const rest = arr[1];\n  if (rest && rest.length) {\n    const pairs = rest.split('&').map(s => s.split('='));\n    for (const pair of pairs) {\n      if (pair.length !== 2) throw new Error('invalid url pair');\n      const key = pair[0];\n      const value = pair[1];\n      if (key === 'amount') {\n        if (result.amount) {\n          throw new Error('amount already set');\n        }\n        const bn = new BN(value);\n        if (bn.isNeg()) {\n          throw new Error('negative amount');\n        }\n        result.amount = value;\n      } else if (key === 'text') {\n        if (result.text) {\n          throw new Error('text already set');\n        }\n        result.text = decodeURIComponent(value);\n      } else {\n        throw new Error('unknown url var ' + key);\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * @param address   {string}\n * @param amount?    {string} in nano\n * @param text?   {string}\n * @return {string}\n */\nfunction formatTransferUrl(address, amount, text) {\n  let url = 'ton://transfer/' + address;\n  const params = [];\n  if (amount) {\n    params.push('amount=' + amount);\n  }\n  if (text) {\n    params.push('text=' + encodeURIComponent(text));\n  }\n  if (params.length === 0) return url;\n  return url + '?' + params.join('&');\n}\nmodule.exports = {\n  Address,\n  BN,\n  nacl,\n  sha256,\n  fromNano,\n  toNano,\n  bytesToHex,\n  hexToBytes,\n  stringToBytes,\n  crc32c,\n  crc16,\n  concatBytes,\n  bytesToBase64,\n  base64ToBytes,\n  base64toString,\n  stringToBase64,\n  compareBytes,\n  readNBytesUIntFromArray,\n  parseTransferUrl,\n  formatTransferUrl\n};","map":{"version":3,"names":["BN","nacl","sha256","fromNano","toNano","bytesToHex","hexToBytes","stringToBytes","crc32c","crc16","concatBytes","bytesToBase64","base64ToBytes","base64toString","stringToBase64","compareBytes","readNBytesUIntFromArray","require","Address","default","parseTransferUrl","url","PREFIX","startsWith","Error","arr","substring","length","split","address","isValid","result","rest","pairs","map","s","pair","key","value","amount","bn","isNeg","text","decodeURIComponent","formatTransferUrl","params","push","encodeURIComponent","join","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/utils/index.js"],"sourcesContent":["const {\n    BN,\n    nacl,\n    sha256,\n    fromNano,\n    toNano,\n    bytesToHex,\n    hexToBytes,\n    stringToBytes,\n    crc32c,\n    crc16,\n    concatBytes,\n    bytesToBase64,\n    base64ToBytes,\n    base64toString,\n    stringToBase64,\n    compareBytes,\n    readNBytesUIntFromArray\n} = require(\"./Utils\");\n\nconst Address = require(\"./Address\").default;\n\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=data\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=foo%3A%2F%2Fbar%2C%2Fbaz%3Famount%3D1%26text%3D%D1%80%D1%83\n/**\n * @param url {string}\n * @return {{address: string, amount?: string, text?: string}}\n * @throws if invalid url\n */\nfunction parseTransferUrl(url) {\n    const PREFIX = 'ton://transfer/';\n\n    if (!url.startsWith(PREFIX)) {\n        throw new Error('must starts with ' + PREFIX);\n    }\n\n    const arr = url.substring(PREFIX.length).split('?');\n    if (arr.length > 2) {\n        throw new Error('multiple \"?\"');\n    }\n\n    const address = arr[0];\n    if (!Address.isValid(address)) {\n        throw new Error('invalid address format ' + address);\n    }\n    const result = {\n        address: address\n    };\n\n    const rest = arr[1];\n    if (rest && rest.length) {\n        const pairs = rest.split('&').map(s => s.split('='));\n\n        for (const pair of pairs) {\n            if (pair.length !== 2) throw new Error('invalid url pair');\n            const key = pair[0];\n            const value = pair[1];\n\n            if (key === 'amount') {\n                if (result.amount) {\n                    throw new Error('amount already set');\n                }\n                const bn = new BN(value);\n                if (bn.isNeg()) {\n                    throw new Error('negative amount');\n                }\n                result.amount = value;\n            } else if (key === 'text') {\n                if (result.text) {\n                    throw new Error('text already set');\n                }\n                result.text = decodeURIComponent(value);\n            } else {\n                throw new Error('unknown url var ' + key);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * @param address   {string}\n * @param amount?    {string} in nano\n * @param text?   {string}\n * @return {string}\n */\nfunction formatTransferUrl(address, amount, text) {\n    let url = 'ton://transfer/' + address;\n\n    const params = [];\n\n    if (amount) {\n        params.push('amount=' + amount);\n    }\n    if (text) {\n        params.push('text=' + encodeURIComponent(text));\n    }\n\n    if (params.length === 0) return url;\n\n    return url + '?' + params.join('&');\n}\n\nmodule.exports = {\n    Address,\n    BN,\n    nacl,\n    sha256,\n    fromNano,\n    toNano,\n    bytesToHex,\n    hexToBytes,\n    stringToBytes,\n    crc32c,\n    crc16,\n    concatBytes,\n    bytesToBase64,\n    base64ToBytes,\n    base64toString,\n    stringToBase64,\n    compareBytes,\n    readNBytesUIntFromArray,\n    parseTransferUrl,\n    formatTransferUrl\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}