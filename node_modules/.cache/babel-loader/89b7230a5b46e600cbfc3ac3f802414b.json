{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar HttpProviderUtils = require('./HttpProviderUtils').default;\nif (typeof fetch === 'undefined') {\n  fetch = require('node-fetch');\n}\nvar SHARD_ID_ALL = '-9223372036854775808'; // 0x8000000000000000\nvar HttpProvider = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @param host? {string}\n   * @param options? {{apiKey: string}}\n   */\n  function HttpProvider(host, options) {\n    _classCallCheck(this, HttpProvider);\n    this.host = host || \"https://toncenter.com/api/v2/jsonRPC\";\n    this.options = options || {};\n  }\n\n  /**\n   * @private\n   * @param apiUrl   {string}\n   * @param request   {any}\n   * @return {Promise<any>}\n   */\n  _createClass(HttpProvider, [{\n    key: \"sendImpl\",\n    value: function sendImpl(apiUrl, request) {\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      if (this.options.apiKey) {\n        headers['X-API-Key'] = this.options.apiKey;\n      }\n      return fetch(apiUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(request)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (_ref) {\n        var result = _ref.result,\n          error = _ref.error;\n        return result || Promise.reject(error);\n      });\n    }\n\n    /**\n     * @param method    {string}\n     * @param params    {any}  todo: Array<any>\n     * @return {Promise<any>}\n     */\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      return this.sendImpl(this.host, {\n        id: 1,\n        jsonrpc: \"2.0\",\n        method: method,\n        params: params\n      });\n    }\n\n    /**\n     * Use this method to get information about address: balance, code, data, last_transaction_id.\n     * @param address {string}\n     */\n  }, {\n    key: \"getAddressInfo\",\n    value: function () {\n      var _getAddressInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.send('getAddressInformation', {\n                  address: address\n                }));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getAddressInfo(_x) {\n        return _getAddressInfo.apply(this, arguments);\n      }\n      return getAddressInfo;\n    }()\n    /**\n     * Similar to previous one but tries to parse additional information for known contract types. This method is based on generic.getAccountState thus number of recognizable contracts may grow. For wallets we recommend to use getWalletInformation.\n     * @param address {string}\n     */\n  }, {\n    key: \"getExtendedAddressInfo\",\n    value: function () {\n      var _getExtendedAddressInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.send('getExtendedAddressInformation', {\n                  address: address\n                }));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getExtendedAddressInfo(_x2) {\n        return _getExtendedAddressInfo.apply(this, arguments);\n      }\n      return getExtendedAddressInfo;\n    }()\n    /**\n     * Use this method to retrieve wallet information, this method parse contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, stadart wallet and v3 wallet.\n     * @param address {string}\n     */\n  }, {\n    key: \"getWalletInfo\",\n    value: function () {\n      var _getWalletInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.send('getWalletInformation', {\n                  address: address\n                }));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getWalletInfo(_x3) {\n        return _getWalletInfo.apply(this, arguments);\n      }\n      return getWalletInfo;\n    }()\n    /**\n     * Use this method to get transaction history of a given address.\n     * @param address   {string}\n     * @param limit?    {number}\n     * @param lt?    {number}\n     * @param hash?    {string}\n     * @param to_lt?    {number}\n     * @return array of transaction object\n     */\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {\n        var limit,\n          lt,\n          hash,\n          to_lt,\n          archival,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                limit = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 20;\n                lt = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : undefined;\n                hash = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : undefined;\n                to_lt = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : undefined;\n                archival = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : undefined;\n                return _context4.abrupt(\"return\", this.send(\"getTransactions\", {\n                  address: address,\n                  limit: limit,\n                  lt: lt,\n                  hash: hash,\n                  to_lt: to_lt,\n                  archival: archival\n                }));\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getTransactions(_x4) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n  }, {\n    key: \"getBalance\",\n    value:\n    /**\n     * Use this method to get balance (in nanograms) of a given address.\n     * @param address {string}\n     */\n    function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(address) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.send('getAddressBalance', {\n                  address: address\n                }));\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getBalance(_x5) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param base64 {string} base64 of boc bytes Cell.toBoc\n     */\n  }, {\n    key: \"sendBoc\",\n    value: function () {\n      var _sendBoc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(base64) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.send(\"sendBoc\", {\n                  'boc': base64\n                }));\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function sendBoc(_x6) {\n        return _sendBoc.apply(this, arguments);\n      }\n      return sendBoc;\n    }()\n  }, {\n    key: \"sendQuery\",\n    value:\n    /**\n     * @deprecated\n     * Send external message\n     * @param query     object as described https://toncenter.com/api/test/v2/#sendQuerySimple\n     */\n    function () {\n      var _sendQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(query) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.send(\"sendQuerySimple\", query));\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function sendQuery(_x7) {\n        return _sendQuery.apply(this, arguments);\n      }\n      return sendQuery;\n    }()\n  }, {\n    key: \"getEstimateFee\",\n    value:\n    /**\n     * @param query     object as described https://toncenter.com/api/test/v2/#estimateFee\n     * @return fees object\n     */\n    function () {\n      var _getEstimateFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(query) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.send(\"estimateFee\", query));\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function getEstimateFee(_x8) {\n        return _getEstimateFee.apply(this, arguments);\n      }\n      return getEstimateFee;\n    }()\n  }, {\n    key: \"call\",\n    value:\n    /**\n     * Invoke get-method of smart contract\n     * todo: think about throw error if result.exit_code !== 0 (the change breaks backward compatibility)\n     * @param address   {string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(address, method) {\n        var params,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                params = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : [];\n                return _context9.abrupt(\"return\", this.send('runGetMethod', {\n                  address: address,\n                  method: method,\n                  stack: params\n                }));\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function call(_x9, _x10) {\n        return _call.apply(this, arguments);\n      }\n      return call;\n    }()\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n  }, {\n    key: \"call2\",\n    value: function () {\n      var _call2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(address, method) {\n        var params,\n          result,\n          _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                params = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : [];\n                _context10.next = 3;\n                return this.send('runGetMethod', {\n                  address: address,\n                  method: method,\n                  stack: params\n                });\n              case 3:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", HttpProviderUtils.parseResponse(result));\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function call2(_x11, _x12) {\n        return _call2.apply(this, arguments);\n      }\n      return call2;\n    }()\n    /**\n     * Returns ID's of last and init block of masterchain\n     */\n  }, {\n    key: \"getMasterchainInfo\",\n    value: function () {\n      var _getMasterchainInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.send('getMasterchainInfo', {}));\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function getMasterchainInfo() {\n        return _getMasterchainInfo.apply(this, arguments);\n      }\n      return getMasterchainInfo;\n    }()\n    /**\n     * Returns ID's of shardchain blocks included in this masterchain block\n     * @param masterchainBlockNumber {number}\n     */\n  }, {\n    key: \"getBlockShards\",\n    value: function () {\n      var _getBlockShards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(masterchainBlockNumber) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.send('shards', {\n                  seqno: masterchainBlockNumber\n                }));\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function getBlockShards(_x13) {\n        return _getBlockShards.apply(this, arguments);\n      }\n      return getBlockShards;\n    }()\n    /**\n     * Returns transactions hashes included in this block\n     * @param workchain {number}\n     * @param shardId   {string}\n     * @param shardBlockNumber  {number}\n     */\n  }, {\n    key: \"getBlockTransactions\",\n    value: function () {\n      var _getBlockTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(workchain, shardId, shardBlockNumber) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this.send('getBlockTransactions', {\n                  workchain: workchain,\n                  shard: shardId,\n                  seqno: shardBlockNumber\n                }));\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function getBlockTransactions(_x14, _x15, _x16) {\n        return _getBlockTransactions.apply(this, arguments);\n      }\n      return getBlockTransactions;\n    }()\n    /**\n     * Returns transactions hashes included in this masterhcain block\n     * @param masterchainBlockNumber  {number}\n     */\n  }, {\n    key: \"getMasterchainBlockTransactions\",\n    value: function () {\n      var _getMasterchainBlockTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(masterchainBlockNumber) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                return _context14.abrupt(\"return\", this.getBlockTransactions(-1, SHARD_ID_ALL, masterchainBlockNumber));\n              case 1:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function getMasterchainBlockTransactions(_x17) {\n        return _getMasterchainBlockTransactions.apply(this, arguments);\n      }\n      return getMasterchainBlockTransactions;\n    }()\n    /**\n     * Returns block header and his previous blocks ID's\n     * @param workchain {number}\n     * @param shardId   {string}\n     * @param shardBlockNumber  {number}\n     */\n  }, {\n    key: \"getBlockHeader\",\n    value: function () {\n      var _getBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(workchain, shardId, shardBlockNumber) {\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this.send('getBlockHeader', {\n                  workchain: workchain,\n                  shard: shardId,\n                  seqno: shardBlockNumber\n                }));\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function getBlockHeader(_x18, _x19, _x20) {\n        return _getBlockHeader.apply(this, arguments);\n      }\n      return getBlockHeader;\n    }()\n    /**\n     * Returns masterchain block header and his previous block ID\n     * @param masterchainBlockNumber  {number}\n     */\n  }, {\n    key: \"getMasterchainBlockHeader\",\n    value: function () {\n      var _getMasterchainBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(masterchainBlockNumber) {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.getBlockHeader(-1, SHARD_ID_ALL, masterchainBlockNumber));\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function getMasterchainBlockHeader(_x21) {\n        return _getMasterchainBlockHeader.apply(this, arguments);\n      }\n      return getMasterchainBlockHeader;\n    }()\n  }]);\n  return HttpProvider;\n}();\nHttpProvider.SHARD_ID_ALL = SHARD_ID_ALL;\nmodule.exports.default = HttpProvider;","map":{"version":3,"names":["HttpProviderUtils","require","default","fetch","SHARD_ID_ALL","HttpProvider","host","options","apiUrl","request","headers","apiKey","method","body","JSON","stringify","then","response","json","result","error","Promise","reject","params","sendImpl","id","jsonrpc","address","send","limit","lt","undefined","hash","to_lt","archival","base64","query","stack","parseResponse","masterchainBlockNumber","seqno","workchain","shardId","shardBlockNumber","shard","getBlockTransactions","getBlockHeader","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/providers/index.js"],"sourcesContent":["const HttpProviderUtils = require('./HttpProviderUtils').default;\n\nif (typeof fetch === 'undefined') {\n    fetch = require('node-fetch');\n}\n\nconst SHARD_ID_ALL = '-9223372036854775808'; // 0x8000000000000000\n\nclass HttpProvider {\n    /**\n     * @param host? {string}\n     * @param options? {{apiKey: string}}\n     */\n    constructor(host, options) {\n        this.host = host || \"https://toncenter.com/api/v2/jsonRPC\";\n        this.options = options || {};\n    }\n\n    /**\n     * @private\n     * @param apiUrl   {string}\n     * @param request   {any}\n     * @return {Promise<any>}\n     */\n    sendImpl(apiUrl, request) {\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        if (this.options.apiKey) {\n            headers['X-API-Key'] = this.options.apiKey;\n        }\n\n        return fetch(apiUrl, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(request)\n        })\n            .then((response) => response.json())\n            .then(({ result, error }) => result || Promise.reject(error))\n    }\n\n    /**\n     * @param method    {string}\n     * @param params    {any}  todo: Array<any>\n     * @return {Promise<any>}\n     */\n    send(method, params) {\n        return this.sendImpl(\n            this.host,\n            {id: 1, jsonrpc: \"2.0\", method: method, params: params}\n        );\n    }\n\n    /**\n     * Use this method to get information about address: balance, code, data, last_transaction_id.\n     * @param address {string}\n     */\n    async getAddressInfo(address) {\n        return this.send('getAddressInformation', {address: address});\n    }\n\n    /**\n     * Similar to previous one but tries to parse additional information for known contract types. This method is based on generic.getAccountState thus number of recognizable contracts may grow. For wallets we recommend to use getWalletInformation.\n     * @param address {string}\n     */\n    async getExtendedAddressInfo(address) {\n        return this.send('getExtendedAddressInformation', {address: address});\n    }\n\n    /**\n     * Use this method to retrieve wallet information, this method parse contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, stadart wallet and v3 wallet.\n     * @param address {string}\n     */\n    async getWalletInfo(address) {\n        return this.send('getWalletInformation', {address: address});\n    }\n\n    /**\n     * Use this method to get transaction history of a given address.\n     * @param address   {string}\n     * @param limit?    {number}\n     * @param lt?    {number}\n     * @param hash?    {string}\n     * @param to_lt?    {number}\n     * @return array of transaction object\n     */\n    async getTransactions(address, limit = 20, lt = undefined, hash = undefined, to_lt = undefined, archival = undefined) {\n        return this.send(\"getTransactions\", {address, limit, lt, hash, to_lt, archival});\n    };\n\n    /**\n     * Use this method to get balance (in nanograms) of a given address.\n     * @param address {string}\n     */\n    async getBalance(address) {\n        return this.send('getAddressBalance', {address: address});\n    }\n\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param base64 {string} base64 of boc bytes Cell.toBoc\n     */\n    async sendBoc(base64) {\n        return this.send(\"sendBoc\", {'boc': base64});\n    };\n\n    /**\n     * @deprecated\n     * Send external message\n     * @param query     object as described https://toncenter.com/api/test/v2/#sendQuerySimple\n     */\n    async sendQuery(query) {\n        return this.send(\"sendQuerySimple\", query);\n    };\n\n\n    /**\n     * @param query     object as described https://toncenter.com/api/test/v2/#estimateFee\n     * @return fees object\n     */\n    async getEstimateFee(query) {\n        return this.send(\"estimateFee\", query);\n    };\n\n    /**\n     * Invoke get-method of smart contract\n     * todo: think about throw error if result.exit_code !== 0 (the change breaks backward compatibility)\n     * @param address   {string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    async call(address, method, params = []) {\n        return this.send('runGetMethod', {\n            address: address,\n            method: method,\n            stack: params,\n        });\n    }\n\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    async call2(address, method, params = []) {\n        const result = await this.send('runGetMethod', {\n            address: address,\n            method: method,\n            stack: params\n        });\n        return HttpProviderUtils.parseResponse(result);\n    }\n\n    /**\n     * Returns ID's of last and init block of masterchain\n     */\n    async getMasterchainInfo() {\n        return this.send('getMasterchainInfo', {});\n    }\n\n    /**\n     * Returns ID's of shardchain blocks included in this masterchain block\n     * @param masterchainBlockNumber {number}\n     */\n    async getBlockShards(masterchainBlockNumber) {\n        return this.send('shards', {\n            seqno: masterchainBlockNumber\n        });\n    }\n\n    /**\n     * Returns transactions hashes included in this block\n     * @param workchain {number}\n     * @param shardId   {string}\n     * @param shardBlockNumber  {number}\n     */\n    async getBlockTransactions(workchain, shardId, shardBlockNumber) {\n        return this.send('getBlockTransactions', {\n            workchain: workchain,\n            shard: shardId,\n            seqno: shardBlockNumber\n        });\n    }\n\n    /**\n     * Returns transactions hashes included in this masterhcain block\n     * @param masterchainBlockNumber  {number}\n     */\n    async getMasterchainBlockTransactions(masterchainBlockNumber) {\n        return this.getBlockTransactions(-1, SHARD_ID_ALL, masterchainBlockNumber);\n    }\n\n    /**\n     * Returns block header and his previous blocks ID's\n     * @param workchain {number}\n     * @param shardId   {string}\n     * @param shardBlockNumber  {number}\n     */\n    async getBlockHeader(workchain, shardId, shardBlockNumber) {\n        return this.send('getBlockHeader', {\n            workchain: workchain,\n            shard: shardId,\n            seqno: shardBlockNumber\n        });\n    }\n\n    /**\n     * Returns masterchain block header and his previous block ID\n     * @param masterchainBlockNumber  {number}\n     */\n    async getMasterchainBlockHeader(masterchainBlockNumber) {\n        return this.getBlockHeader(-1, SHARD_ID_ALL, masterchainBlockNumber);\n    }\n}\n\nHttpProvider.SHARD_ID_ALL = SHARD_ID_ALL;\n\nmodule.exports.default = HttpProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}