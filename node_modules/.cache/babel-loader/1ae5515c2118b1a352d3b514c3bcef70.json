{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryKeyStore = void 0;\nvar keystore_1 = require(\"./keystore\");\nvar key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nvar InMemoryKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(InMemoryKeyStore, _keystore_1$KeyStore);\n  var _super = _createSuper(InMemoryKeyStore);\n  function InMemoryKeyStore() {\n    var _this;\n    _classCallCheck(this, InMemoryKeyStore);\n    _this = _super.call(this);\n    _this.keys = {};\n    return _this;\n  }\n  /**\n   * Stores a {@KeyPair} in in-memory storage item\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  _createClass(InMemoryKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.keys[\"\".concat(accountId, \":\").concat(networkId)] = keyPair.toString();\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(networkId, accountId) {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n                if (value) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", null);\n              case 3:\n                return _context2.abrupt(\"return\", key_pair_1.KeyPair.fromString(value));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(networkId, accountId) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                delete this.keys[\"\".concat(accountId, \":\").concat(networkId)];\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n      return removeKey;\n    }()\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.keys = {};\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n      return clear;\n    }()\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                Object.keys(this.keys).forEach(function (key) {\n                  var parts = key.split(':');\n                  result.add(parts[1]);\n                });\n                return _context5.abrupt(\"return\", Array.from(result.values()));\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(networkId) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Array();\n                Object.keys(this.keys).forEach(function (key) {\n                  var parts = key.split(':');\n                  if (parts[parts.length - 1] === networkId) {\n                    result.push(parts.slice(0, parts.length - 1).join(':'));\n                  }\n                });\n                return _context6.abrupt(\"return\", result);\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n      return getAccounts;\n    }() /** @hidden */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'InMemoryKeyStore';\n    }\n  }]);\n  return InMemoryKeyStore;\n}(keystore_1.KeyStore);\nexports.InMemoryKeyStore = InMemoryKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","InMemoryKeyStore","keystore_1","require","key_pair_1","keys","networkId","accountId","keyPair","toString","KeyPair","fromString","result","Set","forEach","key","parts","split","add","Array","from","values","length","push","slice","join","KeyStore"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-api-js/lib/key_stores/in_memory_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemoryKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor() {\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n    }\n    /**\n     * Gets a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.keys[`${accountId}:${networkId}`];\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        delete this.keys[`${accountId}:${networkId}`];\n    }\n    /**\n     * Removes all {@link KeyPairs} from in-memory storage\n     */\n    async clear() {\n        this.keys = {};\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            result.add(parts[1]);\n        });\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        Object.keys(this.keys).forEach((key) => {\n            const parts = key.split(':');\n            if (parts[parts.length - 1] === networkId) {\n                result.push(parts.slice(0, parts.length - 1).join(':'));\n            }\n        });\n        return result;\n    }\n    /** @hidden */\n    toString() {\n        return 'InMemoryKeyStore';\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}