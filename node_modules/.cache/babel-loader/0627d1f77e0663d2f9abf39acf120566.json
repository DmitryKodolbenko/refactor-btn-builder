{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserLocalStorageKeyStore = void 0;\nvar keystore_1 = require(\"./keystore\");\nvar key_pair_1 = require(\"../utils/key_pair\");\nvar LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nvar BrowserLocalStorageKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(BrowserLocalStorageKeyStore, _keystore_1$KeyStore);\n  var _super = _createSuper(BrowserLocalStorageKeyStore);\n  /**\n   * @param localStorage defaults to window.localStorage\n   * @param prefix defaults to `near-api-js:keystore:`\n   */\n  function BrowserLocalStorageKeyStore() {\n    var _this;\n    var localStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.localStorage;\n    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOCAL_STORAGE_KEY_PREFIX;\n    _classCallCheck(this, BrowserLocalStorageKeyStore);\n    _this = _super.call(this);\n    _this.localStorage = localStorage;\n    _this.prefix = prefix;\n    return _this;\n  }\n  /**\n   * Stores a {@link KeyPair} in local storage.\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  _createClass(BrowserLocalStorageKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(networkId, accountId) {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n                if (value) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\", null);\n              case 3:\n                return _context2.abrupt(\"return\", key_pair_1.KeyPair.fromString(value));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(networkId, accountId) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n      return removeKey;\n    }()\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _iterator, _step, key;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.storageKeys());\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    key = _step.value;\n                    if (key.startsWith(this.prefix)) {\n                      this.localStorage.removeItem(key);\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n      return clear;\n    }()\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var result, _iterator2, _step2, key, parts;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                _iterator2 = _createForOfIteratorHelper(this.storageKeys());\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    key = _step2.value;\n                    if (key.startsWith(this.prefix)) {\n                      parts = key.substring(this.prefix.length).split(':');\n                      result.add(parts[1]);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                return _context5.abrupt(\"return\", Array.from(result.values()));\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(networkId) {\n        var result, _iterator3, _step3, key, parts;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Array();\n                _iterator3 = _createForOfIteratorHelper(this.storageKeys());\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    key = _step3.value;\n                    if (key.startsWith(this.prefix)) {\n                      parts = key.substring(this.prefix.length).split(':');\n                      if (parts[1] === networkId) {\n                        result.push(parts[0]);\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                return _context6.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n      return getAccounts;\n    }()\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n  }, {\n    key: \"storageKeyForSecretKey\",\n    value: function storageKeyForSecretKey(networkId, accountId) {\n      return \"\".concat(this.prefix).concat(accountId, \":\").concat(networkId);\n    }\n    /** @hidden */\n  }, {\n    key: \"storageKeys\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime().mark(function storageKeys() {\n      var i;\n      return _regeneratorRuntime().wrap(function storageKeys$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              i = 0;\n            case 1:\n              if (!(i < this.localStorage.length)) {\n                _context7.next = 7;\n                break;\n              }\n              _context7.next = 4;\n              return this.localStorage.key(i);\n            case 4:\n              i++;\n              _context7.next = 1;\n              break;\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, storageKeys, this);\n    })\n  }]);\n  return BrowserLocalStorageKeyStore;\n}(keystore_1.KeyStore);\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","BrowserLocalStorageKeyStore","keystore_1","require","key_pair_1","LOCAL_STORAGE_KEY_PREFIX","localStorage","window","prefix","networkId","accountId","keyPair","setItem","storageKeyForSecretKey","toString","getItem","KeyPair","fromString","removeItem","storageKeys","key","startsWith","result","Set","parts","substring","length","split","add","Array","from","values","push","i","KeyStore"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/key_stores/browser_local_storage_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserLocalStorageKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nconst key_pair_1 = require(\"../utils/key_pair\");\nconst LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass BrowserLocalStorageKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param localStorage defaults to window.localStorage\n     * @param prefix defaults to `near-api-js:keystore:`\n     */\n    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {\n        super();\n        this.localStorage = localStorage;\n        this.prefix = prefix;\n    }\n    /**\n     * Stores a {@link KeyPair} in local storage.\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n    }\n    /**\n     * Gets a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n        if (!value) {\n            return null;\n        }\n        return key_pair_1.KeyPair.fromString(value);\n    }\n    /**\n     * Removes a {@link KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n    }\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */\n    async clear() {\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                this.localStorage.removeItem(key);\n            }\n        }\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                result.add(parts[1]);\n            }\n        }\n        return Array.from(result.values());\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Array();\n        for (const key of this.storageKeys()) {\n            if (key.startsWith(this.prefix)) {\n                const parts = key.substring(this.prefix.length).split(':');\n                if (parts[1] === networkId) {\n                    result.push(parts[0]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */\n    storageKeyForSecretKey(networkId, accountId) {\n        return `${this.prefix}${accountId}:${networkId}`;\n    }\n    /** @hidden */\n    *storageKeys() {\n        for (let i = 0; i < this.localStorage.length; i++) {\n            yield this.localStorage.key(i);\n        }\n    }\n}\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}