{"ast":null,"code":"import { connect, Contract, keyStores, WalletConnection } from \"near-api-js\";\nexport const initializeWalletNEAR = async (setNEARMaxAmount, setNEARwalletKey, setUSNMaxAmount) => {\n  const connectionConfig = {\n    networkId: \"mainnet\",\n    keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n    nodeUrl: \"https://rpc.mainnet.near.org\",\n    walletUrl: \"https://wallet.mainnet.near.org\",\n    helperUrl: \"https://helper.mainnet.near.org\",\n    explorerUrl: \"https://explorer.mainnet.near.org\"\n  };\n  const receiver = process.env.REACT_APP_NEAR_CONTRACT ? process.env.REACT_APP_NEAR_CONTRACT : \"\";\n  const nearConnection = await connect(connectionConfig);\n  const walletConnection = new WalletConnection(nearConnection, receiver);\n  const account = await nearConnection.account(process.env.REACT_APP_BACK_NEAR_WALLET ? process.env.REACT_APP_BACK_NEAR_WALLET : \"\");\n  setNEARMaxAmount(Number((await account.state()).amount) / 1000000000000000000000000);\n  setUSNMaxAmount((await new Contract(walletConnection.account(), 'usn', {\n    changeMethods: [\"\"],\n    viewMethods: ['ft_balance_of']\n  }\n  //@ts-ignore\n  ).ft_balance_of({\n    account_id: 'tonanawallet.near'\n  })) / 1000000000000000000);\n  if (walletConnection.isSignedIn()) {\n    const walletAccountId = walletConnection.getAccountId();\n    setNEARwalletKey(walletAccountId);\n\n    //@ts-ignore\n    window.contract = await new Contract(walletConnection.account(), receiver, {\n      changeMethods: [\"payToWallet\"],\n      viewMethods: []\n    });\n  }\n};","map":{"version":3,"names":["connect","Contract","keyStores","WalletConnection","initializeWalletNEAR","setNEARMaxAmount","setNEARwalletKey","setUSNMaxAmount","connectionConfig","networkId","keyStore","BrowserLocalStorageKeyStore","nodeUrl","walletUrl","helperUrl","explorerUrl","receiver","process","env","REACT_APP_NEAR_CONTRACT","nearConnection","walletConnection","account","REACT_APP_BACK_NEAR_WALLET","Number","state","amount","changeMethods","viewMethods","ft_balance_of","account_id","isSignedIn","walletAccountId","getAccountId","window","contract"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/wallet/initializeWalletNEAR.ts"],"sourcesContent":["import { connect, Contract, keyStores, WalletConnection } from \"near-api-js\";\n\nexport const initializeWalletNEAR = async (setNEARMaxAmount: any, setNEARwalletKey: any, setUSNMaxAmount: any) => {\n  const connectionConfig = {\n    networkId: \"mainnet\",\n    keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n    nodeUrl: \"https://rpc.mainnet.near.org\",\n    walletUrl: \"https://wallet.mainnet.near.org\",\n    helperUrl: \"https://helper.mainnet.near.org\",\n    explorerUrl: \"https://explorer.mainnet.near.org\",\n  };\n\n  const receiver = process.env.REACT_APP_NEAR_CONTRACT\n    ? process.env.REACT_APP_NEAR_CONTRACT\n    : \"\";\n\n  const nearConnection = await connect(connectionConfig as any);\n  const walletConnection = new WalletConnection(nearConnection, receiver);\n\n  const account = await nearConnection.account(\n    process.env.REACT_APP_BACK_NEAR_WALLET\n      ? process.env.REACT_APP_BACK_NEAR_WALLET\n      : \"\"\n  );\n  setNEARMaxAmount(\n    Number((await account.state()).amount) / 1000000000000000000000000\n  );\n  \n  \n  setUSNMaxAmount(await new Contract(\n  walletConnection.account(),\n  'usn',\n  {\n    changeMethods: [\"\"],\n    viewMethods: ['ft_balance_of'],\n  }\n  //@ts-ignore\n).ft_balance_of({account_id:'tonanawallet.near'}) / 1000000000000000000\n)\n\n  if (walletConnection.isSignedIn()) {\n    const walletAccountId = walletConnection.getAccountId();\n    setNEARwalletKey(walletAccountId);\n\n    //@ts-ignore\n    window.contract = await new Contract(\n      walletConnection.account(),\n      receiver,\n      {\n        changeMethods: [\"payToWallet\"],\n        viewMethods: [],\n      }\n    );\n  }\n};"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,aAAa;AAE5E,OAAO,MAAMC,oBAAoB,GAAG,OAAOC,gBAAqB,EAAEC,gBAAqB,EAAEC,eAAoB,KAAK;EAChH,MAAMC,gBAAgB,GAAG;IACvBC,SAAS,EAAE,SAAS;IACpBC,QAAQ,EAAE,IAAIR,SAAS,CAACS,2BAA2B,EAAE;IACrDC,OAAO,EAAE,8BAA8B;IACvCC,SAAS,EAAE,iCAAiC;IAC5CC,SAAS,EAAE,iCAAiC;IAC5CC,WAAW,EAAE;EACf,CAAC;EAED,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB,GAChDF,OAAO,CAACC,GAAG,CAACC,uBAAuB,GACnC,EAAE;EAEN,MAAMC,cAAc,GAAG,MAAMpB,OAAO,CAACQ,gBAAgB,CAAQ;EAC7D,MAAMa,gBAAgB,GAAG,IAAIlB,gBAAgB,CAACiB,cAAc,EAAEJ,QAAQ,CAAC;EAEvE,MAAMM,OAAO,GAAG,MAAMF,cAAc,CAACE,OAAO,CAC1CL,OAAO,CAACC,GAAG,CAACK,0BAA0B,GAClCN,OAAO,CAACC,GAAG,CAACK,0BAA0B,GACtC,EAAE,CACP;EACDlB,gBAAgB,CACdmB,MAAM,CAAC,CAAC,MAAMF,OAAO,CAACG,KAAK,EAAE,EAAEC,MAAM,CAAC,GAAG,yBAAyB,CACnE;EAGDnB,eAAe,CAAC,OAAM,IAAIN,QAAQ,CAClCoB,gBAAgB,CAACC,OAAO,EAAE,EAC1B,KAAK,EACL;IACEK,aAAa,EAAE,CAAC,EAAE,CAAC;IACnBC,WAAW,EAAE,CAAC,eAAe;EAC/B;EACA;EAAA,CACD,CAACC,aAAa,CAAC;IAACC,UAAU,EAAC;EAAmB,CAAC,CAAC,IAAG,mBAAmB,CACtE;EAEC,IAAIT,gBAAgB,CAACU,UAAU,EAAE,EAAE;IACjC,MAAMC,eAAe,GAAGX,gBAAgB,CAACY,YAAY,EAAE;IACvD3B,gBAAgB,CAAC0B,eAAe,CAAC;;IAEjC;IACAE,MAAM,CAACC,QAAQ,GAAG,MAAM,IAAIlC,QAAQ,CAClCoB,gBAAgB,CAACC,OAAO,EAAE,EAC1BN,QAAQ,EACR;MACEW,aAAa,EAAE,CAAC,aAAa,CAAC;MAC9BC,WAAW,EAAE;IACf,CAAC,CACF;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module"}