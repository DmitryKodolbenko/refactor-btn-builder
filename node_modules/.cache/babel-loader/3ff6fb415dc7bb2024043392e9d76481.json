{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtendedSecp256k1Signature = exports.Secp256k1Signature = void 0;\nfunction trimLeadingNullBytes(inData) {\n  let numberOfLeadingNullBytes = 0;\n  for (const byte of inData) {\n    if (byte === 0x00) {\n      numberOfLeadingNullBytes++;\n    } else {\n      break;\n    }\n  }\n  return inData.slice(numberOfLeadingNullBytes);\n}\nconst derTagInteger = 0x02;\nclass Secp256k1Signature {\n  constructor(r, s) {\n    if (r.length > 32 || r.length === 0 || r[0] === 0x00) {\n      throw new Error(\"Unsigned integer r must be encoded as unpadded big endian.\");\n    }\n    if (s.length > 32 || s.length === 0 || s[0] === 0x00) {\n      throw new Error(\"Unsigned integer s must be encoded as unpadded big endian.\");\n    }\n    this.data = {\n      r: r,\n      s: s\n    };\n  }\n  /**\n   * Takes the pair of integers (r, s) as 2x32 byte of binary data.\n   *\n   * Note: This is the format Cosmos SDK uses natively.\n   *\n   * @param data a 64 byte value containing integers r and s.\n   */\n  static fromFixedLength(data) {\n    if (data.length !== 64) {\n      throw new Error(`Got invalid data length: ${data.length}. Expected 2x 32 bytes for the pair (r, s)`);\n    }\n    return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));\n  }\n  static fromDer(data) {\n    let pos = 0;\n    if (data[pos++] !== 0x30) {\n      throw new Error(\"Prefix 0x30 expected\");\n    }\n    const bodyLength = data[pos++];\n    if (data.length - pos !== bodyLength) {\n      throw new Error(\"Data length mismatch detected\");\n    }\n    // r\n    const rTag = data[pos++];\n    if (rTag !== derTagInteger) {\n      throw new Error(\"INTEGER tag expected\");\n    }\n    const rLength = data[pos++];\n    if (rLength >= 0x80) {\n      throw new Error(\"Decoding length values above 127 not supported\");\n    }\n    const rData = data.slice(pos, pos + rLength);\n    pos += rLength;\n    // s\n    const sTag = data[pos++];\n    if (sTag !== derTagInteger) {\n      throw new Error(\"INTEGER tag expected\");\n    }\n    const sLength = data[pos++];\n    if (sLength >= 0x80) {\n      throw new Error(\"Decoding length values above 127 not supported\");\n    }\n    const sData = data.slice(pos, pos + sLength);\n    pos += sLength;\n    return new Secp256k1Signature(\n    // r/s data can contain leading 0 bytes to express integers being non-negative in DER\n    trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));\n  }\n  r(length) {\n    if (length === undefined) {\n      return this.data.r;\n    } else {\n      const paddingLength = length - this.data.r.length;\n      if (paddingLength < 0) {\n        throw new Error(\"Length too small to hold parameter r\");\n      }\n      const padding = new Uint8Array(paddingLength);\n      return new Uint8Array([...padding, ...this.data.r]);\n    }\n  }\n  s(length) {\n    if (length === undefined) {\n      return this.data.s;\n    } else {\n      const paddingLength = length - this.data.s.length;\n      if (paddingLength < 0) {\n        throw new Error(\"Length too small to hold parameter s\");\n      }\n      const padding = new Uint8Array(paddingLength);\n      return new Uint8Array([...padding, ...this.data.s]);\n    }\n  }\n  toFixedLength() {\n    return new Uint8Array([...this.r(32), ...this.s(32)]);\n  }\n  toDer() {\n    // DER supports negative integers but our data is unsigned. Thus we need to prepend\n    // a leading 0 byte when the higest bit is set to differentiate nagative values\n    const rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0, ...this.data.r]) : this.data.r;\n    const sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0, ...this.data.s]) : this.data.s;\n    const rLength = rEncoded.length;\n    const sLength = sEncoded.length;\n    const data = new Uint8Array([derTagInteger, rLength, ...rEncoded, derTagInteger, sLength, ...sEncoded]);\n    return new Uint8Array([0x30, data.length, ...data]);\n  }\n}\nexports.Secp256k1Signature = Secp256k1Signature;\n/**\n * A Secp256k1Signature plus the recovery parameter\n */\nclass ExtendedSecp256k1Signature extends Secp256k1Signature {\n  constructor(r, s, recovery) {\n    super(r, s);\n    if (!Number.isInteger(recovery)) {\n      throw new Error(\"The recovery parameter must be an integer.\");\n    }\n    if (recovery < 0 || recovery > 4) {\n      throw new Error(\"The recovery parameter must be one of 0, 1, 2, 3.\");\n    }\n    this.recovery = recovery;\n  }\n  /**\n   * Decode extended signature from the simple fixed length encoding\n   * described in toFixedLength().\n   */\n  static fromFixedLength(data) {\n    if (data.length !== 65) {\n      throw new Error(`Got invalid data length ${data.length}. Expected 32 + 32 + 1`);\n    }\n    return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);\n  }\n  /**\n   * A simple custom encoding that encodes the extended signature as\n   * r (32 bytes) | s (32 bytes) | recovery param (1 byte)\n   * where | denotes concatenation of bonary data.\n   */\n  toFixedLength() {\n    return new Uint8Array([...this.r(32), ...this.s(32), this.recovery]);\n  }\n}\nexports.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;","map":{"version":3,"sources":["../src/secp256k1signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExtendedSecp256k1Signature = exports.Secp256k1Signature = void 0;\nfunction trimLeadingNullBytes(inData) {\n    let numberOfLeadingNullBytes = 0;\n    for (const byte of inData) {\n        if (byte === 0x00) {\n            numberOfLeadingNullBytes++;\n        }\n        else {\n            break;\n        }\n    }\n    return inData.slice(numberOfLeadingNullBytes);\n}\nconst derTagInteger = 0x02;\nclass Secp256k1Signature {\n    constructor(r, s) {\n        if (r.length > 32 || r.length === 0 || r[0] === 0x00) {\n            throw new Error(\"Unsigned integer r must be encoded as unpadded big endian.\");\n        }\n        if (s.length > 32 || s.length === 0 || s[0] === 0x00) {\n            throw new Error(\"Unsigned integer s must be encoded as unpadded big endian.\");\n        }\n        this.data = {\n            r: r,\n            s: s,\n        };\n    }\n    /**\n     * Takes the pair of integers (r, s) as 2x32 byte of binary data.\n     *\n     * Note: This is the format Cosmos SDK uses natively.\n     *\n     * @param data a 64 byte value containing integers r and s.\n     */\n    static fromFixedLength(data) {\n        if (data.length !== 64) {\n            throw new Error(`Got invalid data length: ${data.length}. Expected 2x 32 bytes for the pair (r, s)`);\n        }\n        return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));\n    }\n    static fromDer(data) {\n        let pos = 0;\n        if (data[pos++] !== 0x30) {\n            throw new Error(\"Prefix 0x30 expected\");\n        }\n        const bodyLength = data[pos++];\n        if (data.length - pos !== bodyLength) {\n            throw new Error(\"Data length mismatch detected\");\n        }\n        // r\n        const rTag = data[pos++];\n        if (rTag !== derTagInteger) {\n            throw new Error(\"INTEGER tag expected\");\n        }\n        const rLength = data[pos++];\n        if (rLength >= 0x80) {\n            throw new Error(\"Decoding length values above 127 not supported\");\n        }\n        const rData = data.slice(pos, pos + rLength);\n        pos += rLength;\n        // s\n        const sTag = data[pos++];\n        if (sTag !== derTagInteger) {\n            throw new Error(\"INTEGER tag expected\");\n        }\n        const sLength = data[pos++];\n        if (sLength >= 0x80) {\n            throw new Error(\"Decoding length values above 127 not supported\");\n        }\n        const sData = data.slice(pos, pos + sLength);\n        pos += sLength;\n        return new Secp256k1Signature(\n        // r/s data can contain leading 0 bytes to express integers being non-negative in DER\n        trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));\n    }\n    r(length) {\n        if (length === undefined) {\n            return this.data.r;\n        }\n        else {\n            const paddingLength = length - this.data.r.length;\n            if (paddingLength < 0) {\n                throw new Error(\"Length too small to hold parameter r\");\n            }\n            const padding = new Uint8Array(paddingLength);\n            return new Uint8Array([...padding, ...this.data.r]);\n        }\n    }\n    s(length) {\n        if (length === undefined) {\n            return this.data.s;\n        }\n        else {\n            const paddingLength = length - this.data.s.length;\n            if (paddingLength < 0) {\n                throw new Error(\"Length too small to hold parameter s\");\n            }\n            const padding = new Uint8Array(paddingLength);\n            return new Uint8Array([...padding, ...this.data.s]);\n        }\n    }\n    toFixedLength() {\n        return new Uint8Array([...this.r(32), ...this.s(32)]);\n    }\n    toDer() {\n        // DER supports negative integers but our data is unsigned. Thus we need to prepend\n        // a leading 0 byte when the higest bit is set to differentiate nagative values\n        const rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0, ...this.data.r]) : this.data.r;\n        const sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0, ...this.data.s]) : this.data.s;\n        const rLength = rEncoded.length;\n        const sLength = sEncoded.length;\n        const data = new Uint8Array([derTagInteger, rLength, ...rEncoded, derTagInteger, sLength, ...sEncoded]);\n        return new Uint8Array([0x30, data.length, ...data]);\n    }\n}\nexports.Secp256k1Signature = Secp256k1Signature;\n/**\n * A Secp256k1Signature plus the recovery parameter\n */\nclass ExtendedSecp256k1Signature extends Secp256k1Signature {\n    constructor(r, s, recovery) {\n        super(r, s);\n        if (!Number.isInteger(recovery)) {\n            throw new Error(\"The recovery parameter must be an integer.\");\n        }\n        if (recovery < 0 || recovery > 4) {\n            throw new Error(\"The recovery parameter must be one of 0, 1, 2, 3.\");\n        }\n        this.recovery = recovery;\n    }\n    /**\n     * Decode extended signature from the simple fixed length encoding\n     * described in toFixedLength().\n     */\n    static fromFixedLength(data) {\n        if (data.length !== 65) {\n            throw new Error(`Got invalid data length ${data.length}. Expected 32 + 32 + 1`);\n        }\n        return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);\n    }\n    /**\n     * A simple custom encoding that encodes the extended signature as\n     * r (32 bytes) | s (32 bytes) | recovery param (1 byte)\n     * where | denotes concatenation of bonary data.\n     */\n    toFixedLength() {\n        return new Uint8Array([...this.r(32), ...this.s(32), this.recovery]);\n    }\n}\nexports.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;\n//# sourceMappingURL=secp256k1signature.js.map"]},"metadata":{},"sourceType":"script"}