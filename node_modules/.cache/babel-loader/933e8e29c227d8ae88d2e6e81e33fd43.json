{"ast":null,"code":"const {\n  BN,\n  base64ToBytes\n} = require(\"../utils\");\nconst {\n  Cell\n} = require(\"../boc\");\nclass HttpProviderUtils {\n  static parseObject(x) {\n    const typeName = x['@type'];\n    switch (typeName) {\n      case 'tvm.list':\n      case 'tvm.tuple':\n        return x.elements.map(HttpProviderUtils.parseObject);\n      case 'tvm.stackEntryTuple':\n        return HttpProviderUtils.parseObject(x.tuple);\n      case 'tvm.stackEntryNumber':\n        return HttpProviderUtils.parseObject(x.number);\n      case 'tvm.numberDecimal':\n        return new BN(x.number, 10);\n      default:\n        throw new Error('unknown type ' + typeName);\n    }\n  }\n\n  /**\n   * @param pair  {any[]}\n   * @return {any}\n   */\n  static parseResponseStack(pair) {\n    const typeName = pair[0];\n    const value = pair[1];\n    switch (typeName) {\n      case 'num':\n        return new BN(value.replace(/0x/, ''), 16);\n      case 'list':\n      case 'tuple':\n        return HttpProviderUtils.parseObject(value);\n      case 'cell':\n        const contentBytes = base64ToBytes(value.bytes);\n        return Cell.oneFromBoc(contentBytes);\n      default:\n        throw new Error('unknown type ' + typeName);\n    }\n  }\n  static parseResponse(result) {\n    if (result.exit_code !== 0) throw new Error(result);\n    const arr = result.stack.map(HttpProviderUtils.parseResponseStack);\n    return arr.length === 1 ? arr[0] : arr;\n  }\n  static makeArg(arg) {\n    if (arg instanceof BN || arg instanceof Number) {\n      return ['num', arg];\n    } else {\n      throw new Error('unknown arg type ' + arg);\n    }\n  }\n  static makeArgs(args) {\n    return args.map(this.makeArg);\n  }\n}\nmodule.exports.default = HttpProviderUtils;","map":{"version":3,"names":["BN","base64ToBytes","require","Cell","HttpProviderUtils","parseObject","x","typeName","elements","map","tuple","number","Error","parseResponseStack","pair","value","replace","contentBytes","bytes","oneFromBoc","parseResponse","result","exit_code","arr","stack","length","makeArg","arg","Number","makeArgs","args","module","exports","default"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/providers/HttpProviderUtils.js"],"sourcesContent":["const {BN, base64ToBytes} = require(\"../utils\");\nconst {Cell} = require(\"../boc\");\n\nclass HttpProviderUtils {\n\n    static parseObject(x) {\n        const typeName = x['@type'];\n        switch (typeName) {\n            case 'tvm.list':\n            case 'tvm.tuple':\n                return x.elements.map(HttpProviderUtils.parseObject);\n            case 'tvm.stackEntryTuple':\n                return HttpProviderUtils.parseObject(x.tuple);\n            case 'tvm.stackEntryNumber':\n                return HttpProviderUtils.parseObject(x.number);\n            case 'tvm.numberDecimal':\n                return new BN(x.number, 10);\n            default:\n                throw new Error('unknown type ' + typeName);\n        }\n    }\n\n    /**\n     * @param pair  {any[]}\n     * @return {any}\n     */\n    static parseResponseStack(pair) {\n        const typeName = pair[0];\n        const value = pair[1];\n\n        switch (typeName) {\n            case 'num':\n                return new BN(value.replace(/0x/, ''), 16);\n            case 'list':\n            case 'tuple':\n                return HttpProviderUtils.parseObject(value);\n            case 'cell':\n                const contentBytes = base64ToBytes(value.bytes);\n                return Cell.oneFromBoc(contentBytes);\n            default:\n                throw new Error('unknown type ' + typeName);\n        }\n    }\n\n    static parseResponse(result) {\n        if (result.exit_code !== 0) throw new Error(result);\n        const arr = result.stack.map(HttpProviderUtils.parseResponseStack);\n        return arr.length === 1 ? arr[0] : arr;\n    }\n\n    static makeArg(arg) {\n        if (arg instanceof BN || arg instanceof Number) {\n            return ['num', arg];\n        } else {\n            throw new Error('unknown arg type ' + arg);\n        }\n    }\n\n    static makeArgs(args) {\n        return args.map(this.makeArg);\n    }\n\n}\n\nmodule.exports.default = HttpProviderUtils;"],"mappings":"AAAA,MAAM;EAACA,EAAE;EAAEC;AAAa,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC/C,MAAM;EAACC;AAAI,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAME,iBAAiB,CAAC;EAEpB,OAAOC,WAAW,CAACC,CAAC,EAAE;IAClB,MAAMC,QAAQ,GAAGD,CAAC,CAAC,OAAO,CAAC;IAC3B,QAAQC,QAAQ;MACZ,KAAK,UAAU;MACf,KAAK,WAAW;QACZ,OAAOD,CAAC,CAACE,QAAQ,CAACC,GAAG,CAACL,iBAAiB,CAACC,WAAW,CAAC;MACxD,KAAK,qBAAqB;QACtB,OAAOD,iBAAiB,CAACC,WAAW,CAACC,CAAC,CAACI,KAAK,CAAC;MACjD,KAAK,sBAAsB;QACvB,OAAON,iBAAiB,CAACC,WAAW,CAACC,CAAC,CAACK,MAAM,CAAC;MAClD,KAAK,mBAAmB;QACpB,OAAO,IAAIX,EAAE,CAACM,CAAC,CAACK,MAAM,EAAE,EAAE,CAAC;MAC/B;QACI,MAAM,IAAIC,KAAK,CAAC,eAAe,GAAGL,QAAQ,CAAC;IAAC;EAExD;;EAEA;AACJ;AACA;AACA;EACI,OAAOM,kBAAkB,CAACC,IAAI,EAAE;IAC5B,MAAMP,QAAQ,GAAGO,IAAI,CAAC,CAAC,CAAC;IACxB,MAAMC,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;IAErB,QAAQP,QAAQ;MACZ,KAAK,KAAK;QACN,OAAO,IAAIP,EAAE,CAACe,KAAK,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;MAC9C,KAAK,MAAM;MACX,KAAK,OAAO;QACR,OAAOZ,iBAAiB,CAACC,WAAW,CAACU,KAAK,CAAC;MAC/C,KAAK,MAAM;QACP,MAAME,YAAY,GAAGhB,aAAa,CAACc,KAAK,CAACG,KAAK,CAAC;QAC/C,OAAOf,IAAI,CAACgB,UAAU,CAACF,YAAY,CAAC;MACxC;QACI,MAAM,IAAIL,KAAK,CAAC,eAAe,GAAGL,QAAQ,CAAC;IAAC;EAExD;EAEA,OAAOa,aAAa,CAACC,MAAM,EAAE;IACzB,IAAIA,MAAM,CAACC,SAAS,KAAK,CAAC,EAAE,MAAM,IAAIV,KAAK,CAACS,MAAM,CAAC;IACnD,MAAME,GAAG,GAAGF,MAAM,CAACG,KAAK,CAACf,GAAG,CAACL,iBAAiB,CAACS,kBAAkB,CAAC;IAClE,OAAOU,GAAG,CAACE,MAAM,KAAK,CAAC,GAAGF,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1C;EAEA,OAAOG,OAAO,CAACC,GAAG,EAAE;IAChB,IAAIA,GAAG,YAAY3B,EAAE,IAAI2B,GAAG,YAAYC,MAAM,EAAE;MAC5C,OAAO,CAAC,KAAK,EAAED,GAAG,CAAC;IACvB,CAAC,MAAM;MACH,MAAM,IAAIf,KAAK,CAAC,mBAAmB,GAAGe,GAAG,CAAC;IAC9C;EACJ;EAEA,OAAOE,QAAQ,CAACC,IAAI,EAAE;IAClB,OAAOA,IAAI,CAACrB,GAAG,CAAC,IAAI,CAACiB,OAAO,CAAC;EACjC;AAEJ;AAEAK,MAAM,CAACC,OAAO,CAACC,OAAO,GAAG7B,iBAAiB"},"metadata":{},"sourceType":"script"}