{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _Wallet_client, _Wallet_contract;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = exports.validateWalletType = exports.allTypes = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst __1 = require(\"..\");\nconst WalletV1R2Source_1 = require(\"../contracts/sources/WalletV1R2Source\");\nconst WalletV1R3Source_1 = require(\"../contracts/sources/WalletV1R3Source\");\nconst WalletV2R1Source_1 = require(\"../contracts/sources/WalletV2R1Source\");\nconst WalletV2R2Source_1 = require(\"../contracts/sources/WalletV2R2Source\");\nconst WalletV3R1Source_1 = require(\"../contracts/sources/WalletV3R1Source\");\nconst WalletV3R2Source_1 = require(\"../contracts/sources/WalletV3R2Source\");\nconst WalletV4Source_1 = require(\"../contracts/sources/WalletV4Source\");\nconst WalletContract_1 = require(\"../contracts/WalletContract\");\nconst CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nconst InternalMessage_1 = require(\"../messages/InternalMessage\");\nconst SendMode_1 = require(\"./SendMode\");\n// Wallet Contract Priority\nexports.allTypes = ['org.ton.wallets.simple.r2', 'org.ton.wallets.simple.r3', 'org.ton.wallets.v2', 'org.ton.wallets.v2.r2', 'org.ton.wallets.v4', 'org.ton.wallets.v3.r2', 'org.ton.wallets.v3'];\nfunction validateWalletType(src) {\n  if (src === 'org.ton.wallets.simple' || src === 'org.ton.wallets.simple.r2' || src === 'org.ton.wallets.simple.r3' || src === 'org.ton.wallets.v2' || src === 'org.ton.wallets.v2.r2' || src === 'org.ton.wallets.v3' || src === 'org.ton.wallets.v3.r2' || src === 'org.ton.wallets.v4') {\n    return src;\n  }\n  return null;\n}\nexports.validateWalletType = validateWalletType;\nfunction createContract(client, type, publicKey, workchain) {\n  if (type === 'org.ton.wallets.simple') {\n    throw Error('Unsupported wallet');\n  } else if (type === 'org.ton.wallets.simple.r2') {\n    return WalletContract_1.WalletContract.create(client, WalletV1R2Source_1.WalletV1R2Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.simple.r3') {\n    return WalletContract_1.WalletContract.create(client, WalletV1R3Source_1.WalletV1R3Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.v2') {\n    return WalletContract_1.WalletContract.create(client, WalletV2R1Source_1.WalletV2R1Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.v2.r2') {\n    return WalletContract_1.WalletContract.create(client, WalletV2R2Source_1.WalletV2R2Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.v3') {\n    return WalletContract_1.WalletContract.create(client, WalletV3R1Source_1.WalletV3R1Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.v3.r2') {\n    return WalletContract_1.WalletContract.create(client, WalletV3R2Source_1.WalletV3R2Source.create({\n      publicKey,\n      workchain\n    }));\n  } else if (type === 'org.ton.wallets.v4') {\n    return WalletContract_1.WalletContract.create(client, WalletV4Source_1.WalletV4Source.create({\n      publicKey,\n      workchain\n    }));\n  } else {\n    throw Error('Unknown wallet type: ' + type);\n  }\n}\nclass Wallet {\n  constructor(client, address) {\n    _Wallet_client.set(this, void 0);\n    _Wallet_contract.set(this, null);\n    __classPrivateFieldSet(this, _Wallet_client, client, \"f\");\n    this.address = address;\n  }\n  static open(client, address) {\n    return new Wallet(client, address);\n  }\n  static openDefault(client, workchain, secretKey) {\n    const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n    let c = createContract(client, 'org.ton.wallets.v3', publicKey, workchain);\n    let w = new Wallet(client, c.address);\n    w.prepare(workchain, publicKey, 'org.ton.wallets.v3');\n    return w;\n  }\n  static openByType(client, workchain, secretKey, type) {\n    const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n    let c = createContract(client, type, publicKey, workchain);\n    let w = new Wallet(client, c.address);\n    w.prepare(workchain, publicKey, type);\n    return w;\n  }\n  static openFromSource(client, source) {\n    let address = (0, __1.contractAddress)(source);\n    let w = new Wallet(client, address);\n    w.prepareFromSource(source);\n    return w;\n  }\n  static async findActiveBySecretKey(client, workchain, secretKey) {\n    const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n    let types = [];\n    for (let type of exports.allTypes) {\n      let contra = createContract(client, type, publicKey, workchain);\n      let deployed = await client.isContractDeployed(contra.address);\n      let balance = await client.getBalance(contra.address);\n      if (deployed || balance.gt(new bn_js_1.default(0))) {\n        types.push({\n          address: contra.address,\n          type,\n          balance,\n          deployed\n        });\n      }\n    }\n    return types;\n  }\n  static async findBestBySecretKey(client, workchain, secretKey) {\n    const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n    let allActive = await this.findActiveBySecretKey(client, workchain, secretKey);\n    // Create default one if no wallet exists\n    if (allActive.length === 0) {\n      return this.openDefault(client, workchain, secretKey);\n    }\n    // Try to match with biggest balance\n    let maxBalance = allActive[0].balance;\n    let bestContract = allActive[0].type;\n    for (let i = 1; i < allActive.length; i++) {\n      let ac = allActive[i];\n      // Contracts are sorted by priority\n      if (ac.balance.gte(maxBalance)) {\n        maxBalance = ac.balance;\n        bestContract = ac.type;\n      }\n    }\n    if (maxBalance.gt(new bn_js_1.default(0))) {\n      let c = createContract(client, bestContract, publicKey, workchain);\n      ;\n      let w = new Wallet(client, c.address);\n      w.prepare(workchain, publicKey, bestContract);\n      return w;\n    }\n    // Return last (as most recent)\n    let c = createContract(client, allActive[allActive.length - 1].type, publicKey, workchain);\n    let w = new Wallet(client, c.address);\n    w.prepare(workchain, publicKey, allActive[allActive.length - 1].type);\n    return w;\n  }\n  get prepared() {\n    return !!__classPrivateFieldGet(this, _Wallet_contract, \"f\");\n  }\n  async getSeqNo() {\n    if (await __classPrivateFieldGet(this, _Wallet_client, \"f\").isContractDeployed(this.address)) {\n      let res = await __classPrivateFieldGet(this, _Wallet_client, \"f\").callGetMethod(this.address, 'seqno');\n      return parseInt(res.stack[0][1], 16);\n    } else {\n      return 0;\n    }\n  }\n  prepare(workchain, publicKey) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'org.ton.wallets.v3';\n    let contra = createContract(__classPrivateFieldGet(this, _Wallet_client, \"f\"), type, publicKey, workchain);\n    if (!contra.address.equals(this.address)) {\n      throw Error('Contract have different address');\n    }\n    __classPrivateFieldSet(this, _Wallet_contract, contra, \"f\");\n  }\n  prepareFromSource(source) {\n    let contra = WalletContract_1.WalletContract.create(__classPrivateFieldGet(this, _Wallet_client, \"f\"), source);\n    if (!contra.address.equals(this.address)) {\n      throw Error('Contract have different address');\n    }\n    __classPrivateFieldSet(this, _Wallet_contract, contra, \"f\");\n  }\n  /**\n   * Transfers value to specified address\n   */\n  async transfer(args) {\n    const contract = __classPrivateFieldGet(this, _Wallet_contract, \"f\");\n    if (!contract) {\n      throw Error('Please, prepare wallet first');\n    }\n    // Resolve payload\n    let payload = null;\n    if (args.payload) {\n      if (typeof args.payload === 'string') {\n        payload = new __1.CommentMessage(args.payload);\n      } else if (Buffer.isBuffer(args.payload)) {\n        payload = new __1.BinaryMessage(args.payload);\n      } else if (args.payload instanceof __1.Cell) {\n        payload = new __1.CellMessage(args.payload);\n      }\n    }\n    // Check transfer\n    const transfer = await contract.createTransfer({\n      secretKey: args.secretKey,\n      seqno: args.seqno,\n      sendMode: args.sendMode || SendMode_1.SendMode.IGNORE_ERRORS + SendMode_1.SendMode.PAY_GAS_SEPARATLY,\n      timeout: args.timeout,\n      order: new InternalMessage_1.InternalMessage({\n        to: args.to,\n        value: args.value,\n        bounce: args.bounce,\n        body: new CommonMessageInfo_1.CommonMessageInfo({\n          body: payload\n        })\n      })\n    });\n    // Send\n    await __classPrivateFieldGet(this, _Wallet_client, \"f\").sendExternalMessage(contract, transfer);\n  }\n  /**\n   * Signing transfer request. Could be done offline.\n   * @param args sign\n   * @returns\n   */\n  transferSign(args) {\n    const contract = __classPrivateFieldGet(this, _Wallet_contract, \"f\");\n    if (!contract) {\n      throw Error('Please, prepare wallet first');\n    }\n    // Resolve payload\n    let payload = null;\n    if (args.payload) {\n      if (typeof args.payload === 'string') {\n        payload = new __1.CommentMessage(args.payload);\n      } else if (Buffer.isBuffer(args.payload)) {\n        payload = new __1.BinaryMessage(args.payload);\n      } else if (args.payload instanceof __1.Cell) {\n        payload = new __1.CellMessage(args.payload);\n      }\n    }\n    // Transfer\n    const transfer = contract.createTransfer({\n      secretKey: args.secretKey,\n      seqno: args.seqno,\n      sendMode: args.sendMode || SendMode_1.SendMode.IGNORE_ERRORS + SendMode_1.SendMode.PAY_GAS_SEPARATLY,\n      timeout: args.timeout,\n      order: new InternalMessage_1.InternalMessage({\n        to: args.to,\n        value: args.value,\n        bounce: args.bounce,\n        body: new CommonMessageInfo_1.CommonMessageInfo({\n          body: payload\n        })\n      })\n    });\n    // External message\n    const message = new __1.ExternalMessage({\n      to: contract.address,\n      body: new CommonMessageInfo_1.CommonMessageInfo({\n        stateInit: new __1.StateInit({\n          code: contract.source.initialCode,\n          data: contract.source.initialData\n        }),\n        body: new __1.CellMessage(transfer)\n      })\n    });\n    const res = new __1.Cell();\n    message.writeTo(res);\n    return res;\n  }\n  /**\n   * Commit prepared transfer\n   * @param transfer signed transfer for commit\n   */\n  async transferCommit(transfer) {\n    await __classPrivateFieldGet(this, _Wallet_client, \"f\").sendFile(transfer.toBoc({\n      idx: false\n    }));\n  }\n}\nexports.Wallet = Wallet;\n_Wallet_client = new WeakMap(), _Wallet_contract = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","__importDefault","mod","__esModule","_Wallet_client","_Wallet_contract","Object","defineProperty","exports","Wallet","validateWalletType","allTypes","bn_js_1","require","ton_crypto_1","__1","WalletV1R2Source_1","WalletV1R3Source_1","WalletV2R1Source_1","WalletV2R2Source_1","WalletV3R1Source_1","WalletV3R2Source_1","WalletV4Source_1","WalletContract_1","CommonMessageInfo_1","InternalMessage_1","SendMode_1","src","createContract","client","type","publicKey","workchain","Error","WalletContract","create","WalletV1R2Source","WalletV1R3Source","WalletV2R1Source","WalletV2R2Source","WalletV3R1Source","WalletV3R2Source","WalletV4Source","constructor","address","open","openDefault","secretKey","keyPairFromSecretKey","c","w","prepare","openByType","openFromSource","source","contractAddress","prepareFromSource","findActiveBySecretKey","types","contra","deployed","isContractDeployed","balance","getBalance","gt","default","push","findBestBySecretKey","allActive","length","maxBalance","bestContract","i","ac","gte","prepared","getSeqNo","res","callGetMethod","parseInt","stack","equals","transfer","args","contract","payload","CommentMessage","Buffer","isBuffer","BinaryMessage","Cell","CellMessage","createTransfer","seqno","sendMode","SendMode","IGNORE_ERRORS","PAY_GAS_SEPARATLY","timeout","order","InternalMessage","to","bounce","body","CommonMessageInfo","sendExternalMessage","transferSign","message","ExternalMessage","stateInit","StateInit","code","initialCode","data","initialData","writeTo","transferCommit","sendFile","toBoc","idx","WeakMap"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/client/Wallet.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Wallet_client, _Wallet_contract;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wallet = exports.validateWalletType = exports.allTypes = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst __1 = require(\"..\");\nconst WalletV1R2Source_1 = require(\"../contracts/sources/WalletV1R2Source\");\nconst WalletV1R3Source_1 = require(\"../contracts/sources/WalletV1R3Source\");\nconst WalletV2R1Source_1 = require(\"../contracts/sources/WalletV2R1Source\");\nconst WalletV2R2Source_1 = require(\"../contracts/sources/WalletV2R2Source\");\nconst WalletV3R1Source_1 = require(\"../contracts/sources/WalletV3R1Source\");\nconst WalletV3R2Source_1 = require(\"../contracts/sources/WalletV3R2Source\");\nconst WalletV4Source_1 = require(\"../contracts/sources/WalletV4Source\");\nconst WalletContract_1 = require(\"../contracts/WalletContract\");\nconst CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nconst InternalMessage_1 = require(\"../messages/InternalMessage\");\nconst SendMode_1 = require(\"./SendMode\");\n// Wallet Contract Priority\nexports.allTypes = [\n    'org.ton.wallets.simple.r2',\n    'org.ton.wallets.simple.r3',\n    'org.ton.wallets.v2',\n    'org.ton.wallets.v2.r2',\n    'org.ton.wallets.v4',\n    'org.ton.wallets.v3.r2',\n    'org.ton.wallets.v3'\n];\nfunction validateWalletType(src) {\n    if (src === 'org.ton.wallets.simple'\n        || src === 'org.ton.wallets.simple.r2'\n        || src === 'org.ton.wallets.simple.r3'\n        || src === 'org.ton.wallets.v2'\n        || src === 'org.ton.wallets.v2.r2'\n        || src === 'org.ton.wallets.v3'\n        || src === 'org.ton.wallets.v3.r2'\n        || src === 'org.ton.wallets.v4') {\n        return src;\n    }\n    return null;\n}\nexports.validateWalletType = validateWalletType;\nfunction createContract(client, type, publicKey, workchain) {\n    if (type === 'org.ton.wallets.simple') {\n        throw Error('Unsupported wallet');\n    }\n    else if (type === 'org.ton.wallets.simple.r2') {\n        return WalletContract_1.WalletContract.create(client, WalletV1R2Source_1.WalletV1R2Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.simple.r3') {\n        return WalletContract_1.WalletContract.create(client, WalletV1R3Source_1.WalletV1R3Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.v2') {\n        return WalletContract_1.WalletContract.create(client, WalletV2R1Source_1.WalletV2R1Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.v2.r2') {\n        return WalletContract_1.WalletContract.create(client, WalletV2R2Source_1.WalletV2R2Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.v3') {\n        return WalletContract_1.WalletContract.create(client, WalletV3R1Source_1.WalletV3R1Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.v3.r2') {\n        return WalletContract_1.WalletContract.create(client, WalletV3R2Source_1.WalletV3R2Source.create({ publicKey, workchain }));\n    }\n    else if (type === 'org.ton.wallets.v4') {\n        return WalletContract_1.WalletContract.create(client, WalletV4Source_1.WalletV4Source.create({ publicKey, workchain }));\n    }\n    else {\n        throw Error('Unknown wallet type: ' + type);\n    }\n}\nclass Wallet {\n    constructor(client, address) {\n        _Wallet_client.set(this, void 0);\n        _Wallet_contract.set(this, null);\n        __classPrivateFieldSet(this, _Wallet_client, client, \"f\");\n        this.address = address;\n    }\n    static open(client, address) {\n        return new Wallet(client, address);\n    }\n    static openDefault(client, workchain, secretKey) {\n        const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let c = createContract(client, 'org.ton.wallets.v3', publicKey, workchain);\n        let w = new Wallet(client, c.address);\n        w.prepare(workchain, publicKey, 'org.ton.wallets.v3');\n        return w;\n    }\n    static openByType(client, workchain, secretKey, type) {\n        const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let c = createContract(client, type, publicKey, workchain);\n        let w = new Wallet(client, c.address);\n        w.prepare(workchain, publicKey, type);\n        return w;\n    }\n    static openFromSource(client, source) {\n        let address = (0, __1.contractAddress)(source);\n        let w = new Wallet(client, address);\n        w.prepareFromSource(source);\n        return w;\n    }\n    static async findActiveBySecretKey(client, workchain, secretKey) {\n        const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let types = [];\n        for (let type of exports.allTypes) {\n            let contra = createContract(client, type, publicKey, workchain);\n            let deployed = await client.isContractDeployed(contra.address);\n            let balance = await client.getBalance(contra.address);\n            if (deployed || balance.gt(new bn_js_1.default(0))) {\n                types.push({ address: contra.address, type, balance, deployed });\n            }\n        }\n        return types;\n    }\n    static async findBestBySecretKey(client, workchain, secretKey) {\n        const publicKey = (0, ton_crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let allActive = await this.findActiveBySecretKey(client, workchain, secretKey);\n        // Create default one if no wallet exists\n        if (allActive.length === 0) {\n            return this.openDefault(client, workchain, secretKey);\n        }\n        // Try to match with biggest balance\n        let maxBalance = allActive[0].balance;\n        let bestContract = allActive[0].type;\n        for (let i = 1; i < allActive.length; i++) {\n            let ac = allActive[i];\n            // Contracts are sorted by priority\n            if (ac.balance.gte(maxBalance)) {\n                maxBalance = ac.balance;\n                bestContract = ac.type;\n            }\n        }\n        if (maxBalance.gt(new bn_js_1.default(0))) {\n            let c = createContract(client, bestContract, publicKey, workchain);\n            ;\n            let w = new Wallet(client, c.address);\n            w.prepare(workchain, publicKey, bestContract);\n            return w;\n        }\n        // Return last (as most recent)\n        let c = createContract(client, allActive[allActive.length - 1].type, publicKey, workchain);\n        let w = new Wallet(client, c.address);\n        w.prepare(workchain, publicKey, allActive[allActive.length - 1].type);\n        return w;\n    }\n    get prepared() {\n        return !!__classPrivateFieldGet(this, _Wallet_contract, \"f\");\n    }\n    async getSeqNo() {\n        if (await __classPrivateFieldGet(this, _Wallet_client, \"f\").isContractDeployed(this.address)) {\n            let res = await __classPrivateFieldGet(this, _Wallet_client, \"f\").callGetMethod(this.address, 'seqno');\n            return parseInt(res.stack[0][1], 16);\n        }\n        else {\n            return 0;\n        }\n    }\n    prepare(workchain, publicKey, type = 'org.ton.wallets.v3') {\n        let contra = createContract(__classPrivateFieldGet(this, _Wallet_client, \"f\"), type, publicKey, workchain);\n        if (!contra.address.equals(this.address)) {\n            throw Error('Contract have different address');\n        }\n        __classPrivateFieldSet(this, _Wallet_contract, contra, \"f\");\n    }\n    prepareFromSource(source) {\n        let contra = WalletContract_1.WalletContract.create(__classPrivateFieldGet(this, _Wallet_client, \"f\"), source);\n        if (!contra.address.equals(this.address)) {\n            throw Error('Contract have different address');\n        }\n        __classPrivateFieldSet(this, _Wallet_contract, contra, \"f\");\n    }\n    /**\n     * Transfers value to specified address\n     */\n    async transfer(args) {\n        const contract = __classPrivateFieldGet(this, _Wallet_contract, \"f\");\n        if (!contract) {\n            throw Error('Please, prepare wallet first');\n        }\n        // Resolve payload\n        let payload = null;\n        if (args.payload) {\n            if (typeof args.payload === 'string') {\n                payload = new __1.CommentMessage(args.payload);\n            }\n            else if (Buffer.isBuffer(args.payload)) {\n                payload = new __1.BinaryMessage(args.payload);\n            }\n            else if (args.payload instanceof __1.Cell) {\n                payload = new __1.CellMessage(args.payload);\n            }\n        }\n        // Check transfer\n        const transfer = await contract.createTransfer({\n            secretKey: args.secretKey,\n            seqno: args.seqno,\n            sendMode: args.sendMode || (SendMode_1.SendMode.IGNORE_ERRORS + SendMode_1.SendMode.PAY_GAS_SEPARATLY),\n            timeout: args.timeout,\n            order: new InternalMessage_1.InternalMessage({\n                to: args.to,\n                value: args.value,\n                bounce: args.bounce,\n                body: new CommonMessageInfo_1.CommonMessageInfo({ body: payload })\n            })\n        });\n        // Send\n        await __classPrivateFieldGet(this, _Wallet_client, \"f\").sendExternalMessage(contract, transfer);\n    }\n    /**\n     * Signing transfer request. Could be done offline.\n     * @param args sign\n     * @returns\n     */\n    transferSign(args) {\n        const contract = __classPrivateFieldGet(this, _Wallet_contract, \"f\");\n        if (!contract) {\n            throw Error('Please, prepare wallet first');\n        }\n        // Resolve payload\n        let payload = null;\n        if (args.payload) {\n            if (typeof args.payload === 'string') {\n                payload = new __1.CommentMessage(args.payload);\n            }\n            else if (Buffer.isBuffer(args.payload)) {\n                payload = new __1.BinaryMessage(args.payload);\n            }\n            else if (args.payload instanceof __1.Cell) {\n                payload = new __1.CellMessage(args.payload);\n            }\n        }\n        // Transfer\n        const transfer = contract.createTransfer({\n            secretKey: args.secretKey,\n            seqno: args.seqno,\n            sendMode: args.sendMode || (SendMode_1.SendMode.IGNORE_ERRORS + SendMode_1.SendMode.PAY_GAS_SEPARATLY),\n            timeout: args.timeout,\n            order: new InternalMessage_1.InternalMessage({\n                to: args.to,\n                value: args.value,\n                bounce: args.bounce,\n                body: new CommonMessageInfo_1.CommonMessageInfo({ body: payload })\n            })\n        });\n        // External message\n        const message = new __1.ExternalMessage({\n            to: contract.address,\n            body: new CommonMessageInfo_1.CommonMessageInfo({\n                stateInit: new __1.StateInit({ code: contract.source.initialCode, data: contract.source.initialData }),\n                body: new __1.CellMessage(transfer)\n            })\n        });\n        const res = new __1.Cell();\n        message.writeTo(res);\n        return res;\n    }\n    /**\n     * Commit prepared transfer\n     * @param transfer signed transfer for commit\n     */\n    async transferCommit(transfer) {\n        await __classPrivateFieldGet(this, _Wallet_client, \"f\").sendFile(transfer.toBoc({ idx: false }));\n    }\n}\nexports.Wallet = Wallet;\n_Wallet_client = new WeakMap(), _Wallet_contract = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}