{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\nfunction isAminoConverter(converter) {\n  return typeof converter[1] !== \"string\";\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\nvar AminoTypes = /*#__PURE__*/function () {\n  function AminoTypes(types) {\n    _classCallCheck(this, AminoTypes);\n    this.register = types;\n  }\n  _createClass(AminoTypes, [{\n    key: \"toAmino\",\n    value: function toAmino(_ref) {\n      var typeUrl = _ref.typeUrl,\n        value = _ref.value;\n      var converter = this.register[typeUrl];\n      if (converter === \"not_supported_by_chain\") {\n        throw new Error(\"The message type '\".concat(typeUrl, \"' cannot be signed using the Amino JSON sign mode because this is not supported by chain.\"));\n      }\n      if (!converter) {\n        throw new Error(\"Type URL '\".concat(typeUrl, \"' does not exist in the Amino message type register. \") + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n      }\n      return {\n        type: converter.aminoType,\n        value: converter.toAmino(value)\n      };\n    }\n  }, {\n    key: \"fromAmino\",\n    value: function fromAmino(_ref2) {\n      var type = _ref2.type,\n        value = _ref2.value;\n      var matches = Object.entries(this.register).filter(isAminoConverter).filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          _typeUrl = _ref4[0],\n          aminoType = _ref4[1].aminoType;\n        return aminoType === type;\n      });\n      switch (matches.length) {\n        case 0:\n          {\n            throw new Error(\"Amino type identifier '\".concat(type, \"' does not exist in the Amino message type register. \") + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n          }\n        case 1:\n          {\n            var _matches$ = _slicedToArray(matches[0], 2),\n              typeUrl = _matches$[0],\n              converter = _matches$[1];\n            return {\n              typeUrl: typeUrl,\n              value: converter.fromAmino(value)\n            };\n          }\n        default:\n          throw new Error(\"Multiple types are registered with Amino type identifier '\".concat(type, \"': '\") + matches.map(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 2),\n              key = _ref6[0],\n              _value = _ref6[1];\n            return key;\n          }).sort().join(\"', '\") + \"'. Thus fromAmino cannot be performed.\");\n      }\n    }\n  }]);\n  return AminoTypes;\n}();\nexports.AminoTypes = AminoTypes;","map":{"version":3,"sources":["../src/aminotypes.ts"],"names":[],"mappings":";;;;;;;;;AAaA,SAAS,gBAAgB,CACvB,SAA8D,EAAA;EAE9D,OAAO,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ;AACzC;AAEA;;;AAGG;AAHH,IAIa,UAAU;EAOrB,oBAAmB,KAAsB,EAAA;IAAA;IACvC,IAAI,CAAC,QAAQ,GAAG,KAAK;EACvB;EAAC;IAAA;IAAA,OAEM,uBAAwC;MAAA,IAA9B,OAAO,QAAP,OAAO;QAAE,KAAK,QAAL,KAAK;MAC7B,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;MACxC,IAAI,SAAS,KAAK,wBAAwB,EAAE;QAC1C,MAAM,IAAI,KAAK,6BACQ,OAAO,+FAC7B;MACF;MACD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CACb,oBAAa,OAAO,6DAClB,+GAA+G,GAC/G,gIAAgI,CACnI;MACF;MACD,OAAO;QACL,IAAI,EAAE,SAAS,CAAC,SAAS;QACzB,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,KAAK;OAC/B;IACH;EAAC;IAAA;IAAA,OAEM,0BAAmC;MAAA,IAAvB,IAAI,SAAJ,IAAI;QAAE,KAAK,SAAL,KAAK;MAC5B,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC1C,MAAM,CAAC,gBAAgB,CAAC,CACxB,MAAM,CAAC;QAAA;UAAE,QAAQ;UAAI,SAAS,YAAT,SAAS;QAAA,OAAQ,SAAS,KAAK,IAAI;MAAA,EAAC;MAE5D,QAAQ,OAAO,CAAC,MAAM;QACpB,KAAK,CAAC;UAAE;YACN,MAAM,IAAI,KAAK,CACb,iCAA0B,IAAI,6DAC5B,+GAA+G,GAC/G,gIAAgI,CACnI;UACF;QACD,KAAK,CAAC;UAAE;YACN,+BAA6B,OAAO,CAAC,CAAC,CAAC;cAAhC,OAAO;cAAE,SAAS;YACzB,OAAO;cACL,OAAO,EAAE,OAAO;cAChB,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,KAAK;aACjC;UACF;QACD;UACE,MAAM,IAAI,KAAK,CACb,oEAA6D,IAAI,YAC/D,OAAO,CACJ,GAAG,CAAC;YAAA;cAAE,GAAG;cAAE,MAAM;YAAA,OAAM,GAAG;UAAA,EAAC,CAC3B,IAAI,EAAE,CACN,IAAI,CAAC,MAAM,CAAC,GACf,wCAAwC,CAC3C;MAAC;IAER;EAAC;EAAA;AAAA;AA7DH,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AminoTypes = void 0;\nfunction isAminoConverter(converter) {\n    return typeof converter[1] !== \"string\";\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\nclass AminoTypes {\n    constructor(types) {\n        this.register = types;\n    }\n    toAmino({ typeUrl, value }) {\n        const converter = this.register[typeUrl];\n        if (converter === \"not_supported_by_chain\") {\n            throw new Error(`The message type '${typeUrl}' cannot be signed using the Amino JSON sign mode because this is not supported by chain.`);\n        }\n        if (!converter) {\n            throw new Error(`Type URL '${typeUrl}' does not exist in the Amino message type register. ` +\n                \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" +\n                \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n        }\n        return {\n            type: converter.aminoType,\n            value: converter.toAmino(value),\n        };\n    }\n    fromAmino({ type, value }) {\n        const matches = Object.entries(this.register)\n            .filter(isAminoConverter)\n            .filter(([_typeUrl, { aminoType }]) => aminoType === type);\n        switch (matches.length) {\n            case 0: {\n                throw new Error(`Amino type identifier '${type}' does not exist in the Amino message type register. ` +\n                    \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" +\n                    \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n            }\n            case 1: {\n                const [typeUrl, converter] = matches[0];\n                return {\n                    typeUrl: typeUrl,\n                    value: converter.fromAmino(value),\n                };\n            }\n            default:\n                throw new Error(`Multiple types are registered with Amino type identifier '${type}': '` +\n                    matches\n                        .map(([key, _value]) => key)\n                        .sort()\n                        .join(\"', '\") +\n                    \"'. Thus fromAmino cannot be performed.\");\n        }\n    }\n}\nexports.AminoTypes = AminoTypes;\n//# sourceMappingURL=aminotypes.js.map"]},"metadata":{},"sourceType":"script"}