{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2_sha512 = void 0;\nfunction pbkdf2_sha512(_x, _x2, _x3, _x4) {\n  return _pbkdf2_sha.apply(this, arguments);\n}\nfunction _pbkdf2_sha() {\n  _pbkdf2_sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, salt, iterations, keyLen) {\n    var keyBuffer, saltBuffer, pbkdf2_key, derivedBits;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n            saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;\n            _context.next = 4;\n            return window.crypto.subtle.importKey(\"raw\", keyBuffer, {\n              name: \"PBKDF2\"\n            }, false, [\"deriveBits\"]);\n          case 4:\n            pbkdf2_key = _context.sent;\n            _context.next = 7;\n            return window.crypto.subtle.deriveBits({\n              name: \"PBKDF2\",\n              hash: \"SHA-512\",\n              salt: saltBuffer,\n              iterations: iterations\n            }, pbkdf2_key, keyLen * 8);\n          case 7:\n            derivedBits = _context.sent;\n            return _context.abrupt(\"return\", Buffer.from(derivedBits));\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _pbkdf2_sha.apply(this, arguments);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;","map":{"version":3,"names":["Object","defineProperty","exports","value","pbkdf2_sha512","key","salt","iterations","keyLen","keyBuffer","Buffer","from","saltBuffer","window","crypto","subtle","importKey","name","pbkdf2_key","deriveBits","hash","derivedBits"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton-crypto-primitives/dist/browser/pbkdf2_sha512.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2_sha512 = void 0;\nasync function pbkdf2_sha512(key, salt, iterations, keyLen) {\n    const keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n    const saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;\n    const pbkdf2_key = await window.crypto.subtle.importKey(\"raw\", keyBuffer, { name: \"PBKDF2\" }, false, [\"deriveBits\"]);\n    const derivedBits = await window.crypto.subtle.deriveBits({ name: \"PBKDF2\", hash: \"SHA-512\", salt: saltBuffer, iterations: iterations }, pbkdf2_key, keyLen * 8);\n    return Buffer.from(derivedBits);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAAC,SAChBA,aAAa;EAAA;AAAA;AAAA;EAAA,yEAA5B,iBAA6BC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YAChDC,SAAS,GAAG,OAAOJ,GAAG,KAAK,QAAQ,GAAGK,MAAM,CAACC,IAAI,CAACN,GAAG,EAAE,OAAO,CAAC,GAAGA,GAAG;YACrEO,UAAU,GAAG,OAAON,IAAI,KAAK,QAAQ,GAAGI,MAAM,CAACC,IAAI,CAACL,IAAI,EAAE,OAAO,CAAC,GAAGA,IAAI;YAAA;YAAA,OACtDO,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC,KAAK,EAAEP,SAAS,EAAE;cAAEQ,IAAI,EAAE;YAAS,CAAC,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC;UAAA;YAA9GC,UAAU;YAAA;YAAA,OACUL,MAAM,CAACC,MAAM,CAACC,MAAM,CAACI,UAAU,CAAC;cAAEF,IAAI,EAAE,QAAQ;cAAEG,IAAI,EAAE,SAAS;cAAEd,IAAI,EAAEM,UAAU;cAAEL,UAAU,EAAEA;YAAW,CAAC,EAAEW,UAAU,EAAEV,MAAM,GAAG,CAAC,CAAC;UAAA;YAA1Ja,WAAW;YAAA,iCACVX,MAAM,CAACC,IAAI,CAACU,WAAW,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAClC;EAAA;AAAA;AACDnB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script"}