{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Random = void 0;\nclass Random {\n  /**\n   * Returns `count` cryptographically secure random bytes\n   */\n  static getBytes(count) {\n    try {\n      const globalObject = typeof window === \"object\" ? window : self;\n      const cryptoApi = typeof globalObject.crypto !== \"undefined\" ? globalObject.crypto : globalObject.msCrypto;\n      const out = new Uint8Array(count);\n      cryptoApi.getRandomValues(out);\n      return out;\n    } catch (_a) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const crypto = require(\"crypto\");\n        return new Uint8Array([...crypto.randomBytes(count)]);\n      } catch (_b) {\n        throw new Error(\"No secure random number generator found\");\n      }\n    }\n  }\n}\nexports.Random = Random;","map":{"version":3,"sources":["../src/random.ts"],"names":[],"mappings":";;;;;;AAGA,MAAa,MAAM,CAAA;EACjB;;AAEG;EACI,OAAO,QAAQ,CAAC,KAAa,EAAA;IAClC,IAAI;MACF,MAAM,YAAY,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,IAAI;MAC/D,MAAM,SAAS,GACb,OAAO,YAAY,CAAC,MAAM,KAAK,WAAW,GAAG,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ;MAE1F,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC;MACjC,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC;MAC9B,OAAO,GAAG;KACX,CAAC,OAAA,EAAA,EAAM;MACN,IAAI;QACF;QACA,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;QAChC,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;OACtD,CAAC,OAAA,EAAA,EAAM;QACN,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;MAC3D;IACF;EACH;AACD;AAvBD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Random = void 0;\nclass Random {\n    /**\n     * Returns `count` cryptographically secure random bytes\n     */\n    static getBytes(count) {\n        try {\n            const globalObject = typeof window === \"object\" ? window : self;\n            const cryptoApi = typeof globalObject.crypto !== \"undefined\" ? globalObject.crypto : globalObject.msCrypto;\n            const out = new Uint8Array(count);\n            cryptoApi.getRandomValues(out);\n            return out;\n        }\n        catch (_a) {\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-var-requires\n                const crypto = require(\"crypto\");\n                return new Uint8Array([...crypto.randomBytes(count)]);\n            }\n            catch (_b) {\n                throw new Error(\"No secure random number generator found\");\n            }\n        }\n    }\n}\nexports.Random = Random;\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script"}