{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _BitString_instances, _BitString_length, _BitString_cursor, _BitString_buffer, _BitString_checkRange, _a, _b;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitString = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass BitString {\n  constructor(buffer, length, cursor) {\n    _BitString_instances.add(this);\n    _BitString_length.set(this, void 0);\n    _BitString_cursor.set(this, void 0);\n    _BitString_buffer.set(this, void 0);\n    this[_a] = () => {\n      let offset = 0;\n      let end = __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n      return {\n        next: () => {\n          if (offset < end) {\n            let v = this.get(offset);\n            offset++;\n            return {\n              done: false,\n              value: v\n            };\n          } else {\n            return {\n              done: true\n            };\n          }\n        }\n      };\n    };\n    this.get = n => {\n      __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n      return (__classPrivateFieldGet(this, _BitString_buffer, \"f\")[n / 8 | 0] & 1 << 7 - n % 8) > 0;\n    };\n    this.on = n => {\n      __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n      __classPrivateFieldGet(this, _BitString_buffer, \"f\")[n / 8 | 0] |= 1 << 7 - n % 8;\n    };\n    this.off = n => {\n      __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n      __classPrivateFieldGet(this, _BitString_buffer, \"f\")[n / 8 | 0] &= ~(1 << 7 - n % 8);\n    };\n    this.toggle = n => {\n      __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n      __classPrivateFieldGet(this, _BitString_buffer, \"f\")[n / 8 | 0] ^= 1 << 7 - n % 8;\n    };\n    this.writeBit = value => {\n      var _c;\n      if (value === true || value > 0) {\n        this.on(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n      } else {\n        this.off(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n      }\n      __classPrivateFieldSet(this, _BitString_cursor, (_c = __classPrivateFieldGet(this, _BitString_cursor, \"f\"), _c++, _c), \"f\");\n    };\n    this.writeUint = (value, bitLength) => {\n      let v = new bn_js_1.default(value);\n      if (bitLength == 0 || value.toString(2).length > bitLength) {\n        if (v.isZero()) {\n          return;\n        }\n        throw Error(`bitLength is too small for a value ${v.toString()}. Got ${bitLength}, expected >= ${value.toString(2).length}`);\n      }\n      const s = v.toString(2, bitLength);\n      for (let i = 0; i < bitLength; i++) {\n        this.writeBit(s[i] === '1');\n      }\n    };\n    this.writeInt = (value, bitLength) => {\n      let v = new bn_js_1.default(value);\n      if (bitLength == 1) {\n        if (v.eq(new bn_js_1.default(-1))) {\n          this.writeBit(true);\n          return;\n        }\n        if (v.isZero()) {\n          this.writeBit(false);\n          return;\n        }\n        throw Error(`bitlength is too small for a value ${v}`);\n      } else {\n        if (v.isNeg()) {\n          this.writeBit(true);\n          const b = new bn_js_1.default(2);\n          const nb = b.pow(new bn_js_1.default(bitLength - 1));\n          this.writeUint(nb.add(v), bitLength - 1);\n        } else {\n          this.writeBit(false);\n          this.writeUint(v, bitLength - 1);\n        }\n      }\n    };\n    this.writeUint8 = value => {\n      this.writeUint(value, 8);\n    };\n    this.writeBuffer = buffer => {\n      for (let i = 0; i < buffer.length; i++) {\n        this.writeUint8(buffer[i]);\n      }\n    };\n    this.writeCoins = amount => {\n      if (amount == 0) {\n        this.writeUint(0, 4);\n      } else {\n        amount = new bn_js_1.default(amount);\n        const l = Math.ceil(amount.toString(16).length / 2);\n        this.writeUint(l, 4);\n        this.writeUint(amount, l * 8);\n      }\n    };\n    this.writeAddress = address => {\n      if (address === null) {\n        this.writeUint(0, 2);\n      } else {\n        this.writeUint(2, 2);\n        this.writeUint(0, 1);\n        this.writeInt(address.workChain, 8);\n        this.writeBuffer(address.hash);\n      }\n    };\n    this.writeBitString = value => {\n      for (let v of value) {\n        this.writeBit(v);\n      }\n    };\n    this[_b] = () => this.toFiftHex();\n    __classPrivateFieldSet(this, _BitString_buffer, buffer, \"f\");\n    __classPrivateFieldSet(this, _BitString_length, length, \"f\");\n    __classPrivateFieldSet(this, _BitString_cursor, cursor, \"f\");\n  }\n  static alloc(length) {\n    return new BitString(Buffer.alloc(Math.ceil(length / 8), 0), length, 0);\n  }\n  get available() {\n    return this.length - this.cursor;\n  }\n  get length() {\n    return __classPrivateFieldGet(this, _BitString_length, \"f\");\n  }\n  get cursor() {\n    return __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n  }\n  get buffer() {\n    return __classPrivateFieldGet(this, _BitString_buffer, \"f\");\n  }\n  writeBitArray(value) {\n    for (let v of value) {\n      this.writeBit(v);\n    }\n  }\n  writeVarUInt(value, headerBits) {\n    let v = new bn_js_1.default(value);\n    if (v.eq(new bn_js_1.default(0))) {\n      this.writeUint(0, headerBits);\n    } else {\n      let h = v.toString('hex');\n      while (h.length % 2 !== 0) {\n        h = '0' + h;\n      }\n      const l = Math.ceil(h.length / 2);\n      this.writeUint(l, headerBits);\n      this.writeBuffer(Buffer.from(h, 'hex'));\n    }\n  }\n  clone() {\n    let buf = Buffer.alloc(__classPrivateFieldGet(this, _BitString_buffer, \"f\").length);\n    __classPrivateFieldGet(this, _BitString_buffer, \"f\").copy(buf);\n    return new BitString(buf, __classPrivateFieldGet(this, _BitString_length, \"f\"), __classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n  }\n  toString() {\n    let res = '';\n    for (let v of this) {\n      if (v) {\n        res = res + '1';\n      } else {\n        res = res + '0';\n      }\n    }\n    return res;\n  }\n  toFiftHex() {\n    if (this.cursor % 4 === 0) {\n      const s = __classPrivateFieldGet(this, _BitString_buffer, \"f\").slice(0, Math.ceil(this.cursor / 8)).toString('hex').toUpperCase();\n      if (this.cursor % 8 === 0) {\n        return s;\n      } else {\n        return s.substr(0, s.length - 1);\n      }\n    } else {\n      const temp = this.clone();\n      temp.writeBit(1);\n      while (temp.cursor % 4 !== 0) {\n        temp.writeBit(0);\n      }\n      const hex = temp.toFiftHex().toUpperCase();\n      return hex + '_';\n    }\n  }\n  setTopUppedArray(array) {\n    let fullfilledBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    __classPrivateFieldSet(this, _BitString_length, array.length * 8, \"f\");\n    __classPrivateFieldSet(this, _BitString_buffer, Buffer.alloc(array.length), \"f\");\n    array.copy(__classPrivateFieldGet(this, _BitString_buffer, \"f\"));\n    __classPrivateFieldSet(this, _BitString_cursor, this.length, \"f\");\n    if (fullfilledBytes || !this.length) {\n      return;\n    } else {\n      let foundEndBit = false;\n      for (let c = 0; c < 7; c++) {\n        __classPrivateFieldSet(this, _BitString_cursor, __classPrivateFieldGet(this, _BitString_cursor, \"f\") - 1, \"f\");\n        if (this.get(this.cursor)) {\n          foundEndBit = true;\n          this.off(this.cursor);\n          break;\n        }\n      }\n      if (!foundEndBit) {\n        throw new Error(\"Incorrect TopUppedArray\");\n      }\n    }\n  }\n  getTopUppedArray() {\n    const ret = this.clone();\n    let tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n    if (tu > 0) {\n      tu = tu - 1;\n      ret.writeBit(true);\n      while (tu > 0) {\n        tu = tu - 1;\n        ret.writeBit(false);\n      }\n    }\n    __classPrivateFieldSet(ret, _BitString_buffer, __classPrivateFieldGet(ret, _BitString_buffer, \"f\").slice(0, Math.ceil(ret.cursor / 8)), \"f\");\n    return __classPrivateFieldGet(ret, _BitString_buffer, \"f\");\n  }\n  equals(src) {\n    if (src.cursor !== this.cursor) {\n      return false;\n    }\n    if (src.length !== this.length) {\n      return false;\n    }\n    let sr = new __1.BitStringReader(src);\n    let tr = new __1.BitStringReader(this);\n    for (let i = 0; i < src.cursor; i++) {\n      if (sr.readBit() !== tr.readBit()) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nexports.BitString = BitString;\n_BitString_length = new WeakMap(), _BitString_cursor = new WeakMap(), _BitString_buffer = new WeakMap(), _BitString_instances = new WeakSet(), _a = Symbol.iterator, _b = symbol_inspect_1.default, _BitString_checkRange = function _BitString_checkRange(n) {\n  if (n > this.length) {\n    throw Error('Invalid index: ' + n);\n  }\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","__importDefault","mod","__esModule","_BitString_instances","_BitString_length","_BitString_cursor","_BitString_buffer","_BitString_checkRange","_a","_b","Object","defineProperty","exports","BitString","bn_js_1","require","symbol_inspect_1","__1","constructor","buffer","length","cursor","add","offset","end","next","v","done","n","on","off","toggle","writeBit","_c","writeUint","bitLength","default","toString","isZero","Error","s","i","writeInt","eq","isNeg","b","nb","pow","writeUint8","writeBuffer","writeCoins","amount","l","Math","ceil","writeAddress","address","workChain","hash","writeBitString","toFiftHex","alloc","Buffer","available","writeBitArray","writeVarUInt","headerBits","h","from","clone","buf","copy","res","slice","toUpperCase","substr","temp","hex","setTopUppedArray","array","fullfilledBytes","foundEndBit","c","getTopUppedArray","ret","tu","equals","src","sr","BitStringReader","tr","readBit","WeakMap","WeakSet","Symbol","iterator"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/BitString.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _BitString_instances, _BitString_length, _BitString_cursor, _BitString_buffer, _BitString_checkRange, _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitString = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass BitString {\n    constructor(buffer, length, cursor) {\n        _BitString_instances.add(this);\n        _BitString_length.set(this, void 0);\n        _BitString_cursor.set(this, void 0);\n        _BitString_buffer.set(this, void 0);\n        this[_a] = () => {\n            let offset = 0;\n            let end = __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n            return {\n                next: () => {\n                    if (offset < end) {\n                        let v = this.get(offset);\n                        offset++;\n                        return {\n                            done: false,\n                            value: v\n                        };\n                    }\n                    else {\n                        return {\n                            done: true\n                        };\n                    }\n                }\n            };\n        };\n        this.get = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            return (__classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] & (1 << (7 - (n % 8)))) > 0;\n        };\n        this.on = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] |= 1 << (7 - (n % 8));\n        };\n        this.off = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] &= ~(1 << (7 - (n % 8)));\n        };\n        this.toggle = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] ^= 1 << (7 - (n % 8));\n        };\n        this.writeBit = (value) => {\n            var _c;\n            if (value === true || value > 0) {\n                this.on(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n            }\n            else {\n                this.off(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n            }\n            __classPrivateFieldSet(this, _BitString_cursor, (_c = __classPrivateFieldGet(this, _BitString_cursor, \"f\"), _c++, _c), \"f\");\n        };\n        this.writeUint = (value, bitLength) => {\n            let v = new bn_js_1.default(value);\n            if (bitLength == 0 || (value.toString(2).length > bitLength)) {\n                if (v.isZero()) {\n                    return;\n                }\n                throw Error(`bitLength is too small for a value ${v.toString()}. Got ${bitLength}, expected >= ${value.toString(2).length}`);\n            }\n            const s = v.toString(2, bitLength);\n            for (let i = 0; i < bitLength; i++) {\n                this.writeBit(s[i] === '1');\n            }\n        };\n        this.writeInt = (value, bitLength) => {\n            let v = new bn_js_1.default(value);\n            if (bitLength == 1) {\n                if (v.eq(new bn_js_1.default(-1))) {\n                    this.writeBit(true);\n                    return;\n                }\n                if (v.isZero()) {\n                    this.writeBit(false);\n                    return;\n                }\n                throw Error(`bitlength is too small for a value ${v}`);\n            }\n            else {\n                if (v.isNeg()) {\n                    this.writeBit(true);\n                    const b = new bn_js_1.default(2);\n                    const nb = b.pow(new bn_js_1.default(bitLength - 1));\n                    this.writeUint(nb.add(v), bitLength - 1);\n                }\n                else {\n                    this.writeBit(false);\n                    this.writeUint(v, bitLength - 1);\n                }\n            }\n        };\n        this.writeUint8 = (value) => {\n            this.writeUint(value, 8);\n        };\n        this.writeBuffer = (buffer) => {\n            for (let i = 0; i < buffer.length; i++) {\n                this.writeUint8(buffer[i]);\n            }\n        };\n        this.writeCoins = (amount) => {\n            if (amount == 0) {\n                this.writeUint(0, 4);\n            }\n            else {\n                amount = new bn_js_1.default(amount);\n                const l = Math.ceil((amount.toString(16).length) / 2);\n                this.writeUint(l, 4);\n                this.writeUint(amount, l * 8);\n            }\n        };\n        this.writeAddress = (address) => {\n            if (address === null) {\n                this.writeUint(0, 2);\n            }\n            else {\n                this.writeUint(2, 2);\n                this.writeUint(0, 1);\n                this.writeInt(address.workChain, 8);\n                this.writeBuffer(address.hash);\n            }\n        };\n        this.writeBitString = (value) => {\n            for (let v of value) {\n                this.writeBit(v);\n            }\n        };\n        this[_b] = () => this.toFiftHex();\n        __classPrivateFieldSet(this, _BitString_buffer, buffer, \"f\");\n        __classPrivateFieldSet(this, _BitString_length, length, \"f\");\n        __classPrivateFieldSet(this, _BitString_cursor, cursor, \"f\");\n    }\n    static alloc(length) {\n        return new BitString(Buffer.alloc(Math.ceil(length / 8), 0), length, 0);\n    }\n    get available() {\n        return this.length - this.cursor;\n    }\n    get length() {\n        return __classPrivateFieldGet(this, _BitString_length, \"f\");\n    }\n    get cursor() {\n        return __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n    }\n    get buffer() {\n        return __classPrivateFieldGet(this, _BitString_buffer, \"f\");\n    }\n    writeBitArray(value) {\n        for (let v of value) {\n            this.writeBit(v);\n        }\n    }\n    writeVarUInt(value, headerBits) {\n        let v = new bn_js_1.default(value);\n        if (v.eq(new bn_js_1.default(0))) {\n            this.writeUint(0, headerBits);\n        }\n        else {\n            let h = v.toString('hex');\n            while (h.length % 2 !== 0) {\n                h = '0' + h;\n            }\n            const l = Math.ceil((h.length) / 2);\n            this.writeUint(l, headerBits);\n            this.writeBuffer(Buffer.from(h, 'hex'));\n        }\n    }\n    clone() {\n        let buf = Buffer.alloc(__classPrivateFieldGet(this, _BitString_buffer, \"f\").length);\n        __classPrivateFieldGet(this, _BitString_buffer, \"f\").copy(buf);\n        return new BitString(buf, __classPrivateFieldGet(this, _BitString_length, \"f\"), __classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n    }\n    toString() {\n        let res = '';\n        for (let v of this) {\n            if (v) {\n                res = res + '1';\n            }\n            else {\n                res = res + '0';\n            }\n        }\n        return res;\n    }\n    toFiftHex() {\n        if (this.cursor % 4 === 0) {\n            const s = __classPrivateFieldGet(this, _BitString_buffer, \"f\").slice(0, Math.ceil(this.cursor / 8)).toString('hex').toUpperCase();\n            if (this.cursor % 8 === 0) {\n                return s;\n            }\n            else {\n                return s.substr(0, s.length - 1);\n            }\n        }\n        else {\n            const temp = this.clone();\n            temp.writeBit(1);\n            while (temp.cursor % 4 !== 0) {\n                temp.writeBit(0);\n            }\n            const hex = temp.toFiftHex().toUpperCase();\n            return hex + '_';\n        }\n    }\n    setTopUppedArray(array, fullfilledBytes = true) {\n        __classPrivateFieldSet(this, _BitString_length, array.length * 8, \"f\");\n        __classPrivateFieldSet(this, _BitString_buffer, Buffer.alloc(array.length), \"f\");\n        array.copy(__classPrivateFieldGet(this, _BitString_buffer, \"f\"));\n        __classPrivateFieldSet(this, _BitString_cursor, this.length, \"f\");\n        if (fullfilledBytes || !this.length) {\n            return;\n        }\n        else {\n            let foundEndBit = false;\n            for (let c = 0; c < 7; c++) {\n                __classPrivateFieldSet(this, _BitString_cursor, __classPrivateFieldGet(this, _BitString_cursor, \"f\") - 1, \"f\");\n                if (this.get(this.cursor)) {\n                    foundEndBit = true;\n                    this.off(this.cursor);\n                    break;\n                }\n            }\n            if (!foundEndBit) {\n                throw new Error(\"Incorrect TopUppedArray\");\n            }\n        }\n    }\n    getTopUppedArray() {\n        const ret = this.clone();\n        let tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n        if (tu > 0) {\n            tu = tu - 1;\n            ret.writeBit(true);\n            while (tu > 0) {\n                tu = tu - 1;\n                ret.writeBit(false);\n            }\n        }\n        __classPrivateFieldSet(ret, _BitString_buffer, __classPrivateFieldGet(ret, _BitString_buffer, \"f\").slice(0, Math.ceil(ret.cursor / 8)), \"f\");\n        return __classPrivateFieldGet(ret, _BitString_buffer, \"f\");\n    }\n    equals(src) {\n        if (src.cursor !== this.cursor) {\n            return false;\n        }\n        if (src.length !== this.length) {\n            return false;\n        }\n        let sr = new __1.BitStringReader(src);\n        let tr = new __1.BitStringReader(this);\n        for (let i = 0; i < src.cursor; i++) {\n            if (sr.readBit() !== tr.readBit()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.BitString = BitString;\n_BitString_length = new WeakMap(), _BitString_cursor = new WeakMap(), _BitString_buffer = new WeakMap(), _BitString_instances = new WeakSet(), _a = Symbol.iterator, _b = symbol_inspect_1.default, _BitString_checkRange = function _BitString_checkRange(n) {\n    if (n > this.length) {\n        throw Error('Invalid index: ' + n);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}