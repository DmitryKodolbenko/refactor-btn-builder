{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\nexports.StringRegex = {\n  digitsRegex: /\\b\\d+\\b/gi\n};\nvar notNullEmpty = function notNullEmpty(str) {\n  return str != null && str.length > 0;\n};\nexports.notNullEmpty = notNullEmpty;\nvar nullEmpty = function nullEmpty(str) {\n  return !(0, exports.notNullEmpty)(str);\n};\nexports.nullEmpty = nullEmpty;\nvar firstNotNullEmpty = function firstNotNullEmpty() {\n  for (var _len = arguments.length, strItems = new Array(_len), _key = 0; _key < _len; _key++) {\n    strItems[_key] = arguments[_key];\n  }\n  for (var _i = 0, _strItems = strItems; _i < _strItems.length; _i++) {\n    var item = _strItems[_i];\n    if ((0, exports.notNullEmpty)(item)) {\n      return item;\n    }\n  }\n  return undefined;\n};\nexports.firstNotNullEmpty = firstNotNullEmpty;\nvar anyNullEmpty = function anyNullEmpty(strs) {\n  var _iterator = _createForOfIteratorHelper(strs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var str = _step.value;\n      if ((0, exports.nullEmpty)(str)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n};\nvar safeAppend = function safeAppend(str, value) {\n  var ifEmptyValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, exports.notNullEmpty)(str) ? str + value : ifEmptyValue != null ? ifEmptyValue : value;\n};\nexports.safeAppend = safeAppend;\nvar BetterStringArray = /*#__PURE__*/function (_Array) {\n  _inherits(BetterStringArray, _Array);\n  var _super = _createSuper(BetterStringArray);\n  function BetterStringArray() {\n    _classCallCheck(this, BetterStringArray);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BetterStringArray, [{\n    key: \"pushIfNotNullEmpty\",\n    value: function pushIfNotNullEmpty(str) {\n      if ((0, exports.notNullEmpty)(str)) {\n        this.push(str);\n      }\n    }\n  }]);\n  return BetterStringArray;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\nexports.BetterStringArray = BetterStringArray;\nfunction createPadder(padCharacter, desiredTotalLength) {\n  var padFromRight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return function (input) {\n    return pad(input, padCharacter, desiredTotalLength, padFromRight);\n  };\n}\nexports.createPadder = createPadder;\nfunction pad(input, padCharacter, desiredTotalLength) {\n  var padFromRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var difference = desiredTotalLength - \"\".concat(input).length;\n  if (difference > 0) {\n    var padding = new Array(difference).fill(padCharacter);\n    if (padFromRight) {\n      return \"\".concat(input).concat(padding.join(\"\"));\n    }\n    return \"\".concat(padding.join(\"\")).concat(input);\n  }\n  return \"\".concat(input);\n}\nexports.pad = pad;\nvar regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\nvar regexDoubleDashes = new RegExp(\"--+\", \"g\");\nvar regexFirstDash = new RegExp(\"^-+\", \"g\");\nvar regexLastDash = new RegExp(\"-+$\", \"g\");\nvar regexSingleDash = new RegExp(\"-\", \"g\");\nvar regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\nvar regexAllUnderscores = new RegExp(\"_\", \"g\");\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nvar convertToSlug = function convertToSlug(text) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$slugDivider = _ref.slugDivider,\n    slugDivider = _ref$slugDivider === void 0 ? \"-\" : _ref$slugDivider,\n    _ref$letterCase = _ref.letterCase,\n    letterCase = _ref$letterCase === void 0 ? \"LOWER\" : _ref$letterCase,\n    _ref$normalize = _ref.normalize,\n    normalize = _ref$normalize === void 0 ? true : _ref$normalize,\n    _ref$excludeCharacter = _ref.excludeCharacters,\n    excludeCharacters = _ref$excludeCharacter === void 0 ? [] : _ref$excludeCharacter;\n  if (!text || text.length === 0) {\n    return \"\";\n  }\n  var resp = text.toString();\n  if (normalize) {\n    resp = resp.normalize(\"NFD\");\n  }\n  if (letterCase === \"LOWER\") {\n    resp = resp.toLowerCase();\n  } else if (letterCase === \"UPPER\") {\n    resp = resp.toUpperCase();\n  }\n  return resp.replace(regexAllSpaces, \"-\") // Replace spaces with -\n  .replace(excludeCharacters.length > 0 ? new RegExp(\"[^\\\\w\\\\-\".concat(excludeCharacters.map(function (c) {\n    return escapeRegExp(c);\n  }).join(\"\"), \"]+\"), \"g\") : regexRemoveNonWord, \"\") // Remove all non-word chars\n  .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\n  .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\n  .replace(regexFirstDash, \"\") // Trim - from start of text\n  .replace(regexLastDash, \"\") // Trim - from end of text\n  .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\n  /*return resp\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/_/g, \"-\") // replace underscores with dashes\r\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n    .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\n};\n\nexports.convertToSlug = convertToSlug;\n// Replace spaces with underscores and make letters UPPERCASE:\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\nvar stringToConstantStyledString = function stringToConstantStyledString(input) {\n  return (0, exports.convertToSlug)(input, {\n    normalize: true,\n    slugDivider: \"_\",\n    letterCase: \"UPPER\"\n  });\n  // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\n};\n\nexports.stringToConstantStyledString = stringToConstantStyledString;\nvar reverse = function reverse(input) {\n  var r = \"\";\n  var _iterator2 = _createForOfIteratorHelper(input),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var char = _step2.value;\n      r = \"\".concat(char).concat(r);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return r;\n};\nfunction isUriEncoded(uri) {\n  uri = uri || \"\";\n  return uri !== decodeURIComponent(uri);\n}\nvar decodeUriFully = function decodeUriFully(uri) {\n  var failSafe = 0;\n  while (isUriEncoded(uri)) {\n    failSafe += 1;\n    uri = decodeURIComponent(uri);\n    if (failSafe > 20) {\n      throw new Error(\"String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.\");\n    }\n  }\n  return uri;\n};\nvar removeAndTrim = function removeAndTrim(input, removeText) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$spaceAware = _ref2.spaceAware,\n    spaceAware = _ref2$spaceAware === void 0 ? true : _ref2$spaceAware,\n    _ref2$insideWords = _ref2.insideWords,\n    insideWords = _ref2$insideWords === void 0 ? false : _ref2$insideWords;\n  var text = \"\".concat(input);\n  var _iterator3 = _createForOfIteratorHelper(removeText),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var rem = _step3.value;\n      if (spaceAware) {\n        if (!insideWords) {\n          if (text.indexOf(\" \".concat(rem, \" \")) >= 0) {\n            text = text.replace(\" \".concat(rem, \" \"), \" \");\n          } else {\n            if (text.startsWith(\"\".concat(rem, \" \"))) {\n              text = text.substring(rem.length + 1);\n            }\n            if (text.endsWith(\" \".concat(rem))) {\n              text = text.substring(0, text.length - (rem.length + 1));\n            }\n          }\n        } else {\n          var checkNew = [new RegExp(\"\\\\s\".concat(rem, \"\\\\s\"), \"g\"), new RegExp(\"\\\\s\".concat(rem), \"g\"), new RegExp(\"\".concat(rem, \"\\\\s\"), \"g\")];\n          for (var _i2 = 0, _checkNew = checkNew; _i2 < _checkNew.length; _i2++) {\n            var remNew = _checkNew[_i2];\n            if (remNew.test(text)) {\n              console.log(\"Replacing \\\"\".concat(remNew, \"\\\" in \\\"\").concat(text, \"\\\"\"));\n              text = text.replace(remNew, \" \");\n              console.log(\"Text after: \\\"\".concat(text, \"\\\"\"));\n            }\n          }\n        }\n      } else {\n        if (text.indexOf(rem) >= 0) {\n          text = text.replace(rem, \"\");\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return text.trim();\n};\nfunction sortCompareStrings(a, b) {\n  var aa = a.toLowerCase();\n  var bb = b.toLowerCase();\n  if (aa < bb)\n    //sort string ascending\n    return -1;\n  if (aa > bb) return 1;\n  return 0; //default return value (no sorting)\n}\n\nfunction comparePure(a, b) {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\nfunction onlyNotNullEmpty(strArray) {\n  var notNullEmptyArray = [];\n  var _iterator4 = _createForOfIteratorHelper(strArray),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var str = _step4.value;\n      if ((0, exports.notNullEmpty)(str)) {\n        notNullEmptyArray.push(str);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return notNullEmptyArray;\n}\nvar joinIntoUrl = function joinIntoUrl() {\n  for (var _len2 = arguments.length, routes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    routes[_key2] = arguments[_key2];\n  }\n  return routes.filter(function (v) {\n    return v;\n  }).map(function (v, i, arr) {\n    var isNotFirst = i !== 0;\n    var isNotLast = i !== arr.length - 1;\n    if (isNotFirst) {\n      v = v.startsWith(\"/\") ? v.slice(1) : v;\n    }\n    if (isNotLast) {\n      v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\n    }\n    return v;\n  }).join(\"/\");\n};\nvar getUrlWithBaseUrl = function getUrlWithBaseUrl(baseUrl, route) {\n  var isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\n  if (isRouteCompleted) {\n    return route;\n  }\n  return joinIntoUrl(baseUrl, route);\n};\nvar isHashId = function isHashId(accountId) {\n  var hash = accountId.match(/^[a-zA-Z0-9]+$/);\n  return Boolean(hash);\n  // accountId.match(/^[a-zA-Z0-9]{64}$/)\n};\n\nexports.StringUtils = {\n  isUriEncoded: isUriEncoded,\n  decodeUriFully: decodeUriFully,\n  StringRegex: exports.StringRegex,\n  reverse: reverse,\n  notNullEmpty: exports.notNullEmpty,\n  nullEmpty: exports.nullEmpty,\n  anyNullEmpty: anyNullEmpty,\n  safeAppend: exports.safeAppend,\n  createPadder: createPadder,\n  pad: pad,\n  convertToSlug: exports.convertToSlug,\n  stringToConstantStyledString: exports.stringToConstantStyledString,\n  removeAndTrim: removeAndTrim,\n  sortCompareStrings: sortCompareStrings,\n  comparePure: comparePure,\n  onlyNotNullEmpty: onlyNotNullEmpty,\n  firstNotNullEmpty: exports.firstNotNullEmpty,\n  joinIntoUrl: joinIntoUrl,\n  getUrlWithBaseUrl: getUrlWithBaseUrl,\n  isHashId: isHashId\n};","map":{"version":3,"sources":["meteor-common/src/utils/StringUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEa,OAAA,CAAA,WAAW,GAAG;EACzB,WAAW,EAAE;CACd;AAEM,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,GAA8B,EAAmB;EAC5E,OAAO,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;AACtC,CAAC;AAFY,OAAA,CAAA,YAAY,GAAA,YAAA;AAIlB,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,GAA8B,EAAkC;EACxF,OAAO,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,GAAG,CAAC;AAC3B,CAAC;AAFY,OAAA,CAAA,SAAS,GAAA,SAAA;AAIf,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,GAAsE;EAAA,kCAA/D,QAAuC;IAAvC,QAAuC;EAAA;EAC1E,6BAAmB,QAAQ,+BAAE;IAAxB,IAAM,IAAI;IACb,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,IAAI,CAAC,EAAE;MACtB,OAAO,IAAI;IACZ;EACF;EAED,OAAO,SAAS;AAClB,CAAC;AARY,OAAA,CAAA,iBAAiB,GAAA,iBAAA;AAU9B,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,IAAsC,EAAa;EAAA,2CACrD,IAAI;IAAA;EAAA;IAAtB,oDAAwB;MAAA,IAAb,GAAG;MACZ,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,SAAS,EAAC,GAAG,CAAC,EAAE;QAClB,OAAO,IAAI;MACZ;;EACF;IAAA;EAAA;IAAA;EAAA;EAED,OAAO,KAAK;AACd,CAAC;AAEM,IAAM,UAAU,GAAG,SAAb,UAAU,CAAI,GAA8B,EAAE,KAAa,EAAwC;EAAA,IAAtC,YAAA,uEAA8B,IAAI;EAC1G,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,GAAG,KAAK;AACtF,CAAC;AAFY,OAAA,CAAA,UAAU,GAAA,UAAA;AAErB,IAEW,iBAAkB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACtB,4BAAmB,GAAW,EAAA;MACnC,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,GAAG,CAAC,EAAE;QACrB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;MACf;IACH;EAAC;EAAA;AAAA,iCALoC,KAAa;AAApD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAQA,SAAgB,YAAY,CAAC,YAAoB,EAAE,kBAA0B,EAA+B;EAAA,IAA7B,YAAA,uEAAwB,KAAK;EAC1G,OAAO,UAAC,KAAsB,EAAI;IAChC,OAAO,GAAG,CAAC,KAAK,EAAE,YAAY,EAAE,kBAAkB,EAAE,YAAY,CAAC;EACnE,CAAC;AACH;AAJA,OAAA,CAAA,YAAA,GAAA,YAAA;AAMA,SAAgB,GAAG,CACjB,KAAsB,EACtB,YAAoB,EACpB,kBAA0B,EACG;EAAA,IAA7B,YAAA,uEAAwB,KAAK;EAE7B,IAAM,UAAU,GAAG,kBAAkB,GAAG,UAAG,KAAK,EAAG,MAAM;EAEzD,IAAI,UAAU,GAAG,CAAC,EAAE;IAClB,IAAM,OAAO,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;IACxD,IAAI,YAAY,EAAE;MAChB,iBAAU,KAAK,SAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;IACnC;IAED,iBAAU,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,SAAG,KAAK;EACnC;EAED,iBAAU,KAAK;AACjB;AAlBA,OAAA,CAAA,GAAA,GAAA,GAAA;AA2BA,IAAM,cAAc,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC;AAC9C,IAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC;AAChD,IAAM,cAAc,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC;AAC7C,IAAM,aAAa,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC;AAC5C,IAAM,eAAe,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;AAC5C,IAAM,kBAAkB,GAAG,IAAI,MAAM,CAAC,YAAY,EAAE,GAAG,CAAC;AACxD,IAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;AAEhD,SAAS,YAAY,CAAC,MAAc,EAAA;EAClC,OAAO,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;AACtD;AAEO,IAAM,aAAa,GAAG,SAAhB,aAAa,CACxB,IAAY,EAEF;EAAA,+EADqG,CAAA,CAAE;IAAA,wBAA/G,WAAW;IAAX,WAAW,iCAAG,GAAG;IAAA,uBAAE,UAAU;IAAV,UAAU,gCAAG,OAAO;IAAA,sBAAE,SAAS;IAAT,SAAS,+BAAG,IAAI;IAAA,6BAAE,iBAAiB;IAAjB,iBAAiB,sCAAG,EAAE;EAEnF,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAO,EAAE;EACV;EAED,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE;EAE1B,IAAI,SAAS,EAAE;IACb,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;EAC7B;EAED,IAAI,UAAU,KAAK,OAAO,EAAE;IAC1B,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;GAC1B,MAAM,IAAI,UAAU,KAAK,OAAO,EAAE;IACjC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;EAC1B;EAED,OAAO,IAAI,CACR,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;EAAA,CAC7B,OAAO,CACN,iBAAiB,CAAC,MAAM,GAAG,CAAC,GACxB,IAAI,MAAM,mBAAY,iBAAiB,CAAC,GAAG,CAAC,UAAC,CAAC;IAAA,OAAK,YAAY,CAAC,CAAC,CAAC;EAAA,EAAC,CAAC,IAAI,CAAC,EAAE,CAAC,SAAM,GAAG,CAAC,GACtF,kBAAkB,EACtB,EAAE,CACH,CAAC;EAAA,CACD,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,cAAc,GAAG,mBAAmB,EAAE,GAAG,CAAC,CAAC;EAAA,CACrF,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;EAAA,CAChC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;EAAA,CAC5B,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;EAAA,CAC3B,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC,CAAC;EAE1C;;;;;;;;AAQmF;AACrF,CAAC;;AA3CY,OAAA,CAAA,aAAa,GAAA,aAAA;AA6C1B;AACA;AACO,IAAM,4BAA4B,GAAG,SAA/B,4BAA4B,CAAI,KAAa,EAAY;EACpE,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,aAAa,EAAC,KAAK,EAAE;IAC1B,SAAS,EAAE,IAAI;IACf,WAAW,EAAE,GAAG;IAChB,UAAU,EAAE;GACb,CAAC;EACF;AACF,CAAC;;AAPY,OAAA,CAAA,4BAA4B,GAAA,4BAAA;AASzC,IAAM,OAAO,GAAG,SAAV,OAAO,CAAI,KAAa,EAAY;EACxC,IAAI,CAAC,KAAK;EAAC,4CACQ,KAAK;IAAA;EAAA;IAAxB,uDAA0B;MAAA,IAAf,IAAI;MACb,CAAC,aAAM,IAAI,SAAG,CAAC,CAAE;;EAClB;IAAA;EAAA;IAAA;EAAA;EAED,OAAO,CAAC;AACV,CAAC;AAED,SAAS,YAAY,CAAC,GAAW,EAAA;EAC/B,GAAG,GAAG,GAAG,IAAI,EAAE;EACf,OAAO,GAAG,KAAK,kBAAkB,CAAC,GAAG,CAAC;AACxC;AAEA,IAAM,cAAc,GAAG,SAAjB,cAAc,CAAI,GAAW,EAAY;EAC7C,IAAI,QAAQ,GAAG,CAAC;EAEhB,OAAO,YAAY,CAAC,GAAG,CAAC,EAAE;IACxB,QAAQ,IAAI,CAAC;IACb,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC;IAE7B,IAAI,QAAQ,GAAG,EAAE,EAAE;MACjB,MAAM,IAAI,KAAK,mGAEd;IACF;EACF;EAED,OAAO,GAAG;AACZ,CAAC;AAOD,IAAM,aAAa,GAAG,SAAhB,aAAa,CACjB,KAAa,EACb,UAAoB,EAEV;EAAA,gFADwD,CAAA,CAAE;IAAA,yBAAlE,UAAU;IAAV,UAAU,iCAAG,IAAI;IAAA,0BAAE,WAAW;IAAX,WAAW,kCAAG,KAAK;EAExC,IAAI,IAAI,aAAM,KAAK,CAAE;EAAC,4CAEJ,UAAU;IAAA;EAAA;IAA5B,uDAA8B;MAAA,IAAnB,GAAG;MACZ,IAAI,UAAU,EAAE;QACd,IAAI,CAAC,WAAW,EAAE;UAChB,IAAI,IAAI,CAAC,OAAO,YAAK,GAAG,OAAI,IAAI,CAAC,EAAE;YACjC,IAAI,GAAG,IAAI,CAAC,OAAO,YAAK,GAAG,QAAK,GAAG,CAAC;WACrC,MAAM;YACL,IAAI,IAAI,CAAC,UAAU,WAAI,GAAG,OAAI,EAAE;cAC9B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YACtC;YAED,IAAI,IAAI,CAAC,QAAQ,YAAK,GAAG,EAAG,EAAE;cAC5B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzD;UACF;SACF,MAAM;UACL,IAAM,QAAQ,GAAG,CAAC,IAAI,MAAM,cAAO,GAAG,UAAO,GAAG,CAAC,EAAE,IAAI,MAAM,cAAO,GAAG,GAAI,GAAG,CAAC,EAAE,IAAI,MAAM,WAAI,GAAG,UAAO,GAAG,CAAC,CAAC;UAE9G,8BAAqB,QAAQ,iCAAE;YAA1B,IAAM,MAAM;YACf,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;cACrB,OAAO,CAAC,GAAG,uBAAe,MAAM,qBAAS,IAAI,QAAI;cACjD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;cAChC,OAAO,CAAC,GAAG,yBAAiB,IAAI,QAAI;YACrC;UACF;QACF;OACF,MAAM;QACL,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;UAC1B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;QAC7B;MACF;;EACF;IAAA;EAAA;IAAA;EAAA;EAED,OAAO,IAAI,CAAC,IAAI,EAAE;AACpB,CAAC;AAED,SAAS,kBAAkB,CAAC,CAAS,EAAE,CAAS,EAAA;EAC9C,IAAM,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE;EAC1B,IAAM,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE;EAC1B,IAAI,EAAE,GAAG,EAAE;IACT;IACA,OAAO,CAAC,CAAC;EACX,IAAI,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;EACrB,OAAO,CAAC,CAAC,CAAC;AACZ;;AAEA,SAAS,WAAW,CAAC,CAAS,EAAE,CAAS,EAAA;EACvC,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,OAAO,CAAC;EACT;EAED,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,OAAO,CAAC,CAAC;EACV;EAED,OAAO,CAAC;AACV;AAEA,SAAS,gBAAgB,CAAC,QAAuC,EAAA;EAC/D,IAAI,iBAAiB,GAAa,EAAE;EAAC,4CAEnB,QAAQ;IAAA;EAAA;IAA1B,uDAA4B;MAAA,IAAjB,GAAG;MACZ,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,GAAG,CAAC,EAAE;QACrB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC;MAC5B;;EACF;IAAA;EAAA;IAAA;EAAA;EAED,OAAO,iBAAiB;AAC1B;AAIA,IAAM,WAAW,GAAG,SAAd,WAAW,GAAyC;EAAA,mCAAlC,MAA8B;IAA9B,MAA8B;EAAA;EACpD,OAAO,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC;IAAA,OAAI,CAAC;EAAA,EAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAI;IAC7C,IAAM,UAAU,GAAG,CAAC,KAAK,CAAC;IAC1B,IAAM,SAAS,GAAG,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC;IACtC,IAAI,UAAU,EAAE;MACd,CAAC,GAAG,CAAE,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,KAAK,CAAE,CAAC,CAAC,GAAG,CAAC;IAC1C;IACD,IAAI,SAAS,EAAE;MACb,CAAC,GAAG,CAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;IAC3C;IACD,OAAO,CAAC;EACV,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;AACd,CAAC;AAED,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,OAAe,EAAE,KAAa,EAAI;EAC3D,IAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC;EACpF,IAAI,gBAAgB,EAAE;IACpB,OAAO,KAAK;EACb;EACD,OAAO,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC;AACpC,CAAC;AACD,IAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,SAAiB,EAAI;EACrC,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC;EAC9C,OAAO,OAAO,CAAC,IAAI,CAAC;EACpB;AACF,CAAC;;AAEY,OAAA,CAAA,WAAW,GAAG;EACzB,YAAY,EAAZ,YAAY;EACZ,cAAc,EAAd,cAAc;EACd,WAAW,EAAX,OAAA,CAAA,WAAW;EACX,OAAO,EAAP,OAAO;EACP,YAAY,EAAZ,OAAA,CAAA,YAAY;EACZ,SAAS,EAAT,OAAA,CAAA,SAAS;EACT,YAAY,EAAZ,YAAY;EACZ,UAAU,EAAV,OAAA,CAAA,UAAU;EACV,YAAY,EAAZ,YAAY;EACZ,GAAG,EAAH,GAAG;EACH,aAAa,EAAb,OAAA,CAAA,aAAa;EACb,4BAA4B,EAA5B,OAAA,CAAA,4BAA4B;EAC5B,aAAa,EAAb,aAAa;EACb,kBAAkB,EAAlB,kBAAkB;EAClB,WAAW,EAAX,WAAW;EACX,gBAAgB,EAAhB,gBAAgB;EAChB,iBAAiB,EAAjB,OAAA,CAAA,iBAAiB;EACjB,WAAW,EAAX,WAAW;EACX,iBAAiB,EAAjB,iBAAiB;EACjB,QAAQ,EAAR;CACD","sourceRoot":"./src/","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\r\nexports.StringRegex = {\r\n    digitsRegex: /\\b\\d+\\b/gi,\r\n};\r\nconst notNullEmpty = (str) => {\r\n    return str != null && str.length > 0;\r\n};\r\nexports.notNullEmpty = notNullEmpty;\r\nconst nullEmpty = (str) => {\r\n    return !(0, exports.notNullEmpty)(str);\r\n};\r\nexports.nullEmpty = nullEmpty;\r\nconst firstNotNullEmpty = (...strItems) => {\r\n    for (const item of strItems) {\r\n        if ((0, exports.notNullEmpty)(item)) {\r\n            return item;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nexports.firstNotNullEmpty = firstNotNullEmpty;\r\nconst anyNullEmpty = (strs) => {\r\n    for (const str of strs) {\r\n        if ((0, exports.nullEmpty)(str)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nconst safeAppend = (str, value, ifEmptyValue = null) => {\r\n    return (0, exports.notNullEmpty)(str) ? str + value : ifEmptyValue != null ? ifEmptyValue : value;\r\n};\r\nexports.safeAppend = safeAppend;\r\nclass BetterStringArray extends Array {\r\n    pushIfNotNullEmpty(str) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            this.push(str);\r\n        }\r\n    }\r\n}\r\nexports.BetterStringArray = BetterStringArray;\r\nfunction createPadder(padCharacter, desiredTotalLength, padFromRight = false) {\r\n    return (input) => {\r\n        return pad(input, padCharacter, desiredTotalLength, padFromRight);\r\n    };\r\n}\r\nexports.createPadder = createPadder;\r\nfunction pad(input, padCharacter, desiredTotalLength, padFromRight = false) {\r\n    const difference = desiredTotalLength - `${input}`.length;\r\n    if (difference > 0) {\r\n        const padding = new Array(difference).fill(padCharacter);\r\n        if (padFromRight) {\r\n            return `${input}${padding.join(\"\")}`;\r\n        }\r\n        return `${padding.join(\"\")}${input}`;\r\n    }\r\n    return `${input}`;\r\n}\r\nexports.pad = pad;\r\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\r\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\r\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\r\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\r\nconst regexSingleDash = new RegExp(\"-\", \"g\");\r\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\r\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\nconst convertToSlug = (text, { slugDivider = \"-\", letterCase = \"LOWER\", normalize = true, excludeCharacters = [] } = {}) => {\r\n    if (!text || text.length === 0) {\r\n        return \"\";\r\n    }\r\n    let resp = text.toString();\r\n    if (normalize) {\r\n        resp = resp.normalize(\"NFD\");\r\n    }\r\n    if (letterCase === \"LOWER\") {\r\n        resp = resp.toLowerCase();\r\n    }\r\n    else if (letterCase === \"UPPER\") {\r\n        resp = resp.toUpperCase();\r\n    }\r\n    return resp\r\n        .replace(regexAllSpaces, \"-\") // Replace spaces with -\r\n        .replace(excludeCharacters.length > 0\r\n        ? new RegExp(`[^\\\\w\\\\-${excludeCharacters.map((c) => escapeRegExp(c)).join(\"\")}]+`, \"g\")\r\n        : regexRemoveNonWord, \"\") // Remove all non-word chars\r\n        .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\r\n        .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\r\n        .replace(regexFirstDash, \"\") // Trim - from start of text\r\n        .replace(regexLastDash, \"\") // Trim - from end of text\r\n        .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\r\n    /*return resp\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/_/g, \"-\") // replace underscores with dashes\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\") // Trim - from end of text\r\n      .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\r\n};\r\nexports.convertToSlug = convertToSlug;\r\n// Replace spaces with underscores and make letters UPPERCASE:\r\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\r\nconst stringToConstantStyledString = (input) => {\r\n    return (0, exports.convertToSlug)(input, {\r\n        normalize: true,\r\n        slugDivider: \"_\",\r\n        letterCase: \"UPPER\",\r\n    });\r\n    // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\r\n};\r\nexports.stringToConstantStyledString = stringToConstantStyledString;\r\nconst reverse = (input) => {\r\n    let r = ``;\r\n    for (const char of input) {\r\n        r = `${char}${r}`;\r\n    }\r\n    return r;\r\n};\r\nfunction isUriEncoded(uri) {\r\n    uri = uri || \"\";\r\n    return uri !== decodeURIComponent(uri);\r\n}\r\nconst decodeUriFully = (uri) => {\r\n    let failSafe = 0;\r\n    while (isUriEncoded(uri)) {\r\n        failSafe += 1;\r\n        uri = decodeURIComponent(uri);\r\n        if (failSafe > 20) {\r\n            throw new Error(`String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.`);\r\n        }\r\n    }\r\n    return uri;\r\n};\r\nconst removeAndTrim = (input, removeText, { spaceAware = true, insideWords = false } = {}) => {\r\n    let text = `${input}`;\r\n    for (const rem of removeText) {\r\n        if (spaceAware) {\r\n            if (!insideWords) {\r\n                if (text.indexOf(` ${rem} `) >= 0) {\r\n                    text = text.replace(` ${rem} `, \" \");\r\n                }\r\n                else {\r\n                    if (text.startsWith(`${rem} `)) {\r\n                        text = text.substring(rem.length + 1);\r\n                    }\r\n                    if (text.endsWith(` ${rem}`)) {\r\n                        text = text.substring(0, text.length - (rem.length + 1));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const checkNew = [new RegExp(`\\\\s${rem}\\\\s`, \"g\"), new RegExp(`\\\\s${rem}`, \"g\"), new RegExp(`${rem}\\\\s`, \"g\")];\r\n                for (const remNew of checkNew) {\r\n                    if (remNew.test(text)) {\r\n                        console.log(`Replacing \"${remNew}\" in \"${text}\"`);\r\n                        text = text.replace(remNew, \" \");\r\n                        console.log(`Text after: \"${text}\"`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (text.indexOf(rem) >= 0) {\r\n                text = text.replace(rem, \"\");\r\n            }\r\n        }\r\n    }\r\n    return text.trim();\r\n};\r\nfunction sortCompareStrings(a, b) {\r\n    const aa = a.toLowerCase();\r\n    const bb = b.toLowerCase();\r\n    if (aa < bb)\r\n        //sort string ascending\r\n        return -1;\r\n    if (aa > bb)\r\n        return 1;\r\n    return 0; //default return value (no sorting)\r\n}\r\nfunction comparePure(a, b) {\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\nfunction onlyNotNullEmpty(strArray) {\r\n    let notNullEmptyArray = [];\r\n    for (const str of strArray) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            notNullEmptyArray.push(str);\r\n        }\r\n    }\r\n    return notNullEmptyArray;\r\n}\r\nconst joinIntoUrl = (...routes) => {\r\n    return routes.filter(v => v).map((v, i, arr) => {\r\n        const isNotFirst = i !== 0;\r\n        const isNotLast = i !== arr.length - 1;\r\n        if (isNotFirst) {\r\n            v = v.startsWith(\"/\") ? v.slice(1) : v;\r\n        }\r\n        if (isNotLast) {\r\n            v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\r\n        }\r\n        return v;\r\n    }).join(\"/\");\r\n};\r\nconst getUrlWithBaseUrl = (baseUrl, route) => {\r\n    const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\r\n    if (isRouteCompleted) {\r\n        return route;\r\n    }\r\n    return joinIntoUrl(baseUrl, route);\r\n};\r\nconst isHashId = (accountId) => {\r\n    const hash = accountId.match(/^[a-zA-Z0-9]+$/);\r\n    return Boolean(hash);\r\n    // accountId.match(/^[a-zA-Z0-9]{64}$/)\r\n};\r\nexports.StringUtils = {\r\n    isUriEncoded,\r\n    decodeUriFully,\r\n    StringRegex: exports.StringRegex,\r\n    reverse,\r\n    notNullEmpty: exports.notNullEmpty,\r\n    nullEmpty: exports.nullEmpty,\r\n    anyNullEmpty,\r\n    safeAppend: exports.safeAppend,\r\n    createPadder,\r\n    pad,\r\n    convertToSlug: exports.convertToSlug,\r\n    stringToConstantStyledString: exports.stringToConstantStyledString,\r\n    removeAndTrim,\r\n    sortCompareStrings,\r\n    comparePure,\r\n    onlyNotNullEmpty,\r\n    firstNotNullEmpty: exports.firstNotNullEmpty,\r\n    joinIntoUrl,\r\n    getUrlWithBaseUrl,\r\n    isHashId,\r\n};\r\n//# sourceMappingURL=StringUtils.js.map"]},"metadata":{},"sourceType":"script"}