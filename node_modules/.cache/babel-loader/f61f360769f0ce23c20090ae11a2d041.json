{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar depd_1 = __importDefault(require(\"depd\"));\nvar account_1 = require(\"./account\");\nvar format_1 = require(\"./utils/format\");\nvar key_pair_1 = require(\"./utils/key_pair\");\nvar transaction_1 = require(\"./transaction\");\nvar web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nvar storageFallback = _defineProperty({}, exports.MULTISIG_STORAGE_KEY, null);\nvar AccountMultisig = /*#__PURE__*/function (_account_1$Account) {\n  _inherits(AccountMultisig, _account_1$Account);\n  var _super = _createSuper(AccountMultisig);\n  function AccountMultisig(connection, accountId, options) {\n    var _this;\n    _classCallCheck(this, AccountMultisig);\n    _this = _super.call(this, connection, accountId);\n    _this.storage = options.storage;\n    _this.onAddRequestResult = options.onAddRequestResult;\n    return _this;\n  }\n  _createClass(AccountMultisig, [{\n    key: \"signAndSendTransactionWithAccount\",\n    value: function () {\n      var _signAndSendTransactionWithAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(receiverId, actions) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: receiverId,\n                  actions: actions\n                }));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function signAndSendTransactionWithAccount(_x, _x2) {\n        return _signAndSendTransactionWithAccount.apply(this, arguments);\n      }\n      return signAndSendTransactionWithAccount;\n    }()\n  }, {\n    key: \"signAndSendTransaction\",\n    value: function signAndSendTransaction() {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n        return this._signAndSendTransaction({\n          receiverId: arguments.length <= 0 ? undefined : arguments[0],\n          actions: arguments.length <= 1 ? undefined : arguments[1]\n        });\n      }\n      return this._signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }, {\n    key: \"_signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref) {\n        var receiverId, actions, accountId, args, result, status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                receiverId = _ref.receiverId, actions = _ref.actions;\n                accountId = this.accountId;\n                args = Buffer.from(JSON.stringify({\n                  request: {\n                    receiver_id: receiverId,\n                    actions: convertActions(actions, accountId, receiverId)\n                  }\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: accountId,\n                  actions: [transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n              case 6:\n                result = _context2.sent;\n                _context2.next = 18;\n                break;\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                if (!_context2.t0.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                  _context2.next = 17;\n                  break;\n                }\n                _context2.next = 14;\n                return this.deleteUnconfirmedRequests();\n              case 14:\n                _context2.next = 16;\n                return this.signAndSendTransaction(receiverId, actions);\n              case 16:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 17:\n                throw _context2.t0;\n              case 18:\n                if (result.status) {\n                  _context2.next = 20;\n                  break;\n                }\n                throw new Error('Request failed');\n              case 20:\n                status = _objectSpread({}, result.status);\n                if (!(!status.SuccessValue || typeof status.SuccessValue !== 'string')) {\n                  _context2.next = 23;\n                  break;\n                }\n                throw new Error('Request failed');\n              case 23:\n                this.setRequest({\n                  accountId: accountId,\n                  actions: actions,\n                  requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n                });\n                if (!this.onAddRequestResult) {\n                  _context2.next = 27;\n                  break;\n                }\n                _context2.next = 27;\n                return this.onAddRequestResult(result);\n              case 27:\n                // NOTE there is no await on purpose to avoid blocking for 2fa\n                this.deleteUnconfirmedRequests();\n                return _context2.abrupt(\"return\", result);\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n      function _signAndSendTransaction(_x3) {\n        return _signAndSendTransaction2.apply(this, arguments);\n      }\n      return _signAndSendTransaction;\n    }()\n  }, {\n    key: \"deleteUnconfirmedRequests\",\n    value: function () {\n      var _deleteUnconfirmedRequests = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var request_ids, _this$getRequest, requestId, _iterator, _step, requestIdToDelete;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getRequestIds();\n              case 2:\n                request_ids = _context3.sent;\n                _this$getRequest = this.getRequest(), requestId = _this$getRequest.requestId;\n                _iterator = _createForOfIteratorHelper(request_ids);\n                _context3.prev = 5;\n                _iterator.s();\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 21;\n                  break;\n                }\n                requestIdToDelete = _step.value;\n                if (!(requestIdToDelete == requestId)) {\n                  _context3.next = 11;\n                  break;\n                }\n                return _context3.abrupt(\"continue\", 19);\n              case 11:\n                _context3.prev = 11;\n                _context3.next = 14;\n                return _get(_getPrototypeOf(AccountMultisig.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: this.accountId,\n                  actions: [transaction_1.functionCall('delete_request', {\n                    request_id: requestIdToDelete\n                  }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n              case 14:\n                _context3.next = 19;\n                break;\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](11);\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n              case 19:\n                _context3.next = 7;\n                break;\n              case 21:\n                _context3.next = 26;\n                break;\n              case 23:\n                _context3.prev = 23;\n                _context3.t1 = _context3[\"catch\"](5);\n                _iterator.e(_context3.t1);\n              case 26:\n                _context3.prev = 26;\n                _iterator.f();\n                return _context3.finish(26);\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 23, 26, 29], [11, 16]]);\n      }));\n      function deleteUnconfirmedRequests() {\n        return _deleteUnconfirmedRequests.apply(this, arguments);\n      }\n      return deleteUnconfirmedRequests;\n    }() // helpers\n  }, {\n    key: \"getRequestIds\",\n    value: function () {\n      var _getRequestIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.viewFunction(this.accountId, 'list_request_ids'));\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getRequestIds() {\n        return _getRequestIds.apply(this, arguments);\n      }\n      return getRequestIds;\n    }()\n  }, {\n    key: \"getRequest\",\n    value: function getRequest() {\n      if (this.storage) {\n        return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n      }\n      return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n  }, {\n    key: \"setRequest\",\n    value: function setRequest(data) {\n      if (this.storage) {\n        return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n      }\n      storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n  }]);\n  return AccountMultisig;\n}(account_1.Account);\nexports.AccountMultisig = AccountMultisig;\nvar Account2FA = /*#__PURE__*/function (_AccountMultisig) {\n  _inherits(Account2FA, _AccountMultisig);\n  var _super2 = _createSuper(Account2FA);\n  function Account2FA(connection, accountId, options) {\n    var _this2;\n    _classCallCheck(this, Account2FA);\n    _this2 = _super2.call(this, connection, accountId, options);\n    _this2.helperUrl = 'https://helper.testnet.near.org';\n    _this2.helperUrl = options.helperUrl || _this2.helperUrl;\n    _this2.storage = options.storage;\n    _this2.sendCode = options.sendCode || _this2.sendCodeDefault;\n    _this2.getCode = options.getCode || _this2.getCodeDefault;\n    _this2.verifyCode = options.verifyCode || _this2.verifyCodeDefault;\n    _this2.onConfirmResult = options.onConfirmResult;\n    return _this2;\n  }\n  _createClass(Account2FA, [{\n    key: \"signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var deprecate,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(typeof (_args5.length <= 0 ? undefined : _args5[0]) === 'string')) {\n                  _context5.next = 6;\n                  break;\n                }\n                deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n                deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n                return _context5.abrupt(\"return\", this.__signAndSendTransaction({\n                  receiverId: _args5.length <= 0 ? undefined : _args5[0],\n                  actions: _args5.length <= 1 ? undefined : _args5[1]\n                }));\n              case 6:\n                return _context5.abrupt(\"return\", this.__signAndSendTransaction(_args5.length <= 0 ? undefined : _args5[0]));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function signAndSendTransaction() {\n        return _signAndSendTransaction3.apply(this, arguments);\n      }\n      return signAndSendTransaction;\n    }()\n  }, {\n    key: \"__signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var receiverId, actions, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                receiverId = _ref2.receiverId, actions = _ref2.actions;\n                _context6.next = 3;\n                return _get(_getPrototypeOf(Account2FA.prototype), \"signAndSendTransaction\", this).call(this, {\n                  receiverId: receiverId,\n                  actions: actions\n                });\n              case 3:\n                _context6.next = 5;\n                return this.sendCode();\n              case 5:\n                _context6.next = 7;\n                return this.promptAndVerify();\n              case 7:\n                result = _context6.sent;\n                if (!this.onConfirmResult) {\n                  _context6.next = 11;\n                  break;\n                }\n                _context6.next = 11;\n                return this.onConfirmResult(result);\n              case 11:\n                return _context6.abrupt(\"return\", result);\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function __signAndSendTransaction(_x4) {\n        return _signAndSendTransaction4.apply(this, arguments);\n      }\n      return __signAndSendTransaction;\n    }() // default helpers for CH deployments of multisig\n  }, {\n    key: \"deployMultisig\",\n    value: function () {\n      var _deployMultisig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(contractBytes) {\n        var accountId, seedOrLedgerKey, fak2lak, confirmOnlyKey, newArgs, actions;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                accountId = this.accountId;\n                _context7.next = 3;\n                return this.getRecoveryMethods();\n              case 3:\n                seedOrLedgerKey = _context7.sent.data.filter(function (_ref3) {\n                  var kind = _ref3.kind,\n                    publicKey = _ref3.publicKey;\n                  return (kind === 'phrase' || kind === 'ledger') && publicKey !== null;\n                }).map(function (rm) {\n                  return rm.publicKey;\n                });\n                _context7.next = 6;\n                return this.getAccessKeys();\n              case 6:\n                fak2lak = _context7.sent.filter(function (_ref4) {\n                  var public_key = _ref4.public_key,\n                    permission = _ref4.access_key.permission;\n                  return permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key);\n                }).map(function (ak) {\n                  return ak.public_key;\n                }).map(toPK);\n                _context7.t0 = toPK;\n                _context7.next = 10;\n                return this.postSignedJson('/2fa/getAccessKey', {\n                  accountId: accountId\n                });\n              case 10:\n                _context7.t1 = _context7.sent.publicKey;\n                confirmOnlyKey = (0, _context7.t0)(_context7.t1);\n                newArgs = Buffer.from(JSON.stringify({\n                  'num_confirmations': 2\n                }));\n                actions = [].concat(_toConsumableArray(fak2lak.map(function (pk) {\n                  return transaction_1.deleteKey(pk);\n                })), _toConsumableArray(fak2lak.map(function (pk) {\n                  return transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null));\n                })), [transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)), transaction_1.deployContract(contractBytes)]);\n                _context7.next = 16;\n                return this.state();\n              case 16:\n                _context7.t2 = _context7.sent.code_hash;\n                if (!(_context7.t2 === '11111111111111111111111111111111')) {\n                  _context7.next = 19;\n                  break;\n                }\n                actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n              case 19:\n                console.log('deploying multisig contract for', accountId);\n                _context7.next = 22;\n                return _get(_getPrototypeOf(Account2FA.prototype), \"signAndSendTransactionWithAccount\", this).call(this, accountId, actions);\n              case 22:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 23:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function deployMultisig(_x5) {\n        return _deployMultisig.apply(this, arguments);\n      }\n      return deployMultisig;\n    }()\n  }, {\n    key: \"disable\",\n    value: function () {\n      var _disable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(contractBytes) {\n        var accountId, accessKeys, lak2fak, confirmOnlyKey, actions;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                accountId = this.accountId;\n                _context8.next = 3;\n                return this.getAccessKeys();\n              case 3:\n                accessKeys = _context8.sent;\n                lak2fak = accessKeys.filter(function (_ref5) {\n                  var access_key = _ref5.access_key;\n                  return access_key.permission !== 'FullAccess';\n                }).filter(function (_ref6) {\n                  var access_key = _ref6.access_key;\n                  var perm = access_key.permission.FunctionCall;\n                  return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes('add_request_and_confirm');\n                });\n                _context8.t0 = key_pair_1.PublicKey;\n                _context8.next = 8;\n                return this.postSignedJson('/2fa/getAccessKey', {\n                  accountId: accountId\n                });\n              case 8:\n                _context8.t1 = _context8.sent.publicKey;\n                confirmOnlyKey = _context8.t0.from.call(_context8.t0, _context8.t1);\n                actions = [transaction_1.deleteKey(confirmOnlyKey)].concat(_toConsumableArray(lak2fak.map(function (_ref7) {\n                  var public_key = _ref7.public_key;\n                  return transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key));\n                })), _toConsumableArray(lak2fak.map(function (_ref8) {\n                  var public_key = _ref8.public_key;\n                  return transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null);\n                })), [transaction_1.deployContract(contractBytes)]);\n                console.log('disabling 2fa for', accountId);\n                _context8.next = 14;\n                return this.signAndSendTransaction({\n                  receiverId: accountId,\n                  actions: actions\n                });\n              case 14:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function disable(_x6) {\n        return _disable.apply(this, arguments);\n      }\n      return disable;\n    }()\n  }, {\n    key: \"sendCodeDefault\",\n    value: function () {\n      var _sendCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var accountId, _this$getRequest2, requestId, method;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accountId = this.accountId;\n                _this$getRequest2 = this.getRequest(), requestId = _this$getRequest2.requestId;\n                _context9.next = 4;\n                return this.get2faMethod();\n              case 4:\n                method = _context9.sent;\n                _context9.next = 7;\n                return this.postSignedJson('/2fa/send', {\n                  accountId: accountId,\n                  method: method,\n                  requestId: requestId\n                });\n              case 7:\n                return _context9.abrupt(\"return\", requestId);\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function sendCodeDefault() {\n        return _sendCodeDefault.apply(this, arguments);\n      }\n      return sendCodeDefault;\n    }()\n  }, {\n    key: \"getCodeDefault\",\n    value: function () {\n      var _getCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(method) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n      function getCodeDefault(_x7) {\n        return _getCodeDefault.apply(this, arguments);\n      }\n      return getCodeDefault;\n    }()\n  }, {\n    key: \"promptAndVerify\",\n    value: function () {\n      var _promptAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var method, securityCode, result;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.get2faMethod();\n              case 2:\n                method = _context11.sent;\n                _context11.next = 5;\n                return this.getCode(method);\n              case 5:\n                securityCode = _context11.sent;\n                _context11.prev = 6;\n                _context11.next = 9;\n                return this.verifyCode(securityCode);\n              case 9:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 13:\n                _context11.prev = 13;\n                _context11.t0 = _context11[\"catch\"](6);\n                console.warn('Error validating security code:', _context11.t0);\n                if (!(_context11.t0.toString().includes('invalid 2fa code provided') || _context11.t0.toString().includes('2fa code not valid'))) {\n                  _context11.next = 20;\n                  break;\n                }\n                _context11.next = 19;\n                return this.promptAndVerify();\n              case 19:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 20:\n                throw _context11.t0;\n              case 21:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[6, 13]]);\n      }));\n      function promptAndVerify() {\n        return _promptAndVerify.apply(this, arguments);\n      }\n      return promptAndVerify;\n    }()\n  }, {\n    key: \"verifyCodeDefault\",\n    value: function () {\n      var _verifyCodeDefault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(securityCode) {\n        var accountId, request, requestId;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accountId = this.accountId;\n                request = this.getRequest();\n                if (request) {\n                  _context12.next = 4;\n                  break;\n                }\n                throw new Error('no request pending');\n              case 4:\n                requestId = request.requestId;\n                _context12.next = 7;\n                return this.postSignedJson('/2fa/verify', {\n                  accountId: accountId,\n                  securityCode: securityCode,\n                  requestId: requestId\n                });\n              case 7:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function verifyCodeDefault(_x8) {\n        return _verifyCodeDefault.apply(this, arguments);\n      }\n      return verifyCodeDefault;\n    }()\n  }, {\n    key: \"getRecoveryMethods\",\n    value: function () {\n      var _getRecoveryMethods = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var accountId;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                accountId = this.accountId;\n                _context13.t0 = accountId;\n                _context13.next = 4;\n                return this.postSignedJson('/account/recoveryMethods', {\n                  accountId: accountId\n                });\n              case 4:\n                _context13.t1 = _context13.sent;\n                return _context13.abrupt(\"return\", {\n                  accountId: _context13.t0,\n                  data: _context13.t1\n                });\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function getRecoveryMethods() {\n        return _getRecoveryMethods.apply(this, arguments);\n      }\n      return getRecoveryMethods;\n    }()\n  }, {\n    key: \"get2faMethod\",\n    value: function () {\n      var _get2faMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var _yield$this$getRecove, data, _data, kind, detail;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getRecoveryMethods();\n              case 2:\n                _yield$this$getRecove = _context14.sent;\n                data = _yield$this$getRecove.data;\n                if (data && data.length) {\n                  data = data.find(function (m) {\n                    return m.kind.indexOf('2fa-') === 0;\n                  });\n                }\n                if (data) {\n                  _context14.next = 7;\n                  break;\n                }\n                return _context14.abrupt(\"return\", null);\n              case 7:\n                _data = data, kind = _data.kind, detail = _data.detail;\n                return _context14.abrupt(\"return\", {\n                  kind: kind,\n                  detail: detail\n                });\n              case 9:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function get2faMethod() {\n        return _get2faMethod.apply(this, arguments);\n      }\n      return get2faMethod;\n    }()\n  }, {\n    key: \"signatureFor\",\n    value: function () {\n      var _signatureFor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var accountId, block, blockNumber, signed, blockNumberSignature;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                accountId = this.accountId;\n                _context15.next = 3;\n                return this.connection.provider.block({\n                  finality: 'final'\n                });\n              case 3:\n                block = _context15.sent;\n                blockNumber = block.header.height.toString();\n                _context15.next = 7;\n                return this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n              case 7:\n                signed = _context15.sent;\n                blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n                return _context15.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  blockNumberSignature: blockNumberSignature\n                });\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function signatureFor() {\n        return _signatureFor.apply(this, arguments);\n      }\n      return signatureFor;\n    }()\n  }, {\n    key: \"postSignedJson\",\n    value: function () {\n      var _postSignedJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(path, body) {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.t0 = web_1;\n                _context16.t1 = this.helperUrl + path;\n                _context16.t2 = JSON;\n                _context16.t3 = _objectSpread;\n                _context16.t4 = _objectSpread({}, body);\n                _context16.next = 7;\n                return this.signatureFor();\n              case 7:\n                _context16.t5 = _context16.sent;\n                _context16.t6 = (0, _context16.t3)(_context16.t4, _context16.t5);\n                _context16.t7 = _context16.t2.stringify.call(_context16.t2, _context16.t6);\n                _context16.next = 12;\n                return _context16.t0.fetchJson.call(_context16.t0, _context16.t1, _context16.t7);\n              case 12:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 13:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function postSignedJson(_x9, _x10) {\n        return _postSignedJson.apply(this, arguments);\n      }\n      return postSignedJson;\n    }()\n  }]);\n  return Account2FA;\n}(AccountMultisig);\nexports.Account2FA = Account2FA;\n// helpers\nvar toPK = function toPK(pk) {\n  return key_pair_1.PublicKey.from(pk);\n};\nvar convertPKForContract = function convertPKForContract(pk) {\n  return pk.toString().replace('ed25519:', '');\n};\nvar convertActions = function convertActions(actions, accountId, receiverId) {\n  return actions.map(function (a) {\n    var type = a.enum;\n    var _a$type = a[type],\n      gas = _a$type.gas,\n      publicKey = _a$type.publicKey,\n      methodName = _a$type.methodName,\n      args = _a$type.args,\n      deposit = _a$type.deposit,\n      accessKey = _a$type.accessKey,\n      code = _a$type.code;\n    var action = {\n      type: type[0].toUpperCase() + type.substr(1),\n      gas: gas && gas.toString() || undefined,\n      public_key: publicKey && convertPKForContract(publicKey) || undefined,\n      method_name: methodName,\n      args: args && Buffer.from(args).toString('base64') || undefined,\n      code: code && Buffer.from(code).toString('base64') || undefined,\n      amount: deposit && deposit.toString() || undefined,\n      deposit: deposit && deposit.toString() || '0',\n      permission: undefined\n    };\n    if (accessKey) {\n      if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n        action.permission = {\n          receiver_id: accountId,\n          allowance: exports.MULTISIG_ALLOWANCE.toString(),\n          method_names: exports.MULTISIG_CHANGE_METHODS\n        };\n      }\n      if (accessKey.permission.enum === 'functionCall') {\n        var _accessKey$permission = accessKey.permission.functionCall,\n          receiver_id = _accessKey$permission.receiverId,\n          method_names = _accessKey$permission.methodNames,\n          allowance = _accessKey$permission.allowance;\n        action.permission = {\n          receiver_id: receiver_id,\n          allowance: allowance && allowance.toString() || undefined,\n          method_names: method_names\n        };\n      }\n    }\n    return action;\n  });\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account2FA","AccountMultisig","MULTISIG_CONFIRM_METHODS","MULTISIG_CHANGE_METHODS","MULTISIG_DEPOSIT","MULTISIG_GAS","MULTISIG_ALLOWANCE","MULTISIG_STORAGE_KEY","bn_js_1","require","depd_1","account_1","format_1","key_pair_1","transaction_1","web_1","default","parseNearAmount","storageFallback","connection","accountId","options","storage","onAddRequestResult","receiverId","actions","_signAndSendTransaction","args","Buffer","from","JSON","stringify","request","receiver_id","convertActions","functionCall","result","toString","includes","deleteUnconfirmedRequests","signAndSendTransaction","status","Error","SuccessValue","setRequest","requestId","parseInt","getRequestIds","request_ids","getRequest","requestIdToDelete","request_id","console","warn","viewFunction","parse","getItem","data","setItem","Account","helperUrl","sendCode","sendCodeDefault","getCode","getCodeDefault","verifyCode","verifyCodeDefault","onConfirmResult","deprecate","__signAndSendTransaction","promptAndVerify","contractBytes","getRecoveryMethods","seedOrLedgerKey","filter","kind","publicKey","map","rm","getAccessKeys","fak2lak","public_key","permission","access_key","ak","toPK","postSignedJson","confirmOnlyKey","newArgs","pk","deleteKey","addKey","functionCallAccessKey","deployContract","state","code_hash","push","log","accessKeys","lak2fak","perm","FunctionCall","method_names","length","PublicKey","get2faMethod","method","securityCode","find","m","indexOf","detail","provider","block","finality","blockNumber","header","height","signer","signMessage","networkId","signed","blockNumberSignature","signature","path","body","signatureFor","fetchJson","convertPKForContract","replace","a","type","enum","gas","methodName","deposit","accessKey","code","action","toUpperCase","substr","undefined","method_name","amount","allowance","methodNames"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-api-js/lib/account_multisig.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction(receiverId, actions);\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction(this.accountId, 'list_request_ids');\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    async signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        else {\n            return this.__signAndSendTransaction(args[0]);\n        }\n    }\n    async __signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),\n            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),\n            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        if ((await this.state()).code_hash === '11111111111111111111111111111111') {\n            actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n        }\n        console.log('deploying multisig contract for', accountId);\n        return await super.signAndSendTransactionWithAccount(accountId, actions);\n    }\n    async disable(contractBytes) {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const actions = [\n            transaction_1.deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        console.log('disabling 2fa for', accountId);\n        return await this.signAndSendTransaction({\n            receiverId: accountId,\n            actions\n        });\n    }\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault(method) {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            console.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        if (data && data.length) {\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    async postSignedJson(path, body) {\n        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n            ...body,\n            ...(await this.signatureFor())\n        }));\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: exports.MULTISIG_ALLOWANCE.toString(),\n                method_names: exports.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}