{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar BN = require(\"bn.js\");\nvar nacl = require(\"tweetnacl\");\nvar ethunit = require(\"ethjs-unit\");\nvar isCryptoAvailable = typeof self !== 'undefined' && self.crypto && self.crypto.subtle;\nvar myCrypto = null;\nif (isCryptoAvailable) {// web\n  // nothing to do\n} else {\n  // nodejs or react-native\n  myCrypto = require('isomorphic-webcrypto');\n}\n\n/**\n * @param bytes {Uint8Array}\n * @return  {Promise<ArrayBuffer>}\n */\nfunction sha256(bytes) {\n  if (isCryptoAvailable) {\n    // web\n    return crypto.subtle.digest(\"SHA-256\", bytes);\n  } else {\n    // nodejs or react-native\n    return myCrypto.subtle.digest({\n      name: \"SHA-256\"\n    }, bytes);\n  }\n}\n\n/**\n * from coins to nanocoins\n * @param amount {number | BN | string}\n * @return {BN}\n */\nfunction toNano(amount) {\n  return ethunit.toWei(amount, 'gwei');\n}\n\n/**\n * from nanocoins to coins\n * @param amount  {number | BN | string}\n * @return {string}\n */\nfunction fromNano(amount) {\n  return ethunit.fromWei(amount, 'gwei');\n}\n\n// look up tables\nvar to_hex_array = [];\nvar to_byte_map = {};\nfor (var ord = 0; ord <= 0xff; ord++) {\n  var s = ord.toString(16);\n  if (s.length < 2) {\n    s = \"0\" + s;\n  }\n  to_hex_array.push(s);\n  to_byte_map[s] = ord;\n}\n\n//  converter using lookups\n/**\n * @param buffer  {Uint8Array}\n * @return {string}\n */\nfunction bytesToHex(buffer) {\n  var hex_array = [];\n  //(new Uint8Array(buffer)).forEach((v) => { hex_array.push(to_hex_array[v]) });\n  for (var i = 0; i < buffer.byteLength; i++) {\n    hex_array.push(to_hex_array[buffer[i]]);\n  }\n  return hex_array.join(\"\");\n}\n\n// reverse conversion using lookups\n/**\n * @param s {string}\n * @return {Uint8Array}\n */\nfunction hexToBytes(s) {\n  s = s.toLowerCase();\n  var length2 = s.length;\n  if (length2 % 2 !== 0) {\n    throw \"hex string must have length a multiple of 2\";\n  }\n  var length = length2 / 2;\n  var result = new Uint8Array(length);\n  for (var i = 0; i < length; i++) {\n    var i2 = i * 2;\n    var b = s.substring(i2, i2 + 2);\n    if (!to_byte_map.hasOwnProperty(b)) throw new Error('invalid hex character ' + b);\n    result[i] = to_byte_map[b];\n  }\n  return result;\n}\n\n/**\n * @param str {string}\n * @param size  {number}\n * @return {Uint8Array}\n */\nfunction stringToBytes(str) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var buf;\n  var bufView;\n  if (size === 1) {\n    buf = new ArrayBuffer(str.length);\n    bufView = new Uint8Array(buf);\n  }\n  if (size === 2) {\n    buf = new ArrayBuffer(str.length * 2);\n    bufView = new Uint16Array(buf);\n  }\n  if (size === 4) {\n    buf = new ArrayBuffer(str.length * 4);\n    bufView = new Uint32Array(buf);\n  }\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return new Uint8Array(bufView.buffer);\n}\n\n/**\n * @private\n * @param crc {number}\n * @param bytes {Uint8Array}\n * @return {number}\n */\nfunction _crc32c(crc, bytes) {\n  var POLY = 0x82f63b78;\n  crc ^= 0xffffffff;\n  for (var n = 0; n < bytes.length; n++) {\n    crc ^= bytes[n];\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;\n  }\n  return crc ^ 0xffffffff;\n}\n\n/**\n * @param bytes {Uint8Array}\n * @return {Uint8Array}\n */\nfunction crc32c(bytes) {\n  //Version suitable for crc32-c of BOC\n  var int_crc = _crc32c(0, bytes);\n  var arr = new ArrayBuffer(4);\n  var view = new DataView(arr);\n  view.setUint32(0, int_crc, false);\n  return new Uint8Array(arr).reverse();\n}\n\n/**\n * @param data  {ArrayLike<number>}\n * @return {Uint8Array}\n */\nfunction crc16(data) {\n  var poly = 0x1021;\n  var reg = 0;\n  var message = new Uint8Array(data.length + 2);\n  message.set(data);\n  var _iterator = _createForOfIteratorHelper(message),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      var mask = 0x80;\n      while (mask > 0) {\n        reg <<= 1;\n        if (byte & mask) {\n          reg += 1;\n        }\n        mask >>= 1;\n        if (reg > 0xffff) {\n          reg &= 0xffff;\n          reg ^= poly;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return new Uint8Array([Math.floor(reg / 256), reg % 256]);\n}\n\n/**\n * @param a {Uint8Array}\n * @param b {Uint8Array}\n * @return {Uint8Array}\n */\nfunction concatBytes(a, b) {\n  var c = new Uint8Array(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n  return c;\n}\n\n/**\n * @param a {Uint8Array}\n * @param b {Uint8Array}\n * @return {boolean}\n */\nfunction compareBytes(a, b) {\n  // TODO Make it smarter\n  return a.toString() === b.toString();\n}\nvar base64abc = function () {\n  var abc = [];\n  var A = \"A\".charCodeAt(0);\n  var a = \"a\".charCodeAt(0);\n  var n = \"0\".charCodeAt(0);\n  for (var i = 0; i < 26; ++i) {\n    abc.push(String.fromCharCode(A + i));\n  }\n  for (var _i = 0; _i < 26; ++_i) {\n    abc.push(String.fromCharCode(a + _i));\n  }\n  for (var _i2 = 0; _i2 < 10; ++_i2) {\n    abc.push(String.fromCharCode(n + _i2));\n  }\n  abc.push(\"+\");\n  abc.push(\"/\");\n  return abc;\n}();\n\n/**\n * @param bytes {Uint8Array}\n * @return {string}\n */\nfunction bytesToBase64(bytes) {\n  var result = \"\";\n  var i;\n  var l = bytes.length;\n  for (i = 2; i < l; i += 3) {\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0f) << 2 | bytes[i] >> 6];\n    result += base64abc[bytes[i] & 0x3f];\n  }\n  if (i === l + 1) {\n    // 1 octet missing\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4];\n    result += \"==\";\n  }\n  if (i === l) {\n    // 2 octets missing\n    result += base64abc[bytes[i - 2] >> 2];\n    result += base64abc[(bytes[i - 2] & 0x03) << 4 | bytes[i - 1] >> 4];\n    result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n    result += \"=\";\n  }\n  return result;\n}\nfunction base64toString(base64) {\n  if (typeof self === 'undefined') {\n    return Buffer.from(base64, 'base64').toString('binary'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error\n  } else {\n    return atob(base64);\n  }\n}\nfunction stringToBase64(s) {\n  if (typeof self === 'undefined') {\n    return Buffer.from(s, 'binary').toString('base64'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error\n  } else {\n    return btoa(s);\n  }\n}\n\n/**\n * @param base64  {string}\n * @return {Uint8Array}\n */\nfunction base64ToBytes(base64) {\n  var binary_string = base64toString(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes;\n}\n\n/**\n * @param n  {number}\n * @param ui8array  {Uint8Array}\n * @return {number}\n */\nfunction readNBytesUIntFromArray(n, ui8array) {\n  var res = 0;\n  for (var c = 0; c < n; c++) {\n    res *= 256;\n    res += ui8array[c];\n  }\n  return res;\n}\nmodule.exports = {\n  BN: BN,\n  nacl: nacl,\n  sha256: sha256,\n  fromNano: fromNano,\n  toNano: toNano,\n  bytesToHex: bytesToHex,\n  hexToBytes: hexToBytes,\n  stringToBytes: stringToBytes,\n  crc32c: crc32c,\n  crc16: crc16,\n  concatBytes: concatBytes,\n  bytesToBase64: bytesToBase64,\n  base64ToBytes: base64ToBytes,\n  base64toString: base64toString,\n  stringToBase64: stringToBase64,\n  compareBytes: compareBytes,\n  readNBytesUIntFromArray: readNBytesUIntFromArray\n};","map":{"version":3,"names":["BN","require","nacl","ethunit","isCryptoAvailable","self","crypto","subtle","myCrypto","sha256","bytes","digest","name","toNano","amount","toWei","fromNano","fromWei","to_hex_array","to_byte_map","ord","s","toString","length","push","bytesToHex","buffer","hex_array","i","byteLength","join","hexToBytes","toLowerCase","length2","result","Uint8Array","i2","b","substring","hasOwnProperty","Error","stringToBytes","str","size","buf","bufView","ArrayBuffer","Uint16Array","Uint32Array","strLen","charCodeAt","_crc32c","crc","POLY","n","crc32c","int_crc","arr","view","DataView","setUint32","reverse","crc16","data","poly","reg","message","set","byte","mask","Math","floor","concatBytes","a","c","compareBytes","base64abc","abc","A","String","fromCharCode","bytesToBase64","l","base64toString","base64","Buffer","from","atob","stringToBase64","btoa","base64ToBytes","binary_string","len","readNBytesUIntFromArray","ui8array","res","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/utils/Utils.js"],"sourcesContent":["const BN = require(\"bn.js\");\nconst nacl = require(\"tweetnacl\");\nconst ethunit = require(\"ethjs-unit\");\n\nconst isCryptoAvailable = typeof self !== 'undefined' && self.crypto && self.crypto.subtle;\n\nlet myCrypto = null;\n\nif (isCryptoAvailable) { // web\n    // nothing to do\n} else { // nodejs or react-native\n    myCrypto = require('isomorphic-webcrypto');\n}\n\n/**\n * @param bytes {Uint8Array}\n * @return  {Promise<ArrayBuffer>}\n */\nfunction sha256(bytes) {\n    if (isCryptoAvailable) { // web\n        return crypto.subtle.digest(\"SHA-256\", bytes);\n    } else {  // nodejs or react-native\n        return myCrypto.subtle.digest({name:\"SHA-256\"}, bytes);\n    }\n}\n\n/**\n * from coins to nanocoins\n * @param amount {number | BN | string}\n * @return {BN}\n */\nfunction toNano(amount) {\n    return ethunit.toWei(amount, 'gwei');\n}\n\n/**\n * from nanocoins to coins\n * @param amount  {number | BN | string}\n * @return {string}\n */\nfunction fromNano(amount) {\n    return ethunit.fromWei(amount, 'gwei');\n}\n\n// look up tables\nconst to_hex_array = [];\nconst to_byte_map = {};\nfor (let ord = 0; ord <= 0xff; ord++) {\n    let s = ord.toString(16);\n    if (s.length < 2) {\n        s = \"0\" + s;\n    }\n    to_hex_array.push(s);\n    to_byte_map[s] = ord;\n}\n\n//  converter using lookups\n/**\n * @param buffer  {Uint8Array}\n * @return {string}\n */\nfunction bytesToHex(buffer) {\n    const hex_array = [];\n    //(new Uint8Array(buffer)).forEach((v) => { hex_array.push(to_hex_array[v]) });\n    for (let i = 0; i < buffer.byteLength; i++) {\n        hex_array.push(to_hex_array[buffer[i]]);\n    }\n    return hex_array.join(\"\");\n}\n\n// reverse conversion using lookups\n/**\n * @param s {string}\n * @return {Uint8Array}\n */\nfunction hexToBytes(s) {\n    s = s.toLowerCase();\n    const length2 = s.length;\n    if (length2 % 2 !== 0) {\n        throw \"hex string must have length a multiple of 2\";\n    }\n    const length = length2 / 2;\n    const result = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        const i2 = i * 2;\n        const b = s.substring(i2, i2 + 2);\n        if (!to_byte_map.hasOwnProperty(b)) throw new Error('invalid hex character ' + b);\n        result[i] = to_byte_map[b];\n    }\n    return result;\n}\n\n/**\n * @param str {string}\n * @param size  {number}\n * @return {Uint8Array}\n */\nfunction stringToBytes(str, size = 1) {\n    let buf;\n    let bufView;\n    if (size === 1) {\n        buf = new ArrayBuffer(str.length);\n        bufView = new Uint8Array(buf);\n    }\n    if (size === 2) {\n        buf = new ArrayBuffer(str.length * 2);\n        bufView = new Uint16Array(buf);\n    }\n    if (size === 4) {\n        buf = new ArrayBuffer(str.length * 4);\n        bufView = new Uint32Array(buf);\n    }\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return new Uint8Array(bufView.buffer);\n}\n\n\n/**\n * @private\n * @param crc {number}\n * @param bytes {Uint8Array}\n * @return {number}\n */\nfunction _crc32c(crc, bytes) {\n    const POLY = 0x82f63b78;\n\n    crc ^= 0xffffffff;\n    for (let n = 0; n < bytes.length; n++) {\n        crc ^= bytes[n];\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n    }\n    return crc ^ 0xffffffff;\n}\n\n/**\n * @param bytes {Uint8Array}\n * @return {Uint8Array}\n */\nfunction crc32c(bytes) {\n    //Version suitable for crc32-c of BOC\n    const int_crc = _crc32c(0, bytes);\n    const arr = new ArrayBuffer(4);\n    const view = new DataView(arr);\n    view.setUint32(0, int_crc, false);\n    return new Uint8Array(arr).reverse();\n}\n\n/**\n * @param data  {ArrayLike<number>}\n * @return {Uint8Array}\n */\nfunction crc16(data) {\n    const poly = 0x1021;\n    let reg = 0;\n    const message = new Uint8Array(data.length + 2);\n    message.set(data);\n    for (let byte of message) {\n        let mask = 0x80;\n        while (mask > 0) {\n            reg <<= 1;\n            if (byte & mask) {\n                reg += 1;\n            }\n            mask >>= 1\n            if (reg > 0xffff) {\n                reg &= 0xffff;\n                reg ^= poly;\n            }\n        }\n    }\n    return new Uint8Array([Math.floor(reg / 256), reg % 256]);\n}\n\n/**\n * @param a {Uint8Array}\n * @param b {Uint8Array}\n * @return {Uint8Array}\n */\nfunction concatBytes(a, b) {\n    const c = new Uint8Array(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n}\n\n/**\n * @param a {Uint8Array}\n * @param b {Uint8Array}\n * @return {boolean}\n */\nfunction compareBytes(a, b) {\n    // TODO Make it smarter\n    return a.toString() === b.toString();\n}\n\nconst base64abc = (() => {\n    const abc = []\n    const A = \"A\".charCodeAt(0);\n    const a = \"a\".charCodeAt(0);\n    const n = \"0\".charCodeAt(0);\n    for (let i = 0; i < 26; ++i) {\n        abc.push(String.fromCharCode(A + i));\n    }\n    for (let i = 0; i < 26; ++i) {\n        abc.push(String.fromCharCode(a + i));\n    }\n    for (let i = 0; i < 10; ++i) {\n        abc.push(String.fromCharCode(n + i));\n    }\n    abc.push(\"+\");\n    abc.push(\"/\");\n    return abc;\n})();\n\n/**\n * @param bytes {Uint8Array}\n * @return {string}\n */\nfunction bytesToBase64(bytes) {\n    let result = \"\";\n    let i;\n    const l = bytes.length;\n    for (i = 2; i < l; i += 3) {\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[((bytes[i - 1] & 0x0f) << 2) | (bytes[i] >> 6)];\n        result += base64abc[bytes[i] & 0x3f];\n    }\n    if (i === l + 1) {\n        // 1 octet missing\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[(bytes[i - 2] & 0x03) << 4];\n        result += \"==\";\n    }\n    if (i === l) {\n        // 2 octets missing\n        result += base64abc[bytes[i - 2] >> 2];\n        result += base64abc[((bytes[i - 2] & 0x03) << 4) | (bytes[i - 1] >> 4)];\n        result += base64abc[(bytes[i - 1] & 0x0f) << 2];\n        result += \"=\";\n    }\n    return result;\n}\n\nfunction base64toString(base64) {\n    if (typeof self === 'undefined') {\n        return Buffer.from(base64, 'base64').toString('binary'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error\n    } else {\n        return atob(base64);\n    }\n}\n\nfunction stringToBase64(s) {\n    if (typeof self === 'undefined') {\n        return Buffer.from(s, 'binary').toString('base64'); // todo: (tolya-yanot) Buffer silently ignore incorrect base64 symbols, we need to throw error\n    } else {\n        return btoa(s);\n    }\n}\n\n/**\n * @param base64  {string}\n * @return {Uint8Array}\n */\nfunction base64ToBytes(base64) {\n    const binary_string = base64toString(base64);\n    const len = binary_string.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes;\n}\n\n/**\n * @param n  {number}\n * @param ui8array  {Uint8Array}\n * @return {number}\n */\nfunction readNBytesUIntFromArray(n, ui8array) {\n    let res = 0;\n    for (let c = 0; c < n; c++) {\n        res *= 256;\n        res += ui8array[c];\n    }\n    return res;\n}\n\nmodule.exports = {\n    BN,\n    nacl,\n    sha256,\n    fromNano,\n    toNano,\n    bytesToHex,\n    hexToBytes,\n    stringToBytes,\n    crc32c,\n    crc16,\n    concatBytes,\n    bytesToBase64,\n    base64ToBytes,\n    base64toString,\n    stringToBase64,\n    compareBytes,\n    readNBytesUIntFromArray\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}