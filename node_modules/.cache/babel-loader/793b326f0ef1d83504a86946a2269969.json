{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClientImpl = exports.QueryNextSequenceReceiveResponse = exports.QueryNextSequenceReceiveRequest = exports.QueryUnreceivedAcksResponse = exports.QueryUnreceivedAcksRequest = exports.QueryUnreceivedPacketsResponse = exports.QueryUnreceivedPacketsRequest = exports.QueryPacketAcknowledgementsResponse = exports.QueryPacketAcknowledgementsRequest = exports.QueryPacketAcknowledgementResponse = exports.QueryPacketAcknowledgementRequest = exports.QueryPacketReceiptResponse = exports.QueryPacketReceiptRequest = exports.QueryPacketCommitmentsResponse = exports.QueryPacketCommitmentsRequest = exports.QueryPacketCommitmentResponse = exports.QueryPacketCommitmentRequest = exports.QueryChannelConsensusStateResponse = exports.QueryChannelConsensusStateRequest = exports.QueryChannelClientStateResponse = exports.QueryChannelClientStateRequest = exports.QueryConnectionChannelsResponse = exports.QueryConnectionChannelsRequest = exports.QueryChannelsResponse = exports.QueryChannelsRequest = exports.QueryChannelResponse = exports.QueryChannelRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst channel_1 = require(\"../../../../ibc/core/channel/v1/channel\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst pagination_1 = require(\"../../../../cosmos/base/query/v1beta1/pagination\");\nconst any_1 = require(\"../../../../google/protobuf/any\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\nconst baseQueryChannelRequest = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.QueryChannelRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryChannelRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nconst baseQueryChannelResponse = {};\nexports.QueryChannelResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.channel !== undefined) {\n      channel_1.Channel.encode(message.channel, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.channel = channel_1.Channel.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelResponse);\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.channel !== undefined && (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryChannelResponse);\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromPartial(object.channel) : undefined;\n    message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryChannelsRequest = {};\nexports.QueryChannelsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelsRequest);\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryChannelsRequest);\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;\n    return message;\n  }\n};\nconst baseQueryChannelsResponse = {};\nexports.QueryChannelsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.channels) {\n      channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelsResponse);\n    message.channels = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryChannelsResponse);\n    message.channels = ((_a = object.channels) !== null && _a !== void 0 ? _a : []).map(e => channel_1.IdentifiedChannel.fromJSON(e));\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.channels) {\n      obj.channels = message.channels.map(e => e ? channel_1.IdentifiedChannel.toJSON(e) : undefined);\n    } else {\n      obj.channels = [];\n    }\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryChannelsResponse);\n    message.channels = ((_a = object.channels) === null || _a === void 0 ? void 0 : _a.map(e => channel_1.IdentifiedChannel.fromPartial(e))) || [];\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionChannelsRequest = {\n  connection: \"\"\n};\nexports.QueryConnectionChannelsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.connection !== \"\") {\n      writer.uint32(10).string(message.connection);\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.connection = reader.string();\n          break;\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n    message.connection = object.connection !== undefined && object.connection !== null ? String(object.connection) : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.connection !== undefined && (obj.connection = message.connection);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n    message.connection = (_a = object.connection) !== null && _a !== void 0 ? _a : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;\n    return message;\n  }\n};\nconst baseQueryConnectionChannelsResponse = {};\nexports.QueryConnectionChannelsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.channels) {\n      channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n    message.channels = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n    message.channels = ((_a = object.channels) !== null && _a !== void 0 ? _a : []).map(e => channel_1.IdentifiedChannel.fromJSON(e));\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.channels) {\n      obj.channels = message.channels.map(e => e ? channel_1.IdentifiedChannel.toJSON(e) : undefined);\n    } else {\n      obj.channels = [];\n    }\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n    message.channels = ((_a = object.channels) === null || _a === void 0 ? void 0 : _a.map(e => channel_1.IdentifiedChannel.fromPartial(e))) || [];\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryChannelClientStateRequest = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.QueryChannelClientStateRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelClientStateRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelClientStateRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryChannelClientStateRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nconst baseQueryChannelClientStateResponse = {};\nexports.QueryChannelClientStateResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.identifiedClientState !== undefined) {\n      client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelClientStateResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelClientStateResponse);\n    message.identifiedClientState = object.identifiedClientState !== undefined && object.identifiedClientState !== null ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState) : undefined;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.identifiedClientState !== undefined && (obj.identifiedClientState = message.identifiedClientState ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState) : undefined);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryChannelClientStateResponse);\n    message.identifiedClientState = object.identifiedClientState !== undefined && object.identifiedClientState !== null ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState) : undefined;\n    message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryChannelConsensusStateRequest = {\n  portId: \"\",\n  channelId: \"\",\n  revisionNumber: long_1.default.UZERO,\n  revisionHeight: long_1.default.UZERO\n};\nexports.QueryChannelConsensusStateRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.revisionNumber.isZero()) {\n      writer.uint32(24).uint64(message.revisionNumber);\n    }\n    if (!message.revisionHeight.isZero()) {\n      writer.uint32(32).uint64(message.revisionHeight);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.revisionNumber = reader.uint64();\n          break;\n        case 4:\n          message.revisionHeight = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.revisionNumber = object.revisionNumber !== undefined && object.revisionNumber !== null ? long_1.default.fromString(object.revisionNumber) : long_1.default.UZERO;\n    message.revisionHeight = object.revisionHeight !== undefined && object.revisionHeight !== null ? long_1.default.fromString(object.revisionHeight) : long_1.default.UZERO;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.revisionNumber !== undefined && (obj.revisionNumber = (message.revisionNumber || long_1.default.UZERO).toString());\n    message.revisionHeight !== undefined && (obj.revisionHeight = (message.revisionHeight || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.revisionNumber = object.revisionNumber !== undefined && object.revisionNumber !== null ? long_1.default.fromValue(object.revisionNumber) : long_1.default.UZERO;\n    message.revisionHeight = object.revisionHeight !== undefined && object.revisionHeight !== null ? long_1.default.fromValue(object.revisionHeight) : long_1.default.UZERO;\n    return message;\n  }\n};\nconst baseQueryChannelConsensusStateResponse = {\n  clientId: \"\"\n};\nexports.QueryChannelConsensusStateResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.consensusState !== undefined) {\n      any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.clientId !== \"\") {\n      writer.uint32(18).string(message.clientId);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(26).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.consensusState = any_1.Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.clientId = reader.string();\n          break;\n        case 3:\n          message.proof = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n    message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? any_1.Any.fromJSON(object.consensusState) : undefined;\n    message.clientId = object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.consensusState !== undefined && (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n    message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? any_1.Any.fromPartial(object.consensusState) : undefined;\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketCommitmentRequest = {\n  portId: \"\",\n  channelId: \"\",\n  sequence: long_1.default.UZERO\n};\nexports.QueryPacketCommitmentRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromString(object.sequence) : long_1.default.UZERO;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO;\n    return message;\n  }\n};\nconst baseQueryPacketCommitmentResponse = {};\nexports.QueryPacketCommitmentResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.commitment.length !== 0) {\n      writer.uint32(10).bytes(message.commitment);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n    message.commitment = new Uint8Array();\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.commitment = reader.bytes();\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n    message.commitment = object.commitment !== undefined && object.commitment !== null ? bytesFromBase64(object.commitment) : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.commitment !== undefined && (obj.commitment = base64FromBytes(message.commitment !== undefined ? message.commitment : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n    message.commitment = (_a = object.commitment) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketCommitmentsRequest = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.QueryPacketCommitmentsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketCommitmentsResponse = {};\nexports.QueryPacketCommitmentsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.commitments) {\n      channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n    message.commitments = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.commitments.push(channel_1.PacketState.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n    message.commitments = ((_a = object.commitments) !== null && _a !== void 0 ? _a : []).map(e => channel_1.PacketState.fromJSON(e));\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.commitments) {\n      obj.commitments = message.commitments.map(e => e ? channel_1.PacketState.toJSON(e) : undefined);\n    } else {\n      obj.commitments = [];\n    }\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n    message.commitments = ((_a = object.commitments) === null || _a === void 0 ? void 0 : _a.map(e => channel_1.PacketState.fromPartial(e))) || [];\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketReceiptRequest = {\n  portId: \"\",\n  channelId: \"\",\n  sequence: long_1.default.UZERO\n};\nexports.QueryPacketReceiptRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketReceiptRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketReceiptRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromString(object.sequence) : long_1.default.UZERO;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketReceiptRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO;\n    return message;\n  }\n};\nconst baseQueryPacketReceiptResponse = {\n  received: false\n};\nexports.QueryPacketReceiptResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.received === true) {\n      writer.uint32(16).bool(message.received);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(26).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketReceiptResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 2:\n          message.received = reader.bool();\n          break;\n        case 3:\n          message.proof = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketReceiptResponse);\n    message.received = object.received !== undefined && object.received !== null ? Boolean(object.received) : false;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.received !== undefined && (obj.received = message.received);\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketReceiptResponse);\n    message.received = (_a = object.received) !== null && _a !== void 0 ? _a : false;\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketAcknowledgementRequest = {\n  portId: \"\",\n  channelId: \"\",\n  sequence: long_1.default.UZERO\n};\nexports.QueryPacketAcknowledgementRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromString(object.sequence) : long_1.default.UZERO;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.sequence = object.sequence !== undefined && object.sequence !== null ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO;\n    return message;\n  }\n};\nconst baseQueryPacketAcknowledgementResponse = {};\nexports.QueryPacketAcknowledgementResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.acknowledgement.length !== 0) {\n      writer.uint32(10).bytes(message.acknowledgement);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n    message.acknowledgement = new Uint8Array();\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.acknowledgement = reader.bytes();\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n    message.acknowledgement = object.acknowledgement !== undefined && object.acknowledgement !== null ? bytesFromBase64(object.acknowledgement) : new Uint8Array();\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.acknowledgement !== undefined && (obj.acknowledgement = base64FromBytes(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n    message.acknowledgement = (_a = object.acknowledgement) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketAcknowledgementsRequest = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.QueryPacketAcknowledgementsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;\n    return message;\n  }\n};\nconst baseQueryPacketAcknowledgementsResponse = {};\nexports.QueryPacketAcknowledgementsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    for (const v of message.acknowledgements) {\n      channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n    message.acknowledgements = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.acknowledgements.push(channel_1.PacketState.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n    message.acknowledgements = ((_a = object.acknowledgements) !== null && _a !== void 0 ? _a : []).map(e => channel_1.PacketState.fromJSON(e));\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.acknowledgements) {\n      obj.acknowledgements = message.acknowledgements.map(e => e ? channel_1.PacketState.toJSON(e) : undefined);\n    } else {\n      obj.acknowledgements = [];\n    }\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n    message.acknowledgements = ((_a = object.acknowledgements) === null || _a === void 0 ? void 0 : _a.map(e => channel_1.PacketState.fromPartial(e))) || [];\n    message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryUnreceivedPacketsRequest = {\n  portId: \"\",\n  channelId: \"\",\n  packetCommitmentSequences: long_1.default.UZERO\n};\nexports.QueryUnreceivedPacketsRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    writer.uint32(26).fork();\n    for (const v of message.packetCommitmentSequences) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n    message.packetCommitmentSequences = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.packetCommitmentSequences.push(reader.uint64());\n            }\n          } else {\n            message.packetCommitmentSequences.push(reader.uint64());\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.packetCommitmentSequences = ((_a = object.packetCommitmentSequences) !== null && _a !== void 0 ? _a : []).map(e => long_1.default.fromString(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    if (message.packetCommitmentSequences) {\n      obj.packetCommitmentSequences = message.packetCommitmentSequences.map(e => (e || long_1.default.UZERO).toString());\n    } else {\n      obj.packetCommitmentSequences = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.packetCommitmentSequences = ((_c = object.packetCommitmentSequences) === null || _c === void 0 ? void 0 : _c.map(e => long_1.default.fromValue(e))) || [];\n    return message;\n  }\n};\nconst baseQueryUnreceivedPacketsResponse = {\n  sequences: long_1.default.UZERO\n};\nexports.QueryUnreceivedPacketsResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    writer.uint32(10).fork();\n    for (const v of message.sequences) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n    message.sequences = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.sequences.push(reader.uint64());\n            }\n          } else {\n            message.sequences.push(reader.uint64());\n          }\n          break;\n        case 2:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n    message.sequences = ((_a = object.sequences) !== null && _a !== void 0 ? _a : []).map(e => long_1.default.fromString(e));\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.sequences) {\n      obj.sequences = message.sequences.map(e => (e || long_1.default.UZERO).toString());\n    } else {\n      obj.sequences = [];\n    }\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n    message.sequences = ((_a = object.sequences) === null || _a === void 0 ? void 0 : _a.map(e => long_1.default.fromValue(e))) || [];\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryUnreceivedAcksRequest = {\n  portId: \"\",\n  channelId: \"\",\n  packetAckSequences: long_1.default.UZERO\n};\nexports.QueryUnreceivedAcksRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    writer.uint32(26).fork();\n    for (const v of message.packetAckSequences) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n    message.packetAckSequences = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.packetAckSequences.push(reader.uint64());\n            }\n          } else {\n            message.packetAckSequences.push(reader.uint64());\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.packetAckSequences = ((_a = object.packetAckSequences) !== null && _a !== void 0 ? _a : []).map(e => long_1.default.fromString(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    if (message.packetAckSequences) {\n      obj.packetAckSequences = message.packetAckSequences.map(e => (e || long_1.default.UZERO).toString());\n    } else {\n      obj.packetAckSequences = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.packetAckSequences = ((_c = object.packetAckSequences) === null || _c === void 0 ? void 0 : _c.map(e => long_1.default.fromValue(e))) || [];\n    return message;\n  }\n};\nconst baseQueryUnreceivedAcksResponse = {\n  sequences: long_1.default.UZERO\n};\nexports.QueryUnreceivedAcksResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    writer.uint32(10).fork();\n    for (const v of message.sequences) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    if (message.height !== undefined) {\n      client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n    message.sequences = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.sequences.push(reader.uint64());\n            }\n          } else {\n            message.sequences.push(reader.uint64());\n          }\n          break;\n        case 2:\n          message.height = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n    message.sequences = ((_a = object.sequences) !== null && _a !== void 0 ? _a : []).map(e => long_1.default.fromString(e));\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.sequences) {\n      obj.sequences = message.sequences.map(e => (e || long_1.default.UZERO).toString());\n    } else {\n      obj.sequences = [];\n    }\n    message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n    message.sequences = ((_a = object.sequences) === null || _a === void 0 ? void 0 : _a.map(e => long_1.default.fromValue(e))) || [];\n    message.height = object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n    return message;\n  }\n};\nconst baseQueryNextSequenceReceiveRequest = {\n  portId: \"\",\n  channelId: \"\"\n};\nexports.QueryNextSequenceReceiveRequest = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nconst baseQueryNextSequenceReceiveResponse = {\n  nextSequenceReceive: long_1.default.UZERO\n};\nexports.QueryNextSequenceReceiveResponse = {\n  encode(message) {\n    let writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (!message.nextSequenceReceive.isZero()) {\n      writer.uint32(8).uint64(message.nextSequenceReceive);\n    }\n    if (message.proof.length !== 0) {\n      writer.uint32(18).bytes(message.proof);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n    message.proof = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.nextSequenceReceive = reader.uint64();\n          break;\n        case 2:\n          message.proof = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n    message.nextSequenceReceive = object.nextSequenceReceive !== undefined && object.nextSequenceReceive !== null ? long_1.default.fromString(object.nextSequenceReceive) : long_1.default.UZERO;\n    message.proof = object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.nextSequenceReceive !== undefined && (obj.nextSequenceReceive = (message.nextSequenceReceive || long_1.default.UZERO).toString());\n    message.proof !== undefined && (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n    message.nextSequenceReceive = object.nextSequenceReceive !== undefined && object.nextSequenceReceive !== null ? long_1.default.fromValue(object.nextSequenceReceive) : long_1.default.UZERO;\n    message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    return message;\n  }\n};\nclass QueryClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n    this.Channel = this.Channel.bind(this);\n    this.Channels = this.Channels.bind(this);\n    this.ConnectionChannels = this.ConnectionChannels.bind(this);\n    this.ChannelClientState = this.ChannelClientState.bind(this);\n    this.ChannelConsensusState = this.ChannelConsensusState.bind(this);\n    this.PacketCommitment = this.PacketCommitment.bind(this);\n    this.PacketCommitments = this.PacketCommitments.bind(this);\n    this.PacketReceipt = this.PacketReceipt.bind(this);\n    this.PacketAcknowledgement = this.PacketAcknowledgement.bind(this);\n    this.PacketAcknowledgements = this.PacketAcknowledgements.bind(this);\n    this.UnreceivedPackets = this.UnreceivedPackets.bind(this);\n    this.UnreceivedAcks = this.UnreceivedAcks.bind(this);\n    this.NextSequenceReceive = this.NextSequenceReceive.bind(this);\n  }\n  Channel(request) {\n    const data = exports.QueryChannelRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channel\", data);\n    return promise.then(data => exports.QueryChannelResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  Channels(request) {\n    const data = exports.QueryChannelsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channels\", data);\n    return promise.then(data => exports.QueryChannelsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ConnectionChannels(request) {\n    const data = exports.QueryConnectionChannelsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ConnectionChannels\", data);\n    return promise.then(data => exports.QueryConnectionChannelsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ChannelClientState(request) {\n    const data = exports.QueryChannelClientStateRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelClientState\", data);\n    return promise.then(data => exports.QueryChannelClientStateResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  ChannelConsensusState(request) {\n    const data = exports.QueryChannelConsensusStateRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelConsensusState\", data);\n    return promise.then(data => exports.QueryChannelConsensusStateResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  PacketCommitment(request) {\n    const data = exports.QueryPacketCommitmentRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitment\", data);\n    return promise.then(data => exports.QueryPacketCommitmentResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  PacketCommitments(request) {\n    const data = exports.QueryPacketCommitmentsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitments\", data);\n    return promise.then(data => exports.QueryPacketCommitmentsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  PacketReceipt(request) {\n    const data = exports.QueryPacketReceiptRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketReceipt\", data);\n    return promise.then(data => exports.QueryPacketReceiptResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  PacketAcknowledgement(request) {\n    const data = exports.QueryPacketAcknowledgementRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgement\", data);\n    return promise.then(data => exports.QueryPacketAcknowledgementResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  PacketAcknowledgements(request) {\n    const data = exports.QueryPacketAcknowledgementsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgements\", data);\n    return promise.then(data => exports.QueryPacketAcknowledgementsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  UnreceivedPackets(request) {\n    const data = exports.QueryUnreceivedPacketsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedPackets\", data);\n    return promise.then(data => exports.QueryUnreceivedPacketsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  UnreceivedAcks(request) {\n    const data = exports.QueryUnreceivedAcksRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedAcks\", data);\n    return promise.then(data => exports.QueryUnreceivedAcksResponse.decode(new minimal_1.default.Reader(data)));\n  }\n  NextSequenceReceive(request) {\n    const data = exports.QueryNextSequenceReceiveRequest.encode(request).finish();\n    const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"NextSequenceReceive\", data);\n    return promise.then(data => exports.QueryNextSequenceReceiveResponse.decode(new minimal_1.default.Reader(data)));\n  }\n}\nexports.QueryClientImpl = QueryClientImpl;\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/ibc/core/channel/v1/query.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryClientImpl = exports.QueryNextSequenceReceiveResponse = exports.QueryNextSequenceReceiveRequest = exports.QueryUnreceivedAcksResponse = exports.QueryUnreceivedAcksRequest = exports.QueryUnreceivedPacketsResponse = exports.QueryUnreceivedPacketsRequest = exports.QueryPacketAcknowledgementsResponse = exports.QueryPacketAcknowledgementsRequest = exports.QueryPacketAcknowledgementResponse = exports.QueryPacketAcknowledgementRequest = exports.QueryPacketReceiptResponse = exports.QueryPacketReceiptRequest = exports.QueryPacketCommitmentsResponse = exports.QueryPacketCommitmentsRequest = exports.QueryPacketCommitmentResponse = exports.QueryPacketCommitmentRequest = exports.QueryChannelConsensusStateResponse = exports.QueryChannelConsensusStateRequest = exports.QueryChannelClientStateResponse = exports.QueryChannelClientStateRequest = exports.QueryConnectionChannelsResponse = exports.QueryConnectionChannelsRequest = exports.QueryChannelsResponse = exports.QueryChannelsRequest = exports.QueryChannelResponse = exports.QueryChannelRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst channel_1 = require(\"../../../../ibc/core/channel/v1/channel\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nconst pagination_1 = require(\"../../../../cosmos/base/query/v1beta1/pagination\");\nconst any_1 = require(\"../../../../google/protobuf/any\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\nconst baseQueryChannelRequest = { portId: \"\", channelId: \"\" };\nexports.QueryChannelRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryChannelRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseQueryChannelResponse = {};\nexports.QueryChannelResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.channel !== undefined) {\n            channel_1.Channel.encode(message.channel, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.channel = channel_1.Channel.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelResponse);\n        message.channel =\n            object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.channel !== undefined &&\n            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryChannelResponse);\n        message.channel =\n            object.channel !== undefined && object.channel !== null\n                ? channel_1.Channel.fromPartial(object.channel)\n                : undefined;\n        message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryChannelsRequest = {};\nexports.QueryChannelsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelsRequest);\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromJSON(object.pagination)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryChannelsRequest);\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromPartial(object.pagination)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryChannelsResponse = {};\nexports.QueryChannelsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.channels) {\n            channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelsResponse);\n        message.channels = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryChannelsResponse);\n        message.channels = ((_a = object.channels) !== null && _a !== void 0 ? _a : []).map((e) => channel_1.IdentifiedChannel.fromJSON(e));\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromJSON(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.channels) {\n            obj.channels = message.channels.map((e) => (e ? channel_1.IdentifiedChannel.toJSON(e) : undefined));\n        }\n        else {\n            obj.channels = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryChannelsResponse);\n        message.channels = ((_a = object.channels) === null || _a === void 0 ? void 0 : _a.map((e) => channel_1.IdentifiedChannel.fromPartial(e))) || [];\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromPartial(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionChannelsRequest = { connection: \"\" };\nexports.QueryConnectionChannelsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.connection !== \"\") {\n            writer.uint32(10).string(message.connection);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.connection = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n        message.connection =\n            object.connection !== undefined && object.connection !== null ? String(object.connection) : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromJSON(object.pagination)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.connection !== undefined && (obj.connection = message.connection);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionChannelsRequest);\n        message.connection = (_a = object.connection) !== null && _a !== void 0 ? _a : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromPartial(object.pagination)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryConnectionChannelsResponse = {};\nexports.QueryConnectionChannelsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.channels) {\n            channel_1.IdentifiedChannel.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n        message.channels = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.channels.push(channel_1.IdentifiedChannel.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n        message.channels = ((_a = object.channels) !== null && _a !== void 0 ? _a : []).map((e) => channel_1.IdentifiedChannel.fromJSON(e));\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromJSON(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.channels) {\n            obj.channels = message.channels.map((e) => (e ? channel_1.IdentifiedChannel.toJSON(e) : undefined));\n        }\n        else {\n            obj.channels = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryConnectionChannelsResponse);\n        message.channels = ((_a = object.channels) === null || _a === void 0 ? void 0 : _a.map((e) => channel_1.IdentifiedChannel.fromPartial(e))) || [];\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromPartial(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryChannelClientStateRequest = { portId: \"\", channelId: \"\" };\nexports.QueryChannelClientStateRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelClientStateRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelClientStateRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryChannelClientStateRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseQueryChannelClientStateResponse = {};\nexports.QueryChannelClientStateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.identifiedClientState !== undefined) {\n            client_1.IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelClientStateResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.identifiedClientState = client_1.IdentifiedClientState.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelClientStateResponse);\n        message.identifiedClientState =\n            object.identifiedClientState !== undefined && object.identifiedClientState !== null\n                ? client_1.IdentifiedClientState.fromJSON(object.identifiedClientState)\n                : undefined;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.identifiedClientState !== undefined &&\n            (obj.identifiedClientState = message.identifiedClientState\n                ? client_1.IdentifiedClientState.toJSON(message.identifiedClientState)\n                : undefined);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryChannelClientStateResponse);\n        message.identifiedClientState =\n            object.identifiedClientState !== undefined && object.identifiedClientState !== null\n                ? client_1.IdentifiedClientState.fromPartial(object.identifiedClientState)\n                : undefined;\n        message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryChannelConsensusStateRequest = {\n    portId: \"\",\n    channelId: \"\",\n    revisionNumber: long_1.default.UZERO,\n    revisionHeight: long_1.default.UZERO,\n};\nexports.QueryChannelConsensusStateRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (!message.revisionNumber.isZero()) {\n            writer.uint32(24).uint64(message.revisionNumber);\n        }\n        if (!message.revisionHeight.isZero()) {\n            writer.uint32(32).uint64(message.revisionHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.revisionNumber = reader.uint64();\n                    break;\n                case 4:\n                    message.revisionHeight = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.revisionNumber =\n            object.revisionNumber !== undefined && object.revisionNumber !== null\n                ? long_1.default.fromString(object.revisionNumber)\n                : long_1.default.UZERO;\n        message.revisionHeight =\n            object.revisionHeight !== undefined && object.revisionHeight !== null\n                ? long_1.default.fromString(object.revisionHeight)\n                : long_1.default.UZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.revisionNumber !== undefined &&\n            (obj.revisionNumber = (message.revisionNumber || long_1.default.UZERO).toString());\n        message.revisionHeight !== undefined &&\n            (obj.revisionHeight = (message.revisionHeight || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryChannelConsensusStateRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.revisionNumber =\n            object.revisionNumber !== undefined && object.revisionNumber !== null\n                ? long_1.default.fromValue(object.revisionNumber)\n                : long_1.default.UZERO;\n        message.revisionHeight =\n            object.revisionHeight !== undefined && object.revisionHeight !== null\n                ? long_1.default.fromValue(object.revisionHeight)\n                : long_1.default.UZERO;\n        return message;\n    },\n};\nconst baseQueryChannelConsensusStateResponse = { clientId: \"\" };\nexports.QueryChannelConsensusStateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.consensusState !== undefined) {\n            any_1.Any.encode(message.consensusState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.clientId !== \"\") {\n            writer.uint32(18).string(message.clientId);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(26).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.consensusState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.clientId = reader.string();\n                    break;\n                case 3:\n                    message.proof = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n        message.consensusState =\n            object.consensusState !== undefined && object.consensusState !== null\n                ? any_1.Any.fromJSON(object.consensusState)\n                : undefined;\n        message.clientId =\n            object.clientId !== undefined && object.clientId !== null ? String(object.clientId) : \"\";\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.consensusState !== undefined &&\n            (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n        message.clientId !== undefined && (obj.clientId = message.clientId);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryChannelConsensusStateResponse);\n        message.consensusState =\n            object.consensusState !== undefined && object.consensusState !== null\n                ? any_1.Any.fromPartial(object.consensusState)\n                : undefined;\n        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketCommitmentRequest = { portId: \"\", channelId: \"\", sequence: long_1.default.UZERO };\nexports.QueryPacketCommitmentRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (!message.sequence.isZero()) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromString(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketCommitmentRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromValue(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n};\nconst baseQueryPacketCommitmentResponse = {};\nexports.QueryPacketCommitmentResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.commitment.length !== 0) {\n            writer.uint32(10).bytes(message.commitment);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n        message.commitment = new Uint8Array();\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.commitment = reader.bytes();\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n        message.commitment =\n            object.commitment !== undefined && object.commitment !== null\n                ? bytesFromBase64(object.commitment)\n                : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.commitment !== undefined &&\n            (obj.commitment = base64FromBytes(message.commitment !== undefined ? message.commitment : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketCommitmentResponse);\n        message.commitment = (_a = object.commitment) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketCommitmentsRequest = { portId: \"\", channelId: \"\" };\nexports.QueryPacketCommitmentsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromJSON(object.pagination)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketCommitmentsRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromPartial(object.pagination)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketCommitmentsResponse = {};\nexports.QueryPacketCommitmentsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.commitments) {\n            channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n        message.commitments = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.commitments.push(channel_1.PacketState.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n        message.commitments = ((_a = object.commitments) !== null && _a !== void 0 ? _a : []).map((e) => channel_1.PacketState.fromJSON(e));\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromJSON(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.commitments) {\n            obj.commitments = message.commitments.map((e) => (e ? channel_1.PacketState.toJSON(e) : undefined));\n        }\n        else {\n            obj.commitments = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryPacketCommitmentsResponse);\n        message.commitments = ((_a = object.commitments) === null || _a === void 0 ? void 0 : _a.map((e) => channel_1.PacketState.fromPartial(e))) || [];\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromPartial(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketReceiptRequest = { portId: \"\", channelId: \"\", sequence: long_1.default.UZERO };\nexports.QueryPacketReceiptRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (!message.sequence.isZero()) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketReceiptRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketReceiptRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromString(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketReceiptRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromValue(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n};\nconst baseQueryPacketReceiptResponse = { received: false };\nexports.QueryPacketReceiptResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.received === true) {\n            writer.uint32(16).bool(message.received);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(26).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketReceiptResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 2:\n                    message.received = reader.bool();\n                    break;\n                case 3:\n                    message.proof = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketReceiptResponse);\n        message.received =\n            object.received !== undefined && object.received !== null ? Boolean(object.received) : false;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.received !== undefined && (obj.received = message.received);\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketReceiptResponse);\n        message.received = (_a = object.received) !== null && _a !== void 0 ? _a : false;\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketAcknowledgementRequest = { portId: \"\", channelId: \"\", sequence: long_1.default.UZERO };\nexports.QueryPacketAcknowledgementRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (!message.sequence.isZero()) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromString(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.sequence =\n            object.sequence !== undefined && object.sequence !== null\n                ? long_1.default.fromValue(object.sequence)\n                : long_1.default.UZERO;\n        return message;\n    },\n};\nconst baseQueryPacketAcknowledgementResponse = {};\nexports.QueryPacketAcknowledgementResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.acknowledgement.length !== 0) {\n            writer.uint32(10).bytes(message.acknowledgement);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n        message.acknowledgement = new Uint8Array();\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.acknowledgement = reader.bytes();\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n        message.acknowledgement =\n            object.acknowledgement !== undefined && object.acknowledgement !== null\n                ? bytesFromBase64(object.acknowledgement)\n                : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.acknowledgement !== undefined &&\n            (obj.acknowledgement = base64FromBytes(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementResponse);\n        message.acknowledgement = (_a = object.acknowledgement) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proof = (_b = object.proof) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketAcknowledgementsRequest = { portId: \"\", channelId: \"\" };\nexports.QueryPacketAcknowledgementsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromJSON(object.pagination)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageRequest.fromPartial(object.pagination)\n                : undefined;\n        return message;\n    },\n};\nconst baseQueryPacketAcknowledgementsResponse = {};\nexports.QueryPacketAcknowledgementsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.acknowledgements) {\n            channel_1.PacketState.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n        message.acknowledgements = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.acknowledgements.push(channel_1.PacketState.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n        message.acknowledgements = ((_a = object.acknowledgements) !== null && _a !== void 0 ? _a : []).map((e) => channel_1.PacketState.fromJSON(e));\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromJSON(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.acknowledgements) {\n            obj.acknowledgements = message.acknowledgements.map((e) => (e ? channel_1.PacketState.toJSON(e) : undefined));\n        }\n        else {\n            obj.acknowledgements = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryPacketAcknowledgementsResponse);\n        message.acknowledgements = ((_a = object.acknowledgements) === null || _a === void 0 ? void 0 : _a.map((e) => channel_1.PacketState.fromPartial(e))) || [];\n        message.pagination =\n            object.pagination !== undefined && object.pagination !== null\n                ? pagination_1.PageResponse.fromPartial(object.pagination)\n                : undefined;\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryUnreceivedPacketsRequest = {\n    portId: \"\",\n    channelId: \"\",\n    packetCommitmentSequences: long_1.default.UZERO,\n};\nexports.QueryUnreceivedPacketsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        writer.uint32(26).fork();\n        for (const v of message.packetCommitmentSequences) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n        message.packetCommitmentSequences = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.packetCommitmentSequences.push(reader.uint64());\n                        }\n                    }\n                    else {\n                        message.packetCommitmentSequences.push(reader.uint64());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.packetCommitmentSequences = ((_a = object.packetCommitmentSequences) !== null && _a !== void 0 ? _a : []).map((e) => long_1.default.fromString(e));\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        if (message.packetCommitmentSequences) {\n            obj.packetCommitmentSequences = message.packetCommitmentSequences.map((e) => (e || long_1.default.UZERO).toString());\n        }\n        else {\n            obj.packetCommitmentSequences = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.packetCommitmentSequences = ((_c = object.packetCommitmentSequences) === null || _c === void 0 ? void 0 : _c.map((e) => long_1.default.fromValue(e))) || [];\n        return message;\n    },\n};\nconst baseQueryUnreceivedPacketsResponse = { sequences: long_1.default.UZERO };\nexports.QueryUnreceivedPacketsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.sequences) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n        message.sequences = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.sequences.push(reader.uint64());\n                        }\n                    }\n                    else {\n                        message.sequences.push(reader.uint64());\n                    }\n                    break;\n                case 2:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n        message.sequences = ((_a = object.sequences) !== null && _a !== void 0 ? _a : []).map((e) => long_1.default.fromString(e));\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.sequences) {\n            obj.sequences = message.sequences.map((e) => (e || long_1.default.UZERO).toString());\n        }\n        else {\n            obj.sequences = [];\n        }\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedPacketsResponse);\n        message.sequences = ((_a = object.sequences) === null || _a === void 0 ? void 0 : _a.map((e) => long_1.default.fromValue(e))) || [];\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryUnreceivedAcksRequest = { portId: \"\", channelId: \"\", packetAckSequences: long_1.default.UZERO };\nexports.QueryUnreceivedAcksRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        writer.uint32(26).fork();\n        for (const v of message.packetAckSequences) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n        message.packetAckSequences = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.packetAckSequences.push(reader.uint64());\n                        }\n                    }\n                    else {\n                        message.packetAckSequences.push(reader.uint64());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.packetAckSequences = ((_a = object.packetAckSequences) !== null && _a !== void 0 ? _a : []).map((e) => long_1.default.fromString(e));\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        if (message.packetAckSequences) {\n            obj.packetAckSequences = message.packetAckSequences.map((e) => (e || long_1.default.UZERO).toString());\n        }\n        else {\n            obj.packetAckSequences = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseQueryUnreceivedAcksRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.packetAckSequences = ((_c = object.packetAckSequences) === null || _c === void 0 ? void 0 : _c.map((e) => long_1.default.fromValue(e))) || [];\n        return message;\n    },\n};\nconst baseQueryUnreceivedAcksResponse = { sequences: long_1.default.UZERO };\nexports.QueryUnreceivedAcksResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.sequences) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        if (message.height !== undefined) {\n            client_1.Height.encode(message.height, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n        message.sequences = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.sequences.push(reader.uint64());\n                        }\n                    }\n                    else {\n                        message.sequences.push(reader.uint64());\n                    }\n                    break;\n                case 2:\n                    message.height = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n        message.sequences = ((_a = object.sequences) !== null && _a !== void 0 ? _a : []).map((e) => long_1.default.fromString(e));\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromJSON(object.height) : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.sequences) {\n            obj.sequences = message.sequences.map((e) => (e || long_1.default.UZERO).toString());\n        }\n        else {\n            obj.sequences = [];\n        }\n        message.height !== undefined && (obj.height = message.height ? client_1.Height.toJSON(message.height) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryUnreceivedAcksResponse);\n        message.sequences = ((_a = object.sequences) === null || _a === void 0 ? void 0 : _a.map((e) => long_1.default.fromValue(e))) || [];\n        message.height =\n            object.height !== undefined && object.height !== null ? client_1.Height.fromPartial(object.height) : undefined;\n        return message;\n    },\n};\nconst baseQueryNextSequenceReceiveRequest = { portId: \"\", channelId: \"\" };\nexports.QueryNextSequenceReceiveRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseQueryNextSequenceReceiveRequest);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseQueryNextSequenceReceiveResponse = { nextSequenceReceive: long_1.default.UZERO };\nexports.QueryNextSequenceReceiveResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.nextSequenceReceive.isZero()) {\n            writer.uint32(8).uint64(message.nextSequenceReceive);\n        }\n        if (message.proof.length !== 0) {\n            writer.uint32(18).bytes(message.proof);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n        message.proof = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.nextSequenceReceive = reader.uint64();\n                    break;\n                case 2:\n                    message.proof = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n        message.nextSequenceReceive =\n            object.nextSequenceReceive !== undefined && object.nextSequenceReceive !== null\n                ? long_1.default.fromString(object.nextSequenceReceive)\n                : long_1.default.UZERO;\n        message.proof =\n            object.proof !== undefined && object.proof !== null ? bytesFromBase64(object.proof) : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.nextSequenceReceive !== undefined &&\n            (obj.nextSequenceReceive = (message.nextSequenceReceive || long_1.default.UZERO).toString());\n        message.proof !== undefined &&\n            (obj.proof = base64FromBytes(message.proof !== undefined ? message.proof : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = Object.assign({}, baseQueryNextSequenceReceiveResponse);\n        message.nextSequenceReceive =\n            object.nextSequenceReceive !== undefined && object.nextSequenceReceive !== null\n                ? long_1.default.fromValue(object.nextSequenceReceive)\n                : long_1.default.UZERO;\n        message.proof = (_a = object.proof) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        return message;\n    },\n};\nclass QueryClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.Channel = this.Channel.bind(this);\n        this.Channels = this.Channels.bind(this);\n        this.ConnectionChannels = this.ConnectionChannels.bind(this);\n        this.ChannelClientState = this.ChannelClientState.bind(this);\n        this.ChannelConsensusState = this.ChannelConsensusState.bind(this);\n        this.PacketCommitment = this.PacketCommitment.bind(this);\n        this.PacketCommitments = this.PacketCommitments.bind(this);\n        this.PacketReceipt = this.PacketReceipt.bind(this);\n        this.PacketAcknowledgement = this.PacketAcknowledgement.bind(this);\n        this.PacketAcknowledgements = this.PacketAcknowledgements.bind(this);\n        this.UnreceivedPackets = this.UnreceivedPackets.bind(this);\n        this.UnreceivedAcks = this.UnreceivedAcks.bind(this);\n        this.NextSequenceReceive = this.NextSequenceReceive.bind(this);\n    }\n    Channel(request) {\n        const data = exports.QueryChannelRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channel\", data);\n        return promise.then((data) => exports.QueryChannelResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Channels(request) {\n        const data = exports.QueryChannelsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"Channels\", data);\n        return promise.then((data) => exports.QueryChannelsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ConnectionChannels(request) {\n        const data = exports.QueryConnectionChannelsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ConnectionChannels\", data);\n        return promise.then((data) => exports.QueryConnectionChannelsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelClientState(request) {\n        const data = exports.QueryChannelClientStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelClientState\", data);\n        return promise.then((data) => exports.QueryChannelClientStateResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelConsensusState(request) {\n        const data = exports.QueryChannelConsensusStateRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"ChannelConsensusState\", data);\n        return promise.then((data) => exports.QueryChannelConsensusStateResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    PacketCommitment(request) {\n        const data = exports.QueryPacketCommitmentRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitment\", data);\n        return promise.then((data) => exports.QueryPacketCommitmentResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    PacketCommitments(request) {\n        const data = exports.QueryPacketCommitmentsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketCommitments\", data);\n        return promise.then((data) => exports.QueryPacketCommitmentsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    PacketReceipt(request) {\n        const data = exports.QueryPacketReceiptRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketReceipt\", data);\n        return promise.then((data) => exports.QueryPacketReceiptResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    PacketAcknowledgement(request) {\n        const data = exports.QueryPacketAcknowledgementRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgement\", data);\n        return promise.then((data) => exports.QueryPacketAcknowledgementResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    PacketAcknowledgements(request) {\n        const data = exports.QueryPacketAcknowledgementsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"PacketAcknowledgements\", data);\n        return promise.then((data) => exports.QueryPacketAcknowledgementsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    UnreceivedPackets(request) {\n        const data = exports.QueryUnreceivedPacketsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedPackets\", data);\n        return promise.then((data) => exports.QueryUnreceivedPacketsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    UnreceivedAcks(request) {\n        const data = exports.QueryUnreceivedAcksRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"UnreceivedAcks\", data);\n        return promise.then((data) => exports.QueryUnreceivedAcksResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    NextSequenceReceive(request) {\n        const data = exports.QueryNextSequenceReceiveRequest.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Query\", \"NextSequenceReceive\", data);\n        return promise.then((data) => exports.QueryNextSequenceReceiveResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.QueryClientImpl = QueryClientImpl;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=query.js.map"]},"metadata":{},"sourceType":"script"}