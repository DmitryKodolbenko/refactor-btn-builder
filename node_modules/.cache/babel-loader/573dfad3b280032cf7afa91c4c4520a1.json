{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signDirect(address, signDoc) {\n    const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n    const hashedMessage = (0, crypto_1.sha256)(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"sources":["../src/directsecp256k1wallet.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAIA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;AAIG;AACH,MAAa,qBAAqB,CAAA;EAgBhC,WAAA,CAAoB,OAAmB,EAAE,MAAkB,EAAE,MAAc,EAAA;IACzE,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,MAAM,GAAG,MAAM;EACtB;EAnBA;;;;;AAKG;EACI,aAAa,OAAO,CAAC,OAAmB,EAAmB;IAAA,IAAjB,MAAM,uEAAG,QAAQ;IAChE,MAAM,YAAY,GAAG,CAAC,MAAM,QAAA,CAAA,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,MAAM;IAClE,OAAO,IAAI,qBAAqB,CAAC,OAAO,EAAE,QAAA,CAAA,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;EAC3F;EAYA,IAAY,OAAO,GAAA;IACjB,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,IAAI,CAAC,MAAM,EAAE,CAAA,CAAA,EAAA,OAAA,CAAA,8BAA8B,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAM,WAAW,GAAA;IACtB,OAAO,CACL;MACE,IAAI,EAAE,WAAW;MACjB,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,MAAM,EAAE,IAAI,CAAC;KACd,CACF;EACH;EAEO,MAAM,UAAU,CAAC,OAAe,EAAE,OAAgB,EAAA;IACvD,MAAM,SAAS,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,OAAO,CAAC;IACxC,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;MAC5B,MAAM,IAAI,KAAK,CAAC,WAAW,OAAO,sBAAsB,CAAC;IAC1D;IACD,MAAM,aAAa,GAAG,CAAA,CAAA,EAAA,QAAA,CAAA,MAAM,EAAC,SAAS,CAAC;IACvC,MAAM,SAAS,GAAG,MAAM,QAAA,CAAA,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC;IAC9E,MAAM,cAAc,GAAG,IAAI,UAAU,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAM,YAAY,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,wBAAwB,EAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC;IAC1E,OAAO;MACL,MAAM,EAAE,OAAO;MACf,SAAS,EAAE;KACZ;EACH;AACD;AAlDD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    /**\n     * Creates a DirectSecp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signDirect(address, signDoc) {\n        const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n        if (address !== this.address) {\n            throw new Error(`Address ${address} not found in wallet`);\n        }\n        const hashedMessage = (0, crypto_1.sha256)(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;\n//# sourceMappingURL=directsecp256k1wallet.js.map"]},"metadata":{},"sourceType":"script"}