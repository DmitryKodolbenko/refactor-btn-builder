{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha512 = exports.Sha512 = exports.sha256 = exports.Sha256 = void 0;\nvar sha256_1 = require(\"@noble/hashes/sha256\");\nvar sha512_1 = require(\"@noble/hashes/sha512\");\nvar utils_1 = require(\"./utils\");\nvar Sha256 = /*#__PURE__*/function () {\n  function Sha256(firstData) {\n    _classCallCheck(this, Sha256);\n    this.blockSize = 512 / 8;\n    this.impl = sha256_1.sha256.create();\n    if (firstData) {\n      this.update(firstData);\n    }\n  }\n  _createClass(Sha256, [{\n    key: \"update\",\n    value: function update(data) {\n      this.impl.update((0, utils_1.toRealUint8Array)(data));\n      return this;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      return this.impl.digest();\n    }\n  }]);\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\n/** Convenience function equivalent to `new Sha256(data).digest()` */\nfunction sha256(data) {\n  return new Sha256(data).digest();\n}\nexports.sha256 = sha256;\nvar Sha512 = /*#__PURE__*/function () {\n  function Sha512(firstData) {\n    _classCallCheck(this, Sha512);\n    this.blockSize = 1024 / 8;\n    this.impl = sha512_1.sha512.create();\n    if (firstData) {\n      this.update(firstData);\n    }\n  }\n  _createClass(Sha512, [{\n    key: \"update\",\n    value: function update(data) {\n      this.impl.update((0, utils_1.toRealUint8Array)(data));\n      return this;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      return this.impl.digest();\n    }\n  }]);\n  return Sha512;\n}();\nexports.Sha512 = Sha512;\n/** Convenience function equivalent to `new Sha512(data).digest()` */\nfunction sha512(data) {\n  return new Sha512(data).digest();\n}\nexports.sha512 = sha512;","map":{"version":3,"sources":["../src/sha.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAA2C,IAE9B,MAAM;EAKjB,gBAAmB,SAAsB,EAAA;IAAA;IAJzB,IAAA,CAAA,SAAS,GAAG,GAAG,GAAG,CAAC;IAElB,IAAA,CAAA,IAAI,GAAG,QAAA,CAAA,MAAW,CAAC,MAAM,EAAE;IAG1C,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IACvB;EACH;EAAC;IAAA;IAAA,OAEM,gBAAO,IAAgB,EAAA;MAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,gBAAgB,EAAC,IAAI,CAAC,CAAC;MACxC,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEM,kBAAM;MACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IAC3B;EAAC;EAAA;AAAA;AAlBH,OAAA,CAAA,MAAA,GAAA,MAAA;AAqBA;AACA,SAAgB,MAAM,CAAC,IAAgB,EAAA;EACrC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;AAClC;AAFA,OAAA,CAAA,MAAA,GAAA,MAAA;AAEC,IAEY,MAAM;EAKjB,gBAAmB,SAAsB,EAAA;IAAA;IAJzB,IAAA,CAAA,SAAS,GAAG,IAAI,GAAG,CAAC;IAEnB,IAAA,CAAA,IAAI,GAAG,QAAA,CAAA,MAAW,CAAC,MAAM,EAAE;IAG1C,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IACvB;EACH;EAAC;IAAA;IAAA,OAEM,gBAAO,IAAgB,EAAA;MAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,gBAAgB,EAAC,IAAI,CAAC,CAAC;MACxC,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEM,kBAAM;MACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IAC3B;EAAC;EAAA;AAAA;AAlBH,OAAA,CAAA,MAAA,GAAA,MAAA;AAqBA;AACA,SAAgB,MAAM,CAAC,IAAgB,EAAA;EACrC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;AAClC;AAFA,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha512 = exports.Sha512 = exports.sha256 = exports.Sha256 = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"./utils\");\nclass Sha256 {\n    constructor(firstData) {\n        this.blockSize = 512 / 8;\n        this.impl = sha256_1.sha256.create();\n        if (firstData) {\n            this.update(firstData);\n        }\n    }\n    update(data) {\n        this.impl.update((0, utils_1.toRealUint8Array)(data));\n        return this;\n    }\n    digest() {\n        return this.impl.digest();\n    }\n}\nexports.Sha256 = Sha256;\n/** Convenience function equivalent to `new Sha256(data).digest()` */\nfunction sha256(data) {\n    return new Sha256(data).digest();\n}\nexports.sha256 = sha256;\nclass Sha512 {\n    constructor(firstData) {\n        this.blockSize = 1024 / 8;\n        this.impl = sha512_1.sha512.create();\n        if (firstData) {\n            this.update(firstData);\n        }\n    }\n    update(data) {\n        this.impl.update((0, utils_1.toRealUint8Array)(data));\n        return this;\n    }\n    digest() {\n        return this.impl.digest();\n    }\n}\nexports.Sha512 = Sha512;\n/** Convenience function equivalent to `new Sha512(data).digest()` */\nfunction sha512(data) {\n    return new Sha512(data).digest();\n}\nexports.sha512 = sha512;\n//# sourceMappingURL=sha.js.map"]},"metadata":{},"sourceType":"script"}