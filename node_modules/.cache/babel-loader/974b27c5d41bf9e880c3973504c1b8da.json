{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TonClient_api;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TonClient = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst Address_1 = require(\"../address/Address\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst HttpApi_1 = require(\"./api/HttpApi\");\nconst ExternalMessage_1 = require(\"../messages/ExternalMessage\");\nconst CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nconst StateInit_1 = require(\"../messages/StateInit\");\nconst Wallet_1 = require(\"./Wallet\");\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nconst ConfigContract_1 = require(\"../contracts/ConfigContract\");\nconst TonCache_1 = require(\"./TonCache\");\nfunction convertMessage(t) {\n  return {\n    source: t.source !== '' ? Address_1.Address.parseFriendly(t.source).address : null,\n    destination: t.destination !== '' ? Address_1.Address.parseFriendly(t.destination).address : null,\n    forwardFee: new bn_js_1.BN(t.fwd_fee),\n    ihrFee: new bn_js_1.BN(t.ihr_fee),\n    value: new bn_js_1.BN(t.value),\n    createdLt: t.created_lt,\n    body: t.msg_data['@type'] === 'msg.dataRaw' ? {\n      type: 'data',\n      data: Buffer.from(t.msg_data.body, 'base64')\n    } : t.msg_data['@type'] === 'msg.dataText' ? {\n      type: 'text',\n      text: Buffer.from(t.msg_data.text, 'base64').toString('utf-8')\n    } : null\n  };\n}\nfunction convertTransaction(r) {\n  return {\n    id: {\n      lt: r.transaction_id.lt,\n      hash: r.transaction_id.hash\n    },\n    time: r.utime,\n    data: r.data,\n    storageFee: new bn_js_1.BN(r.storage_fee),\n    otherFee: new bn_js_1.BN(r.other_fee),\n    fee: new bn_js_1.BN(r.fee),\n    inMessage: r.in_msg ? convertMessage(r.in_msg) : null,\n    outMessages: r.out_msgs.map(convertMessage)\n  };\n}\nclass TonClient {\n  constructor(parameters) {\n    _TonClient_api.set(this, void 0);\n    this.services = {\n      configs: new ConfigContract_1.ConfigContract(this)\n    };\n    this.parameters = {\n      endpoint: parameters.endpoint,\n      cache: parameters.cache ? parameters.cache : new TonCache_1.InMemoryCache()\n    };\n    __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, this.parameters.cache, {\n      timeout: parameters.timeout,\n      apiKey: parameters.apiKey,\n      adapter: parameters.httpAdapter\n    }), \"f\");\n  }\n  /**\n   * Get Address Balance\n   * @param address address for balance check\n   * @returns balance\n   */\n  async getBalance(address) {\n    return (await this.getContractState(address)).balance;\n  }\n  /**\n   * Invoke get method\n   * @param address contract address\n   * @param name name of method\n   * @param params optional parameters\n   * @returns stack and gas_used field\n   */\n  async callGetMethod(address, name) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n    if (res.exit_code !== 0) {\n      throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);\n    }\n    return {\n      gas_used: res.gas_used,\n      stack: res.stack\n    };\n  }\n  /**\n   * Invoke get method that returns error code instead of throwing error\n   * @param address contract address\n   * @param name name of method\n   * @param params optional parameters\n   * @returns stack and gas_used field\n  */\n  async callGetMethodWithError(address, name) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n    return {\n      gas_used: res.gas_used,\n      stack: res.stack,\n      exit_code: res.exit_code\n    };\n  }\n  /**\n   * Get transactions\n   * @param address address\n   */\n  async getTransactions(address, opts) {\n    // Fetch transactions\n    let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransactions(address, opts);\n    let res = [];\n    for (let r of tx) {\n      res.push(convertTransaction(r));\n    }\n    return res;\n  }\n  /**\n   * Get transaction by it's id\n   * @param address address\n   * @param lt logical time\n   * @param hash transaction hash\n   * @returns transaction or null if not exist\n   */\n  async getTransaction(address, lt, hash) {\n    let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransaction(address, lt, hash);\n    if (res) {\n      return convertTransaction(res);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Fetch latest masterchain info\n   * @returns masterchain info\n   */\n  async getMasterchainInfo() {\n    let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getMasterchainInfo();\n    return {\n      workchain: r.init.workchain,\n      shard: r.last.shard,\n      initSeqno: r.init.seqno,\n      latestSeqno: r.last.seqno\n    };\n  }\n  /**\n   * Fetch latest workchain shards\n   * @param seqno masterchain seqno\n   */\n  async getWorkchainShards(seqno) {\n    let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getShards(seqno);\n    return r.map(m => ({\n      workchain: m.workchain,\n      shard: m.shard,\n      seqno: m.seqno\n    }));\n  }\n  /**\n   * Fetch transactions inf shards\n   * @param workchain\n   * @param seqno\n   * @param shard\n   */\n  async getShardTransactions(workchain, seqno, shard) {\n    let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getBlockTransactions(workchain, seqno, shard);\n    if (tx.incomplete) {\n      throw Error('Unsupported');\n    }\n    return tx.transactions.map(v => ({\n      account: Address_1.Address.parseRaw(v.account),\n      lt: v.lt,\n      hash: v.hash\n    }));\n  }\n  /**\n   * Send message to a network\n   * @param src source message\n   */\n  async sendMessage(src) {\n    const cell = new Cell_1.Cell();\n    src.writeTo(cell);\n    const boc = await cell.toBoc({\n      idx: false\n    });\n    await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(boc);\n  }\n  /**\n   * Send file to a network\n   * @param src source file\n   */\n  async sendFile(src) {\n    await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(src);\n  }\n  /**\n   * Estimate fees for external message\n   * @param address target address\n   * @returns\n   */\n  async estimateExternalMessageFee(address, args) {\n    return await __classPrivateFieldGet(this, _TonClient_api, \"f\").estimateFee(address, {\n      body: args.body,\n      initCode: args.initCode,\n      initData: args.initData,\n      ignoreSignature: args.ignoreSignature\n    });\n  }\n  /**\n   * Send external message to contract\n   * @param contract contract to send message\n   * @param src message body\n   */\n  async sendExternalMessage(contract, src) {\n    if (await this.isContractDeployed(contract.address)) {\n      const message = new ExternalMessage_1.ExternalMessage({\n        to: contract.address,\n        body: new CommonMessageInfo_1.CommonMessageInfo({\n          body: new __1.CellMessage(src)\n        })\n      });\n      await this.sendMessage(message);\n    } else {\n      const message = new ExternalMessage_1.ExternalMessage({\n        to: contract.address,\n        body: new CommonMessageInfo_1.CommonMessageInfo({\n          stateInit: new StateInit_1.StateInit({\n            code: contract.source.initialCode,\n            data: contract.source.initialData\n          }),\n          body: new __1.CellMessage(src)\n        })\n      });\n      await this.sendMessage(message);\n    }\n  }\n  /**\n   * Check if contract is deployed\n   * @param address addres to check\n   * @returns true if contract is in active state\n   */\n  async isContractDeployed(address) {\n    return (await this.getContractState(address)).state === 'active';\n  }\n  /**\n   * Resolves contract state\n   * @param address contract address\n   */\n  async getContractState(address) {\n    let info = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getAddressInformation(address);\n    let balance = new bn_js_1.BN(info.balance);\n    let state = info.state;\n    return {\n      balance,\n      state,\n      code: info.code !== '' ? Buffer.from(info.code, 'base64') : null,\n      data: info.data !== '' ? Buffer.from(info.data, 'base64') : null,\n      lastTransaction: info.last_transaction_id.lt !== '0' ? {\n        lt: info.last_transaction_id.lt,\n        hash: info.last_transaction_id.hash\n      } : null,\n      blockId: {\n        workchain: info.block_id.workchain,\n        shard: info.block_id.shard,\n        seqno: info.block_id.seqno\n      },\n      timestampt: info.sync_utime\n    };\n  }\n  /**\n   * Open Wallet from address\n   * @param source wallet address\n   * @returns wallet with specified address\n   */\n  openWalletFromAddress(args) {\n    return Wallet_1.Wallet.open(this, args.source);\n  }\n  /**\n   * Open Wallet from secret key. Searches for best wallet contract.\n   * @param workchain wallet workchain\n   * @param secretKey wallet secret key\n   * @returns best matched wallet\n   */\n  findWalletFromSecretKey(args) {\n    return Wallet_1.Wallet.findBestBySecretKey(this, args.workchain, args.secretKey);\n  }\n  /**\n   * Open wallet with default contract\n   * @param args workchain and secret key\n   * @returns wallet\n   */\n  openWalletDefaultFromSecretKey(args) {\n    return Wallet_1.Wallet.openDefault(this, args.workchain, args.secretKey);\n  }\n  /**\n   * Open wallet with default contract\n   * @param args workchain and secret key\n   * @returns wallet\n   */\n  openWalletFromSecretKey(args) {\n    return Wallet_1.Wallet.openByType(this, args.workchain, args.secretKey, args.type);\n  }\n  /**\n   * Opens wallet from custom contract\n   * @param src source\n   * @returns wallet\n   */\n  openWalletFromCustomContract(src) {\n    return Wallet_1.Wallet.openFromSource(this, src);\n  }\n  /**\n   * Securely creates new wallet\n   * @param password optional password\n   */\n  async createNewWallet(args) {\n    let mnemonic = await (0, ton_crypto_1.mnemonicNew)(24, args.password);\n    let key = await (0, ton_crypto_1.mnemonicToWalletKey)(mnemonic, args.password);\n    let kind = args.type || 'org.ton.wallets.v3';\n    let wallet = Wallet_1.Wallet.openByType(this, args.workchain, key.secretKey, kind);\n    return {\n      mnemonic,\n      key,\n      wallet\n    };\n  }\n}\nexports.TonClient = TonClient;\n_TonClient_api = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_TonClient_api","Object","defineProperty","exports","TonClient","ton_crypto_1","require","Address_1","Cell_1","HttpApi_1","ExternalMessage_1","CommonMessageInfo_1","StateInit_1","Wallet_1","bn_js_1","__1","ConfigContract_1","TonCache_1","convertMessage","t","source","Address","parseFriendly","address","destination","forwardFee","BN","fwd_fee","ihrFee","ihr_fee","createdLt","created_lt","body","msg_data","type","data","Buffer","from","text","toString","convertTransaction","r","id","lt","transaction_id","hash","time","utime","storageFee","storage_fee","otherFee","other_fee","fee","inMessage","in_msg","outMessages","out_msgs","map","constructor","parameters","services","configs","ConfigContract","endpoint","cache","InMemoryCache","HttpApi","timeout","apiKey","adapter","httpAdapter","getBalance","getContractState","balance","callGetMethod","name","params","res","exit_code","Error","gas_used","stack","callGetMethodWithError","getTransactions","opts","tx","push","getTransaction","getMasterchainInfo","workchain","init","shard","last","initSeqno","seqno","latestSeqno","getWorkchainShards","getShards","m","getShardTransactions","getBlockTransactions","incomplete","transactions","v","account","parseRaw","sendMessage","src","cell","Cell","writeTo","boc","toBoc","idx","sendBoc","sendFile","estimateExternalMessageFee","args","estimateFee","initCode","initData","ignoreSignature","sendExternalMessage","contract","isContractDeployed","message","ExternalMessage","to","CommonMessageInfo","CellMessage","stateInit","StateInit","code","initialCode","initialData","info","getAddressInformation","lastTransaction","last_transaction_id","blockId","block_id","timestampt","sync_utime","openWalletFromAddress","Wallet","open","findWalletFromSecretKey","findBestBySecretKey","secretKey","openWalletDefaultFromSecretKey","openDefault","openWalletFromSecretKey","openByType","openWalletFromCustomContract","openFromSource","createNewWallet","mnemonic","mnemonicNew","password","key","mnemonicToWalletKey","wallet","WeakMap"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/client/TonClient.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TonClient_api;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonClient = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst Address_1 = require(\"../address/Address\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst HttpApi_1 = require(\"./api/HttpApi\");\nconst ExternalMessage_1 = require(\"../messages/ExternalMessage\");\nconst CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nconst StateInit_1 = require(\"../messages/StateInit\");\nconst Wallet_1 = require(\"./Wallet\");\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nconst ConfigContract_1 = require(\"../contracts/ConfigContract\");\nconst TonCache_1 = require(\"./TonCache\");\nfunction convertMessage(t) {\n    return {\n        source: t.source !== '' ? Address_1.Address.parseFriendly(t.source).address : null,\n        destination: t.destination !== '' ? Address_1.Address.parseFriendly(t.destination).address : null,\n        forwardFee: new bn_js_1.BN(t.fwd_fee),\n        ihrFee: new bn_js_1.BN(t.ihr_fee),\n        value: new bn_js_1.BN(t.value),\n        createdLt: t.created_lt,\n        body: (t.msg_data['@type'] === 'msg.dataRaw'\n            ? { type: 'data', data: Buffer.from(t.msg_data.body, 'base64') }\n            : (t.msg_data['@type'] === 'msg.dataText'\n                ? { type: 'text', text: Buffer.from(t.msg_data.text, 'base64').toString('utf-8') }\n                : null))\n    };\n}\nfunction convertTransaction(r) {\n    return {\n        id: { lt: r.transaction_id.lt, hash: r.transaction_id.hash },\n        time: r.utime,\n        data: r.data,\n        storageFee: new bn_js_1.BN(r.storage_fee),\n        otherFee: new bn_js_1.BN(r.other_fee),\n        fee: new bn_js_1.BN(r.fee),\n        inMessage: r.in_msg ? convertMessage(r.in_msg) : null,\n        outMessages: r.out_msgs.map(convertMessage)\n    };\n}\nclass TonClient {\n    constructor(parameters) {\n        _TonClient_api.set(this, void 0);\n        this.services = {\n            configs: new ConfigContract_1.ConfigContract(this)\n        };\n        this.parameters = {\n            endpoint: parameters.endpoint,\n            cache: parameters.cache ? parameters.cache : new TonCache_1.InMemoryCache()\n        };\n        __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, this.parameters.cache, {\n            timeout: parameters.timeout,\n            apiKey: parameters.apiKey,\n            adapter: parameters.httpAdapter\n        }), \"f\");\n    }\n    /**\n     * Get Address Balance\n     * @param address address for balance check\n     * @returns balance\n     */\n    async getBalance(address) {\n        return (await this.getContractState(address)).balance;\n    }\n    /**\n     * Invoke get method\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     */\n    async callGetMethod(address, name, params = []) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n        if (res.exit_code !== 0) {\n            throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);\n        }\n        return { gas_used: res.gas_used, stack: res.stack };\n    }\n    /**\n     * Invoke get method that returns error code instead of throwing error\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n    */\n    async callGetMethodWithError(address, name, params = []) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n        return { gas_used: res.gas_used, stack: res.stack, exit_code: res.exit_code };\n    }\n    /**\n     * Get transactions\n     * @param address address\n     */\n    async getTransactions(address, opts) {\n        // Fetch transactions\n        let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransactions(address, opts);\n        let res = [];\n        for (let r of tx) {\n            res.push(convertTransaction(r));\n        }\n        return res;\n    }\n    /**\n     * Get transaction by it's id\n     * @param address address\n     * @param lt logical time\n     * @param hash transaction hash\n     * @returns transaction or null if not exist\n     */\n    async getTransaction(address, lt, hash) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransaction(address, lt, hash);\n        if (res) {\n            return convertTransaction(res);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Fetch latest masterchain info\n     * @returns masterchain info\n     */\n    async getMasterchainInfo() {\n        let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getMasterchainInfo();\n        return {\n            workchain: r.init.workchain,\n            shard: r.last.shard,\n            initSeqno: r.init.seqno,\n            latestSeqno: r.last.seqno\n        };\n    }\n    /**\n     * Fetch latest workchain shards\n     * @param seqno masterchain seqno\n     */\n    async getWorkchainShards(seqno) {\n        let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getShards(seqno);\n        return r.map((m) => ({\n            workchain: m.workchain,\n            shard: m.shard,\n            seqno: m.seqno\n        }));\n    }\n    /**\n     * Fetch transactions inf shards\n     * @param workchain\n     * @param seqno\n     * @param shard\n     */\n    async getShardTransactions(workchain, seqno, shard) {\n        let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getBlockTransactions(workchain, seqno, shard);\n        if (tx.incomplete) {\n            throw Error('Unsupported');\n        }\n        return tx.transactions.map((v) => ({\n            account: Address_1.Address.parseRaw(v.account),\n            lt: v.lt,\n            hash: v.hash\n        }));\n    }\n    /**\n     * Send message to a network\n     * @param src source message\n     */\n    async sendMessage(src) {\n        const cell = new Cell_1.Cell();\n        src.writeTo(cell);\n        const boc = await cell.toBoc({ idx: false });\n        await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(boc);\n    }\n    /**\n     * Send file to a network\n     * @param src source file\n     */\n    async sendFile(src) {\n        await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(src);\n    }\n    /**\n     * Estimate fees for external message\n     * @param address target address\n     * @returns\n     */\n    async estimateExternalMessageFee(address, args) {\n        return await __classPrivateFieldGet(this, _TonClient_api, \"f\").estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });\n    }\n    /**\n     * Send external message to contract\n     * @param contract contract to send message\n     * @param src message body\n     */\n    async sendExternalMessage(contract, src) {\n        if (await this.isContractDeployed(contract.address)) {\n            const message = new ExternalMessage_1.ExternalMessage({\n                to: contract.address,\n                body: new CommonMessageInfo_1.CommonMessageInfo({\n                    body: new __1.CellMessage(src)\n                })\n            });\n            await this.sendMessage(message);\n        }\n        else {\n            const message = new ExternalMessage_1.ExternalMessage({\n                to: contract.address,\n                body: new CommonMessageInfo_1.CommonMessageInfo({\n                    stateInit: new StateInit_1.StateInit({ code: contract.source.initialCode, data: contract.source.initialData }),\n                    body: new __1.CellMessage(src)\n                })\n            });\n            await this.sendMessage(message);\n        }\n    }\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */\n    async isContractDeployed(address) {\n        return (await this.getContractState(address)).state === 'active';\n    }\n    /**\n     * Resolves contract state\n     * @param address contract address\n     */\n    async getContractState(address) {\n        let info = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getAddressInformation(address);\n        let balance = new bn_js_1.BN(info.balance);\n        let state = info.state;\n        return {\n            balance,\n            state,\n            code: info.code !== '' ? Buffer.from(info.code, 'base64') : null,\n            data: info.data !== '' ? Buffer.from(info.data, 'base64') : null,\n            lastTransaction: info.last_transaction_id.lt !== '0' ? {\n                lt: info.last_transaction_id.lt,\n                hash: info.last_transaction_id.hash,\n            } : null,\n            blockId: {\n                workchain: info.block_id.workchain,\n                shard: info.block_id.shard,\n                seqno: info.block_id.seqno\n            },\n            timestampt: info.sync_utime\n        };\n    }\n    /**\n     * Open Wallet from address\n     * @param source wallet address\n     * @returns wallet with specified address\n     */\n    openWalletFromAddress(args) {\n        return Wallet_1.Wallet.open(this, args.source);\n    }\n    /**\n     * Open Wallet from secret key. Searches for best wallet contract.\n     * @param workchain wallet workchain\n     * @param secretKey wallet secret key\n     * @returns best matched wallet\n     */\n    findWalletFromSecretKey(args) {\n        return Wallet_1.Wallet.findBestBySecretKey(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n    openWalletDefaultFromSecretKey(args) {\n        return Wallet_1.Wallet.openDefault(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n    openWalletFromSecretKey(args) {\n        return Wallet_1.Wallet.openByType(this, args.workchain, args.secretKey, args.type);\n    }\n    /**\n     * Opens wallet from custom contract\n     * @param src source\n     * @returns wallet\n     */\n    openWalletFromCustomContract(src) {\n        return Wallet_1.Wallet.openFromSource(this, src);\n    }\n    /**\n     * Securely creates new wallet\n     * @param password optional password\n     */\n    async createNewWallet(args) {\n        let mnemonic = await (0, ton_crypto_1.mnemonicNew)(24, args.password);\n        let key = await (0, ton_crypto_1.mnemonicToWalletKey)(mnemonic, args.password);\n        let kind = args.type || 'org.ton.wallets.v3';\n        let wallet = Wallet_1.Wallet.openByType(this, args.workchain, key.secretKey, kind);\n        return {\n            mnemonic,\n            key,\n            wallet\n        };\n    }\n}\nexports.TonClient = TonClient;\n_TonClient_api = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}