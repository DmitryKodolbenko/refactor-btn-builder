{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgClientImpl = exports.MsgAcknowledgementResponse = exports.MsgAcknowledgement = exports.MsgTimeoutOnCloseResponse = exports.MsgTimeoutOnClose = exports.MsgTimeoutResponse = exports.MsgTimeout = exports.MsgRecvPacketResponse = exports.MsgRecvPacket = exports.MsgChannelCloseConfirmResponse = exports.MsgChannelCloseConfirm = exports.MsgChannelCloseInitResponse = exports.MsgChannelCloseInit = exports.MsgChannelOpenConfirmResponse = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAckResponse = exports.MsgChannelOpenAck = exports.MsgChannelOpenTryResponse = exports.MsgChannelOpenTry = exports.MsgChannelOpenInitResponse = exports.MsgChannelOpenInit = exports.protobufPackage = void 0;\n/* eslint-disable */\nvar long_1 = __importDefault(require(\"long\"));\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nvar channel_1 = require(\"../../../../ibc/core/channel/v1/channel\");\nvar client_1 = require(\"../../../../ibc/core/client/v1/client\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\nvar baseMsgChannelOpenInit = {\n  portId: \"\",\n  signer: \"\"\n};\nexports.MsgChannelOpenInit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channel !== undefined) {\n      channel_1.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenInit);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channel = channel_1.Channel.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelOpenInit);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channel !== undefined && (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, baseMsgChannelOpenInit);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromPartial(object.channel) : undefined;\n    message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelOpenInitResponse = {};\nexports.MsgChannelOpenInitResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenInitResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelOpenInitResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelOpenInitResponse);\n    return message;\n  }\n};\nvar baseMsgChannelOpenTry = {\n  portId: \"\",\n  previousChannelId: \"\",\n  counterpartyVersion: \"\",\n  signer: \"\"\n};\nexports.MsgChannelOpenTry = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.previousChannelId !== \"\") {\n      writer.uint32(18).string(message.previousChannelId);\n    }\n    if (message.channel !== undefined) {\n      channel_1.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.counterpartyVersion !== \"\") {\n      writer.uint32(34).string(message.counterpartyVersion);\n    }\n    if (message.proofInit.length !== 0) {\n      writer.uint32(42).bytes(message.proofInit);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(58).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenTry);\n    message.proofInit = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.previousChannelId = reader.string();\n          break;\n        case 3:\n          message.channel = channel_1.Channel.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.counterpartyVersion = reader.string();\n          break;\n        case 5:\n          message.proofInit = reader.bytes();\n          break;\n        case 6:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelOpenTry);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.previousChannelId = object.previousChannelId !== undefined && object.previousChannelId !== null ? String(object.previousChannelId) : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n    message.counterpartyVersion = object.counterpartyVersion !== undefined && object.counterpartyVersion !== null ? String(object.counterpartyVersion) : \"\";\n    message.proofInit = object.proofInit !== undefined && object.proofInit !== null ? bytesFromBase64(object.proofInit) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.previousChannelId !== undefined && (obj.previousChannelId = message.previousChannelId);\n    message.channel !== undefined && (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n    message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);\n    message.proofInit !== undefined && (obj.proofInit = base64FromBytes(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e;\n    var message = Object.assign({}, baseMsgChannelOpenTry);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.previousChannelId = (_b = object.previousChannelId) !== null && _b !== void 0 ? _b : \"\";\n    message.channel = object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromPartial(object.channel) : undefined;\n    message.counterpartyVersion = (_c = object.counterpartyVersion) !== null && _c !== void 0 ? _c : \"\";\n    message.proofInit = (_d = object.proofInit) !== null && _d !== void 0 ? _d : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_e = object.signer) !== null && _e !== void 0 ? _e : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelOpenTryResponse = {};\nexports.MsgChannelOpenTryResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenTryResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelOpenTryResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelOpenTryResponse);\n    return message;\n  }\n};\nvar baseMsgChannelOpenAck = {\n  portId: \"\",\n  channelId: \"\",\n  counterpartyChannelId: \"\",\n  counterpartyVersion: \"\",\n  signer: \"\"\n};\nexports.MsgChannelOpenAck = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.counterpartyChannelId !== \"\") {\n      writer.uint32(26).string(message.counterpartyChannelId);\n    }\n    if (message.counterpartyVersion !== \"\") {\n      writer.uint32(34).string(message.counterpartyVersion);\n    }\n    if (message.proofTry.length !== 0) {\n      writer.uint32(42).bytes(message.proofTry);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(58).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenAck);\n    message.proofTry = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.counterpartyChannelId = reader.string();\n          break;\n        case 4:\n          message.counterpartyVersion = reader.string();\n          break;\n        case 5:\n          message.proofTry = reader.bytes();\n          break;\n        case 6:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelOpenAck);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.counterpartyChannelId = object.counterpartyChannelId !== undefined && object.counterpartyChannelId !== null ? String(object.counterpartyChannelId) : \"\";\n    message.counterpartyVersion = object.counterpartyVersion !== undefined && object.counterpartyVersion !== null ? String(object.counterpartyVersion) : \"\";\n    message.proofTry = object.proofTry !== undefined && object.proofTry !== null ? bytesFromBase64(object.proofTry) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.counterpartyChannelId !== undefined && (obj.counterpartyChannelId = message.counterpartyChannelId);\n    message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);\n    message.proofTry !== undefined && (obj.proofTry = base64FromBytes(message.proofTry !== undefined ? message.proofTry : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f;\n    var message = Object.assign({}, baseMsgChannelOpenAck);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.counterpartyChannelId = (_c = object.counterpartyChannelId) !== null && _c !== void 0 ? _c : \"\";\n    message.counterpartyVersion = (_d = object.counterpartyVersion) !== null && _d !== void 0 ? _d : \"\";\n    message.proofTry = (_e = object.proofTry) !== null && _e !== void 0 ? _e : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_f = object.signer) !== null && _f !== void 0 ? _f : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelOpenAckResponse = {};\nexports.MsgChannelOpenAckResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenAckResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelOpenAckResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelOpenAckResponse);\n    return message;\n  }\n};\nvar baseMsgChannelOpenConfirm = {\n  portId: \"\",\n  channelId: \"\",\n  signer: \"\"\n};\nexports.MsgChannelOpenConfirm = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.proofAck.length !== 0) {\n      writer.uint32(26).bytes(message.proofAck);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenConfirm);\n    message.proofAck = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.proofAck = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelOpenConfirm);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.proofAck = object.proofAck !== undefined && object.proofAck !== null ? bytesFromBase64(object.proofAck) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.proofAck !== undefined && (obj.proofAck = base64FromBytes(message.proofAck !== undefined ? message.proofAck : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d;\n    var message = Object.assign({}, baseMsgChannelOpenConfirm);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.proofAck = (_c = object.proofAck) !== null && _c !== void 0 ? _c : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelOpenConfirmResponse = {};\nexports.MsgChannelOpenConfirmResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n    return message;\n  }\n};\nvar baseMsgChannelCloseInit = {\n  portId: \"\",\n  channelId: \"\",\n  signer: \"\"\n};\nexports.MsgChannelCloseInit = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelCloseInit);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelCloseInit);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = Object.assign({}, baseMsgChannelCloseInit);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelCloseInitResponse = {};\nexports.MsgChannelCloseInitResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelCloseInitResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelCloseInitResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelCloseInitResponse);\n    return message;\n  }\n};\nvar baseMsgChannelCloseConfirm = {\n  portId: \"\",\n  channelId: \"\",\n  signer: \"\"\n};\nexports.MsgChannelCloseConfirm = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.portId !== \"\") {\n      writer.uint32(10).string(message.portId);\n    }\n    if (message.channelId !== \"\") {\n      writer.uint32(18).string(message.channelId);\n    }\n    if (message.proofInit.length !== 0) {\n      writer.uint32(26).bytes(message.proofInit);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelCloseConfirm);\n    message.proofInit = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.portId = reader.string();\n          break;\n        case 2:\n          message.channelId = reader.string();\n          break;\n        case 3:\n          message.proofInit = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgChannelCloseConfirm);\n    message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n    message.channelId = object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n    message.proofInit = object.proofInit !== undefined && object.proofInit !== null ? bytesFromBase64(object.proofInit) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.portId !== undefined && (obj.portId = message.portId);\n    message.channelId !== undefined && (obj.channelId = message.channelId);\n    message.proofInit !== undefined && (obj.proofInit = base64FromBytes(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d;\n    var message = Object.assign({}, baseMsgChannelCloseConfirm);\n    message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n    message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n    message.proofInit = (_c = object.proofInit) !== null && _c !== void 0 ? _c : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : \"\";\n    return message;\n  }\n};\nvar baseMsgChannelCloseConfirmResponse = {};\nexports.MsgChannelCloseConfirmResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n    return message;\n  }\n};\nvar baseMsgRecvPacket = {\n  signer: \"\"\n};\nexports.MsgRecvPacket = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.packet !== undefined) {\n      channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofCommitment.length !== 0) {\n      writer.uint32(18).bytes(message.proofCommitment);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(34).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgRecvPacket);\n    message.proofCommitment = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = channel_1.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofCommitment = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgRecvPacket);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n    message.proofCommitment = object.proofCommitment !== undefined && object.proofCommitment !== null ? bytesFromBase64(object.proofCommitment) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n    message.proofCommitment !== undefined && (obj.proofCommitment = base64FromBytes(message.proofCommitment !== undefined ? message.proofCommitment : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, baseMsgRecvPacket);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n    message.proofCommitment = (_a = object.proofCommitment) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseMsgRecvPacketResponse = {};\nexports.MsgRecvPacketResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgRecvPacketResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgRecvPacketResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgRecvPacketResponse);\n    return message;\n  }\n};\nvar baseMsgTimeout = {\n  nextSequenceRecv: long_1.default.UZERO,\n  signer: \"\"\n};\nexports.MsgTimeout = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.packet !== undefined) {\n      channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofUnreceived.length !== 0) {\n      writer.uint32(18).bytes(message.proofUnreceived);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.nextSequenceRecv.isZero()) {\n      writer.uint32(32).uint64(message.nextSequenceRecv);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgTimeout);\n    message.proofUnreceived = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = channel_1.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofUnreceived = reader.bytes();\n          break;\n        case 3:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.nextSequenceRecv = reader.uint64();\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgTimeout);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n    message.proofUnreceived = object.proofUnreceived !== undefined && object.proofUnreceived !== null ? bytesFromBase64(object.proofUnreceived) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? long_1.default.fromString(object.nextSequenceRecv) : long_1.default.UZERO;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n    message.proofUnreceived !== undefined && (obj.proofUnreceived = base64FromBytes(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.nextSequenceRecv !== undefined && (obj.nextSequenceRecv = (message.nextSequenceRecv || long_1.default.UZERO).toString());\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n    var message = Object.assign({}, baseMsgTimeout);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n    message.proofUnreceived = (_a = object.proofUnreceived) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? long_1.default.fromValue(object.nextSequenceRecv) : long_1.default.UZERO;\n    message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseMsgTimeoutResponse = {};\nexports.MsgTimeoutResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgTimeoutResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgTimeoutResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgTimeoutResponse);\n    return message;\n  }\n};\nvar baseMsgTimeoutOnClose = {\n  nextSequenceRecv: long_1.default.UZERO,\n  signer: \"\"\n};\nexports.MsgTimeoutOnClose = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.packet !== undefined) {\n      channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proofUnreceived.length !== 0) {\n      writer.uint32(18).bytes(message.proofUnreceived);\n    }\n    if (message.proofClose.length !== 0) {\n      writer.uint32(26).bytes(message.proofClose);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (!message.nextSequenceRecv.isZero()) {\n      writer.uint32(40).uint64(message.nextSequenceRecv);\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(50).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgTimeoutOnClose);\n    message.proofUnreceived = new Uint8Array();\n    message.proofClose = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = channel_1.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.proofUnreceived = reader.bytes();\n          break;\n        case 3:\n          message.proofClose = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.nextSequenceRecv = reader.uint64();\n          break;\n        case 6:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgTimeoutOnClose);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n    message.proofUnreceived = object.proofUnreceived !== undefined && object.proofUnreceived !== null ? bytesFromBase64(object.proofUnreceived) : new Uint8Array();\n    message.proofClose = object.proofClose !== undefined && object.proofClose !== null ? bytesFromBase64(object.proofClose) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? long_1.default.fromString(object.nextSequenceRecv) : long_1.default.UZERO;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n    message.proofUnreceived !== undefined && (obj.proofUnreceived = base64FromBytes(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));\n    message.proofClose !== undefined && (obj.proofClose = base64FromBytes(message.proofClose !== undefined ? message.proofClose : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.nextSequenceRecv !== undefined && (obj.nextSequenceRecv = (message.nextSequenceRecv || long_1.default.UZERO).toString());\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = Object.assign({}, baseMsgTimeoutOnClose);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n    message.proofUnreceived = (_a = object.proofUnreceived) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofClose = (_b = object.proofClose) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? long_1.default.fromValue(object.nextSequenceRecv) : long_1.default.UZERO;\n    message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n    return message;\n  }\n};\nvar baseMsgTimeoutOnCloseResponse = {};\nexports.MsgTimeoutOnCloseResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n    return message;\n  }\n};\nvar baseMsgAcknowledgement = {\n  signer: \"\"\n};\nexports.MsgAcknowledgement = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    if (message.packet !== undefined) {\n      channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.acknowledgement.length !== 0) {\n      writer.uint32(18).bytes(message.acknowledgement);\n    }\n    if (message.proofAcked.length !== 0) {\n      writer.uint32(26).bytes(message.proofAcked);\n    }\n    if (message.proofHeight !== undefined) {\n      client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.signer !== \"\") {\n      writer.uint32(42).string(message.signer);\n    }\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgAcknowledgement);\n    message.acknowledgement = new Uint8Array();\n    message.proofAcked = new Uint8Array();\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.packet = channel_1.Packet.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.acknowledgement = reader.bytes();\n          break;\n        case 3:\n          message.proofAcked = reader.bytes();\n          break;\n        case 4:\n          message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.signer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgAcknowledgement);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n    message.acknowledgement = object.acknowledgement !== undefined && object.acknowledgement !== null ? bytesFromBase64(object.acknowledgement) : new Uint8Array();\n    message.proofAcked = object.proofAcked !== undefined && object.proofAcked !== null ? bytesFromBase64(object.proofAcked) : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromJSON(object.proofHeight) : undefined;\n    message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n    message.acknowledgement !== undefined && (obj.acknowledgement = base64FromBytes(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));\n    message.proofAcked !== undefined && (obj.proofAcked = base64FromBytes(message.proofAcked !== undefined ? message.proofAcked : new Uint8Array()));\n    message.proofHeight !== undefined && (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n    var message = Object.assign({}, baseMsgAcknowledgement);\n    message.packet = object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n    message.acknowledgement = (_a = object.acknowledgement) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.proofAcked = (_b = object.proofAcked) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? client_1.Height.fromPartial(object.proofHeight) : undefined;\n    message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n    return message;\n  }\n};\nvar baseMsgAcknowledgementResponse = {};\nexports.MsgAcknowledgementResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgAcknowledgementResponse);\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgAcknowledgementResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgAcknowledgementResponse);\n    return message;\n  }\n};\nvar MsgClientImpl = /*#__PURE__*/function () {\n  function MsgClientImpl(rpc) {\n    _classCallCheck(this, MsgClientImpl);\n    this.rpc = rpc;\n    this.ChannelOpenInit = this.ChannelOpenInit.bind(this);\n    this.ChannelOpenTry = this.ChannelOpenTry.bind(this);\n    this.ChannelOpenAck = this.ChannelOpenAck.bind(this);\n    this.ChannelOpenConfirm = this.ChannelOpenConfirm.bind(this);\n    this.ChannelCloseInit = this.ChannelCloseInit.bind(this);\n    this.ChannelCloseConfirm = this.ChannelCloseConfirm.bind(this);\n    this.RecvPacket = this.RecvPacket.bind(this);\n    this.Timeout = this.Timeout.bind(this);\n    this.TimeoutOnClose = this.TimeoutOnClose.bind(this);\n    this.Acknowledgement = this.Acknowledgement.bind(this);\n  }\n  _createClass(MsgClientImpl, [{\n    key: \"ChannelOpenInit\",\n    value: function ChannelOpenInit(request) {\n      var data = exports.MsgChannelOpenInit.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenInit\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelOpenInitResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"ChannelOpenTry\",\n    value: function ChannelOpenTry(request) {\n      var data = exports.MsgChannelOpenTry.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenTry\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelOpenTryResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"ChannelOpenAck\",\n    value: function ChannelOpenAck(request) {\n      var data = exports.MsgChannelOpenAck.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenAck\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelOpenAckResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"ChannelOpenConfirm\",\n    value: function ChannelOpenConfirm(request) {\n      var data = exports.MsgChannelOpenConfirm.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenConfirm\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelOpenConfirmResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"ChannelCloseInit\",\n    value: function ChannelCloseInit(request) {\n      var data = exports.MsgChannelCloseInit.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelCloseInit\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelCloseInitResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"ChannelCloseConfirm\",\n    value: function ChannelCloseConfirm(request) {\n      var data = exports.MsgChannelCloseConfirm.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelCloseConfirm\", data);\n      return promise.then(function (data) {\n        return exports.MsgChannelCloseConfirmResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"RecvPacket\",\n    value: function RecvPacket(request) {\n      var data = exports.MsgRecvPacket.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"RecvPacket\", data);\n      return promise.then(function (data) {\n        return exports.MsgRecvPacketResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"Timeout\",\n    value: function Timeout(request) {\n      var data = exports.MsgTimeout.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"Timeout\", data);\n      return promise.then(function (data) {\n        return exports.MsgTimeoutResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"TimeoutOnClose\",\n    value: function TimeoutOnClose(request) {\n      var data = exports.MsgTimeoutOnClose.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"TimeoutOnClose\", data);\n      return promise.then(function (data) {\n        return exports.MsgTimeoutOnCloseResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"Acknowledgement\",\n    value: function Acknowledgement(request) {\n      var data = exports.MsgAcknowledgement.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"Acknowledgement\", data);\n      return promise.then(function (data) {\n        return exports.MsgAcknowledgementResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }]);\n  return MsgClientImpl;\n}();\nexports.MsgClientImpl = MsgClientImpl;\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n}();\nvar atob = globalThis.atob || function (b64) {\n  return globalThis.Buffer.from(b64, \"base64\").toString(\"binary\");\n};\nfunction bytesFromBase64(b64) {\n  var bin = atob(b64);\n  var arr = new Uint8Array(bin.length);\n  for (var i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nvar btoa = globalThis.btoa || function (bin) {\n  return globalThis.Buffer.from(bin, \"binary\").toString(\"base64\");\n};\nfunction base64FromBytes(arr) {\n  var bin = [];\n  var _iterator = _createForOfIteratorHelper(arr),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      bin.push(String.fromCharCode(byte));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/ibc/core/channel/v1/tx.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgClientImpl = exports.MsgAcknowledgementResponse = exports.MsgAcknowledgement = exports.MsgTimeoutOnCloseResponse = exports.MsgTimeoutOnClose = exports.MsgTimeoutResponse = exports.MsgTimeout = exports.MsgRecvPacketResponse = exports.MsgRecvPacket = exports.MsgChannelCloseConfirmResponse = exports.MsgChannelCloseConfirm = exports.MsgChannelCloseInitResponse = exports.MsgChannelCloseInit = exports.MsgChannelOpenConfirmResponse = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAckResponse = exports.MsgChannelOpenAck = exports.MsgChannelOpenTryResponse = exports.MsgChannelOpenTry = exports.MsgChannelOpenInitResponse = exports.MsgChannelOpenInit = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst channel_1 = require(\"../../../../ibc/core/channel/v1/channel\");\nconst client_1 = require(\"../../../../ibc/core/client/v1/client\");\nexports.protobufPackage = \"ibc.core.channel.v1\";\nconst baseMsgChannelOpenInit = { portId: \"\", signer: \"\" };\nexports.MsgChannelOpenInit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channel !== undefined) {\n            channel_1.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenInit);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channel = channel_1.Channel.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelOpenInit);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channel =\n            object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channel !== undefined &&\n            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseMsgChannelOpenInit);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channel =\n            object.channel !== undefined && object.channel !== null\n                ? channel_1.Channel.fromPartial(object.channel)\n                : undefined;\n        message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelOpenInitResponse = {};\nexports.MsgChannelOpenInitResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenInitResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelOpenInitResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelOpenInitResponse);\n        return message;\n    },\n};\nconst baseMsgChannelOpenTry = {\n    portId: \"\",\n    previousChannelId: \"\",\n    counterpartyVersion: \"\",\n    signer: \"\",\n};\nexports.MsgChannelOpenTry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.previousChannelId !== \"\") {\n            writer.uint32(18).string(message.previousChannelId);\n        }\n        if (message.channel !== undefined) {\n            channel_1.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.counterpartyVersion !== \"\") {\n            writer.uint32(34).string(message.counterpartyVersion);\n        }\n        if (message.proofInit.length !== 0) {\n            writer.uint32(42).bytes(message.proofInit);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(58).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenTry);\n        message.proofInit = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.previousChannelId = reader.string();\n                    break;\n                case 3:\n                    message.channel = channel_1.Channel.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.counterpartyVersion = reader.string();\n                    break;\n                case 5:\n                    message.proofInit = reader.bytes();\n                    break;\n                case 6:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelOpenTry);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.previousChannelId =\n            object.previousChannelId !== undefined && object.previousChannelId !== null\n                ? String(object.previousChannelId)\n                : \"\";\n        message.channel =\n            object.channel !== undefined && object.channel !== null ? channel_1.Channel.fromJSON(object.channel) : undefined;\n        message.counterpartyVersion =\n            object.counterpartyVersion !== undefined && object.counterpartyVersion !== null\n                ? String(object.counterpartyVersion)\n                : \"\";\n        message.proofInit =\n            object.proofInit !== undefined && object.proofInit !== null\n                ? bytesFromBase64(object.proofInit)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.previousChannelId !== undefined && (obj.previousChannelId = message.previousChannelId);\n        message.channel !== undefined &&\n            (obj.channel = message.channel ? channel_1.Channel.toJSON(message.channel) : undefined);\n        message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);\n        message.proofInit !== undefined &&\n            (obj.proofInit = base64FromBytes(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = Object.assign({}, baseMsgChannelOpenTry);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.previousChannelId = (_b = object.previousChannelId) !== null && _b !== void 0 ? _b : \"\";\n        message.channel =\n            object.channel !== undefined && object.channel !== null\n                ? channel_1.Channel.fromPartial(object.channel)\n                : undefined;\n        message.counterpartyVersion = (_c = object.counterpartyVersion) !== null && _c !== void 0 ? _c : \"\";\n        message.proofInit = (_d = object.proofInit) !== null && _d !== void 0 ? _d : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_e = object.signer) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelOpenTryResponse = {};\nexports.MsgChannelOpenTryResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenTryResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelOpenTryResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelOpenTryResponse);\n        return message;\n    },\n};\nconst baseMsgChannelOpenAck = {\n    portId: \"\",\n    channelId: \"\",\n    counterpartyChannelId: \"\",\n    counterpartyVersion: \"\",\n    signer: \"\",\n};\nexports.MsgChannelOpenAck = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.counterpartyChannelId !== \"\") {\n            writer.uint32(26).string(message.counterpartyChannelId);\n        }\n        if (message.counterpartyVersion !== \"\") {\n            writer.uint32(34).string(message.counterpartyVersion);\n        }\n        if (message.proofTry.length !== 0) {\n            writer.uint32(42).bytes(message.proofTry);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(58).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenAck);\n        message.proofTry = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.counterpartyChannelId = reader.string();\n                    break;\n                case 4:\n                    message.counterpartyVersion = reader.string();\n                    break;\n                case 5:\n                    message.proofTry = reader.bytes();\n                    break;\n                case 6:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelOpenAck);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.counterpartyChannelId =\n            object.counterpartyChannelId !== undefined && object.counterpartyChannelId !== null\n                ? String(object.counterpartyChannelId)\n                : \"\";\n        message.counterpartyVersion =\n            object.counterpartyVersion !== undefined && object.counterpartyVersion !== null\n                ? String(object.counterpartyVersion)\n                : \"\";\n        message.proofTry =\n            object.proofTry !== undefined && object.proofTry !== null\n                ? bytesFromBase64(object.proofTry)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.counterpartyChannelId !== undefined &&\n            (obj.counterpartyChannelId = message.counterpartyChannelId);\n        message.counterpartyVersion !== undefined && (obj.counterpartyVersion = message.counterpartyVersion);\n        message.proofTry !== undefined &&\n            (obj.proofTry = base64FromBytes(message.proofTry !== undefined ? message.proofTry : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = Object.assign({}, baseMsgChannelOpenAck);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.counterpartyChannelId = (_c = object.counterpartyChannelId) !== null && _c !== void 0 ? _c : \"\";\n        message.counterpartyVersion = (_d = object.counterpartyVersion) !== null && _d !== void 0 ? _d : \"\";\n        message.proofTry = (_e = object.proofTry) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_f = object.signer) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelOpenAckResponse = {};\nexports.MsgChannelOpenAckResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenAckResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelOpenAckResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelOpenAckResponse);\n        return message;\n    },\n};\nconst baseMsgChannelOpenConfirm = { portId: \"\", channelId: \"\", signer: \"\" };\nexports.MsgChannelOpenConfirm = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.proofAck.length !== 0) {\n            writer.uint32(26).bytes(message.proofAck);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenConfirm);\n        message.proofAck = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.proofAck = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelOpenConfirm);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.proofAck =\n            object.proofAck !== undefined && object.proofAck !== null\n                ? bytesFromBase64(object.proofAck)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.proofAck !== undefined &&\n            (obj.proofAck = base64FromBytes(message.proofAck !== undefined ? message.proofAck : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = Object.assign({}, baseMsgChannelOpenConfirm);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.proofAck = (_c = object.proofAck) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelOpenConfirmResponse = {};\nexports.MsgChannelOpenConfirmResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelOpenConfirmResponse);\n        return message;\n    },\n};\nconst baseMsgChannelCloseInit = { portId: \"\", channelId: \"\", signer: \"\" };\nexports.MsgChannelCloseInit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelCloseInit);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelCloseInit);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseMsgChannelCloseInit);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelCloseInitResponse = {};\nexports.MsgChannelCloseInitResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelCloseInitResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelCloseInitResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelCloseInitResponse);\n        return message;\n    },\n};\nconst baseMsgChannelCloseConfirm = { portId: \"\", channelId: \"\", signer: \"\" };\nexports.MsgChannelCloseConfirm = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.proofInit.length !== 0) {\n            writer.uint32(26).bytes(message.proofInit);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelCloseConfirm);\n        message.proofInit = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.proofInit = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgChannelCloseConfirm);\n        message.portId = object.portId !== undefined && object.portId !== null ? String(object.portId) : \"\";\n        message.channelId =\n            object.channelId !== undefined && object.channelId !== null ? String(object.channelId) : \"\";\n        message.proofInit =\n            object.proofInit !== undefined && object.proofInit !== null\n                ? bytesFromBase64(object.proofInit)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.portId !== undefined && (obj.portId = message.portId);\n        message.channelId !== undefined && (obj.channelId = message.channelId);\n        message.proofInit !== undefined &&\n            (obj.proofInit = base64FromBytes(message.proofInit !== undefined ? message.proofInit : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = Object.assign({}, baseMsgChannelCloseConfirm);\n        message.portId = (_a = object.portId) !== null && _a !== void 0 ? _a : \"\";\n        message.channelId = (_b = object.channelId) !== null && _b !== void 0 ? _b : \"\";\n        message.proofInit = (_c = object.proofInit) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nconst baseMsgChannelCloseConfirmResponse = {};\nexports.MsgChannelCloseConfirmResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgChannelCloseConfirmResponse);\n        return message;\n    },\n};\nconst baseMsgRecvPacket = { signer: \"\" };\nexports.MsgRecvPacket = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.packet !== undefined) {\n            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofCommitment.length !== 0) {\n            writer.uint32(18).bytes(message.proofCommitment);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(34).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgRecvPacket);\n        message.proofCommitment = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.packet = channel_1.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofCommitment = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgRecvPacket);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n        message.proofCommitment =\n            object.proofCommitment !== undefined && object.proofCommitment !== null\n                ? bytesFromBase64(object.proofCommitment)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n        message.proofCommitment !== undefined &&\n            (obj.proofCommitment = base64FromBytes(message.proofCommitment !== undefined ? message.proofCommitment : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseMsgRecvPacket);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n        message.proofCommitment = (_a = object.proofCommitment) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseMsgRecvPacketResponse = {};\nexports.MsgRecvPacketResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgRecvPacketResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgRecvPacketResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgRecvPacketResponse);\n        return message;\n    },\n};\nconst baseMsgTimeout = { nextSequenceRecv: long_1.default.UZERO, signer: \"\" };\nexports.MsgTimeout = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.packet !== undefined) {\n            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofUnreceived.length !== 0) {\n            writer.uint32(18).bytes(message.proofUnreceived);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        if (!message.nextSequenceRecv.isZero()) {\n            writer.uint32(32).uint64(message.nextSequenceRecv);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgTimeout);\n        message.proofUnreceived = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.packet = channel_1.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofUnreceived = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.nextSequenceRecv = reader.uint64();\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgTimeout);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n        message.proofUnreceived =\n            object.proofUnreceived !== undefined && object.proofUnreceived !== null\n                ? bytesFromBase64(object.proofUnreceived)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.nextSequenceRecv =\n            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null\n                ? long_1.default.fromString(object.nextSequenceRecv)\n                : long_1.default.UZERO;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n        message.proofUnreceived !== undefined &&\n            (obj.proofUnreceived = base64FromBytes(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.nextSequenceRecv !== undefined &&\n            (obj.nextSequenceRecv = (message.nextSequenceRecv || long_1.default.UZERO).toString());\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = Object.assign({}, baseMsgTimeout);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n        message.proofUnreceived = (_a = object.proofUnreceived) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.nextSequenceRecv =\n            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null\n                ? long_1.default.fromValue(object.nextSequenceRecv)\n                : long_1.default.UZERO;\n        message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nconst baseMsgTimeoutResponse = {};\nexports.MsgTimeoutResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgTimeoutResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgTimeoutResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgTimeoutResponse);\n        return message;\n    },\n};\nconst baseMsgTimeoutOnClose = { nextSequenceRecv: long_1.default.UZERO, signer: \"\" };\nexports.MsgTimeoutOnClose = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.packet !== undefined) {\n            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofUnreceived.length !== 0) {\n            writer.uint32(18).bytes(message.proofUnreceived);\n        }\n        if (message.proofClose.length !== 0) {\n            writer.uint32(26).bytes(message.proofClose);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (!message.nextSequenceRecv.isZero()) {\n            writer.uint32(40).uint64(message.nextSequenceRecv);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(50).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgTimeoutOnClose);\n        message.proofUnreceived = new Uint8Array();\n        message.proofClose = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.packet = channel_1.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofUnreceived = reader.bytes();\n                    break;\n                case 3:\n                    message.proofClose = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.nextSequenceRecv = reader.uint64();\n                    break;\n                case 6:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgTimeoutOnClose);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n        message.proofUnreceived =\n            object.proofUnreceived !== undefined && object.proofUnreceived !== null\n                ? bytesFromBase64(object.proofUnreceived)\n                : new Uint8Array();\n        message.proofClose =\n            object.proofClose !== undefined && object.proofClose !== null\n                ? bytesFromBase64(object.proofClose)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.nextSequenceRecv =\n            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null\n                ? long_1.default.fromString(object.nextSequenceRecv)\n                : long_1.default.UZERO;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n        message.proofUnreceived !== undefined &&\n            (obj.proofUnreceived = base64FromBytes(message.proofUnreceived !== undefined ? message.proofUnreceived : new Uint8Array()));\n        message.proofClose !== undefined &&\n            (obj.proofClose = base64FromBytes(message.proofClose !== undefined ? message.proofClose : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.nextSequenceRecv !== undefined &&\n            (obj.nextSequenceRecv = (message.nextSequenceRecv || long_1.default.UZERO).toString());\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseMsgTimeoutOnClose);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n        message.proofUnreceived = (_a = object.proofUnreceived) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofClose = (_b = object.proofClose) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.nextSequenceRecv =\n            object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null\n                ? long_1.default.fromValue(object.nextSequenceRecv)\n                : long_1.default.UZERO;\n        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nconst baseMsgTimeoutOnCloseResponse = {};\nexports.MsgTimeoutOnCloseResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgTimeoutOnCloseResponse);\n        return message;\n    },\n};\nconst baseMsgAcknowledgement = { signer: \"\" };\nexports.MsgAcknowledgement = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.packet !== undefined) {\n            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.acknowledgement.length !== 0) {\n            writer.uint32(18).bytes(message.acknowledgement);\n        }\n        if (message.proofAcked.length !== 0) {\n            writer.uint32(26).bytes(message.proofAcked);\n        }\n        if (message.proofHeight !== undefined) {\n            client_1.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgAcknowledgement);\n        message.acknowledgement = new Uint8Array();\n        message.proofAcked = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.packet = channel_1.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.acknowledgement = reader.bytes();\n                    break;\n                case 3:\n                    message.proofAcked = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseMsgAcknowledgement);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromJSON(object.packet) : undefined;\n        message.acknowledgement =\n            object.acknowledgement !== undefined && object.acknowledgement !== null\n                ? bytesFromBase64(object.acknowledgement)\n                : new Uint8Array();\n        message.proofAcked =\n            object.proofAcked !== undefined && object.proofAcked !== null\n                ? bytesFromBase64(object.proofAcked)\n                : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromJSON(object.proofHeight)\n                : undefined;\n        message.signer = object.signer !== undefined && object.signer !== null ? String(object.signer) : \"\";\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.packet !== undefined && (obj.packet = message.packet ? channel_1.Packet.toJSON(message.packet) : undefined);\n        message.acknowledgement !== undefined &&\n            (obj.acknowledgement = base64FromBytes(message.acknowledgement !== undefined ? message.acknowledgement : new Uint8Array()));\n        message.proofAcked !== undefined &&\n            (obj.proofAcked = base64FromBytes(message.proofAcked !== undefined ? message.proofAcked : new Uint8Array()));\n        message.proofHeight !== undefined &&\n            (obj.proofHeight = message.proofHeight ? client_1.Height.toJSON(message.proofHeight) : undefined);\n        message.signer !== undefined && (obj.signer = message.signer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = Object.assign({}, baseMsgAcknowledgement);\n        message.packet =\n            object.packet !== undefined && object.packet !== null ? channel_1.Packet.fromPartial(object.packet) : undefined;\n        message.acknowledgement = (_a = object.acknowledgement) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proofAcked = (_b = object.proofAcked) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proofHeight =\n            object.proofHeight !== undefined && object.proofHeight !== null\n                ? client_1.Height.fromPartial(object.proofHeight)\n                : undefined;\n        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nconst baseMsgAcknowledgementResponse = {};\nexports.MsgAcknowledgementResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseMsgAcknowledgementResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseMsgAcknowledgementResponse);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseMsgAcknowledgementResponse);\n        return message;\n    },\n};\nclass MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n        this.ChannelOpenInit = this.ChannelOpenInit.bind(this);\n        this.ChannelOpenTry = this.ChannelOpenTry.bind(this);\n        this.ChannelOpenAck = this.ChannelOpenAck.bind(this);\n        this.ChannelOpenConfirm = this.ChannelOpenConfirm.bind(this);\n        this.ChannelCloseInit = this.ChannelCloseInit.bind(this);\n        this.ChannelCloseConfirm = this.ChannelCloseConfirm.bind(this);\n        this.RecvPacket = this.RecvPacket.bind(this);\n        this.Timeout = this.Timeout.bind(this);\n        this.TimeoutOnClose = this.TimeoutOnClose.bind(this);\n        this.Acknowledgement = this.Acknowledgement.bind(this);\n    }\n    ChannelOpenInit(request) {\n        const data = exports.MsgChannelOpenInit.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenInit\", data);\n        return promise.then((data) => exports.MsgChannelOpenInitResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelOpenTry(request) {\n        const data = exports.MsgChannelOpenTry.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenTry\", data);\n        return promise.then((data) => exports.MsgChannelOpenTryResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelOpenAck(request) {\n        const data = exports.MsgChannelOpenAck.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenAck\", data);\n        return promise.then((data) => exports.MsgChannelOpenAckResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelOpenConfirm(request) {\n        const data = exports.MsgChannelOpenConfirm.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelOpenConfirm\", data);\n        return promise.then((data) => exports.MsgChannelOpenConfirmResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelCloseInit(request) {\n        const data = exports.MsgChannelCloseInit.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelCloseInit\", data);\n        return promise.then((data) => exports.MsgChannelCloseInitResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ChannelCloseConfirm(request) {\n        const data = exports.MsgChannelCloseConfirm.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"ChannelCloseConfirm\", data);\n        return promise.then((data) => exports.MsgChannelCloseConfirmResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    RecvPacket(request) {\n        const data = exports.MsgRecvPacket.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"RecvPacket\", data);\n        return promise.then((data) => exports.MsgRecvPacketResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Timeout(request) {\n        const data = exports.MsgTimeout.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"Timeout\", data);\n        return promise.then((data) => exports.MsgTimeoutResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    TimeoutOnClose(request) {\n        const data = exports.MsgTimeoutOnClose.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"TimeoutOnClose\", data);\n        return promise.then((data) => exports.MsgTimeoutOnCloseResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Acknowledgement(request) {\n        const data = exports.MsgAcknowledgement.encode(request).finish();\n        const promise = this.rpc.request(\"ibc.core.channel.v1.Msg\", \"Acknowledgement\", data);\n        return promise.then((data) => exports.MsgAcknowledgementResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.MsgClientImpl = MsgClientImpl;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=tx.js.map"]},"metadata":{},"sourceType":"script"}