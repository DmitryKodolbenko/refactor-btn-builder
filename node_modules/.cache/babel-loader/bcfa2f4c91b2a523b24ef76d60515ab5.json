{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{assertIsDeliverTxSuccess,SigningStargateClient}from\"@cosmjs/stargate\";import{message}from\"antd\";var bs58=require(\"bs58\");var _require=require(\"buffer\"),Buffer=_require.Buffer;var web3=require(\"@solana/web3.js\");var axios=require(\"axios\").default;var MakeATOMTrx=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(activeBtn,setIsload,connection,ATOMwalletKey,walletTo,netTo,ATOMAmount){var chainId,offlineSigner,accounts,client,amountFinal,fee,result;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!activeBtn){_context.next=37;break;}setIsload(true);_context.prev=2;if(!window){_context.next=30;break;}if(!window[\"keplr\"]){_context.next=30;break;}chainId=\"cosmoshub-4\";//theta-testnet-001\n_context.next=8;return window.keplr.enable(chainId);case 8:if(!(typeof window===\"undefined\")){_context.next=10;break;}return _context.abrupt(\"return\");case 10:_context.next=12;return window.keplr.enable(chainId);case 12:offlineSigner=window.getOfflineSigner!=null?window.getOfflineSigner(chainId):null;if(!(offlineSigner==null)){_context.next=15;break;}return _context.abrupt(\"return\",\"error\");case 15:_context.next=17;return offlineSigner.getAccounts();case 17:accounts=_context.sent;_context.next=20;return SigningStargateClient.connectWithSigner(\"https://proxy.tonana.org/https://rpc.cosmos.network/\",// \"https://rpc.sentry-01.theta-testnet.polypore.xyz/\",\nofflineSigner);case 20:client=_context.sent;message.success(\"Wait BE trx pending...\",2);amountFinal={denom:\"uatom\",amount:(Number(ATOMAmount)*1000000).toString()};fee={amount:[{denom:\"uatom\",amount:\"5000\"}],gas:\"200000\"};_context.next=26;return client.sendTokens(accounts[0].address,process.env.REACT_APP_BACK_COSMOS_WALLET?process.env.REACT_APP_BACK_COSMOS_WALLET:\"\",[amountFinal],fee,\"\".concat(netTo,\"#\").concat(walletTo));case 26:result=_context.sent;_context.next=29;return assertIsDeliverTxSuccess(result);case 29:if(result.code!==undefined&&result.code!==0){alert(\"Failed to send tx: \");}else{fetch(process.env.REACT_APP_STATE===\"dev\"?\"http://localhost:8092\":process.env.REACT_APP_STATE===\"dev-remote\"?\"https://dev.api.tonana.org\":\"https://api.tonana.org/\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({hash:result.transactionHash,sourceChain:\"cosmos\"})});setIsload(false);message.success(\"Done trx!\",10);//     axios.get(\n//           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n//         ).then((e:any)=>{\n//           console.log(e);\n// setIsload(false);\n//           message.success(\"Done trx!\", 10);\n//         })\n// const int = setInterval(() => {\n//   // return\n//   fetch(`https://api.${process.env.REACT_APP_SOL_NET}.solana.com/`, {\n//     method: \"POST\",\n//     headers: {\n//       Accept: \"application/json, text/plain, */*\",\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify({\n//       jsonrpc: \"2.0\",\n//       id: 1,\n//       method: \"getTransaction\",\n//       params: [\"json\"],\n//     }),\n//   })\n//     .then((res) => res.json())\n//     .then(async (res) => {\n//       if (res.result == null) {\n//         console.log(\"res: null \");\n//         return false;\n//       }\n//       const buf = bs58.decode(\n//         res.result.transaction.message.instructions[0].data.toString(16)\n//       );\n//       if (buf.toString() === `TON_WALLET_${walletTo}`) {\n//         clearInterval(int);\n//         message.success(\"Done BE trx!\", 10);\n//         axios.get(\n//           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n//         );\n//         const int2 = setInterval(() => {\n//           message.success(\"Wallet trx pending...\", 2);\n//           fetch(\n//             `https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`\n//           )\n//             .then((e: any) => e.json())\n//             .then((e: any) => {\n//               console.log(e.result);\n//               const data = e.result.filter((e: any) =>\n//                 e.out_msgs[0]\n//                   ? e.out_msgs[0].message === true\n//                   : false\n//               );\n//               if (data[0]) {\n//                 clearInterval(int2);\n//                 setIsload(false);\n//                 message.success(\"Done wallet trx, check it!\", 10);\n//               }\n//             });\n//         }, 10000);\n//       }\n//     });\n// }, 5000);\n//       \talert(\"Succeed to send tx:\" + result.transactionHash);\n}case 30:_context.next=35;break;case 32:_context.prev=32;_context.t0=_context[\"catch\"](2);console.log(_context.t0);case 35:_context.next=38;break;case 37:message.error(\"Fill all forms and connect wallets!\",10);case 38:case\"end\":return _context.stop();}}},_callee,null,[[2,32]]);}));return function MakeATOMTrx(_x,_x2,_x3,_x4,_x5,_x6,_x7){return _ref.apply(this,arguments);};}();export default MakeATOMTrx;","map":{"version":3,"names":["assertIsDeliverTxSuccess","SigningStargateClient","message","bs58","require","Buffer","web3","axios","default","MakeATOMTrx","activeBtn","setIsload","connection","ATOMwalletKey","walletTo","netTo","ATOMAmount","window","chainId","keplr","enable","offlineSigner","getOfflineSigner","getAccounts","accounts","connectWithSigner","client","success","amountFinal","denom","amount","Number","toString","fee","gas","sendTokens","address","process","env","REACT_APP_BACK_COSMOS_WALLET","result","code","undefined","alert","fetch","REACT_APP_STATE","method","headers","body","JSON","stringify","hash","transactionHash","sourceChain","console","log","error"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeATOMTrx.ts"],"sourcesContent":["import {\n\tassertIsDeliverTxSuccess,\n\tSigningStargateClient,\n} from \"@cosmjs/stargate\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { message } from \"antd\";\nconst bs58 = require(\"bs58\");\nconst { Buffer } = require(\"buffer\");\nconst web3 = require(\"@solana/web3.js\");\nconst axios = require(\"axios\").default;\n\n\nconst MakeATOMTrx = async (\n  activeBtn: any,\n  setIsload: any,\n  connection: any,\n  ATOMwalletKey: any,\n  walletTo: any,\n  netTo: string,\n  ATOMAmount: any\n) => {\n  if (activeBtn) {\n    setIsload(true);\n    try {\n      if (window) {\n        if (window[\"keplr\"]) {\n          const chainId = \"cosmoshub-4\"; //theta-testnet-001\n          await window.keplr.enable(chainId);\n          //@ts-ignore\n          if (typeof window === \"undefined\") return;\n          await window.keplr.enable(chainId);\n          const offlineSigner =\n            window.getOfflineSigner != null\n              ? window.getOfflineSigner(chainId)\n              : null;\n          if (offlineSigner == null) return \"error\";\n          const accounts = await offlineSigner.getAccounts();\n          // return\n          const client = await SigningStargateClient.connectWithSigner(\n            \"https://proxy.tonana.org/https://rpc.cosmos.network/\",\n            // \"https://rpc.sentry-01.theta-testnet.polypore.xyz/\",\n            offlineSigner\n          );\n          message.success(\"Wait BE trx pending...\", 2);\n  \n          const amountFinal = {\n            denom: \"uatom\",\n            amount: (Number(ATOMAmount) * 1000000).toString(),\n          };\n          const fee = {\n            amount: [\n              {\n                denom: \"uatom\",\n                amount: \"5000\",\n              },\n            ],\n            gas: \"200000\",\n          };\n          const result = await client.sendTokens(\n            accounts[0].address,\n            process.env.REACT_APP_BACK_COSMOS_WALLET\n              ? process.env.REACT_APP_BACK_COSMOS_WALLET\n              : \"\",\n            [amountFinal],\n            fee,\n            `${netTo}#${walletTo}`\n          );\n          await assertIsDeliverTxSuccess(result);\n          if (result.code !== undefined && result.code !== 0) {\n          \talert(\"Failed to send tx: \");\n          } else {\n\n            fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\"   : \"https://api.tonana.org/\", {method: \"POST\", headers: { \"Content-Type\": \"application/json\" },body: JSON.stringify({\n              hash:result.transactionHash,\n              sourceChain:\"cosmos\"\n            })})\n              setIsload(false);\n              message.success(\"Done trx!\", 10);\n\n    //     axios.get(\n    //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n    //         ).then((e:any)=>{\n    //           console.log(e);\n    // setIsload(false);\n\n    //           message.success(\"Done trx!\", 10);\n\n    //         })\n\n    // const int = setInterval(() => {\n    //   // return\n    //   fetch(`https://api.${process.env.REACT_APP_SOL_NET}.solana.com/`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       Accept: \"application/json, text/plain, */*\",\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify({\n    //       jsonrpc: \"2.0\",\n    //       id: 1,\n    //       method: \"getTransaction\",\n\n    //       params: [\"json\"],\n    //     }),\n    //   })\n    //     .then((res) => res.json())\n    //     .then(async (res) => {\n    //       if (res.result == null) {\n    //         console.log(\"res: null \");\n    //         return false;\n    //       }\n    //       const buf = bs58.decode(\n    //         res.result.transaction.message.instructions[0].data.toString(16)\n    //       );\n    //       if (buf.toString() === `TON_WALLET_${walletTo}`) {\n    //         clearInterval(int);\n    //         message.success(\"Done BE trx!\", 10);\n\n    //         axios.get(\n    //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n    //         );\n\n    //         const int2 = setInterval(() => {\n    //           message.success(\"Wallet trx pending...\", 2);\n\n    //           fetch(\n    //             `https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`\n    //           )\n    //             .then((e: any) => e.json())\n    //             .then((e: any) => {\n    //               console.log(e.result);\n    //               const data = e.result.filter((e: any) =>\n    //                 e.out_msgs[0]\n    //                   ? e.out_msgs[0].message === true\n    //                   : false\n    //               );\n    //               if (data[0]) {\n    //                 clearInterval(int2);\n    //                 setIsload(false);\n    //                 message.success(\"Done wallet trx, check it!\", 10);\n    //               }\n    //             });\n    //         }, 10000);\n    //       }\n    //     });\n    // }, 5000);\n\n\n    //       \talert(\"Succeed to send tx:\" + result.transactionHash);\n          }\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n\nexport default MakeATOMTrx\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}