{"ast":null,"code":"/**\n * fork of /node_modules/near-api-js/lib/utils/format.js\n **/import BN from\"bn.js\";/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */var USN_NOMINATION_EXP=18;// Pre-calculate offests used for rounding to different number of digits\nvar ROUNDING_OFFSETS=[];var BN10=new BN(10);for(var i=0,offset=new BN(5);i<USN_NOMINATION_EXP;i++,offset=offset.mul(BN10)){ROUNDING_OFFSETS[i]=offset;}/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */function formatUsnAmount(balance){var fracDigits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:USN_NOMINATION_EXP;var balanceBN=new BN(balance,10);if(fracDigits!==USN_NOMINATION_EXP){// Adjust balance for rounding at given number of digits\nvar roundingExp=USN_NOMINATION_EXP-fracDigits-1;if(roundingExp>0){balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);}}balance=balanceBN.toString();var wholeStr=balance.substring(0,balance.length-USN_NOMINATION_EXP)||'0';var fractionStr=balance.substring(balance.length-USN_NOMINATION_EXP).padStart(USN_NOMINATION_EXP,'0').substring(0,fracDigits);return trimTrailingZeroes(\"\".concat(formatWithCommas(wholeStr),\".\").concat(fractionStr));}/**\n * Convert human readable USN amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in USN.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */function parseUsnAmount(amt){if(!amt){return null;}amt=cleanupAmount(amt);var split=amt.split('.');var wholePart=split[0];var fracPart=split[1]||'';if(split.length>2||fracPart.length>USN_NOMINATION_EXP){throw new Error(\"Cannot parse '\".concat(amt,\"' as USN amount\"));}return trimLeadingZeroes(wholePart+fracPart.padEnd(USN_NOMINATION_EXP,'0'));}export{parseUsnAmount,formatUsnAmount,USN_NOMINATION_EXP};/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */function cleanupAmount(amount){return amount.replace(/,/g,'').trim();}/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */function trimTrailingZeroes(value){return value.replace(/\\.?0*$/,'');}/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */function trimLeadingZeroes(value){value=value.replace(/^0+/,'');if(value===''){return'0';}return value;}/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */function formatWithCommas(value){var pattern=/(-?\\d+)(\\d{3})/;while(pattern.test(value)){value=value.replace(pattern,'$1,$2');}return value;}","map":{"version":3,"names":["BN","USN_NOMINATION_EXP","ROUNDING_OFFSETS","BN10","i","offset","mul","formatUsnAmount","balance","fracDigits","balanceBN","roundingExp","iadd","toString","wholeStr","substring","length","fractionStr","padStart","trimTrailingZeroes","formatWithCommas","parseUsnAmount","amt","cleanupAmount","split","wholePart","fracPart","Error","trimLeadingZeroes","padEnd","amount","replace","trim","value","pattern","test"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/formatUsn.js"],"sourcesContent":["/**\n * fork of /node_modules/near-api-js/lib/utils/format.js\n **/\n\nimport BN from \"bn.js\";\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nconst USN_NOMINATION_EXP = 18;\n\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\nfor (let i = 0, offset = new BN(5); i < USN_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n  ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatUsnAmount(balance, fracDigits = USN_NOMINATION_EXP) {\n  const balanceBN = new BN(balance, 10);\n  if (fracDigits !== USN_NOMINATION_EXP) {\n    // Adjust balance for rounding at given number of digits\n    const roundingExp = USN_NOMINATION_EXP - fracDigits - 1;\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - USN_NOMINATION_EXP) || '0';\n  const fractionStr = balance.substring(balance.length - USN_NOMINATION_EXP)\n    .padStart(USN_NOMINATION_EXP, '0').substring(0, fracDigits);\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\n\n/**\n * Convert human readable USN amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in USN.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseUsnAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split('.');\n  const wholePart = split[0];\n  const fracPart = split[1] || '';\n  if (split.length > 2 || fracPart.length > USN_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as USN amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(USN_NOMINATION_EXP, '0'));\n}\nexport { parseUsnAmount, formatUsnAmount, USN_NOMINATION_EXP };\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, '');\n  if (value === '') {\n    return '0';\n  }\n  return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}