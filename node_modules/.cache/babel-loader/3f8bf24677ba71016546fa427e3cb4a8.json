{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index.js\");\nconst {\n  Cell\n} = require(\"../../../boc\");\nconst {\n  Address,\n  bytesToBase64\n} = require(\"../../../utils\");\nconst {\n  parseAddress\n} = require('./NftUtils.js');\nconst {\n  createOffchainUriCell,\n  serializeUri,\n  parseOffchainUriCell\n} = require(\"./NftUtils\");\n\n/**\n * NFT Release Candidate - may still change slightly\n */\nclass NftCollection extends Contract {\n  /**\n   * @param provider\n   * @param options   {{ownerAddress: Address, collectionContentUri: string, nftItemContentBaseUri: string, nftItemCodeHex: string, royalty: number, royaltyAddress: Address, address?: Address | string, cell?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBocn    if (options.royalty > 1) throw new Error('royalty > 1');\n    options.royaltyBase = 1000;\n    options.royaltyFactor = Math.floor(options.royalty * options.royaltyBase);\n    super(provider, options);\n    this.methods.getCollectionData = this.getCollectionData.bind(this);\n    this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n    this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n    this.methods.getRoyaltyParams = this.getRoyaltyParams.bind(this);\n  }\n\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft collection data\n   */\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeAddress(this.options.ownerAddress);\n    cell.bits.writeUint(0, 64); // next_item_index\n\n    const collectionContentCell = createOffchainUriCell(this.options.collectionContentUri);\n    const commonContentCell = new Cell();\n    commonContentCell.bits.writeBytes(serializeUri(this.options.nftItemContentBaseUri));\n    const contentCell = new Cell();\n    contentCell.refs[0] = collectionContentCell;\n    contentCell.refs[1] = commonContentCell;\n    cell.refs[0] = contentCell;\n    cell.refs[1] = Cell.oneFromBoc(this.options.nftItemCodeHex);\n    const royaltyCell = new Cell();\n    royaltyCell.bits.writeUint(this.options.royaltyFactor, 16);\n    royaltyCell.bits.writeUint(this.options.royaltyBase, 16);\n    royaltyCell.bits.writeAddress(this.options.royaltyAddress);\n    cell.refs[2] = royaltyCell;\n    return cell;\n  }\n\n  /**\n   * params   {{itemIndex: number, amount: BN, itemOwnerAddress: Address, itemContentUri: string, queryId?: number}}\n   * @return {Cell}\n   */\n  createMintBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(1, 32); // OP deploy new nft\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n    body.bits.writeUint(params.itemIndex, 64);\n    body.bits.writeCoins(params.amount);\n    const nftItemContent = new Cell();\n    nftItemContent.bits.writeAddress(params.itemOwnerAddress);\n    const uriContent = new Cell();\n    uriContent.bits.writeBytes(serializeUri(params.itemContentUri));\n    nftItemContent.refs[0] = uriContent;\n    body.refs[0] = nftItemContent;\n    return body;\n  }\n\n  /**\n   * params   {{queryId?: number}}\n   * @return {Cell}\n   */\n  createGetRoyaltyParamsBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(0x693d3950, 32); // OP\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n    return body;\n  }\n\n  /**\n   * params   {{queryId?: number, newOwnerAddress: Address}}\n   * @return {Cell}\n   */\n  createChangeOwnerBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(3, 32); // OP\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n    body.bits.writeAddress(params.newOwnerAddress);\n    return body;\n  }\n\n  /**\n   * @return {Promise<{nextItemIndex: number, ownerAddress: Address, collectionContentUri: string}>}\n   */\n  async getCollectionData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n    const nextItemIndex = result[0].toNumber();\n    const collectionContentUri = parseOffchainUriCell(result[1]);\n    const ownerAddress = parseAddress(result[2]);\n    return {\n      nextItemIndex,\n      ownerAddress,\n      collectionContentUri\n    };\n  }\n\n  /**\n   * @param nftItem   {NFTItem}\n   * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentUri: string}>}\n   */\n  async getNftItemContent(nftItem) {\n    const myAddress = await this.getAddress();\n    const nftData = await nftItem.getData();\n    if (nftData.isInitialized) {\n      const result = await this.provider.call2(myAddress.toString(), 'get_nft_content', [['num', nftData.index], ['tvm.Cell', bytesToBase64(await nftData.contentCell.toBoc(false))]]);\n      nftData.contentUri = parseOffchainUriCell(result);\n      delete nftData.contentCell;\n    }\n    return nftData;\n  }\n\n  /**\n   * @param index {number}\n   * @return {Promise<Address>}\n   */\n  async getNftItemAddressByIndex(index) {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index]]);\n    return parseAddress(result);\n  }\n\n  /**\n   * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n   */\n  async getRoyaltyParams() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'royalty_params');\n    const royaltyFactor = result[0].toNumber();\n    const royaltyBase = result[1].toNumber();\n    const royalty = royaltyFactor / royaltyBase;\n    const royaltyAddress = parseAddress(result[2]);\n    return {\n      royalty,\n      royaltyBase,\n      royaltyFactor,\n      royaltyAddress\n    };\n  }\n}\nmodule.exports = {\n  NftCollection\n};","map":{"version":3,"names":["Contract","require","Cell","Address","bytesToBase64","parseAddress","createOffchainUriCell","serializeUri","parseOffchainUriCell","NftCollection","constructor","provider","options","wc","code","oneFromBoc","royalty","Error","royaltyBase","royaltyFactor","Math","floor","methods","getCollectionData","bind","getNftItemAddressByIndex","getNftItemContent","getRoyaltyParams","createDataCell","cell","bits","writeAddress","ownerAddress","writeUint","collectionContentCell","collectionContentUri","commonContentCell","writeBytes","nftItemContentBaseUri","contentCell","refs","nftItemCodeHex","royaltyCell","royaltyAddress","createMintBody","params","body","queryId","itemIndex","writeCoins","amount","nftItemContent","itemOwnerAddress","uriContent","itemContentUri","createGetRoyaltyParamsBody","createChangeOwnerBody","newOwnerAddress","myAddress","getAddress","result","call2","toString","nextItemIndex","toNumber","nftItem","nftData","getData","isInitialized","index","toBoc","contentUri","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/token/nft/NftCollection.js"],"sourcesContent":["const {Contract} = require(\"../../index.js\");\nconst {Cell} = require(\"../../../boc\");\nconst {Address, bytesToBase64} = require(\"../../../utils\");\nconst {parseAddress} = require('./NftUtils.js');\nconst {createOffchainUriCell, serializeUri, parseOffchainUriCell} = require(\"./NftUtils\");\n\n/**\n * NFT Release Candidate - may still change slightly\n */\nclass NftCollection extends Contract {\n    /**\n     * @param provider\n     * @param options   {{ownerAddress: Address, collectionContentUri: string, nftItemContentBaseUri: string, nftItemCodeHex: string, royalty: number, royaltyAddress: Address, address?: Address | string, cell?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBocn        if (options.royalty > 1) throw new Error('royalty > 1');\n        options.royaltyBase = 1000;\n        options.royaltyFactor = Math.floor(options.royalty * options.royaltyBase);\n        super(provider, options);\n\n        this.methods.getCollectionData = this.getCollectionData.bind(this);\n        this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n        this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n        this.methods.getRoyaltyParams = this.getRoyaltyParams.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft collection data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeAddress(this.options.ownerAddress);\n        cell.bits.writeUint(0, 64); // next_item_index\n\n        const collectionContentCell = createOffchainUriCell(this.options.collectionContentUri);\n\n        const commonContentCell = new Cell();\n        commonContentCell.bits.writeBytes(serializeUri(this.options.nftItemContentBaseUri));\n\n        const contentCell = new Cell();\n        contentCell.refs[0] = collectionContentCell;\n        contentCell.refs[1] = commonContentCell;\n        cell.refs[0] = contentCell;\n\n        cell.refs[1] = Cell.oneFromBoc(this.options.nftItemCodeHex);\n\n        const royaltyCell = new Cell();\n        royaltyCell.bits.writeUint(this.options.royaltyFactor, 16);\n        royaltyCell.bits.writeUint(this.options.royaltyBase, 16);\n        royaltyCell.bits.writeAddress(this.options.royaltyAddress);\n        cell.refs[2] = royaltyCell;\n\n        return cell;\n    }\n\n    /**\n     * params   {{itemIndex: number, amount: BN, itemOwnerAddress: Address, itemContentUri: string, queryId?: number}}\n     * @return {Cell}\n     */\n    createMintBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(1, 32); // OP deploy new nft\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        body.bits.writeUint(params.itemIndex, 64);\n        body.bits.writeCoins(params.amount);\n\n        const nftItemContent = new Cell();\n        nftItemContent.bits.writeAddress(params.itemOwnerAddress);\n\n        const uriContent = new Cell();\n        uriContent.bits.writeBytes(serializeUri(params.itemContentUri));\n        nftItemContent.refs[0] = uriContent;\n\n        body.refs[0] = nftItemContent;\n        return body;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetRoyaltyParamsBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x693d3950, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n    /**\n     * params   {{queryId?: number, newOwnerAddress: Address}}\n     * @return {Cell}\n     */\n    createChangeOwnerBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(3, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        body.bits.writeAddress(params.newOwnerAddress);\n        return body;\n    }\n\n    /**\n     * @return {Promise<{nextItemIndex: number, ownerAddress: Address, collectionContentUri: string}>}\n     */\n    async getCollectionData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n\n        const nextItemIndex = result[0].toNumber();\n        const collectionContentUri = parseOffchainUriCell(result[1]);\n        const ownerAddress = parseAddress(result[2]);\n\n        return {nextItemIndex, ownerAddress, collectionContentUri};\n    }\n\n    /**\n     * @param nftItem   {NFTItem}\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentUri: string}>}\n     */\n    async getNftItemContent(nftItem) {\n        const myAddress = await this.getAddress();\n        const nftData = await nftItem.getData();\n        if (nftData.isInitialized) {\n            const result = await this.provider.call2(myAddress.toString(), 'get_nft_content', [['num', nftData.index], ['tvm.Cell', bytesToBase64(await nftData.contentCell.toBoc(false))]]);\n            nftData.contentUri = parseOffchainUriCell(result);\n            delete nftData.contentCell;\n        }\n        return nftData;\n    }\n\n    /**\n     * @param index {number}\n     * @return {Promise<Address>}\n     */\n    async getNftItemAddressByIndex(index) {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index]]);\n\n        return parseAddress(result);\n    }\n\n    /**\n     * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n     */\n    async getRoyaltyParams() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'royalty_params');\n\n        const royaltyFactor = result[0].toNumber();\n        const royaltyBase = result[1].toNumber();\n        const royalty = royaltyFactor / royaltyBase;\n        const royaltyAddress = parseAddress(result[2]);\n\n        return {royalty, royaltyBase, royaltyFactor, royaltyAddress};\n    }\n}\n\nmodule.exports = {NftCollection};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}