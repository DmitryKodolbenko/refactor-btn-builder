{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupTxExtension = void 0;\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupTxExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  const queryService = new service_1.ServiceClientImpl(rpc);\n  return {\n    tx: {\n      getTx: async txId => {\n        const request = {\n          hash: txId\n        };\n        const response = await queryService.GetTx(request);\n        return response;\n      },\n      simulate: async (messages, memo, signer, sequence) => {\n        const request = service_1.SimulateRequest.fromPartial({\n          tx: tx_1.Tx.fromPartial({\n            authInfo: tx_1.AuthInfo.fromPartial({\n              fee: tx_1.Fee.fromPartial({}),\n              signerInfos: [{\n                publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                sequence: long_1.default.fromNumber(sequence, true),\n                modeInfo: {\n                  single: {\n                    mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED\n                  }\n                }\n              }]\n            }),\n            body: tx_1.TxBody.fromPartial({\n              messages: Array.from(messages),\n              memo: memo\n            }),\n            signatures: [new Uint8Array()]\n          }),\n          // Sending serialized `txBytes` is the future. But\n          // this is not available in Comsos SDK 0.42.\n          txBytes: undefined\n        });\n        const response = await queryService.Simulate(request);\n        return response;\n      }\n    }\n  };\n}\nexports.setupTxExtension = setupTxExtension;","map":{"version":3,"sources":["../../../src/modules/tx/queries.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,gDAAA,CAAA;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAOA,MAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAEA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAiBA,SAAgB,gBAAgB,CAAC,IAAiB,EAAA;EAChD;EACA;EACA,MAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC,MAAM,YAAY,GAAG,IAAI,SAAA,CAAA,iBAAiB,CAAC,GAAG,CAAC;EAE/C,OAAO;IACL,EAAE,EAAE;MACF,KAAK,EAAE,MAAO,IAAY,IAAI;QAC5B,MAAM,OAAO,GAAiB;UAC5B,IAAI,EAAE;SACP;QACD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC;QAClD,OAAO,QAAQ;MACjB,CAAC;MACD,QAAQ,EAAE,OACR,QAAwB,EACxB,IAAwB,EACxB,MAAc,EACd,QAAgB,KACd;QACF,MAAM,OAAO,GAAG,SAAA,CAAA,eAAe,CAAC,WAAW,CAAC;UAC1C,EAAE,EAAE,IAAA,CAAA,EAAE,CAAC,WAAW,CAAC;YACjB,QAAQ,EAAE,IAAA,CAAA,QAAQ,CAAC,WAAW,CAAC;cAC7B,GAAG,EAAE,IAAA,CAAA,GAAG,CAAC,WAAW,CAAC,CAAA,CAAE,CAAC;cACxB,WAAW,EAAE,CACX;gBACE,SAAS,EAAE,CAAA,CAAA,EAAA,eAAA,CAAA,YAAY,EAAC,MAAM,CAAC;gBAC/B,QAAQ,EAAE,MAAA,CAAA,OAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;gBACzC,QAAQ,EAAE;kBAAE,MAAM,EAAE;oBAAE,IAAI,EAAE,SAAA,CAAA,QAAQ,CAAC;kBAAqB;gBAAE;eAC7D;aAEJ,CAAC;YACF,IAAI,EAAE,IAAA,CAAA,MAAM,CAAC,WAAW,CAAC;cACvB,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;cAC9B,IAAI,EAAE;aACP,CAAC;YACF,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE;WAC9B,CAAC;UACF;UACA;UACA,OAAO,EAAE;SACV,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;QACrD,OAAO,QAAQ;MACjB;IACD;GACF;AACH;AAhDA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupTxExtension = void 0;\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupTxExtension(base) {\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    const queryService = new service_1.ServiceClientImpl(rpc);\n    return {\n        tx: {\n            getTx: async (txId) => {\n                const request = {\n                    hash: txId,\n                };\n                const response = await queryService.GetTx(request);\n                return response;\n            },\n            simulate: async (messages, memo, signer, sequence) => {\n                const request = service_1.SimulateRequest.fromPartial({\n                    tx: tx_1.Tx.fromPartial({\n                        authInfo: tx_1.AuthInfo.fromPartial({\n                            fee: tx_1.Fee.fromPartial({}),\n                            signerInfos: [\n                                {\n                                    publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                                    sequence: long_1.default.fromNumber(sequence, true),\n                                    modeInfo: { single: { mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED } },\n                                },\n                            ],\n                        }),\n                        body: tx_1.TxBody.fromPartial({\n                            messages: Array.from(messages),\n                            memo: memo,\n                        }),\n                        signatures: [new Uint8Array()],\n                    }),\n                    // Sending serialized `txBytes` is the future. But\n                    // this is not available in Comsos SDK 0.42.\n                    txBytes: undefined,\n                });\n                const response = await queryService.Simulate(request);\n                return response;\n            },\n        },\n    };\n}\nexports.setupTxExtension = setupTxExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}