{"ast":null,"code":"import { ethers } from \"ethers\";\nconst connectWalletAUR = async setAurWalletKey => {\n  //@ts-ignore\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  let userAddress = await signer.getAddress();\n  setAurWalletKey(userAddress);\n};\nexport default connectWalletAUR;","map":{"version":3,"names":["ethers","connectWalletAUR","setAurWalletKey","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","userAddress","getAddress"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/wallet/connectWalletAUR.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n\nconst connectWalletAUR = async (setAurWalletKey: any)=>{\n\n  //@ts-ignore\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n    let userAddress = await signer.getAddress();\n\n  setAurWalletKey(userAddress)\n\n}\nexport default connectWalletAUR"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAG/B,MAAMC,gBAAgB,GAAG,MAAOC,eAAoB,IAAG;EAErD;EACA,MAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EAEnE,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAC9C,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;EAEjC,IAAIC,WAAW,GAAG,MAAMF,MAAM,CAACG,UAAU,EAAE;EAE7CV,eAAe,CAACS,WAAW,CAAC;AAE9B,CAAC;AACD,eAAeV,gBAAgB"},"metadata":{},"sourceType":"module"}