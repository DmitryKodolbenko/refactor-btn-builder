{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"../../index\"),\n  Contract = _require.Contract;\nvar _require2 = require(\"../../../boc\"),\n  Cell = _require2.Cell;\nvar _require3 = require(\"../../../utils\"),\n  Address = _require3.Address,\n  BN = _require3.BN;\nvar _require4 = require('./NftUtils.js'),\n  parseAddress = _require4.parseAddress;\nvarn\n/**\n * NFT Release Candidate - may still change slightly\n */\nvar NftItem = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(NftItem, _Contract);\n  var _super = _createSuper(NftItem);\n  /**\n   * @param provider\n   * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n   */\n  function NftItem(provider, options) {\n    var _this;\n    _classCallCheck(this, NftItem);\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n    _this = _super.call(this, provider, options);\n    _this.methods.getData = _this.getData.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft data\n   */\n  _createClass(NftItem, [{\n    key: \"createDataCell\",\n    value: function createDataCell() {\n      var cell = new Cell();\n      cell.bits.writeUint(this.options.index, 64);\n      cell.bits.writeAddress(this.options.collectionAddress);\n      return cell;\n    }\n\n    /**\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentCell: Cell}>}\n     */\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var myAddress, result, isInitialized, index, collectionAddress, ownerAddress, contentCell;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getAddress();\n              case 2:\n                myAddress = _context.sent;\n                _context.next = 5;\n                return this.provider.call2(myAddress.toString(), 'get_nft_data');\n              case 5:\n                result = _context.sent;\n                isInitialized = result[0].toNumber() === -1;\n                index = result[1].toNumber();\n                collectionAddress = parseAddress(result[2]);\n                ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n                contentCell = result[4];\n                return _context.abrupt(\"return\", {\n                  isInitialized: isInitialized,\n                  index: index,\n                  collectionAddress: collectionAddress,\n                  ownerAddress: ownerAddress,\n                  contentCell: contentCell\n                });\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n      return getData;\n    }()\n    /**\n     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n     */\n  }, {\n    key: \"createTransferBody\",\n    value: function () {\n      var _createTransferBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var cell;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cell = new Cell();\n                cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n                cell.bits.writeUint(params.queryId || 0, 64);\n                cell.bits.writeAddress(params.newOwnerAddress);\n                cell.bits.writeAddress(params.responseAddress);\n                cell.bits.writeBit(false); // null custom_payload\n                cell.bits.writeCoins(params.forwardAmount || new BN(0));\n                cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n                if (params.forwardPayload) {\n                  cell.bits.writeBytes(params.forwardPayload);\n                }\n                return _context2.abrupt(\"return\", cell);\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function createTransferBody(_x) {\n        return _createTransferBody.apply(this, arguments);\n      }\n      return createTransferBody;\n    }()\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n  }, {\n    key: \"createGetStaticDataBody\",\n    value: function createGetStaticDataBody(params) {\n      var body = new Cell();\n      body.bits.writeUint(0x2fcb26a2, 32); // OP\n      body.bits.writeUint(params.queryId || 0, 64); // query_id\n      return body;\n    }\n  }]);\n  return NftItem;\n}(Contract);\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\nmodule.exports = {\n  NftItem: NftItem\n};","map":{"version":3,"names":["require","Contract","Cell","Address","BN","parseAddress","NFT_ITEM_CODE_HEX","NftItem","provider","options","wc","code","oneFromBoc","methods","getData","bind","cell","bits","writeUint","index","writeAddress","collectionAddress","getAddress","myAddress","call2","toString","result","isInitialized","toNumber","ownerAddress","contentCell","params","queryId","newOwnerAddress","responseAddress","writeBit","writeCoins","forwardAmount","forwardPayload","writeBytes","body","codeHex","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/token/nft/NftItem.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {Address, BN} = require(\"../../../utils\");\nconst {parseAddress} = require('./NftUtils.js');\n\nconst NFT_ITEM_CODE_HEX = 'B5EE9C7241020B0100019C000114FF00F4A413F4BCF2C80B0102016202030202CE04050009A11F9FE0030201200607001D403C8CB3F58CF1601CF16CCC9ED54802A30C8871C02497C0F83434C0C05C6C2497C0F83E900C3C00412CE3844C0C8D1480B1C17CB865407E90350C3C00B80174C7F4CFE08417F30F45148C2EB8C08C0D0D4D60840BF2C9A8852EB8C097C12103FCBC200809003B3B513434CFFE900835D27080269FC07E90350C04090408F80C1C165B5B6001FC3210365E22015124C705F2E19101FA40FA40D20031FA00820AFAF0801AA121A120C200F2E192218E3E821005138D91C85008CF16500ACF1671244814544690708010C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB001036941029365BE226D70B01C3009410266C31E30D5502F0020A00767082108B77173504C8CBFF5005CF16102410238040708010C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB0000648210D53276DB103744046D71708010C8CB055007CF165005FA0215CB6A12CB1FCB3F226EB39458CF17019132E201C901FB00D5B62154';\n\n/**\n * NFT Release Candidate - may still change slightly\n */\nclass NftItem extends Contract {\n    /**\n     * @param provider\n     * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeUint(this.options.index, 64);\n        cell.bits.writeAddress(this.options.collectionAddress);\n        return cell;\n    }\n\n    /**\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentCell: Cell}>}\n     */\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n\n        const isInitialized = result[0].toNumber() === -1;\n        const index = result[1].toNumber();\n        const collectionAddress =  parseAddress(result[2]);\n        const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n\n        const contentCell = result[4];\n\n        return {isInitialized, index, collectionAddress, ownerAddress, contentCell};\n    }\n\n    /**\n     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n     */\n    async createTransferBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeAddress(params.newOwnerAddress);\n        cell.bits.writeAddress(params.responseAddress);\n        cell.bits.writeBit(false); // null custom_payload\n        cell.bits.writeCoins(params.forwardAmount || new BN(0));\n        cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n        if (params.forwardPayload) {\n            cell.bits.writeBytes(params.forwardPayload);\n        }\n        return cell;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetStaticDataBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x2fcb26a2, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n}\n\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\n\nmodule.exports = {NftItem};"],"mappings":"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"},"metadata":{},"sourceType":"script"}