{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateFee = exports.GasPrice = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n/**\n * Denom checker for the Cosmos SDK 0.42 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n *\n * This is like a regexp but with helpful error messages.\n */\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 128) {\n    throw new Error(\"Denom must be between 3 and 128 characters\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\nclass GasPrice {\n  constructor(amount, denom) {\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   *\n   * Separators are not yet supported.\n   */\n  static fromString(gasPrice) {\n    // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n    const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n    if (!matchResult) {\n      throw new Error(\"Invalid gas price string\");\n    }\n    const [_, amount, denom] = matchResult;\n    checkDenom(denom);\n    const fractionalDigits = 18;\n    const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n    return new GasPrice(decimalAmount, denom);\n  }\n  /**\n   * Returns a string representation of this gas price, e.g. \"0.025uatom\".\n   * This can be used as an input to `GasPrice.fromString`.\n   */\n  toString() {\n    return this.amount.toString() + this.denom;\n  }\n}\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, gasPrice) {\n  const processedGasPrice = typeof gasPrice === \"string\" ? GasPrice.fromString(gasPrice) : gasPrice;\n  const {\n    denom,\n    amount: gasPriceAmount\n  } = processedGasPrice;\n  // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),\n  // which we handle by converting from Decimal to string without going through number.\n  const amount = gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).ceil().toString();\n  return {\n    amount: (0, proto_signing_1.coins)(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\nexports.calculateFee = calculateFee;","map":{"version":3,"sources":["../src/fee.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAEA;;;;;AAKG;AACH,SAAS,UAAU,CAAC,KAAa,EAAA;EAC/B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;IAC1C,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC;EAC9D;AACH;AAEA;;;AAGG;AACH,MAAa,QAAQ,CAAA;EAInB,WAAA,CAAmB,MAAe,EAAE,KAAa,EAAA;IAC/C,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,KAAK,GAAG,KAAK;EACpB;EAEA;;;;;;;AAOG;EACI,OAAO,UAAU,CAAC,QAAgB,EAAA;IACvC;IACA,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,8BAA8B,CAAC;IAClE,IAAI,CAAC,WAAW,EAAE;MAChB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;IAC5C;IACD,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,WAAW;IACtC,UAAU,CAAC,KAAK,CAAC;IACjB,MAAM,gBAAgB,GAAG,EAAE;IAC3B,MAAM,aAAa,GAAG,MAAA,CAAA,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,gBAAgB,CAAC;IACrE,OAAO,IAAI,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC;EAC3C;EAEA;;;AAGG;EACI,QAAQ,GAAA;IACb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK;EAC5C;AACD;AArCD,OAAA,CAAA,QAAA,GAAA,QAAA;AAuCA,SAAgB,YAAY,CAAC,QAAgB,EAAE,QAA2B,EAAA;EACxE,MAAM,iBAAiB,GAAG,OAAO,QAAQ,KAAK,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ;EACjG,MAAM;IAAE,KAAK;IAAE,MAAM,EAAE;EAAc,CAAE,GAAG,iBAAiB;EAC3D;EACA;EACA,MAAM,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,MAAA,CAAA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;EAC9E,OAAO;IACL,MAAM,EAAE,CAAA,CAAA,EAAA,eAAA,CAAA,KAAK,EAAC,MAAM,EAAE,KAAK,CAAC;IAC5B,GAAG,EAAE,QAAQ,CAAC,QAAQ;GACvB;AACH;AAVA,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateFee = exports.GasPrice = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n/**\n * Denom checker for the Cosmos SDK 0.42 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n *\n * This is like a regexp but with helpful error messages.\n */\nfunction checkDenom(denom) {\n    if (denom.length < 3 || denom.length > 128) {\n        throw new Error(\"Denom must be between 3 and 128 characters\");\n    }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\nclass GasPrice {\n    constructor(amount, denom) {\n        this.amount = amount;\n        this.denom = denom;\n    }\n    /**\n     * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n     *\n     * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n     * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n     *\n     * Separators are not yet supported.\n     */\n    static fromString(gasPrice) {\n        // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n        const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n        if (!matchResult) {\n            throw new Error(\"Invalid gas price string\");\n        }\n        const [_, amount, denom] = matchResult;\n        checkDenom(denom);\n        const fractionalDigits = 18;\n        const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n        return new GasPrice(decimalAmount, denom);\n    }\n    /**\n     * Returns a string representation of this gas price, e.g. \"0.025uatom\".\n     * This can be used as an input to `GasPrice.fromString`.\n     */\n    toString() {\n        return this.amount.toString() + this.denom;\n    }\n}\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, gasPrice) {\n    const processedGasPrice = typeof gasPrice === \"string\" ? GasPrice.fromString(gasPrice) : gasPrice;\n    const { denom, amount: gasPriceAmount } = processedGasPrice;\n    // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),\n    // which we handle by converting from Decimal to string without going through number.\n    const amount = gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).ceil().toString();\n    return {\n        amount: (0, proto_signing_1.coins)(amount, denom),\n        gas: gasLimit.toString(),\n    };\n}\nexports.calculateFee = calculateFee;\n//# sourceMappingURL=fee.js.map"]},"metadata":{},"sourceType":"script"}