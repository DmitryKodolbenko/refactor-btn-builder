{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientNear = void 0;\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst near_api_js_1 = require(\"near-api-js\");\nconst AppRequest_1 = require(\"../types/AppRequest\");\nconst ClientMessages_1 = require(\"../types/ClientMessages\");\nconst ServerMessage_1 = require(\"../types/ServerMessage\");\nconst utils_1 = require(\"../utils\");\nclass ClientNear extends eventemitter3_1.default {\n  constructor(ws, sessionId) {\n    super();\n    this.events = {};\n    this.sessionId = '';\n    this.connect = _ref => {\n      let {\n        publicKey,\n        sessionId,\n        token,\n        device,\n        accountId,\n        notificationEndpoint\n      } = _ref;\n      return __awaiter(this, void 0, void 0, function* () {\n        const request = (0, ClientMessages_1.createConnectMessage)(Buffer.from(publicKey.data).toString('hex'), sessionId, token, notificationEndpoint, device, JSON.stringify({\n          accountId: accountId\n        }));\n        yield this.send(request);\n      });\n    };\n    this.endSession = () => __awaiter(this, void 0, void 0, function* () {\n      const request = {\n        type: ClientMessages_1.ClientMessageTypes.EndSession,\n        sessionId: this.sessionId\n      };\n      yield this.send(request);\n    });\n    this.getSessions = token => __awaiter(this, void 0, void 0, function* () {\n      const request = {\n        type: ClientMessages_1.ClientMessageTypes.GetSessions,\n        token\n      };\n      return yield this.send(request);\n    });\n    this.getPendingRequests = () => __awaiter(this, void 0, void 0, function* () {\n      const request = {\n        type: ClientMessages_1.ClientMessageTypes.GetPendingRequests,\n        sessionId: this.sessionId\n      };\n      return yield this.send(request);\n    });\n    this.send = message => __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        const id = (0, utils_1.getRandomId)();\n        const request = JSON.stringify(Object.assign(Object.assign({}, message), {\n          id: id\n        }));\n        this.events[id] = response => {\n          if (response.type === ServerMessage_1.ServerMessageTypes.Error) {\n            reject(response.msg);\n          } else {\n            resolve(response);\n          }\n        };\n        this.ws.send(request);\n      });\n    });\n    this.resolveSignTransaction = _ref2 => {\n      let {\n        requestId,\n        signedTransactions\n      } = _ref2;\n      return __awaiter(this, void 0, void 0, function* () {\n        const buffers = signedTransactions.map(tx => Buffer.from(tx.encode()).toString('hex'));\n        const request = {\n          type: ClientMessages_1.ClientMessageTypes.ResolveSignTransaction,\n          sessionId: this.sessionId,\n          requestId,\n          signedTransactions: buffers\n        };\n        return this.send(request);\n      });\n    };\n    this.resolveSignMessage = _ref3 => {\n      let {\n        requestId,\n        signature\n      } = _ref3;\n      return __awaiter(this, void 0, void 0, function* () {\n        const request = {\n          type: ClientMessages_1.ClientMessageTypes.ResolveSignMessage,\n          sessionId: this.sessionId,\n          requestId,\n          signature: Buffer.from(signature).toString('hex')\n        };\n        return this.send(request);\n      });\n    };\n    this.rejectRequest = requestId => __awaiter(this, void 0, void 0, function* () {\n      const request = {\n        type: ClientMessages_1.ClientMessageTypes.RejectRequest,\n        requestId\n      };\n      return this.send(request);\n    });\n    this.ws = ws;\n    this.sessionId = sessionId;\n  }\n}\nexports.ClientNear = ClientNear;\n_a = ClientNear;\nClientNear.build = _ref4 => {\n  let {\n    sessionId,\n    url\n  } = _ref4;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      const ws = url ? new isomorphic_ws_1.default(url) : new isomorphic_ws_1.default('wss://relay.nightly.app/client');\n      const connection = new ClientNear(ws, sessionId);\n      connection.ws.onopen = () => {\n        connection.ws.onmessage = _ref5 => {\n          let {\n            data\n          } = _ref5;\n          const response = JSON.parse(data);\n          if (response.type === ServerMessage_1.ServerMessageTypes.NewRequestMessage) {\n            if (response.request.type == AppRequest_1.AppRequest.SignTransaction || response.request.type == AppRequest_1.AppRequest.SignAllTransactions) {\n              const withDeserialized = Object.assign({\n                deserialized: response.request.transactions.map(hex => near_api_js_1.transactions.Transaction.decode(Buffer.from(hex, 'hex')))\n              }, response.request);\n              connection.emit('newRequest', withDeserialized);\n            } else connection.emit('newRequest', response.request);\n            return;\n          } else {\n            connection.events[response.id](response);\n          }\n        };\n        connection.ws.onclose = () => {\n          connection.emit('disconnect');\n        };\n        const id = (0, utils_1.getRandomId)();\n        const request = {\n          id,\n          sessionId,\n          type: ClientMessages_1.ClientMessageTypes.GetInfo\n        };\n        connection.events[id] = response => {\n          if (response.type === ServerMessage_1.ServerMessageTypes.AppData) {\n            resolve({\n              client: connection,\n              data: response\n            });\n          } else {\n            reject(response);\n          }\n        };\n        connection.ws.send(JSON.stringify(request));\n      };\n    });\n  });\n};","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","_a","Object","defineProperty","exports","ClientNear","eventemitter3_1","require","isomorphic_ws_1","near_api_js_1","AppRequest_1","ClientMessages_1","ServerMessage_1","utils_1","default","constructor","ws","sessionId","events","connect","publicKey","token","device","accountId","notificationEndpoint","request","createConnectMessage","Buffer","from","data","toString","JSON","stringify","send","endSession","type","ClientMessageTypes","EndSession","getSessions","GetSessions","getPendingRequests","GetPendingRequests","message","id","getRandomId","assign","response","ServerMessageTypes","Error","msg","resolveSignTransaction","requestId","signedTransactions","buffers","map","tx","encode","ResolveSignTransaction","resolveSignMessage","signature","ResolveSignMessage","rejectRequest","RejectRequest","build","url","connection","onopen","onmessage","parse","NewRequestMessage","AppRequest","SignTransaction","SignAllTransactions","withDeserialized","deserialized","transactions","hex","Transaction","decode","emit","onclose","GetInfo","AppData","client"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/lib/nightlyConnect/connect/sdk/src/near/clientNear.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientNear = void 0;\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst near_api_js_1 = require(\"near-api-js\");\nconst AppRequest_1 = require(\"../types/AppRequest\");\nconst ClientMessages_1 = require(\"../types/ClientMessages\");\nconst ServerMessage_1 = require(\"../types/ServerMessage\");\nconst utils_1 = require(\"../utils\");\nclass ClientNear extends eventemitter3_1.default {\n    constructor(ws, sessionId) {\n        super();\n        this.events = {};\n        this.sessionId = '';\n        this.connect = ({ publicKey, sessionId, token, device, accountId, notificationEndpoint }) => __awaiter(this, void 0, void 0, function* () {\n            const request = (0, ClientMessages_1.createConnectMessage)(Buffer.from(publicKey.data).toString('hex'), sessionId, token, notificationEndpoint, device, JSON.stringify({ accountId: accountId }));\n            yield this.send(request);\n        });\n        this.endSession = () => __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.EndSession,\n                sessionId: this.sessionId\n            };\n            yield this.send(request);\n        });\n        this.getSessions = (token) => __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.GetSessions,\n                token\n            };\n            return (yield this.send(request));\n        });\n        this.getPendingRequests = () => __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.GetPendingRequests,\n                sessionId: this.sessionId\n            };\n            return (yield this.send(request));\n        });\n        this.send = (message) => __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                const id = (0, utils_1.getRandomId)();\n                const request = JSON.stringify(Object.assign(Object.assign({}, message), { id: id }));\n                this.events[id] = (response) => {\n                    if (response.type === ServerMessage_1.ServerMessageTypes.Error) {\n                        reject(response.msg);\n                    }\n                    else {\n                        resolve(response);\n                    }\n                };\n                this.ws.send(request);\n            });\n        });\n        this.resolveSignTransaction = ({ requestId, signedTransactions }) => __awaiter(this, void 0, void 0, function* () {\n            const buffers = signedTransactions.map((tx) => Buffer.from(tx.encode()).toString('hex'));\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.ResolveSignTransaction,\n                sessionId: this.sessionId,\n                requestId,\n                signedTransactions: buffers\n            };\n            return this.send(request);\n        });\n        this.resolveSignMessage = ({ requestId, signature }) => __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.ResolveSignMessage,\n                sessionId: this.sessionId,\n                requestId,\n                signature: Buffer.from(signature).toString('hex')\n            };\n            return this.send(request);\n        });\n        this.rejectRequest = (requestId) => __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                type: ClientMessages_1.ClientMessageTypes.RejectRequest,\n                requestId\n            };\n            return this.send(request);\n        });\n        this.ws = ws;\n        this.sessionId = sessionId;\n    }\n}\nexports.ClientNear = ClientNear;\n_a = ClientNear;\nClientNear.build = ({ sessionId, url }) => __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n        const ws = url ? new isomorphic_ws_1.default(url) : new isomorphic_ws_1.default('wss://relay.nightly.app/client');\n        const connection = new ClientNear(ws, sessionId);\n        connection.ws.onopen = () => {\n            connection.ws.onmessage = ({ data }) => {\n                const response = JSON.parse(data);\n                if (response.type === ServerMessage_1.ServerMessageTypes.NewRequestMessage) {\n                    if (response.request.type == AppRequest_1.AppRequest.SignTransaction ||\n                        response.request.type == AppRequest_1.AppRequest.SignAllTransactions) {\n                        const withDeserialized = Object.assign({ deserialized: response.request.transactions.map((hex) => near_api_js_1.transactions.Transaction.decode(Buffer.from(hex, 'hex'))) }, response.request);\n                        connection.emit('newRequest', withDeserialized);\n                    }\n                    else\n                        connection.emit('newRequest', response.request);\n                    return;\n                }\n                else {\n                    connection.events[response.id](response);\n                }\n            };\n            connection.ws.onclose = () => {\n                connection.emit('disconnect');\n            };\n            const id = (0, utils_1.getRandomId)();\n            const request = { id, sessionId, type: ClientMessages_1.ClientMessageTypes.GetInfo };\n            connection.events[id] = (response) => {\n                if (response.type === ServerMessage_1.ServerMessageTypes.AppData) {\n                    resolve({ client: connection, data: response });\n                }\n                else {\n                    reject(response);\n                }\n            };\n            connection.ws.send(JSON.stringify(request));\n        };\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}