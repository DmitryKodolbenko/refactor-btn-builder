{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newSecureWords = void 0;\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst wordlist_1 = require(\"./wordlist\");\nasync function newSecureWords() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n  let words = [];\n  for (let i = 0; i < size; i++) {\n    words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);\n  }\n  return words;\n}\nexports.newSecureWords = newSecureWords;","map":{"version":3,"names":["Object","defineProperty","exports","value","newSecureWords","getSecureRandom_1","require","wordlist_1","size","words","i","push","wordlist","getSecureRandomNumber","length"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/node_modules/ton-crypto/dist/passwords/newSecureWords.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.newSecureWords = void 0;\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst wordlist_1 = require(\"./wordlist\");\nasync function newSecureWords(size = 6) {\n    let words = [];\n    for (let i = 0; i < size; i++) {\n        words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);\n    }\n    return words;\n}\nexports.newSecureWords = newSecureWords;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC,eAAeF,cAAc,GAAW;EAAA,IAAVI,IAAI,uEAAG,CAAC;EAClC,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC3BD,KAAK,CAACE,IAAI,CAACJ,UAAU,CAACK,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAEP,iBAAiB,CAACQ,qBAAqB,EAAE,CAAC,EAAEN,UAAU,CAACK,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC;EACtH;EACA,OAAOL,KAAK;AAChB;AACAP,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script"}