{"ast":null,"code":"/**\n * fork of /node_modules/near-api-js/lib/utils/format.js\n **/\n\nimport BN from \"bn.js\";\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nconst USN_NOMINATION_EXP = 18;\n\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\nfor (let i = 0, offset = new BN(5); i < USN_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n  ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatUsnAmount(balance) {\n  let fracDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USN_NOMINATION_EXP;\n  const balanceBN = new BN(balance, 10);\n  if (fracDigits !== USN_NOMINATION_EXP) {\n    // Adjust balance for rounding at given number of digits\n    const roundingExp = USN_NOMINATION_EXP - fracDigits - 1;\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - USN_NOMINATION_EXP) || '0';\n  const fractionStr = balance.substring(balance.length - USN_NOMINATION_EXP).padStart(USN_NOMINATION_EXP, '0').substring(0, fracDigits);\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\n\n/**\n * Convert human readable USN amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in USN.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseUsnAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split('.');\n  const wholePart = split[0];\n  const fracPart = split[1] || '';\n  if (split.length > 2 || fracPart.length > USN_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as USN amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(USN_NOMINATION_EXP, '0'));\n}\nexport { parseUsnAmount, formatUsnAmount, USN_NOMINATION_EXP };\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, '');\n  if (value === '') {\n    return '0';\n  }\n  return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n}","map":{"version":3,"names":["BN","USN_NOMINATION_EXP","ROUNDING_OFFSETS","BN10","i","offset","mul","formatUsnAmount","balance","fracDigits","balanceBN","roundingExp","iadd","toString","wholeStr","substring","length","fractionStr","padStart","trimTrailingZeroes","formatWithCommas","parseUsnAmount","amt","cleanupAmount","split","wholePart","fracPart","Error","trimLeadingZeroes","padEnd","amount","replace","trim","value","pattern","test"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/formatUsn.js"],"sourcesContent":["/**\n * fork of /node_modules/near-api-js/lib/utils/format.js\n **/\n\nimport BN from \"bn.js\";\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nconst USN_NOMINATION_EXP = 18;\n\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new BN(10);\nfor (let i = 0, offset = new BN(5); i < USN_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n  ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatUsnAmount(balance, fracDigits = USN_NOMINATION_EXP) {\n  const balanceBN = new BN(balance, 10);\n  if (fracDigits !== USN_NOMINATION_EXP) {\n    // Adjust balance for rounding at given number of digits\n    const roundingExp = USN_NOMINATION_EXP - fracDigits - 1;\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - USN_NOMINATION_EXP) || '0';\n  const fractionStr = balance.substring(balance.length - USN_NOMINATION_EXP)\n    .padStart(USN_NOMINATION_EXP, '0').substring(0, fracDigits);\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\n\n/**\n * Convert human readable USN amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in USN.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseUsnAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split('.');\n  const wholePart = split[0];\n  const fracPart = split[1] || '';\n  if (split.length > 2 || fracPart.length > USN_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as USN amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(USN_NOMINATION_EXP, '0'));\n}\nexport { parseUsnAmount, formatUsnAmount, USN_NOMINATION_EXP };\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, '');\n  if (value === '') {\n    return '0';\n  }\n  return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}