{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\nexports.StringRegex = {\n  digitsRegex: /\\b\\d+\\b/gi\n};\nconst notNullEmpty = str => {\n  return str != null && str.length > 0;\n};\nexports.notNullEmpty = notNullEmpty;\nconst nullEmpty = str => {\n  return !(0, exports.notNullEmpty)(str);\n};\nexports.nullEmpty = nullEmpty;\nconst firstNotNullEmpty = function () {\n  for (var _len = arguments.length, strItems = new Array(_len), _key = 0; _key < _len; _key++) {\n    strItems[_key] = arguments[_key];\n  }\n  for (const item of strItems) {\n    if ((0, exports.notNullEmpty)(item)) {\n      return item;\n    }\n  }\n  return undefined;\n};\nexports.firstNotNullEmpty = firstNotNullEmpty;\nconst anyNullEmpty = strs => {\n  for (const str of strs) {\n    if ((0, exports.nullEmpty)(str)) {\n      return true;\n    }\n  }\n  return false;\n};\nconst safeAppend = function (str, value) {\n  let ifEmptyValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, exports.notNullEmpty)(str) ? str + value : ifEmptyValue != null ? ifEmptyValue : value;\n};\nexports.safeAppend = safeAppend;\nclass BetterStringArray extends Array {\n  pushIfNotNullEmpty(str) {\n    if ((0, exports.notNullEmpty)(str)) {\n      this.push(str);\n    }\n  }\n}\nexports.BetterStringArray = BetterStringArray;\nfunction createPadder(padCharacter, desiredTotalLength) {\n  let padFromRight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return input => {\n    return pad(input, padCharacter, desiredTotalLength, padFromRight);\n  };\n}\nexports.createPadder = createPadder;\nfunction pad(input, padCharacter, desiredTotalLength) {\n  let padFromRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const difference = desiredTotalLength - `${input}`.length;\n  if (difference > 0) {\n    const padding = new Array(difference).fill(padCharacter);\n    if (padFromRight) {\n      return `${input}${padding.join(\"\")}`;\n    }\n    return `${padding.join(\"\")}${input}`;\n  }\n  return `${input}`;\n}\nexports.pad = pad;\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\nconst regexSingleDash = new RegExp(\"-\", \"g\");\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nconst convertToSlug = function (text) {\n  let {\n    slugDivider = \"-\",\n    letterCase = \"LOWER\",\n    normalize = true,\n    excludeCharacters = []\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!text || text.length === 0) {\n    return \"\";\n  }\n  let resp = text.toString();\n  if (normalize) {\n    resp = resp.normalize(\"NFD\");\n  }\n  if (letterCase === \"LOWER\") {\n    resp = resp.toLowerCase();\n  } else if (letterCase === \"UPPER\") {\n    resp = resp.toUpperCase();\n  }\n  return resp.replace(regexAllSpaces, \"-\") // Replace spaces with -\n  .replace(excludeCharacters.length > 0 ? new RegExp(`[^\\\\w\\\\-${excludeCharacters.map(c => escapeRegExp(c)).join(\"\")}]+`, \"g\") : regexRemoveNonWord, \"\") // Remove all non-word chars\n  .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\n  .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\n  .replace(regexFirstDash, \"\") // Trim - from start of text\n  .replace(regexLastDash, \"\") // Trim - from end of text\n  .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\n  /*return resp\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/_/g, \"-\") // replace underscores with dashes\r\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n    .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\n};\n\nexports.convertToSlug = convertToSlug;\n// Replace spaces with underscores and make letters UPPERCASE:\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\nconst stringToConstantStyledString = input => {\n  return (0, exports.convertToSlug)(input, {\n    normalize: true,\n    slugDivider: \"_\",\n    letterCase: \"UPPER\"\n  });\n  // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\n};\n\nexports.stringToConstantStyledString = stringToConstantStyledString;\nconst reverse = input => {\n  let r = ``;\n  for (const char of input) {\n    r = `${char}${r}`;\n  }\n  return r;\n};\nfunction isUriEncoded(uri) {\n  uri = uri || \"\";\n  return uri !== decodeURIComponent(uri);\n}\nconst decodeUriFully = uri => {\n  let failSafe = 0;\n  while (isUriEncoded(uri)) {\n    failSafe += 1;\n    uri = decodeURIComponent(uri);\n    if (failSafe > 20) {\n      throw new Error(`String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.`);\n    }\n  }\n  return uri;\n};\nconst removeAndTrim = function (input, removeText) {\n  let {\n    spaceAware = true,\n    insideWords = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let text = `${input}`;\n  for (const rem of removeText) {\n    if (spaceAware) {\n      if (!insideWords) {\n        if (text.indexOf(` ${rem} `) >= 0) {\n          text = text.replace(` ${rem} `, \" \");\n        } else {\n          if (text.startsWith(`${rem} `)) {\n            text = text.substring(rem.length + 1);\n          }\n          if (text.endsWith(` ${rem}`)) {\n            text = text.substring(0, text.length - (rem.length + 1));\n          }\n        }\n      } else {\n        const checkNew = [new RegExp(`\\\\s${rem}\\\\s`, \"g\"), new RegExp(`\\\\s${rem}`, \"g\"), new RegExp(`${rem}\\\\s`, \"g\")];\n        for (const remNew of checkNew) {\n          if (remNew.test(text)) {\n            console.log(`Replacing \"${remNew}\" in \"${text}\"`);\n            text = text.replace(remNew, \" \");\n            console.log(`Text after: \"${text}\"`);\n          }\n        }\n      }\n    } else {\n      if (text.indexOf(rem) >= 0) {\n        text = text.replace(rem, \"\");\n      }\n    }\n  }\n  return text.trim();\n};\nfunction sortCompareStrings(a, b) {\n  const aa = a.toLowerCase();\n  const bb = b.toLowerCase();\n  if (aa < bb)\n    //sort string ascending\n    return -1;\n  if (aa > bb) return 1;\n  return 0; //default return value (no sorting)\n}\n\nfunction comparePure(a, b) {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\nfunction onlyNotNullEmpty(strArray) {\n  let notNullEmptyArray = [];\n  for (const str of strArray) {\n    if ((0, exports.notNullEmpty)(str)) {\n      notNullEmptyArray.push(str);\n    }\n  }\n  return notNullEmptyArray;\n}\nconst joinIntoUrl = function () {\n  for (var _len2 = arguments.length, routes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    routes[_key2] = arguments[_key2];\n  }\n  return routes.filter(v => v).map((v, i, arr) => {\n    const isNotFirst = i !== 0;\n    const isNotLast = i !== arr.length - 1;\n    if (isNotFirst) {\n      v = v.startsWith(\"/\") ? v.slice(1) : v;\n    }\n    if (isNotLast) {\n      v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\n    }\n    return v;\n  }).join(\"/\");\n};\nconst getUrlWithBaseUrl = (baseUrl, route) => {\n  const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\n  if (isRouteCompleted) {\n    return route;\n  }\n  return joinIntoUrl(baseUrl, route);\n};\nconst isHashId = accountId => {\n  const hash = accountId.match(/^[a-zA-Z0-9]+$/);\n  return Boolean(hash);\n  // accountId.match(/^[a-zA-Z0-9]{64}$/)\n};\n\nexports.StringUtils = {\n  isUriEncoded,\n  decodeUriFully,\n  StringRegex: exports.StringRegex,\n  reverse,\n  notNullEmpty: exports.notNullEmpty,\n  nullEmpty: exports.nullEmpty,\n  anyNullEmpty,\n  safeAppend: exports.safeAppend,\n  createPadder,\n  pad,\n  convertToSlug: exports.convertToSlug,\n  stringToConstantStyledString: exports.stringToConstantStyledString,\n  removeAndTrim,\n  sortCompareStrings,\n  comparePure,\n  onlyNotNullEmpty,\n  firstNotNullEmpty: exports.firstNotNullEmpty,\n  joinIntoUrl,\n  getUrlWithBaseUrl,\n  isHashId\n};","map":{"version":3,"sources":["meteor-common/src/utils/StringUtils.ts"],"names":[],"mappings":"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","sourceRoot":"./src/","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\r\nexports.StringRegex = {\r\n    digitsRegex: /\\b\\d+\\b/gi,\r\n};\r\nconst notNullEmpty = (str) => {\r\n    return str != null && str.length > 0;\r\n};\r\nexports.notNullEmpty = notNullEmpty;\r\nconst nullEmpty = (str) => {\r\n    return !(0, exports.notNullEmpty)(str);\r\n};\r\nexports.nullEmpty = nullEmpty;\r\nconst firstNotNullEmpty = (...strItems) => {\r\n    for (const item of strItems) {\r\n        if ((0, exports.notNullEmpty)(item)) {\r\n            return item;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nexports.firstNotNullEmpty = firstNotNullEmpty;\r\nconst anyNullEmpty = (strs) => {\r\n    for (const str of strs) {\r\n        if ((0, exports.nullEmpty)(str)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nconst safeAppend = (str, value, ifEmptyValue = null) => {\r\n    return (0, exports.notNullEmpty)(str) ? str + value : ifEmptyValue != null ? ifEmptyValue : value;\r\n};\r\nexports.safeAppend = safeAppend;\r\nclass BetterStringArray extends Array {\r\n    pushIfNotNullEmpty(str) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            this.push(str);\r\n        }\r\n    }\r\n}\r\nexports.BetterStringArray = BetterStringArray;\r\nfunction createPadder(padCharacter, desiredTotalLength, padFromRight = false) {\r\n    return (input) => {\r\n        return pad(input, padCharacter, desiredTotalLength, padFromRight);\r\n    };\r\n}\r\nexports.createPadder = createPadder;\r\nfunction pad(input, padCharacter, desiredTotalLength, padFromRight = false) {\r\n    const difference = desiredTotalLength - `${input}`.length;\r\n    if (difference > 0) {\r\n        const padding = new Array(difference).fill(padCharacter);\r\n        if (padFromRight) {\r\n            return `${input}${padding.join(\"\")}`;\r\n        }\r\n        return `${padding.join(\"\")}${input}`;\r\n    }\r\n    return `${input}`;\r\n}\r\nexports.pad = pad;\r\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\r\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\r\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\r\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\r\nconst regexSingleDash = new RegExp(\"-\", \"g\");\r\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\r\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\nconst convertToSlug = (text, { slugDivider = \"-\", letterCase = \"LOWER\", normalize = true, excludeCharacters = [] } = {}) => {\r\n    if (!text || text.length === 0) {\r\n        return \"\";\r\n    }\r\n    let resp = text.toString();\r\n    if (normalize) {\r\n        resp = resp.normalize(\"NFD\");\r\n    }\r\n    if (letterCase === \"LOWER\") {\r\n        resp = resp.toLowerCase();\r\n    }\r\n    else if (letterCase === \"UPPER\") {\r\n        resp = resp.toUpperCase();\r\n    }\r\n    return resp\r\n        .replace(regexAllSpaces, \"-\") // Replace spaces with -\r\n        .replace(excludeCharacters.length > 0\r\n        ? new RegExp(`[^\\\\w\\\\-${excludeCharacters.map((c) => escapeRegExp(c)).join(\"\")}]+`, \"g\")\r\n        : regexRemoveNonWord, \"\") // Remove all non-word chars\r\n        .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\r\n        .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\r\n        .replace(regexFirstDash, \"\") // Trim - from start of text\r\n        .replace(regexLastDash, \"\") // Trim - from end of text\r\n        .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\r\n    /*return resp\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/_/g, \"-\") // replace underscores with dashes\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\") // Trim - from end of text\r\n      .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\r\n};\r\nexports.convertToSlug = convertToSlug;\r\n// Replace spaces with underscores and make letters UPPERCASE:\r\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\r\nconst stringToConstantStyledString = (input) => {\r\n    return (0, exports.convertToSlug)(input, {\r\n        normalize: true,\r\n        slugDivider: \"_\",\r\n        letterCase: \"UPPER\",\r\n    });\r\n    // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\r\n};\r\nexports.stringToConstantStyledString = stringToConstantStyledString;\r\nconst reverse = (input) => {\r\n    let r = ``;\r\n    for (const char of input) {\r\n        r = `${char}${r}`;\r\n    }\r\n    return r;\r\n};\r\nfunction isUriEncoded(uri) {\r\n    uri = uri || \"\";\r\n    return uri !== decodeURIComponent(uri);\r\n}\r\nconst decodeUriFully = (uri) => {\r\n    let failSafe = 0;\r\n    while (isUriEncoded(uri)) {\r\n        failSafe += 1;\r\n        uri = decodeURIComponent(uri);\r\n        if (failSafe > 20) {\r\n            throw new Error(`String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.`);\r\n        }\r\n    }\r\n    return uri;\r\n};\r\nconst removeAndTrim = (input, removeText, { spaceAware = true, insideWords = false } = {}) => {\r\n    let text = `${input}`;\r\n    for (const rem of removeText) {\r\n        if (spaceAware) {\r\n            if (!insideWords) {\r\n                if (text.indexOf(` ${rem} `) >= 0) {\r\n                    text = text.replace(` ${rem} `, \" \");\r\n                }\r\n                else {\r\n                    if (text.startsWith(`${rem} `)) {\r\n                        text = text.substring(rem.length + 1);\r\n                    }\r\n                    if (text.endsWith(` ${rem}`)) {\r\n                        text = text.substring(0, text.length - (rem.length + 1));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const checkNew = [new RegExp(`\\\\s${rem}\\\\s`, \"g\"), new RegExp(`\\\\s${rem}`, \"g\"), new RegExp(`${rem}\\\\s`, \"g\")];\r\n                for (const remNew of checkNew) {\r\n                    if (remNew.test(text)) {\r\n                        console.log(`Replacing \"${remNew}\" in \"${text}\"`);\r\n                        text = text.replace(remNew, \" \");\r\n                        console.log(`Text after: \"${text}\"`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (text.indexOf(rem) >= 0) {\r\n                text = text.replace(rem, \"\");\r\n            }\r\n        }\r\n    }\r\n    return text.trim();\r\n};\r\nfunction sortCompareStrings(a, b) {\r\n    const aa = a.toLowerCase();\r\n    const bb = b.toLowerCase();\r\n    if (aa < bb)\r\n        //sort string ascending\r\n        return -1;\r\n    if (aa > bb)\r\n        return 1;\r\n    return 0; //default return value (no sorting)\r\n}\r\nfunction comparePure(a, b) {\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\nfunction onlyNotNullEmpty(strArray) {\r\n    let notNullEmptyArray = [];\r\n    for (const str of strArray) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            notNullEmptyArray.push(str);\r\n        }\r\n    }\r\n    return notNullEmptyArray;\r\n}\r\nconst joinIntoUrl = (...routes) => {\r\n    return routes.filter(v => v).map((v, i, arr) => {\r\n        const isNotFirst = i !== 0;\r\n        const isNotLast = i !== arr.length - 1;\r\n        if (isNotFirst) {\r\n            v = v.startsWith(\"/\") ? v.slice(1) : v;\r\n        }\r\n        if (isNotLast) {\r\n            v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\r\n        }\r\n        return v;\r\n    }).join(\"/\");\r\n};\r\nconst getUrlWithBaseUrl = (baseUrl, route) => {\r\n    const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\r\n    if (isRouteCompleted) {\r\n        return route;\r\n    }\r\n    return joinIntoUrl(baseUrl, route);\r\n};\r\nconst isHashId = (accountId) => {\r\n    const hash = accountId.match(/^[a-zA-Z0-9]+$/);\r\n    return Boolean(hash);\r\n    // accountId.match(/^[a-zA-Z0-9]{64}$/)\r\n};\r\nexports.StringUtils = {\r\n    isUriEncoded,\r\n    decodeUriFully,\r\n    StringRegex: exports.StringRegex,\r\n    reverse,\r\n    notNullEmpty: exports.notNullEmpty,\r\n    nullEmpty: exports.nullEmpty,\r\n    anyNullEmpty,\r\n    safeAppend: exports.safeAppend,\r\n    createPadder,\r\n    pad,\r\n    convertToSlug: exports.convertToSlug,\r\n    stringToConstantStyledString: exports.stringToConstantStyledString,\r\n    removeAndTrim,\r\n    sortCompareStrings,\r\n    comparePure,\r\n    onlyNotNullEmpty,\r\n    firstNotNullEmpty: exports.firstNotNullEmpty,\r\n    joinIntoUrl,\r\n    getUrlWithBaseUrl,\r\n    isHashId,\r\n};\r\n//# sourceMappingURL=StringUtils.js.map"]},"metadata":{},"sourceType":"script"}