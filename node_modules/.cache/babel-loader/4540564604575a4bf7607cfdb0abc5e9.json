{"ast":null,"code":"'use strict';\n\n//Modules\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar https = require('https');\nvar querystring = require('querystring');\n\n//Helpers\nvar Utils = require('./helpers/utilities');\nvar Constants = require('./helpers/constants');\nvar ReturnObject = require('./helpers/ReturnObject');\n\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\nvar CoinGecko = /*#__PURE__*/function () {\n  function CoinGecko() {\n    _classCallCheck(this, CoinGecko);\n  }\n  _createClass(CoinGecko, [{\n    key: \"ping\",\n    value:\n    /**\n     * @description Check API server status\n     * @function ping\n     * @returns {ReturnObject}\n     */\n    function ping() {\n      var path = \"/ping\";\n      return this._request(path);\n    }\n  }, {\n    key: \"global\",\n    value:\n    /**\n     * @description Get cryptocurrency global data\n     * @function global\n     * @returns {ReturnObject}\n     */\n    function global() {\n      var path = \"/global\";\n      return this._request(path);\n    }\n  }, {\n    key: \"coins\",\n    get:\n    /**\n     * @description Calls related to coins\n     */\n    function get() {\n      var _this = this;\n      var pathPrefix = 'coins';\n      return {\n        /**\n         * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n         * @function coins.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix);\n          return _this._request(path, params);\n        },\n        /**\n         * @description Use this to obtain all the coins’ id in order to make API calls\n         * @function coins.list()\n         * @returns {ReturnObject}\n         */\n        list: function list() {\n          var path = \"/\".concat(pathPrefix, \"/list\");\n          return _this._request(path);\n        },\n        /**\n         * @description Use this to obtain all the coins market data (price, market cap, volume)\n         * @function coins.markets()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n         * @param {array|string} params.ids - List of coin id to filter if you want specific results\n         * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n         * @returns {ReturnObject}\n         */\n        markets: function markets() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix, \"/markets\");\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n\n          //Check the params.ids\n          //If is string, ok. If is array, convert to string\n          if (Utils.isArray(params['ids'])) {\n            params.ids = params.ids.join(',');\n          }\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n         * @function coins.fetch()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {boolean} params.tickers [default: true] - Include ticker data\n         * @param {boolean} params.market_data [default: true] - Include market data\n         * @param {boolean} params.community_data [default: true] - Include community data\n         * @param {boolean} params.developer_data [default: true] - Include developer data\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n         * @returns {ReturnObject}\n         */\n        fetch: function fetch(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId);\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get coin tickers (paginated to 100 items).\n         * @function coins.fetchTickers()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.page - Page through results\n         * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n         * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n          //Convert array to string\n          if (Utils.isArray(params['exchange_ids'])) {\n            params.exchange_ids = params.exchange_ids.join(',');\n          }\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/tickers\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get historical data (name, price, market, stats) at a given date for a coin\n         * @function coins.fetchHistory()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n         * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n         * @returns {ReturnObject}\n         */\n        fetchHistory: function fetchHistory(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.date, set to default today/now\n          if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/history\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n         * @function coins.fetchMarketChart()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n         * @returns {ReturnObject}\n         */\n        fetchMarketChart: function fetchMarketChart(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n\n          //If no params.days, set to default: 1\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/market_chart\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n         *   Minutely data will be used for duration within 1 day.\n         *   Hourly data will be used for duration between 1 day and 90 days.\n         *   Daily data will be used for duration above 90 days.\n         * @function coins.fetchMarketChartRange()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n         * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n         * @returns {ReturnObject}\n         */\n        fetchMarketChartRange: function fetchMarketChartRange(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n          if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n          if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/market_chart/range\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get status updates for a given coin\n         * @function coins.fetchStatusUpdates()\n         * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        fetchStatusUpdates: function fetchStatusUpdates(coinId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have coinId\n          if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(coinId, \"/status_updates\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get coin info from contract address\n         * @function coins.fetchCoinContractInfo()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractInfo: function fetchCoinContractInfo(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress);\n          return _this._request(path);\n        },\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n         * @function coins.fetchCoinContractMarketChart()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractMarketChart: function fetchCoinContractMarketChart(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n\n          //If no params.days, set to default: 1\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress, \"/market_chart\");\n          return _this._request(path, params);\n        },\n        /**\n         * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n         * @function coins.fetchCoinContractMarketChartRange()\n         * @param {object} contractAddress - (Required) Token’s contract address\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n         * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n         * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n         * @returns {ReturnObject}\n         */\n        fetchCoinContractMarketChartRange: function fetchCoinContractMarketChartRange(contractAddress) {\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          //Must have contractAddress, assetPlatform\n          if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n            params.vs_currency = 'usd';\n          }\n\n          //If no params.days, set to default: 1\n          if (params['days'] == undefined) {\n            params.days = 1;\n          }\n          var path = \"/\".concat(pathPrefix, \"/\").concat(assetPlatform, \"/contract/\").concat(contractAddress, \"/market_chart/range\");\n          return _this._request(path, params);\n        }\n      };\n    }\n  }, {\n    key: \"exchanges\",\n    get:\n    /**\n     * @description Calls related to exchanges\n     */\n    function get() {\n      var _this2 = this;\n      var pathPrefix = 'exchanges';\n      return {\n        /**\n         * @description List all exchanges\n         * @function exchanges.all()\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var path = \"/\".concat(pathPrefix);\n          return _this2._request(path);\n        },\n        /**\n         * @description List all supported markets id and name\n         * @function exchanges.list()\n         * @returns {ReturnObject}\n         */\n        list: function list() {\n          var path = \"/\".concat(pathPrefix, \"/list\");\n          return _this2._request(path);\n        },\n        /**\n         * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n         * @function exchanges.fetch()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @returns {ReturnObject}\n         */\n        fetch: function fetch(exchangeId) {\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId);\n          return _this2._request(path);\n        },\n        /**\n         * @description Get tickers for a given exchange\n         * @function exchanges.fetchTickers()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.page - Page through results\n         * @param {number} params.coin_ids - Filter tickers by coin_ids\n         * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n          //Convert array to string\n          if (Utils.isArray(params['coin_ids'])) {\n            params.coin_ids = params.coin_ids.join(',');\n          }\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/tickers\");\n          return _this2._request(path, params);\n        },\n        /**\n         * @description Get status updates for a given exchange\n         * @function exchanges.fetchStatusUpdates()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        fetchStatusUpdates: function fetchStatusUpdates(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/status_updates\");\n          return _this2._request(path, params);\n        },\n        /**\n         * @description Get volume chart data for a given exchange, returned in BTC\n         * @function exchanges.fetchVolumeChart()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n         * @returns {ReturnObject}\n         */\n        fetchVolumeChart: function fetchVolumeChart(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(exchangeId, \"/volume_chart\");\n          return _this2._request(path, params);\n        }\n      };\n    }\n  }, {\n    key: \"statusUpdates\",\n    get:\n    /**\n     * @description Calls related to status updates\n     */\n    function get() {\n      var _this3 = this;\n      return {\n        /**\n         * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n         * @function statusUpdates.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n         * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page through results\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/status_updates\";\n          return _this3._request(path, params);\n        }\n      };\n    }\n  }, {\n    key: \"events\",\n    get:\n    /**\n     * @description Calls related to events\n     */\n    function get() {\n      var _this4 = this;\n      var pathPrefix = 'events';\n      return {\n        /**\n         * @description Get events, paginated by 100\n         * @function events.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n         * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n         * @param {number} params.page - Page of results (paginated by 100)\n         * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n         * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n         * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix);\n          return _this4._request(path, params);\n        },\n        /**\n         * @description Get list of event countries\n         * @function events.fetchCountries()\n         * @returns {ReturnObject}\n         */\n        fetchCountries: function fetchCountries() {\n          var path = \"/\".concat(pathPrefix, \"/countries\");\n          return _this4._request(path);\n        },\n        /**\n         * @description Get list of event types\n         * @function events.fetchTypes()\n         * @returns {ReturnObject}\n         */\n        fetchTypes: function fetchTypes() {\n          var path = \"/\".concat(pathPrefix, \"/types\");\n          return _this4._request(path);\n        }\n      };\n    }\n  }, {\n    key: \"exchangeRates\",\n    get:\n    /**\n     * @description Calls related to exchange rates\n     */\n    function get() {\n      var _this5 = this;\n      return {\n        /**\n         * @description Get BTC-to-Currency exchange rates\n         * @function exchangeRates.all()\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var path = \"/exchange_rates\";\n          return _this5._request(path);\n        }\n      };\n    }\n  }, {\n    key: \"simple\",\n    get:\n    /**\n     * @description Calls related to \"simple\" endpoints\n     */\n    function get() {\n      var _this6 = this;\n      return {\n        /**\n         * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n         * @function simple.price()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n         * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n         * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n         * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n         * @returns {ReturnObject}\n         */\n        price: function price() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //Check the params.vs_currencies\n          //If is string, ok. If is array, convert to string\n          if (Utils.isArray(params['vs_currencies'])) {\n            params.vs_currencies = params.vs_currencies.join(',');\n          }\n\n          //If no params.vs_currency, set to default: 'usd'\n          if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n            params.vs_currencies = 'usd';\n          }\n\n          //Check the params.ids\n          //If is string, ok. If is array, convert to string\n          if (Utils.isArray(params['ids'])) {\n            params.ids = params.ids.join(',');\n          }\n\n          //Must have params.ids\n          if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.');\n\n          //\n\n          var path = \"/simple/price\";\n          return _this6._request(path, params);\n        },\n        /**\n         * @description Get list of supported vs/comparisons currencies\n         * @function simple.supportedVsCurrencies()\n         * @returns {ReturnObject}\n         */\n        supportedVsCurrencies: function supportedVsCurrencies() {\n          var path = \"/simple/supported_vs_currencies\";\n          return _this6._request(path);\n        },\n        /**\n         * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n         * @function simple.fetchTokenPrice()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n         * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n         * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n         * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n         * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n         * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n         * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n         * @returns {ReturnObject}\n         */\n        fetchTokenPrice: function fetchTokenPrice() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n          //Must be object\n          if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n          //Must have assetPlatform\n          if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n          //Must have contract_addresses, vs_currencies\n          if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n          if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object');\n\n          //If are arrays, convert to string\n          if (Utils.isArray(params['contract_addresses'])) {\n            params.contract_addresses = params.contract_addresses.join(',');\n          }\n          if (Utils.isArray(params['vs_currencies'])) {\n            params.vs_currencies = params.vs_currencies.join(',');\n          }\n          var path = \"/simple/token_price/\".concat(assetPlatform);\n          return _this6._request(path, params);\n        }\n      };\n    }\n  }, {\n    key: \"finance\",\n    get:\n    /**\n     * @description Calls related to finance endpoints\n     */\n    function get() {\n      var _this7 = this;\n      return {\n        /**\n         * @description List all finance platforms\n         * @function finance.fetchPlatforms()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results (paginated to 100 by default)\n         * @returns {ReturnObject}\n         */\n        fetchPlatforms: function fetchPlatforms() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/finance_platforms\";\n          return _this7._request(path, params);\n        },\n        /**\n         * @description List all finance products\n         * @function finance.fetchProducts()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results (paginated to 100 by default)\n         * @param {string} params.start_at - Start date of the financial products\n         * @param {string} params.end_at - End date of the financial products\n         * @returns {ReturnObject}\n         */\n        fetchProducts: function fetchProducts() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/finance_products\";\n          return _this7._request(path, params);\n        }\n      };\n    }\n  }, {\n    key: \"indexes\",\n    get:\n    /**\n     * @description Calls related to index endpoints\n     */\n    function get() {\n      var _this8 = this;\n      var pathPrefix = 'indexes';\n      return {\n        /**\n         * @description List all market indexes\n         * @function indexes.all()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results\n         * @returns {ReturnObject}\n         */\n        all: function all() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix);\n          return _this8._request(path, params);\n        },\n        /**\n         * @description Fetch market index by id\n         * @function indexes.fetch()\n         * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n         * @returns {ReturnObject}\n         */\n        fetch: function fetch(indexId) {\n          //Must have indexId\n          if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/\").concat(indexId);\n          return _this8._request(path);\n        },\n        /**\n         * @description List market indexes id and name\n         * @function indexes.list()\n         * @returns {ReturnObject}\n         */\n        list: function list() {\n          var path = \"/\".concat(pathPrefix, \"/list\");\n          return _this8._request(path);\n        }\n      };\n    }\n  }, {\n    key: \"derivatives\",\n    get:\n    /**\n     * @description Calls related to derivative endpoints\n     */\n    function get() {\n      var _this9 = this;\n      var pathPrefix = 'derivatives';\n      return {\n        /**\n         * @description List all derivative tickers\n         * @function derivatives.fetchTickers()\n         * @returns {ReturnObject}\n         */\n        fetchTickers: function fetchTickers() {\n          var path = \"/\".concat(pathPrefix);\n          return _this9._request(path);\n        },\n        /**\n         * @description List all derivative exchanges\n         * @function derivatives.allExchanges()\n         * @param {object} params - Parameters to pass through to the request\n         * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n         * @param {number} params.per_page - Total results per page\n         * @param {number} params.page - Page of results\n         * @returns {ReturnObject}\n         */\n        allExchanges: function allExchanges() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var path = \"/\".concat(pathPrefix, \"/exchanges\");\n          return _this9._request(path, params);\n        },\n        /**\n         * @description Show derivative exchange data\n         * @function derivatives.fetchExchange()\n         * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n         * @param {object} params - Parameters to pass through to the request\n         * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n         * @returns {ReturnObject}\n         */\n        fetchExchange: function fetchExchange(exchangeId) {\n          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          //Must have exchangeId\n          if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n          var path = \"/\".concat(pathPrefix, \"/exchanges/\").concat(exchangeId);\n          return _this9._request(path, params);\n        },\n        /**\n         * @description List all derivative exchanges name and identifier\n         * @function derivatives.listExchanges()\n         * @returns {ReturnObject}\n         */\n        listExchanges: function listExchanges() {\n          var path = \"/\".concat(pathPrefix, \"/exchanges/list\");\n          return _this9._request(path);\n        }\n      };\n    }\n  }, {\n    key: \"_buildRequestOptions\",\n    value:\n    /**\n     * @description Build options for https.request\n     * @function _buildRequestOptions\n     * @protected\n     * @param {string} path - Relative path for API\n     * @param {object} params - Object representing query strings for url parameters\n     * @returns {Object} - {path, method, host, port} Options for request\n     */\n    function _buildRequestOptions(path, params) {\n      //Stringify object params if exist\n      if (Utils.isObject(params)) params = querystring.stringify(params);else params = undefined;\n\n      //Make relative path\n      //Check if has params, append accordingly\n      if (params == undefined) path = \"/api/v\".concat(Constants.API_VERSION).concat(path);else path = \"/api/v\".concat(Constants.API_VERSION).concat(path, \"?\").concat(params);\n\n      //Return options\n      return {\n        path: path,\n        method: 'GET',\n        host: Constants.HOST,\n        port: 443,\n        timeout: CoinGecko.TIMEOUT\n      };\n    }\n  }, {\n    key: \"_request\",\n    value:\n    /**\n     * @description Perform https request\n     * @function _request\n     * @protected\n     * @param {string} path - Relative path for API\n     * @param {object} params - Object representing query strings for url parameters\n     * @returns {Promise} Body of https request data results\n     */\n    function _request(path, params) {\n      var options = this._buildRequestOptions(path, params);\n      return new Promise(function (resolve, reject) {\n        //Perform request\n        var req = https.request(options, function (res) {\n          var body = [];\n\n          //Set body on data\n          res.on('data', function (chunk) {\n            body.push(chunk);\n          });\n\n          //On end, end the Promise\n          res.on('end', function () {\n            try {\n              body = Buffer.concat(body);\n              body = body.toString();\n\n              //Check if page is returned instead of JSON\n              if (body.startsWith('<!DOCTYPE html>')) {\n                Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n              } else if (body.startsWith('Throttled')) {\n                Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n              }\n\n              //Attempt to parse\n              body = JSON.parse(body);\n            } catch (error) {\n              reject(error);\n            }\n            ;\n\n            //Create return object\n            resolve(ReturnObject(!(res.statusCode < 200 || res.statusCode >= 300), res.statusMessage, res.statusCode, body));\n          });\n        });\n\n        //On error, reject the Promise\n        req.on('error', function (error) {\n          return reject(error);\n        });\n\n        //On timeout, reject the Promise\n        req.on('timeout', function () {\n          req.abort();\n          reject(new Error(\"CoinGecko API request timed out. Current timeout is: \".concat(CoinGecko.TIMEOUT, \" milliseconds\")));\n        });\n\n        //End request\n        req.end();\n      });\n    }\n  }]);\n  return CoinGecko;\n}();\n;\n\n//Set Constants\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT;\n\n//\n\nmodule.exports = exports = CoinGecko;","map":{"version":3,"names":["https","require","querystring","Utils","Constants","ReturnObject","CoinGecko","path","_request","pathPrefix","all","params","list","markets","isObject","_WARN_","isString","isStringEmpty","vs_currency","isArray","ids","join","fetch","coinId","fetchTickers","exchange_ids","fetchHistory","fetchMarketChart","undefined","days","fetchMarketChartRange","isNumber","fetchStatusUpdates","fetchCoinContractInfo","contractAddress","assetPlatform","fetchCoinContractMarketChart","fetchCoinContractMarketChartRange","exchangeId","coin_ids","fetchVolumeChart","fetchCountries","fetchTypes","price","vs_currencies","supportedVsCurrencies","fetchTokenPrice","contract_addresses","fetchPlatforms","fetchProducts","indexId","allExchanges","fetchExchange","listExchanges","stringify","API_VERSION","method","host","HOST","port","timeout","TIMEOUT","options","_buildRequestOptions","Promise","resolve","reject","req","request","res","body","on","chunk","push","Buffer","concat","toString","startsWith","JSON","parse","error","statusCode","statusMessage","abort","Error","end","REQUESTS_PER_SECOND","ORDER","STATUS_UPDATE_CATEGORY","STATUS_UPDATE_PROJECT_TYPE","EVENT_TYPE","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/coingecko-api/lib/CoinGecko.js"],"sourcesContent":["'use strict';\n\n//Modules\nconst https = require('https');\nconst querystring = require('querystring');\n\n//Helpers\nconst Utils = require('./helpers/utilities');\nconst Constants = require('./helpers/constants');\nconst ReturnObject = require('./helpers/ReturnObject');\n\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\nclass CoinGecko {\n\n  /**\n   * @description Check API server status\n   * @function ping\n   * @returns {ReturnObject}\n   */\n  ping() {\n    const path = `/ping`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Get cryptocurrency global data\n   * @function global\n   * @returns {ReturnObject}\n   */\n  global() {\n    const path = `/global`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Calls related to coins\n   */\n  get coins() {\n    const pathPrefix = 'coins';\n\n    return {\n\n      /**\n       * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n       * @function coins.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Use this to obtain all the coins’ id in order to make API calls\n       * @function coins.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Use this to obtain all the coins market data (price, market cap, volume)\n       * @function coins.markets()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n       * @param {array|string} params.ids - List of coin id to filter if you want specific results\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      markets: (params = {}) => {\n        const path = `/${pathPrefix}/markets`;\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n       * @function coins.fetch()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.tickers [default: true] - Include ticker data\n       * @param {boolean} params.market_data [default: true] - Include market data\n       * @param {boolean} params.community_data [default: true] - Include community data\n       * @param {boolean} params.developer_data [default: true] - Include developer data\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      fetch: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin tickers (paginated to 100 items).\n       * @function coins.fetchTickers()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.page - Page through results\n       * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['exchange_ids'])) {\n          params.exchange_ids = params.exchange_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${coinId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical data (name, price, market, stats) at a given date for a coin\n       * @function coins.fetchHistory()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @returns {ReturnObject}\n       */\n      fetchHistory: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.date, set to default today/now\n        if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n\n        const path = `/${pathPrefix}/${coinId}/history`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n       * @function coins.fetchMarketChart()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChart: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${coinId}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n       *   Minutely data will be used for duration within 1 day.\n       *   Hourly data will be used for duration between 1 day and 90 days.\n       *   Daily data will be used for duration above 90 days.\n       * @function coins.fetchMarketChartRange()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChartRange: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n        if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n\n        const path = `/${pathPrefix}/${coinId}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given coin\n       * @function coins.fetchStatusUpdates()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin info from contract address\n       * @function coins.fetchCoinContractInfo()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractInfo: (contractAddress, assetPlatform = 'ethereum') => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n       * @function coins.fetchCoinContractMarketChart()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChart: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n       * @function coins.fetchCoinContractMarketChartRange()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChartRange: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchanges\n   */\n  get exchanges() {\n    const pathPrefix = 'exchanges';\n\n    return {\n\n      /**\n       * @description List all exchanges\n       * @function exchanges.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all supported markets id and name\n       * @function exchanges.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n       * @function exchanges.fetch()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @returns {ReturnObject}\n       */\n      fetch: (exchangeId) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get tickers for a given exchange\n       * @function exchanges.fetchTickers()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.page - Page through results\n       * @param {number} params.coin_ids - Filter tickers by coin_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['coin_ids'])) {\n          params.coin_ids = params.coin_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${exchangeId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given exchange\n       * @function exchanges.fetchStatusUpdates()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get volume chart data for a given exchange, returned in BTC\n       * @function exchanges.fetchVolumeChart()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n       * @returns {ReturnObject}\n       */\n      fetchVolumeChart: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/volume_chart`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to status updates\n   */\n  get statusUpdates() {\n    return {\n\n      /**\n       * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n       * @function statusUpdates.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n       * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/status_updates`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to events\n   */\n  get events() {\n    const pathPrefix = 'events';\n\n    return {\n\n      /**\n       * @description Get events, paginated by 100\n       * @function events.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n       * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n       * @param {number} params.page - Page of results (paginated by 100)\n       * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n       * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n       * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of event countries\n       * @function events.fetchCountries()\n       * @returns {ReturnObject}\n       */\n      fetchCountries: () => {\n        const path = `/${pathPrefix}/countries`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get list of event types\n       * @function events.fetchTypes()\n       * @returns {ReturnObject}\n       */\n      fetchTypes: () => {\n        const path = `/${pathPrefix}/types`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchange rates\n   */\n  get exchangeRates() {\n    return {\n\n      /**\n       * @description Get BTC-to-Currency exchange rates\n       * @function exchangeRates.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/exchange_rates`;\n\n        return this._request(path);\n      }\n    };\n  };\n\n  /**\n   * @description Calls related to \"simple\" endpoints\n   */\n  get simple() {\n    return {\n\n      /**\n       * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n       * @function simple.price()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n       * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n       * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n       * @returns {ReturnObject}\n       */\n      price: (params = {}) => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Check the params.vs_currencies\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n          params.vs_currencies = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        //Must have params.ids\n        if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.');\n\n        //\n\n        const path = `/simple/price`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of supported vs/comparisons currencies\n       * @function simple.supportedVsCurrencies()\n       * @returns {ReturnObject}\n       */\n      supportedVsCurrencies: () => {\n        const path = `/simple/supported_vs_currencies`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n       * @function simple.fetchTokenPrice()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n       * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n       * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n       * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n       * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n       * @returns {ReturnObject}\n       */\n      fetchTokenPrice: (params = {}, assetPlatform = 'ethereum') => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Must have assetPlatform\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must have contract_addresses, vs_currencies\n        if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n        if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object');\n\n        //If are arrays, convert to string\n        if (Utils.isArray(params['contract_addresses'])) {\n          params.contract_addresses = params.contract_addresses.join(',');\n        }\n\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        const path = `/simple/token_price/${assetPlatform}`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to finance endpoints\n   */\n  get finance() {\n    return {\n      /**\n       * @description List all finance platforms\n       * @function finance.fetchPlatforms()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @returns {ReturnObject}\n       */\n      fetchPlatforms: (params = {}) => {\n        const path = `/finance_platforms`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all finance products\n       * @function finance.fetchProducts()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @param {string} params.start_at - Start date of the financial products\n       * @param {string} params.end_at - End date of the financial products\n       * @returns {ReturnObject}\n       */\n      fetchProducts: (params = {}) => {\n        const path = `/finance_products`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to index endpoints\n   */\n  get indexes() {\n    const pathPrefix = 'indexes';\n\n    return {\n      /**\n       * @description List all market indexes\n       * @function indexes.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Fetch market index by id\n       * @function indexes.fetch()\n       * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n       * @returns {ReturnObject}\n       */\n      fetch: (indexId) => {\n        //Must have indexId\n        if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${indexId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List market indexes id and name\n       * @function indexes.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n    };\n  };\n\n  /**\n   * @description Calls related to derivative endpoints\n   */\n  get derivatives() {\n    const pathPrefix = 'derivatives';\n\n    return {\n      /**\n       * @description List all derivative tickers\n       * @function derivatives.fetchTickers()\n       * @returns {ReturnObject}\n       */\n      fetchTickers: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all derivative exchanges\n       * @function derivatives.allExchanges()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      allExchanges: (params = {}) => {\n        const path = `/${pathPrefix}/exchanges`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Show derivative exchange data\n       * @function derivatives.fetchExchange()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n       * @returns {ReturnObject}\n       */\n      fetchExchange: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/exchanges/${exchangeId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all derivative exchanges name and identifier\n       * @function derivatives.listExchanges()\n       * @returns {ReturnObject}\n       */\n      listExchanges: () => {\n        const path = `/${pathPrefix}/exchanges/list`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Build options for https.request\n   * @function _buildRequestOptions\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Object} - {path, method, host, port} Options for request\n   */\n  _buildRequestOptions(path, params) {\n    //Stringify object params if exist\n    if (Utils.isObject(params)) params = querystring.stringify(params);\n    else params = undefined;\n\n    //Make relative path\n    //Check if has params, append accordingly\n    if (params == undefined) path = `/api/v${Constants.API_VERSION}${path}`;\n    else path = `/api/v${Constants.API_VERSION}${path}?${params}`;\n\n    //Return options\n    return {\n      path,\n      method: 'GET',\n      host: Constants.HOST,\n      port: 443,\n      timeout: CoinGecko.TIMEOUT,\n    };\n  };\n\n  /**\n   * @description Perform https request\n   * @function _request\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Promise} Body of https request data results\n   */\n  _request(path, params) {\n    let options = this._buildRequestOptions(path, params);\n\n    return new Promise((resolve, reject) => {\n      //Perform request\n      let req = https.request(options, (res) => {\n        let body = [];\n\n        //Set body on data\n        res.on('data', (chunk) => {\n          body.push(chunk);\n        });\n\n        //On end, end the Promise\n        res.on('end', () => {\n          try {\n            body = Buffer.concat(body);\n            body = body.toString();\n\n            //Check if page is returned instead of JSON\n            if (body.startsWith('<!DOCTYPE html>')) {\n              Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n            } else if (body.startsWith('Throttled')) {\n              Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n            }\n\n            //Attempt to parse\n            body = JSON.parse(body);\n          }\n          catch (error) {\n            reject(error);\n          };\n\n          //Create return object\n          resolve(\n            ReturnObject(\n              !(res.statusCode < 200 || res.statusCode >= 300),\n              res.statusMessage,\n              res.statusCode,\n              body\n            )\n          );\n        });\n      });\n\n      //On error, reject the Promise\n      req.on('error', (error) => reject(error));\n\n      //On timeout, reject the Promise\n      req.on('timeout', () => {\n        req.abort();\n        reject(new Error(`CoinGecko API request timed out. Current timeout is: ${CoinGecko.TIMEOUT} milliseconds`));\n      });\n\n      //End request\n      req.end();\n    });\n  };\n};\n\n//Set Constants\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT;\n\n//\n\nmodule.exports = exports = CoinGecko;"],"mappings":"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"},"metadata":{},"sourceType":"script"}