{"ast":null,"code":"const bip39 = require('bip39-light');\nconst {\n  derivePath\n} = require('near-hd-key');\nconst bs58 = require('bs58');\nconst nacl = require('tweetnacl');\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\";\nconst generateSeedPhrase = entropy => {\n  return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic());\n};\nconst normalizeSeedPhrase = seedPhrase => seedPhrase.trim().split(/\\s+/).map(part => part.toLowerCase()).join(' ');\nconst parseSeedPhrase = (seedPhrase, derivationPath) => {\n  const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase));\n  const {\n    key\n  } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex'));\n  const keyPair = nacl.sign.keyPair.fromSeed(key);\n  const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey));\n  const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey));\n  return {\n    seedPhrase,\n    secretKey,\n    publicKey\n  };\n};\nconst findSeedPhraseKey = (seedPhrase, publicKeys) => {\n  // TODO: Need to iterate through multiple possible derivation paths?\n  const keyInfo = parseSeedPhrase(seedPhrase);\n  if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n    return {};\n  }\n  return keyInfo;\n};\nmodule.exports = {\n  KEY_DERIVATION_PATH,\n  generateSeedPhrase,\n  normalizeSeedPhrase,\n  parseSeedPhrase,\n  findSeedPhraseKey\n};","map":{"version":3,"names":["bip39","require","derivePath","bs58","nacl","KEY_DERIVATION_PATH","generateSeedPhrase","entropy","parseSeedPhrase","undefined","entropyToMnemonic","generateMnemonic","normalizeSeedPhrase","seedPhrase","trim","split","map","part","toLowerCase","join","derivationPath","seed","mnemonicToSeed","key","toString","keyPair","sign","fromSeed","publicKey","encode","Buffer","from","secretKey","findSeedPhraseKey","publicKeys","keyInfo","indexOf","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-seed-phrase/index.js"],"sourcesContent":["const bip39 = require('bip39-light');\nconst { derivePath } = require('near-hd-key');\nconst bs58 = require('bs58');\nconst nacl = require('tweetnacl');\n\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\"\n\nconst generateSeedPhrase = (entropy) => {\n    return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic())\n}\n\nconst normalizeSeedPhrase = (seedPhrase) => seedPhrase.trim().split(/\\s+/).map(part => part.toLowerCase()).join(' ')\n\nconst parseSeedPhrase = (seedPhrase, derivationPath) => {\n    const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase))\n    const { key } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex'))\n    const keyPair = nacl.sign.keyPair.fromSeed(key)\n    const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey))\n    const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey))\n    return { seedPhrase, secretKey, publicKey }\n}\n\nconst findSeedPhraseKey = (seedPhrase, publicKeys) => {\n    // TODO: Need to iterate through multiple possible derivation paths?\n    const keyInfo = parseSeedPhrase(seedPhrase)\n    if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n        return {}\n    }\n    return keyInfo\n}\n\nmodule.exports = {\n    KEY_DERIVATION_PATH,\n    generateSeedPhrase,\n    normalizeSeedPhrase,\n    parseSeedPhrase,\n    findSeedPhraseKey\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC7C,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,IAAI,GAAGH,OAAO,CAAC,WAAW,CAAC;AAEjC,MAAMI,mBAAmB,GAAG,eAAe;AAE3C,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;EACpC,OAAOC,eAAe,CAACD,OAAO,KAAKE,SAAS,GAAGT,KAAK,CAACU,iBAAiB,CAACH,OAAO,CAAC,GAAGP,KAAK,CAACW,gBAAgB,EAAE,CAAC;AAC/G,CAAC;AAED,MAAMC,mBAAmB,GAAIC,UAAU,IAAKA,UAAU,CAACC,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAEpH,MAAMX,eAAe,GAAG,CAACK,UAAU,EAAEO,cAAc,KAAK;EACpD,MAAMC,IAAI,GAAGrB,KAAK,CAACsB,cAAc,CAACV,mBAAmB,CAACC,UAAU,CAAC,CAAC;EAClE,MAAM;IAAEU;EAAI,CAAC,GAAGrB,UAAU,CAACkB,cAAc,IAAIf,mBAAmB,EAAEgB,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;EACvF,MAAMC,OAAO,GAAGrB,IAAI,CAACsB,IAAI,CAACD,OAAO,CAACE,QAAQ,CAACJ,GAAG,CAAC;EAC/C,MAAMK,SAAS,GAAG,UAAU,GAAGzB,IAAI,CAAC0B,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAACG,SAAS,CAAC,CAAC;EAC1E,MAAMI,SAAS,GAAG,UAAU,GAAG7B,IAAI,CAAC0B,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAACO,SAAS,CAAC,CAAC;EAC1E,OAAO;IAAEnB,UAAU;IAAEmB,SAAS;IAAEJ;EAAU,CAAC;AAC/C,CAAC;AAED,MAAMK,iBAAiB,GAAG,CAACpB,UAAU,EAAEqB,UAAU,KAAK;EAClD;EACA,MAAMC,OAAO,GAAG3B,eAAe,CAACK,UAAU,CAAC;EAC3C,IAAIqB,UAAU,CAACE,OAAO,CAACD,OAAO,CAACP,SAAS,CAAC,GAAG,CAAC,EAAE;IAC3C,OAAO,CAAC,CAAC;EACb;EACA,OAAOO,OAAO;AAClB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACbjC,mBAAmB;EACnBC,kBAAkB;EAClBM,mBAAmB;EACnBJ,eAAe;EACfyB;AACJ,CAAC"},"metadata":{},"sourceType":"script"}