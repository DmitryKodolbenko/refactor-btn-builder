{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMessageInfo = void 0;\nconst Cell_1 = require(\"../boc/Cell\");\nclass CommonMessageInfo {\n  constructor(opts) {\n    if (opts && opts.stateInit !== null && opts.stateInit !== undefined) {\n      this.stateInit = opts.stateInit;\n    } else {\n      this.stateInit = null;\n    }\n    if (opts && opts.body !== null && opts.body !== undefined) {\n      this.body = opts.body;\n    } else {\n      this.body = null;\n    }\n  }\n  writeTo(cell) {\n    // Write state\n    if (this.stateInit) {\n      cell.bits.writeBit(1);\n      const stateInitCell = new Cell_1.Cell();\n      this.stateInit.writeTo(stateInitCell);\n      //-1:  need at least one bit for body\n      if (cell.bits.available - 1 /* At least on byte for body */ >= stateInitCell.bits.cursor) {\n        cell.bits.writeBit(0);\n        cell.writeCell(stateInitCell);\n      } else {\n        cell.bits.writeBit(1);\n        cell.refs.push(stateInitCell);\n      }\n    } else {\n      cell.bits.writeBit(0);\n    }\n    // Write body\n    if (this.body) {\n      const bodyCell = new Cell_1.Cell();\n      this.body.writeTo(bodyCell);\n      if (cell.bits.available >= bodyCell.bits.cursor) {\n        cell.bits.writeBit(0);\n        cell.writeCell(bodyCell);\n      } else {\n        cell.bits.writeBit(1);\n        cell.refs.push(bodyCell);\n      }\n    } else {\n      cell.bits.writeBit(0);\n    }\n  }\n}\nexports.CommonMessageInfo = CommonMessageInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","CommonMessageInfo","Cell_1","require","constructor","opts","stateInit","undefined","body","writeTo","cell","bits","writeBit","stateInitCell","Cell","available","cursor","writeCell","refs","push","bodyCell"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/messages/CommonMessageInfo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonMessageInfo = void 0;\nconst Cell_1 = require(\"../boc/Cell\");\nclass CommonMessageInfo {\n    constructor(opts) {\n        if (opts && opts.stateInit !== null && opts.stateInit !== undefined) {\n            this.stateInit = opts.stateInit;\n        }\n        else {\n            this.stateInit = null;\n        }\n        if (opts && opts.body !== null && opts.body !== undefined) {\n            this.body = opts.body;\n        }\n        else {\n            this.body = null;\n        }\n    }\n    writeTo(cell) {\n        // Write state\n        if (this.stateInit) {\n            cell.bits.writeBit(1);\n            const stateInitCell = new Cell_1.Cell();\n            this.stateInit.writeTo(stateInitCell);\n            //-1:  need at least one bit for body\n            if (cell.bits.available - 1 /* At least on byte for body */ >= stateInitCell.bits.cursor) {\n                cell.bits.writeBit(0);\n                cell.writeCell(stateInitCell);\n            }\n            else {\n                cell.bits.writeBit(1);\n                cell.refs.push(stateInitCell);\n            }\n        }\n        else {\n            cell.bits.writeBit(0);\n        }\n        // Write body\n        if (this.body) {\n            const bodyCell = new Cell_1.Cell();\n            this.body.writeTo(bodyCell);\n            if (cell.bits.available >= bodyCell.bits.cursor) {\n                cell.bits.writeBit(0);\n                cell.writeCell(bodyCell);\n            }\n            else {\n                cell.bits.writeBit(1);\n                cell.refs.push(bodyCell);\n            }\n        }\n        else {\n            cell.bits.writeBit(0);\n        }\n    }\n}\nexports.CommonMessageInfo = CommonMessageInfo;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACrC,MAAMF,iBAAiB,CAAC;EACpBG,WAAW,CAACC,IAAI,EAAE;IACd,IAAIA,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAK,IAAI,IAAID,IAAI,CAACC,SAAS,KAAKC,SAAS,EAAE;MACjE,IAAI,CAACD,SAAS,GAAGD,IAAI,CAACC,SAAS;IACnC,CAAC,MACI;MACD,IAAI,CAACA,SAAS,GAAG,IAAI;IACzB;IACA,IAAID,IAAI,IAAIA,IAAI,CAACG,IAAI,KAAK,IAAI,IAAIH,IAAI,CAACG,IAAI,KAAKD,SAAS,EAAE;MACvD,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;IACzB,CAAC,MACI;MACD,IAAI,CAACA,IAAI,GAAG,IAAI;IACpB;EACJ;EACAC,OAAO,CAACC,IAAI,EAAE;IACV;IACA,IAAI,IAAI,CAACJ,SAAS,EAAE;MAChBI,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACrB,MAAMC,aAAa,GAAG,IAAIX,MAAM,CAACY,IAAI,EAAE;MACvC,IAAI,CAACR,SAAS,CAACG,OAAO,CAACI,aAAa,CAAC;MACrC;MACA,IAAIH,IAAI,CAACC,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC,mCAAmCF,aAAa,CAACF,IAAI,CAACK,MAAM,EAAE;QACtFN,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrBF,IAAI,CAACO,SAAS,CAACJ,aAAa,CAAC;MACjC,CAAC,MACI;QACDH,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrBF,IAAI,CAACQ,IAAI,CAACC,IAAI,CAACN,aAAa,CAAC;MACjC;IACJ,CAAC,MACI;MACDH,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IACzB;IACA;IACA,IAAI,IAAI,CAACJ,IAAI,EAAE;MACX,MAAMY,QAAQ,GAAG,IAAIlB,MAAM,CAACY,IAAI,EAAE;MAClC,IAAI,CAACN,IAAI,CAACC,OAAO,CAACW,QAAQ,CAAC;MAC3B,IAAIV,IAAI,CAACC,IAAI,CAACI,SAAS,IAAIK,QAAQ,CAACT,IAAI,CAACK,MAAM,EAAE;QAC7CN,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrBF,IAAI,CAACO,SAAS,CAACG,QAAQ,CAAC;MAC5B,CAAC,MACI;QACDV,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrBF,IAAI,CAACQ,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC;MAC5B;IACJ,CAAC,MACI;MACDV,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IACzB;EACJ;AACJ;AACAb,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script"}