{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSignature = exports.encodeSecp256k1Signature = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\n/**\n * Takes a binary pubkey and signature to create a signature object\n *\n * @param pubkey a compressed secp256k1 public key\n * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s\n */\nfunction encodeSecp256k1Signature(pubkey, signature) {\n  if (signature.length !== 64) {\n    throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n  }\n  return {\n    pub_key: (0, encoding_2.encodeSecp256k1Pubkey)(pubkey),\n    signature: (0, encoding_1.toBase64)(signature)\n  };\n}\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nfunction decodeSignature(signature) {\n  switch (signature.pub_key.type) {\n    // Note: please don't add cases here without writing additional unit tests\n    case pubkeys_1.pubkeyType.secp256k1:\n      return {\n        pubkey: (0, encoding_1.fromBase64)(signature.pub_key.value),\n        signature: (0, encoding_1.fromBase64)(signature.signature)\n      };\n    default:\n      throw new Error(\"Unsupported pubkey type\");\n  }\n}\nexports.decodeSignature = decodeSignature;","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":";;;;;;AAAA;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAOA;;;;;AAKG;AACH,SAAgB,wBAAwB,CAAC,MAAkB,EAAE,SAAqB,EAAA;EAChF,IAAI,SAAS,CAAC,MAAM,KAAK,EAAE,EAAE;IAC3B,MAAM,IAAI,KAAK,CACb,kIAAkI,CACnI;EACF;EAED,OAAO;IACL,OAAO,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,qBAAqB,EAAC,MAAM,CAAC;IACtC,SAAS,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,SAAS;GAC9B;AACH;AAXA,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAaA,SAAgB,eAAe,CAAC,SAAuB,EAAA;EAIrD,QAAQ,SAAS,CAAC,OAAO,CAAC,IAAI;IAC5B;IACA,KAAK,SAAA,CAAA,UAAU,CAAC,SAAS;MACvB,OAAO;QACL,MAAM,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3C,SAAS,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,SAAS,CAAC,SAAS;OAC1C;IACH;MACE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;EAAC;AAEjD;AAdA,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeSignature = exports.encodeSecp256k1Signature = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\n/**\n * Takes a binary pubkey and signature to create a signature object\n *\n * @param pubkey a compressed secp256k1 public key\n * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s\n */\nfunction encodeSecp256k1Signature(pubkey, signature) {\n    if (signature.length !== 64) {\n        throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n    }\n    return {\n        pub_key: (0, encoding_2.encodeSecp256k1Pubkey)(pubkey),\n        signature: (0, encoding_1.toBase64)(signature),\n    };\n}\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nfunction decodeSignature(signature) {\n    switch (signature.pub_key.type) {\n        // Note: please don't add cases here without writing additional unit tests\n        case pubkeys_1.pubkeyType.secp256k1:\n            return {\n                pubkey: (0, encoding_1.fromBase64)(signature.pub_key.value),\n                signature: (0, encoding_1.fromBase64)(signature.signature),\n            };\n        default:\n            throw new Error(\"Unsupported pubkey type\");\n    }\n}\nexports.decodeSignature = decodeSignature;\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}