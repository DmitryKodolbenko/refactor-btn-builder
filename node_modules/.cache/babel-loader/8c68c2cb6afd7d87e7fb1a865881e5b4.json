{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cell = void 0;\nvar BitString_1 = require(\"./BitString\");\nvar boc_1 = require(\"./boc\");\nvar symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nvar __1 = require(\"..\");\nvar Cell = /*#__PURE__*/function () {\n  function Cell() {\n    var _this = this;\n    var kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ordinary';\n    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BitString_1.BitString.alloc(1023);\n    _classCallCheck(this, Cell);\n    this.refs = [];\n    this[_a] = function () {\n      return _this.toString();\n    };\n    this.kind = kind;\n    this.bits = bits;\n  }\n  _createClass(Cell, [{\n    key: \"isExotic\",\n    get: function get() {\n      return this.kind !== 'ordinary';\n    }\n  }, {\n    key: \"beginParse\",\n    value: function beginParse() {\n      if (this.isExotic) {\n        throw Error('Unable to parse exotic cell');\n      }\n      return __1.Slice.fromCell(this);\n    }\n  }, {\n    key: \"writeCell\",\n    value: function writeCell(anotherCell) {\n      this.bits.writeBitString(anotherCell.bits);\n      var _iterator = _createForOfIteratorHelper(anotherCell.refs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var r = _step.value;\n          this.refs.push(r);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return (0, boc_1.hashCell)(this);\n    }\n  }, {\n    key: \"toBoc\",\n    value: function toBoc(opts) {\n      var idx = opts && opts.idx !== null && opts.idx !== undefined ? opts.idx : true;\n      var crc32 = opts && opts.crc32 !== null && opts.crc32 !== undefined ? opts.crc32 : true;\n      var cacheBits = opts && opts.cacheBits !== null && opts.cacheBits !== undefined ? opts.cacheBits : false;\n      var flags = opts && opts.flags !== null && opts.flags !== undefined ? opts.flags : 0;\n      return (0, boc_1.serializeToBoc)(this, idx, crc32, cacheBits, flags);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(indent) {\n      var id = indent || '';\n      var s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n      for (var k in this.refs) {\n        var i = this.refs[k];\n        s += i.toString(id + ' ');\n      }\n      return s;\n    }\n  }, {\n    key: \"toDebugString\",\n    value: function toDebugString(indent) {\n      var id = indent || '';\n      if (this.isExotic) {\n        id += '(exotic)';\n      }\n      var s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n      for (var k in this.refs) {\n        var i = this.refs[k];\n        s += i.toString(id + ' ');\n      }\n      return s;\n    }\n  }, {\n    key: \"withReference\",\n    value: function withReference(cell) {\n      this.refs.push(cell);\n      return this;\n    }\n  }, {\n    key: \"withData\",\n    value: function withData(src) {\n      var _iterator2 = _createForOfIteratorHelper(src),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var s = _step2.value;\n          if (s === '0') {\n            this.bits.writeBit(0);\n          } else {\n            this.bits.writeBit(1);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(src) {\n      if (src.refs.length !== this.refs.length) {\n        return false;\n      }\n      for (var i = 0; i < src.refs.length; i++) {\n        if (!src.refs[i].equals(this.refs[i])) {\n          return false;\n        }\n      }\n      return this.bits.equals(src.bits);\n    }\n  }, {\n    key: \"getMaxLevel\",\n    value: function getMaxLevel() {\n      return (0, boc_1.getMaxLevel)(this);\n    }\n  }, {\n    key: \"getMaxDepth\",\n    value: function getMaxDepth() {\n      return (0, boc_1.getMaxDepth)(this);\n    }\n  }], [{\n    key: \"fromBoc\",\n    value: function fromBoc(src) {\n      return (0, boc_1.deserializeBoc)(typeof src === 'string' ? Buffer.from(src, 'hex') : src);\n    }\n  }]);\n  return Cell;\n}();\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;","map":{"version":3,"names":["__importDefault","mod","__esModule","_a","Object","defineProperty","exports","value","Cell","BitString_1","require","boc_1","symbol_inspect_1","__1","kind","bits","BitString","alloc","refs","toString","isExotic","Error","Slice","fromCell","anotherCell","writeBitString","r","push","hashCell","opts","idx","undefined","crc32","cacheBits","flags","serializeToBoc","indent","id","s","toFiftHex","k","i","cell","src","writeBit","length","equals","getMaxLevel","getMaxDepth","deserializeBoc","Buffer","from","default"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/Cell.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cell = void 0;\nconst BitString_1 = require(\"./BitString\");\nconst boc_1 = require(\"./boc\");\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass Cell {\n    constructor(kind = 'ordinary', bits = BitString_1.BitString.alloc(1023)) {\n        this.refs = [];\n        this[_a] = () => this.toString();\n        this.kind = kind;\n        this.bits = bits;\n    }\n    static fromBoc(src) {\n        return (0, boc_1.deserializeBoc)(typeof src === 'string' ? Buffer.from(src, 'hex') : src);\n    }\n    get isExotic() {\n        return this.kind !== 'ordinary';\n    }\n    beginParse() {\n        if (this.isExotic) {\n            throw Error('Unable to parse exotic cell');\n        }\n        return __1.Slice.fromCell(this);\n    }\n    writeCell(anotherCell) {\n        this.bits.writeBitString(anotherCell.bits);\n        for (let r of anotherCell.refs) {\n            this.refs.push(r);\n        }\n    }\n    hash() {\n        return (0, boc_1.hashCell)(this);\n    }\n    toBoc(opts) {\n        let idx = (opts && opts.idx !== null && opts.idx !== undefined) ? opts.idx : true;\n        let crc32 = (opts && opts.crc32 !== null && opts.crc32 !== undefined) ? opts.crc32 : true;\n        let cacheBits = (opts && opts.cacheBits !== null && opts.cacheBits !== undefined) ? opts.cacheBits : false;\n        let flags = (opts && opts.flags !== null && opts.flags !== undefined) ? opts.flags : 0;\n        return (0, boc_1.serializeToBoc)(this, idx, crc32, cacheBits, flags);\n    }\n    toString(indent) {\n        let id = indent || '';\n        let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n        for (let k in this.refs) {\n            const i = this.refs[k];\n            s += i.toString(id + ' ');\n        }\n        return s;\n    }\n    toDebugString(indent) {\n        let id = indent || '';\n        if (this.isExotic) {\n            id += '(exotic)';\n        }\n        let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n        for (let k in this.refs) {\n            const i = this.refs[k];\n            s += i.toString(id + ' ');\n        }\n        return s;\n    }\n    withReference(cell) {\n        this.refs.push(cell);\n        return this;\n    }\n    withData(src) {\n        for (let s of src) {\n            if (s === '0') {\n                this.bits.writeBit(0);\n            }\n            else {\n                this.bits.writeBit(1);\n            }\n        }\n        return this;\n    }\n    equals(src) {\n        if (src.refs.length !== this.refs.length) {\n            return false;\n        }\n        for (let i = 0; i < src.refs.length; i++) {\n            if (!src.refs[i].equals(this.refs[i])) {\n                return false;\n            }\n        }\n        return this.bits.equals(src.bits);\n    }\n    getMaxLevel() {\n        return (0, boc_1.getMaxLevel)(this);\n    }\n    getMaxDepth() {\n        return (0, boc_1.getMaxDepth)(this);\n    }\n}\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}