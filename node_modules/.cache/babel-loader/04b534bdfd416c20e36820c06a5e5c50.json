{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupAuthExtension = void 0;\nvar query_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/query\");\nvar queryclient_1 = require(\"../../queryclient\");\nfunction setupAuthExtension(base) {\n  var rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    auth: {\n      account: function () {\n        var _account = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {\n          var _yield$queryService$A, account;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Account({\n                    address: address\n                  });\n                case 2:\n                  _yield$queryService$A = _context.sent;\n                  account = _yield$queryService$A.account;\n                  return _context.abrupt(\"return\", account !== null && account !== void 0 ? account : null);\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        function account(_x) {\n          return _account.apply(this, arguments);\n        }\n        return account;\n      }()\n    }\n  };\n}\nexports.setupAuthExtension = setupAuthExtension;","map":{"version":3,"sources":["../../../src/modules/auth/queries.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAeA,SAAgB,kBAAkB,CAAC,IAAiB,EAAA;EAClD,IAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC;EACA;EACA,IAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,IAAI,EAAE;MACJ,OAAO;QAAA,0EAAE,iBAAO,OAAe;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,OACH,YAAY,CAAC,OAAO,CAAC;oBAAE,OAAO,EAAE;kBAAO,CAAE,CAAC;gBAAA;kBAAA;kBAA5D,OAAO,yBAAP,OAAO;kBAAA,iCACR,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAP,OAAO,GAAI,IAAI;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CACvB;QAAA;UAAA;QAAA;QAAA;MAAA;IACF;GACF;AACH;AAdA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupAuthExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupAuthExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        auth: {\n            account: async (address) => {\n                const { account } = await queryService.Account({ address: address });\n                return account !== null && account !== void 0 ? account : null;\n            },\n        },\n    };\n}\nexports.setupAuthExtension = setupAuthExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}