{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMessageInfo = void 0;\nvar Cell_1 = require(\"../boc/Cell\");\nvar CommonMessageInfo = /*#__PURE__*/function () {\n  function CommonMessageInfo(opts) {\n    _classCallCheck(this, CommonMessageInfo);\n    if (opts && opts.stateInit !== null && opts.stateInit !== undefined) {\n      this.stateInit = opts.stateInit;\n    } else {\n      this.stateInit = null;\n    }\n    if (opts && opts.body !== null && opts.body !== undefined) {\n      this.body = opts.body;\n    } else {\n      this.body = null;\n    }\n  }\n  _createClass(CommonMessageInfo, [{\n    key: \"writeTo\",\n    value: function writeTo(cell) {\n      // Write state\n      if (this.stateInit) {\n        cell.bits.writeBit(1);\n        var stateInitCell = new Cell_1.Cell();\n        this.stateInit.writeTo(stateInitCell);\n        //-1:  need at least one bit for body\n        if (cell.bits.available - 1 /* At least on byte for body */ >= stateInitCell.bits.cursor) {\n          cell.bits.writeBit(0);\n          cell.writeCell(stateInitCell);\n        } else {\n          cell.bits.writeBit(1);\n          cell.refs.push(stateInitCell);\n        }\n      } else {\n        cell.bits.writeBit(0);\n      }\n      // Write body\n      if (this.body) {\n        var bodyCell = new Cell_1.Cell();\n        this.body.writeTo(bodyCell);\n        if (cell.bits.available >= bodyCell.bits.cursor) {\n          cell.bits.writeBit(0);\n          cell.writeCell(bodyCell);\n        } else {\n          cell.bits.writeBit(1);\n          cell.refs.push(bodyCell);\n        }\n      } else {\n        cell.bits.writeBit(0);\n      }\n    }\n  }]);\n  return CommonMessageInfo;\n}();\nexports.CommonMessageInfo = CommonMessageInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","CommonMessageInfo","Cell_1","require","opts","stateInit","undefined","body","cell","bits","writeBit","stateInitCell","Cell","writeTo","available","cursor","writeCell","refs","push","bodyCell"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/messages/CommonMessageInfo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonMessageInfo = void 0;\nconst Cell_1 = require(\"../boc/Cell\");\nclass CommonMessageInfo {\n    constructor(opts) {\n        if (opts && opts.stateInit !== null && opts.stateInit !== undefined) {\n            this.stateInit = opts.stateInit;\n        }\n        else {\n            this.stateInit = null;\n        }\n        if (opts && opts.body !== null && opts.body !== undefined) {\n            this.body = opts.body;\n        }\n        else {\n            this.body = null;\n        }\n    }\n    writeTo(cell) {\n        // Write state\n        if (this.stateInit) {\n            cell.bits.writeBit(1);\n            const stateInitCell = new Cell_1.Cell();\n            this.stateInit.writeTo(stateInitCell);\n            //-1:  need at least one bit for body\n            if (cell.bits.available - 1 /* At least on byte for body */ >= stateInitCell.bits.cursor) {\n                cell.bits.writeBit(0);\n                cell.writeCell(stateInitCell);\n            }\n            else {\n                cell.bits.writeBit(1);\n                cell.refs.push(stateInitCell);\n            }\n        }\n        else {\n            cell.bits.writeBit(0);\n        }\n        // Write body\n        if (this.body) {\n            const bodyCell = new Cell_1.Cell();\n            this.body.writeTo(bodyCell);\n            if (cell.bits.available >= bodyCell.bits.cursor) {\n                cell.bits.writeBit(0);\n                cell.writeCell(bodyCell);\n            }\n            else {\n                cell.bits.writeBit(1);\n                cell.refs.push(bodyCell);\n            }\n        }\n        else {\n            cell.bits.writeBit(0);\n        }\n    }\n}\nexports.CommonMessageInfo = CommonMessageInfo;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,IAAMC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AAAC,IAChCF,iBAAiB;EACnB,2BAAYG,IAAI,EAAE;IAAA;IACd,IAAIA,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAK,IAAI,IAAID,IAAI,CAACC,SAAS,KAAKC,SAAS,EAAE;MACjE,IAAI,CAACD,SAAS,GAAGD,IAAI,CAACC,SAAS;IACnC,CAAC,MACI;MACD,IAAI,CAACA,SAAS,GAAG,IAAI;IACzB;IACA,IAAID,IAAI,IAAIA,IAAI,CAACG,IAAI,KAAK,IAAI,IAAIH,IAAI,CAACG,IAAI,KAAKD,SAAS,EAAE;MACvD,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;IACzB,CAAC,MACI;MACD,IAAI,CAACA,IAAI,GAAG,IAAI;IACpB;EACJ;EAAC;IAAA;IAAA,OACD,iBAAQC,IAAI,EAAE;MACV;MACA,IAAI,IAAI,CAACH,SAAS,EAAE;QAChBG,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrB,IAAMC,aAAa,GAAG,IAAIT,MAAM,CAACU,IAAI,EAAE;QACvC,IAAI,CAACP,SAAS,CAACQ,OAAO,CAACF,aAAa,CAAC;QACrC;QACA,IAAIH,IAAI,CAACC,IAAI,CAACK,SAAS,GAAG,CAAC,CAAC,mCAAmCH,aAAa,CAACF,IAAI,CAACM,MAAM,EAAE;UACtFP,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;UACrBF,IAAI,CAACQ,SAAS,CAACL,aAAa,CAAC;QACjC,CAAC,MACI;UACDH,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;UACrBF,IAAI,CAACS,IAAI,CAACC,IAAI,CAACP,aAAa,CAAC;QACjC;MACJ,CAAC,MACI;QACDH,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzB;MACA;MACA,IAAI,IAAI,CAACH,IAAI,EAAE;QACX,IAAMY,QAAQ,GAAG,IAAIjB,MAAM,CAACU,IAAI,EAAE;QAClC,IAAI,CAACL,IAAI,CAACM,OAAO,CAACM,QAAQ,CAAC;QAC3B,IAAIX,IAAI,CAACC,IAAI,CAACK,SAAS,IAAIK,QAAQ,CAACV,IAAI,CAACM,MAAM,EAAE;UAC7CP,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;UACrBF,IAAI,CAACQ,SAAS,CAACG,QAAQ,CAAC;QAC5B,CAAC,MACI;UACDX,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;UACrBF,IAAI,CAACS,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC;QAC5B;MACJ,CAAC,MACI;QACDX,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzB;IACJ;EAAC;EAAA;AAAA;AAELX,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script"}