{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupTxExtension = void 0;\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nvar service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nvar tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\nvar queryclient_1 = require(\"../../queryclient\");\nfunction setupTxExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  var rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  var queryService = new service_1.ServiceClientImpl(rpc);\n  return {\n    tx: {\n      getTx: function () {\n        var _getTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(txId) {\n          var request, response;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  request = {\n                    hash: txId\n                  };\n                  _context.next = 3;\n                  return queryService.GetTx(request);\n                case 3:\n                  response = _context.sent;\n                  return _context.abrupt(\"return\", response);\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        function getTx(_x) {\n          return _getTx.apply(this, arguments);\n        }\n        return getTx;\n      }(),\n      simulate: function () {\n        var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(messages, memo, signer, sequence) {\n          var request, response;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  request = service_1.SimulateRequest.fromPartial({\n                    tx: tx_1.Tx.fromPartial({\n                      authInfo: tx_1.AuthInfo.fromPartial({\n                        fee: tx_1.Fee.fromPartial({}),\n                        signerInfos: [{\n                          publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                          sequence: long_1.default.fromNumber(sequence, true),\n                          modeInfo: {\n                            single: {\n                              mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED\n                            }\n                          }\n                        }]\n                      }),\n                      body: tx_1.TxBody.fromPartial({\n                        messages: Array.from(messages),\n                        memo: memo\n                      }),\n                      signatures: [new Uint8Array()]\n                    }),\n                    // Sending serialized `txBytes` is the future. But\n                    // this is not available in Comsos SDK 0.42.\n                    txBytes: undefined\n                  });\n                  _context2.next = 3;\n                  return queryService.Simulate(request);\n                case 3:\n                  response = _context2.sent;\n                  return _context2.abrupt(\"return\", response);\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        function simulate(_x2, _x3, _x4, _x5) {\n          return _simulate.apply(this, arguments);\n        }\n        return simulate;\n      }()\n    }\n  };\n}\nexports.setupTxExtension = setupTxExtension;","map":{"version":3,"sources":["../../../src/modules/tx/queries.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,gDAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAOA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAEA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAiBA,SAAgB,gBAAgB,CAAC,IAAiB,EAAA;EAChD;EACA;EACA,IAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC,IAAM,YAAY,GAAG,IAAI,SAAA,CAAA,iBAAiB,CAAC,GAAG,CAAC;EAE/C,OAAO;IACL,EAAE,EAAE;MACF,KAAK;QAAA,wEAAE,iBAAO,IAAY;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAClB,OAAO,GAAiB;oBAC5B,IAAI,EAAE;mBACP;kBAAA;kBAAA,OACsB,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC;gBAAA;kBAA5C,QAAQ;kBAAA,iCACP,QAAQ;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAChB;QAAA;UAAA;QAAA;QAAA;MAAA;MACD,QAAQ;QAAA,2EAAE,kBACR,QAAwB,EACxB,IAAwB,EACxB,MAAc,EACd,QAAgB;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAEV,OAAO,GAAG,SAAA,CAAA,eAAe,CAAC,WAAW,CAAC;oBAC1C,EAAE,EAAE,IAAA,CAAA,EAAE,CAAC,WAAW,CAAC;sBACjB,QAAQ,EAAE,IAAA,CAAA,QAAQ,CAAC,WAAW,CAAC;wBAC7B,GAAG,EAAE,IAAA,CAAA,GAAG,CAAC,WAAW,CAAC,CAAA,CAAE,CAAC;wBACxB,WAAW,EAAE,CACX;0BACE,SAAS,EAAE,CAAA,CAAA,EAAA,eAAA,CAAA,YAAY,EAAC,MAAM,CAAC;0BAC/B,QAAQ,EAAE,MAAA,CAAA,OAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC;0BACzC,QAAQ,EAAE;4BAAE,MAAM,EAAE;8BAAE,IAAI,EAAE,SAAA,CAAA,QAAQ,CAAC;4BAAqB;0BAAE;yBAC7D;uBAEJ,CAAC;sBACF,IAAI,EAAE,IAAA,CAAA,MAAM,CAAC,WAAW,CAAC;wBACvB,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC9B,IAAI,EAAE;uBACP,CAAC;sBACF,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE;qBAC9B,CAAC;oBACF;oBACA;oBACA,OAAO,EAAE;mBACV,CAAC;kBAAA;kBAAA,OACqB,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAAA;kBAA/C,QAAQ;kBAAA,kCACP,QAAQ;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAChB;QAAA;UAAA;QAAA;QAAA;MAAA;IACF;GACF;AACH;AAhDA,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupTxExtension = void 0;\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupTxExtension(base) {\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    const queryService = new service_1.ServiceClientImpl(rpc);\n    return {\n        tx: {\n            getTx: async (txId) => {\n                const request = {\n                    hash: txId,\n                };\n                const response = await queryService.GetTx(request);\n                return response;\n            },\n            simulate: async (messages, memo, signer, sequence) => {\n                const request = service_1.SimulateRequest.fromPartial({\n                    tx: tx_1.Tx.fromPartial({\n                        authInfo: tx_1.AuthInfo.fromPartial({\n                            fee: tx_1.Fee.fromPartial({}),\n                            signerInfos: [\n                                {\n                                    publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                                    sequence: long_1.default.fromNumber(sequence, true),\n                                    modeInfo: { single: { mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED } },\n                                },\n                            ],\n                        }),\n                        body: tx_1.TxBody.fromPartial({\n                            messages: Array.from(messages),\n                            memo: memo,\n                        }),\n                        signatures: [new Uint8Array()],\n                    }),\n                    // Sending serialized `txBytes` is the future. But\n                    // this is not available in Comsos SDK 0.42.\n                    txBytes: undefined,\n                });\n                const response = await queryService.Simulate(request);\n                return response;\n            },\n        },\n    };\n}\nexports.setupTxExtension = setupTxExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}