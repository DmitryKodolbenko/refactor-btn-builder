{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst pbkdf2_sha512_1 = require(\"../primitives/pbkdf2_sha512\");\nconst wordlist_1 = require(\"./wordlist\");\nconst PBKDF_ITERATIONS = 100000;\nasync function isPasswordNeeded(mnemonicArray) {\n  const passlessEntropy = await mnemonicToEntropy(mnemonicArray);\n  return (await isPasswordSeed(passlessEntropy)) && !(await isBasicSeed(passlessEntropy));\n}\nfunction normalizeMnemonic(src) {\n  return src.map(v => v.toLowerCase().trim());\n}\nasync function isBasicSeed(entropy) {\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68\n  // bool Mnemonic::is_basic_seed() {\n  //   td::SecureString hash(64);\n  //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON seed version\", td::max(1, PBKDF_ITERATIONS / 256),\n  //                     hash.as_mutable_slice());\n  //   return hash.as_slice()[0] == 0;\n  // }\n  const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON seed version', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);\n  return seed[0] == 0;\n}\nasync function isPasswordSeed(entropy) {\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75\n  // bool Mnemonic::is_password_seed() {\n  //   td::SecureString hash(64);\n  //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON fast seed version\", 1, hash.as_mutable_slice());\n  //   return hash.as_slice()[0] == 1;\n  // }\n  const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON fast seed version', 1, 64);\n  return seed[0] == 1;\n}\nasync function mnemonicToEntropy(mnemonicArray, password) {\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52\n  // td::SecureString Mnemonic::to_entropy() const {\n  //   td::SecureString res(64);\n  //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());\n  //   return res;\n  // }\n  return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(' '), password && password.length > 0 ? password : '');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nasync function mnemonicToSeed(mnemonicArray, seed, password) {\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58\n  // td::SecureString Mnemonic::to_seed() const {\n  //   td::SecureString hash(64);\n  //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON default seed\", PBKDF_ITERATIONS, hash.as_mutable_slice());\n  //   return hash;\n  // }\n  const entropy = await mnemonicToEntropy(mnemonicArray, password);\n  const res = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);\n  return res.slice(0, 32);\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Extract private key from mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToPrivateKey(mnemonicArray, password) {\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64\n  // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {\n  //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));\n  // }\n  mnemonicArray = normalizeMnemonic(mnemonicArray);\n  const seed = await mnemonicToSeed(mnemonicArray, 'TON default seed', password);\n  let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed);\n  return {\n    publicKey: Buffer.from(keyPair.publicKey),\n    secretKey: Buffer.from(keyPair.secretKey)\n  };\n}\nexports.mnemonicToPrivateKey = mnemonicToPrivateKey;\n/**\n * Convert mnemonic to wallet key pair\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToWalletKey(mnemonicArray, password) {\n  let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);\n  let seedSecret = seedPk.secretKey.slice(0, 32);\n  const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);\n  return {\n    publicKey: Buffer.from(keyPair.publicKey),\n    secretKey: Buffer.from(keyPair.secretKey)\n  };\n}\nexports.mnemonicToWalletKey = mnemonicToWalletKey;\n/**\n * Validate Mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns true for valid mnemonic\n */\nasync function mnemonicValidate(mnemonicArray, password) {\n  // Normalize\n  mnemonicArray = normalizeMnemonic(mnemonicArray);\n  // Validate mnemonic words\n  for (let word of mnemonicArray) {\n    if (wordlist_1.wordlist.indexOf(word) < 0) {\n      return false;\n    }\n  }\n  // Check password\n  if (password && password.length > 0) {\n    if (!(await isPasswordNeeded(mnemonicArray))) {\n      return false;\n    }\n  }\n  // Validate seed\n  return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));\n}\nexports.mnemonicValidate = mnemonicValidate;\n/**\n * Generate new Mnemonic\n * @param wordsCount number of words to generate\n * @param password mnemonic password\n * @returns\n */\nasync function mnemonicNew() {\n  let wordsCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 24;\n  let password = arguments.length > 1 ? arguments[1] : undefined;\n  // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159\n  let mnemonicArray = [];\n  while (true) {\n    // Regenerate new mnemonics\n    mnemonicArray = [];\n    for (let i = 0; i < wordsCount; i++) {\n      let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);\n      mnemonicArray.push(wordlist_1.wordlist[ind]);\n    }\n    // Chek password conformance\n    if (password && password.length > 0) {\n      if (!(await isPasswordNeeded(mnemonicArray))) {\n        continue;\n      }\n    }\n    // Check if basic seed correct\n    if (!(await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password)))) {\n      continue;\n    }\n    break;\n  }\n  return mnemonicArray;\n}\nexports.mnemonicNew = mnemonicNew;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","mnemonicNew","mnemonicValidate","mnemonicToWalletKey","mnemonicToPrivateKey","mnemonicToSeed","mnemonicToEntropy","tweetnacl_1","require","getSecureRandom_1","hmac_sha512_1","pbkdf2_sha512_1","wordlist_1","PBKDF_ITERATIONS","isPasswordNeeded","mnemonicArray","passlessEntropy","isPasswordSeed","isBasicSeed","normalizeMnemonic","src","map","v","toLowerCase","trim","entropy","seed","pbkdf2_sha512","Math","max","floor","password","hmac_sha512","join","length","res","slice","keyPair","default","sign","fromSeed","publicKey","Buffer","from","secretKey","seedPk","seedSecret","word","wordlist","indexOf","wordsCount","i","ind","getSecureRandomNumber","push"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/node_modules/ton-crypto/dist/mnemonic/mnemonic.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst pbkdf2_sha512_1 = require(\"../primitives/pbkdf2_sha512\");\nconst wordlist_1 = require(\"./wordlist\");\nconst PBKDF_ITERATIONS = 100000;\nasync function isPasswordNeeded(mnemonicArray) {\n    const passlessEntropy = await mnemonicToEntropy(mnemonicArray);\n    return (await isPasswordSeed(passlessEntropy)) && !(await isBasicSeed(passlessEntropy));\n}\nfunction normalizeMnemonic(src) {\n    return src.map((v) => v.toLowerCase().trim());\n}\nasync function isBasicSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68\n    // bool Mnemonic::is_basic_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON seed version\", td::max(1, PBKDF_ITERATIONS / 256),\n    //                     hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 0;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON seed version', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);\n    return seed[0] == 0;\n}\nasync function isPasswordSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75\n    // bool Mnemonic::is_password_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON fast seed version\", 1, hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 1;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON fast seed version', 1, 64);\n    return seed[0] == 1;\n}\nasync function mnemonicToEntropy(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52\n    // td::SecureString Mnemonic::to_entropy() const {\n    //   td::SecureString res(64);\n    //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());\n    //   return res;\n    // }\n    return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(' '), password && password.length > 0 ? password : '');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nasync function mnemonicToSeed(mnemonicArray, seed, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58\n    // td::SecureString Mnemonic::to_seed() const {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON default seed\", PBKDF_ITERATIONS, hash.as_mutable_slice());\n    //   return hash;\n    // }\n    const entropy = await mnemonicToEntropy(mnemonicArray, password);\n    const res = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);\n    return res.slice(0, 32);\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Extract private key from mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToPrivateKey(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64\n    // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {\n    //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));\n    // }\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    const seed = (await mnemonicToSeed(mnemonicArray, 'TON default seed', password));\n    let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed);\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToPrivateKey = mnemonicToPrivateKey;\n/**\n * Convert mnemonic to wallet key pair\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToWalletKey(mnemonicArray, password) {\n    let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);\n    let seedSecret = seedPk.secretKey.slice(0, 32);\n    const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToWalletKey = mnemonicToWalletKey;\n/**\n * Validate Mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns true for valid mnemonic\n */\nasync function mnemonicValidate(mnemonicArray, password) {\n    // Normalize\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    // Validate mnemonic words\n    for (let word of mnemonicArray) {\n        if (wordlist_1.wordlist.indexOf(word) < 0) {\n            return false;\n        }\n    }\n    // Check password\n    if (password && password.length > 0) {\n        if (!await isPasswordNeeded(mnemonicArray)) {\n            return false;\n        }\n    }\n    // Validate seed\n    return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));\n}\nexports.mnemonicValidate = mnemonicValidate;\n/**\n * Generate new Mnemonic\n * @param wordsCount number of words to generate\n * @param password mnemonic password\n * @returns\n */\nasync function mnemonicNew(wordsCount = 24, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159\n    let mnemonicArray = [];\n    while (true) {\n        // Regenerate new mnemonics\n        mnemonicArray = [];\n        for (let i = 0; i < wordsCount; i++) {\n            let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);\n            mnemonicArray.push(wordlist_1.wordlist[ind]);\n        }\n        // Chek password conformance\n        if (password && password.length > 0) {\n            if (!await isPasswordNeeded(mnemonicArray)) {\n                continue;\n            }\n        }\n        // Check if basic seed correct\n        if (!(await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password)))) {\n            continue;\n        }\n        break;\n    }\n    return mnemonicArray;\n}\nexports.mnemonicNew = mnemonicNew;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}