{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tendermint34Client = void 0;\nconst jsonrpc_1 = require(\"../jsonrpc\");\nconst rpcclients_1 = require(\"../rpcclients\");\nconst adaptor_1 = require(\"./adaptor\");\nconst requests = __importStar(require(\"./requests\"));\nclass Tendermint34Client {\n  /**\n   * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.\n   */\n  constructor(client) {\n    this.client = client;\n    this.p = adaptor_1.adaptor34.params;\n    this.r = adaptor_1.adaptor34.responses;\n  }\n  /**\n   * Creates a new Tendermint client for the given endpoint.\n   *\n   * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n   */\n  static async connect(endpoint) {\n    if (typeof endpoint === \"object\") {\n      return Tendermint34Client.create(new rpcclients_1.HttpClient(endpoint));\n    } else {\n      const useHttp = endpoint.startsWith(\"http://\") || endpoint.startsWith(\"https://\");\n      const rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);\n      return Tendermint34Client.create(rpcClient);\n    }\n  }\n  /**\n   * Creates a new Tendermint client given an RPC client.\n   */\n  static async create(rpcClient) {\n    // For some very strange reason I don't understand, tests start to fail on some systems\n    // (our CI) when skipping the status call before doing other queries. Sleeping a little\n    // while did not help. Thus we query the version as a way to say \"hi\" to the backend,\n    // even in cases where we don't use the result.\n    const _version = await this.detectVersion(rpcClient);\n    return new Tendermint34Client(rpcClient);\n  }\n  static async detectVersion(client) {\n    const req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);\n    const response = await client.execute(req);\n    const result = response.result;\n    if (!result || !result.node_info) {\n      throw new Error(\"Unrecognized format for status response\");\n    }\n    const version = result.node_info.version;\n    if (typeof version !== \"string\") {\n      throw new Error(\"Unrecognized version format: must be string\");\n    }\n    return version;\n  }\n  disconnect() {\n    this.client.disconnect();\n  }\n  async abciInfo() {\n    const query = {\n      method: requests.Method.AbciInfo\n    };\n    return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);\n  }\n  async abciQuery(params) {\n    const query = {\n      params: params,\n      method: requests.Method.AbciQuery\n    };\n    return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);\n  }\n  async block(height) {\n    const query = {\n      method: requests.Method.Block,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);\n  }\n  async blockResults(height) {\n    const query = {\n      method: requests.Method.BlockResults,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);\n  }\n  /**\n   * Search for events that are in a block.\n   *\n   * NOTE\n   * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n   */\n  async blockSearch(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BlockSearch\n    };\n    const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n    return {\n      ...resp,\n      // make sure we sort by height, as tendermint may be sorting by string value of the height\n      blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height)\n    };\n  }\n  // this should paginate through all blockSearch options to ensure it returns all results.\n  // starts with page 1 or whatever was provided (eg. to start on page 7)\n  //\n  // NOTE\n  // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n  async blockSearchAll(params) {\n    let page = params.page || 1;\n    const blocks = [];\n    let done = false;\n    while (!done) {\n      const resp = await this.blockSearch({\n        ...params,\n        page: page\n      });\n      blocks.push(...resp.blocks);\n      if (blocks.length < resp.totalCount) {\n        page++;\n      } else {\n        done = true;\n      }\n    }\n    // make sure we sort by height, as tendermint may be sorting by string value of the height\n    // and the earlier items may be in a higher page than the later items\n    blocks.sort((a, b) => a.block.header.height - b.block.header.height);\n    return {\n      totalCount: blocks.length,\n      blocks: blocks\n    };\n  }\n  /**\n   * Queries block headers filtered by minHeight <= height <= maxHeight.\n   *\n   * @param minHeight The minimum height to be included in the result. Defaults to 0.\n   * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n   */\n  async blockchain(minHeight, maxHeight) {\n    const query = {\n      method: requests.Method.Blockchain,\n      params: {\n        minHeight: minHeight,\n        maxHeight: maxHeight\n      }\n    };\n    return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);\n  }\n  /**\n   * Broadcast transaction to mempool and wait for response\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n   */\n  async broadcastTxSync(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxSync\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);\n  }\n  /**\n   * Broadcast transaction to mempool and do not wait for result\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n   */\n  async broadcastTxAsync(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxAsync\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);\n  }\n  /**\n   * Broadcast transaction to mempool and wait for block\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n   */\n  async broadcastTxCommit(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxCommit\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);\n  }\n  async commit(height) {\n    const query = {\n      method: requests.Method.Commit,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);\n  }\n  async genesis() {\n    const query = {\n      method: requests.Method.Genesis\n    };\n    return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);\n  }\n  async health() {\n    const query = {\n      method: requests.Method.Health\n    };\n    return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);\n  }\n  async numUnconfirmedTxs() {\n    const query = {\n      method: requests.Method.NumUnconfirmedTxs\n    };\n    return this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs);\n  }\n  async status() {\n    const query = {\n      method: requests.Method.Status\n    };\n    return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);\n  }\n  subscribeNewBlock() {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.NewBlock\n      }\n    };\n    return this.subscribe(request, this.r.decodeNewBlockEvent);\n  }\n  subscribeNewBlockHeader() {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.NewBlockHeader\n      }\n    };\n    return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n  }\n  subscribeTx(query) {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.Tx,\n        raw: query\n      }\n    };\n    return this.subscribe(request, this.r.decodeTxEvent);\n  }\n  /**\n   * Get a single transaction by hash\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n   */\n  async tx(params) {\n    const query = {\n      params: params,\n      method: requests.Method.Tx\n    };\n    return this.doCall(query, this.p.encodeTx, this.r.decodeTx);\n  }\n  /**\n   * Search for transactions that are in a block\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n   */\n  async txSearch(params) {\n    const query = {\n      params: params,\n      method: requests.Method.TxSearch\n    };\n    return this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);\n  }\n  // this should paginate through all txSearch options to ensure it returns all results.\n  // starts with page 1 or whatever was provided (eg. to start on page 7)\n  async txSearchAll(params) {\n    let page = params.page || 1;\n    const txs = [];\n    let done = false;\n    while (!done) {\n      const resp = await this.txSearch({\n        ...params,\n        page: page\n      });\n      txs.push(...resp.txs);\n      if (txs.length < resp.totalCount) {\n        page++;\n      } else {\n        done = true;\n      }\n    }\n    return {\n      totalCount: txs.length,\n      txs: txs\n    };\n  }\n  async validators(params) {\n    const query = {\n      method: requests.Method.Validators,\n      params: params\n    };\n    return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);\n  }\n  async validatorsAll(height) {\n    const validators = [];\n    let page = 1;\n    let done = false;\n    let blockHeight = height;\n    while (!done) {\n      const response = await this.validators({\n        per_page: 50,\n        height: blockHeight,\n        page: page\n      });\n      validators.push(...response.validators);\n      blockHeight = blockHeight || response.blockHeight;\n      if (validators.length < response.total) {\n        page++;\n      } else {\n        done = true;\n      }\n    }\n    return {\n      // NOTE: Default value is for type safety but this should always be set\n      blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n      count: validators.length,\n      total: validators.length,\n      validators: validators\n    };\n  }\n  // doCall is a helper to handle the encode/call/decode logic\n  async doCall(request, encode, decode) {\n    const req = encode(request);\n    const result = await this.client.execute(req);\n    return decode(result);\n  }\n  subscribe(request, decode) {\n    if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {\n      throw new Error(\"This RPC client type cannot subscribe to events\");\n    }\n    const req = this.p.encodeSubscribe(request);\n    const eventStream = this.client.listen(req);\n    return eventStream.map(event => {\n      return decode(event);\n    });\n  }\n}\nexports.Tendermint34Client = Tendermint34Client;","map":{"version":3,"sources":["../../src/tendermint34/tendermint34client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tendermint34Client = void 0;\nconst jsonrpc_1 = require(\"../jsonrpc\");\nconst rpcclients_1 = require(\"../rpcclients\");\nconst adaptor_1 = require(\"./adaptor\");\nconst requests = __importStar(require(\"./requests\"));\nclass Tendermint34Client {\n    /**\n     * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.\n     */\n    constructor(client) {\n        this.client = client;\n        this.p = adaptor_1.adaptor34.params;\n        this.r = adaptor_1.adaptor34.responses;\n    }\n    /**\n     * Creates a new Tendermint client for the given endpoint.\n     *\n     * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n     */\n    static async connect(endpoint) {\n        if (typeof endpoint === \"object\") {\n            return Tendermint34Client.create(new rpcclients_1.HttpClient(endpoint));\n        }\n        else {\n            const useHttp = endpoint.startsWith(\"http://\") || endpoint.startsWith(\"https://\");\n            const rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);\n            return Tendermint34Client.create(rpcClient);\n        }\n    }\n    /**\n     * Creates a new Tendermint client given an RPC client.\n     */\n    static async create(rpcClient) {\n        // For some very strange reason I don't understand, tests start to fail on some systems\n        // (our CI) when skipping the status call before doing other queries. Sleeping a little\n        // while did not help. Thus we query the version as a way to say \"hi\" to the backend,\n        // even in cases where we don't use the result.\n        const _version = await this.detectVersion(rpcClient);\n        return new Tendermint34Client(rpcClient);\n    }\n    static async detectVersion(client) {\n        const req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);\n        const response = await client.execute(req);\n        const result = response.result;\n        if (!result || !result.node_info) {\n            throw new Error(\"Unrecognized format for status response\");\n        }\n        const version = result.node_info.version;\n        if (typeof version !== \"string\") {\n            throw new Error(\"Unrecognized version format: must be string\");\n        }\n        return version;\n    }\n    disconnect() {\n        this.client.disconnect();\n    }\n    async abciInfo() {\n        const query = { method: requests.Method.AbciInfo };\n        return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);\n    }\n    async abciQuery(params) {\n        const query = { params: params, method: requests.Method.AbciQuery };\n        return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);\n    }\n    async block(height) {\n        const query = { method: requests.Method.Block, params: { height: height } };\n        return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);\n    }\n    async blockResults(height) {\n        const query = {\n            method: requests.Method.BlockResults,\n            params: { height: height },\n        };\n        return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);\n    }\n    /**\n     * Search for events that are in a block.\n     *\n     * NOTE\n     * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n     */\n    async blockSearch(params) {\n        const query = { params: params, method: requests.Method.BlockSearch };\n        const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n        return {\n            ...resp,\n            // make sure we sort by height, as tendermint may be sorting by string value of the height\n            blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height),\n        };\n    }\n    // this should paginate through all blockSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    //\n    // NOTE\n    // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n    async blockSearchAll(params) {\n        let page = params.page || 1;\n        const blocks = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.blockSearch({ ...params, page: page });\n            blocks.push(...resp.blocks);\n            if (blocks.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        // make sure we sort by height, as tendermint may be sorting by string value of the height\n        // and the earlier items may be in a higher page than the later items\n        blocks.sort((a, b) => a.block.header.height - b.block.header.height);\n        return {\n            totalCount: blocks.length,\n            blocks: blocks,\n        };\n    }\n    /**\n     * Queries block headers filtered by minHeight <= height <= maxHeight.\n     *\n     * @param minHeight The minimum height to be included in the result. Defaults to 0.\n     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n     */\n    async blockchain(minHeight, maxHeight) {\n        const query = {\n            method: requests.Method.Blockchain,\n            params: {\n                minHeight: minHeight,\n                maxHeight: maxHeight,\n            },\n        };\n        return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for response\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n     */\n    async broadcastTxSync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxSync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);\n    }\n    /**\n     * Broadcast transaction to mempool and do not wait for result\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n     */\n    async broadcastTxAsync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxAsync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n     */\n    async broadcastTxCommit(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxCommit };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);\n    }\n    async commit(height) {\n        const query = { method: requests.Method.Commit, params: { height: height } };\n        return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);\n    }\n    async genesis() {\n        const query = { method: requests.Method.Genesis };\n        return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);\n    }\n    async health() {\n        const query = { method: requests.Method.Health };\n        return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);\n    }\n    async numUnconfirmedTxs() {\n        const query = { method: requests.Method.NumUnconfirmedTxs };\n        return this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs);\n    }\n    async status() {\n        const query = { method: requests.Method.Status };\n        return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);\n    }\n    subscribeNewBlock() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlock },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockEvent);\n    }\n    subscribeNewBlockHeader() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlockHeader },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n    }\n    subscribeTx(query) {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: {\n                type: requests.SubscriptionEventType.Tx,\n                raw: query,\n            },\n        };\n        return this.subscribe(request, this.r.decodeTxEvent);\n    }\n    /**\n     * Get a single transaction by hash\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n     */\n    async tx(params) {\n        const query = { params: params, method: requests.Method.Tx };\n        return this.doCall(query, this.p.encodeTx, this.r.decodeTx);\n    }\n    /**\n     * Search for transactions that are in a block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n     */\n    async txSearch(params) {\n        const query = { params: params, method: requests.Method.TxSearch };\n        return this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);\n    }\n    // this should paginate through all txSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    async txSearchAll(params) {\n        let page = params.page || 1;\n        const txs = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.txSearch({ ...params, page: page });\n            txs.push(...resp.txs);\n            if (txs.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        return {\n            totalCount: txs.length,\n            txs: txs,\n        };\n    }\n    async validators(params) {\n        const query = {\n            method: requests.Method.Validators,\n            params: params,\n        };\n        return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);\n    }\n    async validatorsAll(height) {\n        const validators = [];\n        let page = 1;\n        let done = false;\n        let blockHeight = height;\n        while (!done) {\n            const response = await this.validators({\n                per_page: 50,\n                height: blockHeight,\n                page: page,\n            });\n            validators.push(...response.validators);\n            blockHeight = blockHeight || response.blockHeight;\n            if (validators.length < response.total) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        return {\n            // NOTE: Default value is for type safety but this should always be set\n            blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n            count: validators.length,\n            total: validators.length,\n            validators: validators,\n        };\n    }\n    // doCall is a helper to handle the encode/call/decode logic\n    async doCall(request, encode, decode) {\n        const req = encode(request);\n        const result = await this.client.execute(req);\n        return decode(result);\n    }\n    subscribe(request, decode) {\n        if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {\n            throw new Error(\"This RPC client type cannot subscribe to events\");\n        }\n        const req = this.p.encodeSubscribe(request);\n        const eventStream = this.client.listen(req);\n        return eventStream.map((event) => {\n            return decode(event);\n        });\n    }\n}\nexports.Tendermint34Client = Tendermint34Client;\n//# sourceMappingURL=tendermint34client.js.map"]},"metadata":{},"sourceType":"script"}