{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tendermint34Client = void 0;\nvar jsonrpc_1 = require(\"../jsonrpc\");\nvar rpcclients_1 = require(\"../rpcclients\");\nvar adaptor_1 = require(\"./adaptor\");\nvar requests = __importStar(require(\"./requests\"));\nvar Tendermint34Client = /*#__PURE__*/function () {\n  /**\n   * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.\n   */\n  function Tendermint34Client(client) {\n    _classCallCheck(this, Tendermint34Client);\n    this.client = client;\n    this.p = adaptor_1.adaptor34.params;\n    this.r = adaptor_1.adaptor34.responses;\n  }\n  /**\n   * Creates a new Tendermint client for the given endpoint.\n   *\n   * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n   */\n  _createClass(Tendermint34Client, [{\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.client.disconnect();\n    }\n  }, {\n    key: \"abciInfo\",\n    value: function () {\n      var _abciInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = {\n                  method: requests.Method.AbciInfo\n                };\n                return _context.abrupt(\"return\", this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo));\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function abciInfo() {\n        return _abciInfo.apply(this, arguments);\n      }\n      return abciInfo;\n    }()\n  }, {\n    key: \"abciQuery\",\n    value: function () {\n      var _abciQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.AbciQuery\n                };\n                return _context2.abrupt(\"return\", this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery));\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function abciQuery(_x) {\n        return _abciQuery.apply(this, arguments);\n      }\n      return abciQuery;\n    }()\n  }, {\n    key: \"block\",\n    value: function () {\n      var _block = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Block,\n                  params: {\n                    height: height\n                  }\n                };\n                return _context3.abrupt(\"return\", this.doCall(query, this.p.encodeBlock, this.r.decodeBlock));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function block(_x2) {\n        return _block.apply(this, arguments);\n      }\n      return block;\n    }()\n  }, {\n    key: \"blockResults\",\n    value: function () {\n      var _blockResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                query = {\n                  method: requests.Method.BlockResults,\n                  params: {\n                    height: height\n                  }\n                };\n                return _context4.abrupt(\"return\", this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function blockResults(_x3) {\n        return _blockResults.apply(this, arguments);\n      }\n      return blockResults;\n    }()\n    /**\n     * Search for events that are in a block.\n     *\n     * NOTE\n     * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n     */\n  }, {\n    key: \"blockSearch\",\n    value: function () {\n      var _blockSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var query, resp;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.BlockSearch\n                };\n                _context5.next = 3;\n                return this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n              case 3:\n                resp = _context5.sent;\n                return _context5.abrupt(\"return\", _objectSpread(_objectSpread({}, resp), {}, {\n                  // make sure we sort by height, as tendermint may be sorting by string value of the height\n                  blocks: _toConsumableArray(resp.blocks).sort(function (a, b) {\n                    return a.block.header.height - b.block.header.height;\n                  })\n                }));\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function blockSearch(_x4) {\n        return _blockSearch.apply(this, arguments);\n      }\n      return blockSearch;\n    }() // this should paginate through all blockSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    //\n    // NOTE\n    // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n  }, {\n    key: \"blockSearchAll\",\n    value: function () {\n      var _blockSearchAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {\n        var page, blocks, done, resp;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                page = params.page || 1;\n                blocks = [];\n                done = false;\n              case 3:\n                if (done) {\n                  _context6.next = 11;\n                  break;\n                }\n                _context6.next = 6;\n                return this.blockSearch(_objectSpread(_objectSpread({}, params), {}, {\n                  page: page\n                }));\n              case 6:\n                resp = _context6.sent;\n                blocks.push.apply(blocks, _toConsumableArray(resp.blocks));\n                if (blocks.length < resp.totalCount) {\n                  page++;\n                } else {\n                  done = true;\n                }\n                _context6.next = 3;\n                break;\n              case 11:\n                // make sure we sort by height, as tendermint may be sorting by string value of the height\n                // and the earlier items may be in a higher page than the later items\n                blocks.sort(function (a, b) {\n                  return a.block.header.height - b.block.header.height;\n                });\n                return _context6.abrupt(\"return\", {\n                  totalCount: blocks.length,\n                  blocks: blocks\n                });\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function blockSearchAll(_x5) {\n        return _blockSearchAll.apply(this, arguments);\n      }\n      return blockSearchAll;\n    }()\n    /**\n     * Queries block headers filtered by minHeight <= height <= maxHeight.\n     *\n     * @param minHeight The minimum height to be included in the result. Defaults to 0.\n     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n     */\n  }, {\n    key: \"blockchain\",\n    value: function () {\n      var _blockchain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(minHeight, maxHeight) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Blockchain,\n                  params: {\n                    minHeight: minHeight,\n                    maxHeight: maxHeight\n                  }\n                };\n                return _context7.abrupt(\"return\", this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain));\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function blockchain(_x6, _x7) {\n        return _blockchain.apply(this, arguments);\n      }\n      return blockchain;\n    }()\n    /**\n     * Broadcast transaction to mempool and wait for response\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n     */\n  }, {\n    key: \"broadcastTxSync\",\n    value: function () {\n      var _broadcastTxSync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.BroadcastTxSync\n                };\n                return _context8.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync));\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function broadcastTxSync(_x8) {\n        return _broadcastTxSync.apply(this, arguments);\n      }\n      return broadcastTxSync;\n    }()\n    /**\n     * Broadcast transaction to mempool and do not wait for result\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n     */\n  }, {\n    key: \"broadcastTxAsync\",\n    value: function () {\n      var _broadcastTxAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.BroadcastTxAsync\n                };\n                return _context9.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync));\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function broadcastTxAsync(_x9) {\n        return _broadcastTxAsync.apply(this, arguments);\n      }\n      return broadcastTxAsync;\n    }()\n    /**\n     * Broadcast transaction to mempool and wait for block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n     */\n  }, {\n    key: \"broadcastTxCommit\",\n    value: function () {\n      var _broadcastTxCommit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.BroadcastTxCommit\n                };\n                return _context10.abrupt(\"return\", this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit));\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function broadcastTxCommit(_x10) {\n        return _broadcastTxCommit.apply(this, arguments);\n      }\n      return broadcastTxCommit;\n    }()\n  }, {\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(height) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Commit,\n                  params: {\n                    height: height\n                  }\n                };\n                return _context11.abrupt(\"return\", this.doCall(query, this.p.encodeCommit, this.r.decodeCommit));\n              case 2:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function commit(_x11) {\n        return _commit.apply(this, arguments);\n      }\n      return commit;\n    }()\n  }, {\n    key: \"genesis\",\n    value: function () {\n      var _genesis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Genesis\n                };\n                return _context12.abrupt(\"return\", this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis));\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function genesis() {\n        return _genesis.apply(this, arguments);\n      }\n      return genesis;\n    }()\n  }, {\n    key: \"health\",\n    value: function () {\n      var _health = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Health\n                };\n                return _context13.abrupt(\"return\", this.doCall(query, this.p.encodeHealth, this.r.decodeHealth));\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function health() {\n        return _health.apply(this, arguments);\n      }\n      return health;\n    }()\n  }, {\n    key: \"numUnconfirmedTxs\",\n    value: function () {\n      var _numUnconfirmedTxs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                query = {\n                  method: requests.Method.NumUnconfirmedTxs\n                };\n                return _context14.abrupt(\"return\", this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs));\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function numUnconfirmedTxs() {\n        return _numUnconfirmedTxs.apply(this, arguments);\n      }\n      return numUnconfirmedTxs;\n    }()\n  }, {\n    key: \"status\",\n    value: function () {\n      var _status = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Status\n                };\n                return _context15.abrupt(\"return\", this.doCall(query, this.p.encodeStatus, this.r.decodeStatus));\n              case 2:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function status() {\n        return _status.apply(this, arguments);\n      }\n      return status;\n    }()\n  }, {\n    key: \"subscribeNewBlock\",\n    value: function subscribeNewBlock() {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.NewBlock\n        }\n      };\n      return this.subscribe(request, this.r.decodeNewBlockEvent);\n    }\n  }, {\n    key: \"subscribeNewBlockHeader\",\n    value: function subscribeNewBlockHeader() {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.NewBlockHeader\n        }\n      };\n      return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n    }\n  }, {\n    key: \"subscribeTx\",\n    value: function subscribeTx(query) {\n      var request = {\n        method: requests.Method.Subscribe,\n        query: {\n          type: requests.SubscriptionEventType.Tx,\n          raw: query\n        }\n      };\n      return this.subscribe(request, this.r.decodeTxEvent);\n    }\n    /**\n     * Get a single transaction by hash\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n     */\n  }, {\n    key: \"tx\",\n    value: function () {\n      var _tx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.Tx\n                };\n                return _context16.abrupt(\"return\", this.doCall(query, this.p.encodeTx, this.r.decodeTx));\n              case 2:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function tx(_x12) {\n        return _tx.apply(this, arguments);\n      }\n      return tx;\n    }()\n    /**\n     * Search for transactions that are in a block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n     */\n  }, {\n    key: \"txSearch\",\n    value: function () {\n      var _txSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                query = {\n                  params: params,\n                  method: requests.Method.TxSearch\n                };\n                return _context17.abrupt(\"return\", this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch));\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function txSearch(_x13) {\n        return _txSearch.apply(this, arguments);\n      }\n      return txSearch;\n    }() // this should paginate through all txSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n  }, {\n    key: \"txSearchAll\",\n    value: function () {\n      var _txSearchAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(params) {\n        var page, txs, done, resp;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                page = params.page || 1;\n                txs = [];\n                done = false;\n              case 3:\n                if (done) {\n                  _context18.next = 11;\n                  break;\n                }\n                _context18.next = 6;\n                return this.txSearch(_objectSpread(_objectSpread({}, params), {}, {\n                  page: page\n                }));\n              case 6:\n                resp = _context18.sent;\n                txs.push.apply(txs, _toConsumableArray(resp.txs));\n                if (txs.length < resp.totalCount) {\n                  page++;\n                } else {\n                  done = true;\n                }\n                _context18.next = 3;\n                break;\n              case 11:\n                return _context18.abrupt(\"return\", {\n                  totalCount: txs.length,\n                  txs: txs\n                });\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function txSearchAll(_x14) {\n        return _txSearchAll.apply(this, arguments);\n      }\n      return txSearchAll;\n    }()\n  }, {\n    key: \"validators\",\n    value: function () {\n      var _validators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(params) {\n        var query;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                query = {\n                  method: requests.Method.Validators,\n                  params: params\n                };\n                return _context19.abrupt(\"return\", this.doCall(query, this.p.encodeValidators, this.r.decodeValidators));\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function validators(_x15) {\n        return _validators.apply(this, arguments);\n      }\n      return validators;\n    }()\n  }, {\n    key: \"validatorsAll\",\n    value: function () {\n      var _validatorsAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(height) {\n        var validators, page, done, blockHeight, response;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                validators = [];\n                page = 1;\n                done = false;\n                blockHeight = height;\n              case 4:\n                if (done) {\n                  _context20.next = 13;\n                  break;\n                }\n                _context20.next = 7;\n                return this.validators({\n                  per_page: 50,\n                  height: blockHeight,\n                  page: page\n                });\n              case 7:\n                response = _context20.sent;\n                validators.push.apply(validators, _toConsumableArray(response.validators));\n                blockHeight = blockHeight || response.blockHeight;\n                if (validators.length < response.total) {\n                  page++;\n                } else {\n                  done = true;\n                }\n                _context20.next = 4;\n                break;\n              case 13:\n                return _context20.abrupt(\"return\", {\n                  // NOTE: Default value is for type safety but this should always be set\n                  blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n                  count: validators.length,\n                  total: validators.length,\n                  validators: validators\n                });\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function validatorsAll(_x16) {\n        return _validatorsAll.apply(this, arguments);\n      }\n      return validatorsAll;\n    }() // doCall is a helper to handle the encode/call/decode logic\n  }, {\n    key: \"doCall\",\n    value: function () {\n      var _doCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(request, encode, decode) {\n        var req, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                req = encode(request);\n                _context21.next = 3;\n                return this.client.execute(req);\n              case 3:\n                result = _context21.sent;\n                return _context21.abrupt(\"return\", decode(result));\n              case 5:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function doCall(_x17, _x18, _x19) {\n        return _doCall.apply(this, arguments);\n      }\n      return doCall;\n    }()\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(request, decode) {\n      if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {\n        throw new Error(\"This RPC client type cannot subscribe to events\");\n      }\n      var req = this.p.encodeSubscribe(request);\n      var eventStream = this.client.listen(req);\n      return eventStream.map(function (event) {\n        return decode(event);\n      });\n    }\n  }], [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(endpoint) {\n        var useHttp, rpcClient;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (!(typeof endpoint === \"object\")) {\n                  _context22.next = 4;\n                  break;\n                }\n                return _context22.abrupt(\"return\", Tendermint34Client.create(new rpcclients_1.HttpClient(endpoint)));\n              case 4:\n                useHttp = endpoint.startsWith(\"http://\") || endpoint.startsWith(\"https://\");\n                rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);\n                return _context22.abrupt(\"return\", Tendermint34Client.create(rpcClient));\n              case 7:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n      function connect(_x20) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * Creates a new Tendermint client given an RPC client.\n     */\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(rpcClient) {\n        var _version;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.detectVersion(rpcClient);\n              case 2:\n                _version = _context23.sent;\n                return _context23.abrupt(\"return\", new Tendermint34Client(rpcClient));\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function create(_x21) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }, {\n    key: \"detectVersion\",\n    value: function () {\n      var _detectVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(client) {\n        var req, response, result, version;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);\n                _context24.next = 3;\n                return client.execute(req);\n              case 3:\n                response = _context24.sent;\n                result = response.result;\n                if (!(!result || !result.node_info)) {\n                  _context24.next = 7;\n                  break;\n                }\n                throw new Error(\"Unrecognized format for status response\");\n              case 7:\n                version = result.node_info.version;\n                if (!(typeof version !== \"string\")) {\n                  _context24.next = 10;\n                  break;\n                }\n                throw new Error(\"Unrecognized version format: must be string\");\n              case 10:\n                return _context24.abrupt(\"return\", version);\n              case 11:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n      function detectVersion(_x22) {\n        return _detectVersion.apply(this, arguments);\n      }\n      return detectVersion;\n    }()\n  }]);\n  return Tendermint34Client;\n}();\nexports.Tendermint34Client = Tendermint34Client;","map":{"version":3,"sources":["../../src/tendermint34/tendermint34client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tendermint34Client = void 0;\nconst jsonrpc_1 = require(\"../jsonrpc\");\nconst rpcclients_1 = require(\"../rpcclients\");\nconst adaptor_1 = require(\"./adaptor\");\nconst requests = __importStar(require(\"./requests\"));\nclass Tendermint34Client {\n    /**\n     * Use `Tendermint34Client.connect` or `Tendermint34Client.create` to create an instance.\n     */\n    constructor(client) {\n        this.client = client;\n        this.p = adaptor_1.adaptor34.params;\n        this.r = adaptor_1.adaptor34.responses;\n    }\n    /**\n     * Creates a new Tendermint client for the given endpoint.\n     *\n     * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n     */\n    static async connect(endpoint) {\n        if (typeof endpoint === \"object\") {\n            return Tendermint34Client.create(new rpcclients_1.HttpClient(endpoint));\n        }\n        else {\n            const useHttp = endpoint.startsWith(\"http://\") || endpoint.startsWith(\"https://\");\n            const rpcClient = useHttp ? new rpcclients_1.HttpClient(endpoint) : new rpcclients_1.WebsocketClient(endpoint);\n            return Tendermint34Client.create(rpcClient);\n        }\n    }\n    /**\n     * Creates a new Tendermint client given an RPC client.\n     */\n    static async create(rpcClient) {\n        // For some very strange reason I don't understand, tests start to fail on some systems\n        // (our CI) when skipping the status call before doing other queries. Sleeping a little\n        // while did not help. Thus we query the version as a way to say \"hi\" to the backend,\n        // even in cases where we don't use the result.\n        const _version = await this.detectVersion(rpcClient);\n        return new Tendermint34Client(rpcClient);\n    }\n    static async detectVersion(client) {\n        const req = (0, jsonrpc_1.createJsonRpcRequest)(requests.Method.Status);\n        const response = await client.execute(req);\n        const result = response.result;\n        if (!result || !result.node_info) {\n            throw new Error(\"Unrecognized format for status response\");\n        }\n        const version = result.node_info.version;\n        if (typeof version !== \"string\") {\n            throw new Error(\"Unrecognized version format: must be string\");\n        }\n        return version;\n    }\n    disconnect() {\n        this.client.disconnect();\n    }\n    async abciInfo() {\n        const query = { method: requests.Method.AbciInfo };\n        return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);\n    }\n    async abciQuery(params) {\n        const query = { params: params, method: requests.Method.AbciQuery };\n        return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);\n    }\n    async block(height) {\n        const query = { method: requests.Method.Block, params: { height: height } };\n        return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);\n    }\n    async blockResults(height) {\n        const query = {\n            method: requests.Method.BlockResults,\n            params: { height: height },\n        };\n        return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);\n    }\n    /**\n     * Search for events that are in a block.\n     *\n     * NOTE\n     * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n     */\n    async blockSearch(params) {\n        const query = { params: params, method: requests.Method.BlockSearch };\n        const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n        return {\n            ...resp,\n            // make sure we sort by height, as tendermint may be sorting by string value of the height\n            blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height),\n        };\n    }\n    // this should paginate through all blockSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    //\n    // NOTE\n    // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n    async blockSearchAll(params) {\n        let page = params.page || 1;\n        const blocks = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.blockSearch({ ...params, page: page });\n            blocks.push(...resp.blocks);\n            if (blocks.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        // make sure we sort by height, as tendermint may be sorting by string value of the height\n        // and the earlier items may be in a higher page than the later items\n        blocks.sort((a, b) => a.block.header.height - b.block.header.height);\n        return {\n            totalCount: blocks.length,\n            blocks: blocks,\n        };\n    }\n    /**\n     * Queries block headers filtered by minHeight <= height <= maxHeight.\n     *\n     * @param minHeight The minimum height to be included in the result. Defaults to 0.\n     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n     */\n    async blockchain(minHeight, maxHeight) {\n        const query = {\n            method: requests.Method.Blockchain,\n            params: {\n                minHeight: minHeight,\n                maxHeight: maxHeight,\n            },\n        };\n        return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for response\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n     */\n    async broadcastTxSync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxSync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);\n    }\n    /**\n     * Broadcast transaction to mempool and do not wait for result\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n     */\n    async broadcastTxAsync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxAsync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n     */\n    async broadcastTxCommit(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxCommit };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);\n    }\n    async commit(height) {\n        const query = { method: requests.Method.Commit, params: { height: height } };\n        return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);\n    }\n    async genesis() {\n        const query = { method: requests.Method.Genesis };\n        return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);\n    }\n    async health() {\n        const query = { method: requests.Method.Health };\n        return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);\n    }\n    async numUnconfirmedTxs() {\n        const query = { method: requests.Method.NumUnconfirmedTxs };\n        return this.doCall(query, this.p.encodeNumUnconfirmedTxs, this.r.decodeNumUnconfirmedTxs);\n    }\n    async status() {\n        const query = { method: requests.Method.Status };\n        return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);\n    }\n    subscribeNewBlock() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlock },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockEvent);\n    }\n    subscribeNewBlockHeader() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlockHeader },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n    }\n    subscribeTx(query) {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: {\n                type: requests.SubscriptionEventType.Tx,\n                raw: query,\n            },\n        };\n        return this.subscribe(request, this.r.decodeTxEvent);\n    }\n    /**\n     * Get a single transaction by hash\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n     */\n    async tx(params) {\n        const query = { params: params, method: requests.Method.Tx };\n        return this.doCall(query, this.p.encodeTx, this.r.decodeTx);\n    }\n    /**\n     * Search for transactions that are in a block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n     */\n    async txSearch(params) {\n        const query = { params: params, method: requests.Method.TxSearch };\n        return this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);\n    }\n    // this should paginate through all txSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    async txSearchAll(params) {\n        let page = params.page || 1;\n        const txs = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.txSearch({ ...params, page: page });\n            txs.push(...resp.txs);\n            if (txs.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        return {\n            totalCount: txs.length,\n            txs: txs,\n        };\n    }\n    async validators(params) {\n        const query = {\n            method: requests.Method.Validators,\n            params: params,\n        };\n        return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);\n    }\n    async validatorsAll(height) {\n        const validators = [];\n        let page = 1;\n        let done = false;\n        let blockHeight = height;\n        while (!done) {\n            const response = await this.validators({\n                per_page: 50,\n                height: blockHeight,\n                page: page,\n            });\n            validators.push(...response.validators);\n            blockHeight = blockHeight || response.blockHeight;\n            if (validators.length < response.total) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        return {\n            // NOTE: Default value is for type safety but this should always be set\n            blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n            count: validators.length,\n            total: validators.length,\n            validators: validators,\n        };\n    }\n    // doCall is a helper to handle the encode/call/decode logic\n    async doCall(request, encode, decode) {\n        const req = encode(request);\n        const result = await this.client.execute(req);\n        return decode(result);\n    }\n    subscribe(request, decode) {\n        if (!(0, rpcclients_1.instanceOfRpcStreamingClient)(this.client)) {\n            throw new Error(\"This RPC client type cannot subscribe to events\");\n        }\n        const req = this.p.encodeSubscribe(request);\n        const eventStream = this.client.listen(req);\n        return eventStream.map((event) => {\n            return decode(event);\n        });\n    }\n}\nexports.Tendermint34Client = Tendermint34Client;\n//# sourceMappingURL=tendermint34client.js.map"]},"metadata":{},"sourceType":"script"}