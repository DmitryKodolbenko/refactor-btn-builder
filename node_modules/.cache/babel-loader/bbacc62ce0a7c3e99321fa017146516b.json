{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcClient = void 0;\nconst stream_1 = require(\"@cosmjs/stream\");\nconst types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\nclass JsonRpcClient {\n  constructor(connection) {\n    this.connection = connection;\n  }\n  async run(request) {\n    const filteredStream = this.connection.responseStream.filter(r => r.id === request.id);\n    const pendingResponses = (0, stream_1.firstEvent)(filteredStream);\n    this.connection.sendRequest(request);\n    const response = await pendingResponses;\n    if ((0, types_1.isJsonRpcErrorResponse)(response)) {\n      const error = response.error;\n      throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);\n    }\n    return response;\n  }\n}\nexports.JsonRpcClient = JsonRpcClient;","map":{"version":3,"sources":["../src/jsonrpcclient.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAOA;;;;;AAKG;AACH,MAAa,aAAa,CAAA;EAGxB,WAAA,CAAmB,UAAsE,EAAA;IACvF,IAAI,CAAC,UAAU,GAAG,UAAU;EAC9B;EAEO,MAAM,GAAG,CAAC,OAAuB,EAAA;IACtC,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAE,CAAC,IAAK,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC;IACxF,MAAM,gBAAgB,GAAG,CAAA,CAAA,EAAA,QAAA,CAAA,UAAU,EAAC,cAAc,CAAC;IACnD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC;IAEpC,MAAM,QAAQ,GAAG,MAAM,gBAAgB;IACvC,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,sBAAsB,EAAC,QAAQ,CAAC,EAAE;MACpC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK;MAC5B,MAAM,IAAI,KAAK,CAAC,wBAAwB,KAAK,CAAC,IAAI,cAAc,KAAK,CAAC,OAAO,GAAG,CAAC;IAClF;IAED,OAAO,QAAQ;EACjB;AACD;AApBD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcClient = void 0;\nconst stream_1 = require(\"@cosmjs/stream\");\nconst types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\nclass JsonRpcClient {\n    constructor(connection) {\n        this.connection = connection;\n    }\n    async run(request) {\n        const filteredStream = this.connection.responseStream.filter((r) => r.id === request.id);\n        const pendingResponses = (0, stream_1.firstEvent)(filteredStream);\n        this.connection.sendRequest(request);\n        const response = await pendingResponses;\n        if ((0, types_1.isJsonRpcErrorResponse)(response)) {\n            const error = response.error;\n            throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);\n        }\n        return response;\n    }\n}\nexports.JsonRpcClient = JsonRpcClient;\n//# sourceMappingURL=jsonrpcclient.js.map"]},"metadata":{},"sourceType":"script"}