{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst query_1 = require(\"cosmjs-types/cosmos/staking/v1beta1/query\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupStakingExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    staking: {\n      delegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.Delegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorUnbondingDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      delegatorValidator: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.DelegatorValidator({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorValidators: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorValidators({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      historicalInfo: async height => {\n        const response = await queryService.HistoricalInfo({\n          height: long_1.default.fromNumber(height, true)\n        });\n        return response;\n      },\n      params: async () => {\n        const response = await queryService.Params({});\n        return response;\n      },\n      pool: async () => {\n        const response = await queryService.Pool({});\n        return response;\n      },\n      redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n        const response = await queryService.Redelegations({\n          delegatorAddr: delegatorAddress,\n          srcValidatorAddr: sourceValidatorAddress,\n          dstValidatorAddr: destinationValidatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.UnbondingDelegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validator: async validatorAddress => {\n        const response = await queryService.Validator({\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validatorDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorDelegations({\n          validatorAddr: validatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      validators: async (status, paginationKey) => {\n        const response = await queryService.Validators({\n          status: status,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorUnbondingDelegations({\n          validatorAddr: validatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      }\n    }\n  };\n}\nexports.setupStakingExtension = setupStakingExtension;","map":{"version":3,"sources":["../../../src/modules/staking/queries.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst query_1 = require(\"cosmjs-types/cosmos/staking/v1beta1/query\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupStakingExtension(base) {\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        staking: {\n            delegation: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.Delegation({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            delegatorDelegations: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorDelegations({\n                    delegatorAddr: delegatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorUnbondingDelegations({\n                    delegatorAddr: delegatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            delegatorValidator: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.DelegatorValidator({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            delegatorValidators: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorValidators({\n                    delegatorAddr: delegatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            historicalInfo: async (height) => {\n                const response = await queryService.HistoricalInfo({\n                    height: long_1.default.fromNumber(height, true),\n                });\n                return response;\n            },\n            params: async () => {\n                const response = await queryService.Params({});\n                return response;\n            },\n            pool: async () => {\n                const response = await queryService.Pool({});\n                return response;\n            },\n            redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n                const response = await queryService.Redelegations({\n                    delegatorAddr: delegatorAddress,\n                    srcValidatorAddr: sourceValidatorAddress,\n                    dstValidatorAddr: destinationValidatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.UnbondingDelegation({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            validator: async (validatorAddress) => {\n                const response = await queryService.Validator({ validatorAddr: validatorAddress });\n                return response;\n            },\n            validatorDelegations: async (validatorAddress, paginationKey) => {\n                const response = await queryService.ValidatorDelegations({\n                    validatorAddr: validatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            validators: async (status, paginationKey) => {\n                const response = await queryService.Validators({\n                    status: status,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n                const response = await queryService.ValidatorUnbondingDelegations({\n                    validatorAddr: validatorAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n        },\n    };\n}\nexports.setupStakingExtension = setupStakingExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}