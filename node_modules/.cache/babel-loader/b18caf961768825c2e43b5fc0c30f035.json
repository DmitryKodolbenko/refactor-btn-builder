{"ast":null,"code":"/**\n * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`\n *\n * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.\n *\n * @since 2.0.0\n */\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Magma`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse, concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(reverse(N.MagmaSub))(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), 2)\n *\n * @since 2.11.0\n */\nexport var reverse = function reverse(M) {\n  return {\n    concat: function concat(first, second) {\n      return M.concat(second, first);\n    }\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var filterFirst = function filterFirst(predicate) {\n  return function (M) {\n    return {\n      concat: function concat(first, second) {\n        return predicate(first) ? M.concat(first, second) : second;\n      }\n    };\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var filterSecond = function filterSecond(predicate) {\n  return function (M) {\n    return {\n      concat: function concat(first, second) {\n        return predicate(second) ? M.concat(first, second) : first;\n      }\n    };\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var endo = function endo(f) {\n  return function (M) {\n    return {\n      concat: function concat(first, second) {\n        return M.concat(f(first), f(second));\n      }\n    };\n  };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(N.MagmaSub)(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), -6)\n *\n * @since 2.11.0\n */\nexport var concatAll = function concatAll(M) {\n  return function (startWith) {\n    return function (as) {\n      return as.reduce(function (a, acc) {\n        return M.concat(a, acc);\n      }, startWith);\n    };\n  };\n};","map":{"version":3,"names":["reverse","M","concat","first","second","filterFirst","predicate","filterSecond","endo","f","concatAll","startWith","as","reduce","a","acc"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/fp-ts/es6/Magma.js"],"sourcesContent":["/**\n * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`\n *\n * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.\n *\n * @since 2.0.0\n */\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Magma`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse, concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(reverse(N.MagmaSub))(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), 2)\n *\n * @since 2.11.0\n */\nexport var reverse = function (M) { return ({\n    concat: function (first, second) { return M.concat(second, first); }\n}); };\n/**\n * @since 2.11.0\n */\nexport var filterFirst = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(first) ? M.concat(first, second) : second); }\n    }); };\n};\n/**\n * @since 2.11.0\n */\nexport var filterSecond = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(second) ? M.concat(first, second) : first); }\n    }); };\n};\n/**\n * @since 2.11.0\n */\nexport var endo = function (f) {\n    return function (M) { return ({\n        concat: function (first, second) { return M.concat(f(first), f(second)); }\n    }); };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(N.MagmaSub)(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), -6)\n *\n * @since 2.11.0\n */\nexport var concatAll = function (M) {\n    return function (startWith) {\n        return function (as) {\n            return as.reduce(function (a, acc) { return M.concat(a, acc); }, startWith);\n        };\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,OAAO,GAAG,SAAVA,OAAO,CAAaC,CAAC,EAAE;EAAE,OAAQ;IACxCC,MAAM,EAAE,gBAAUC,KAAK,EAAEC,MAAM,EAAE;MAAE,OAAOH,CAAC,CAACC,MAAM,CAACE,MAAM,EAAED,KAAK,CAAC;IAAE;EACvE,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA,OAAO,IAAIE,WAAW,GAAG,SAAdA,WAAW,CAAaC,SAAS,EAAE;EAC1C,OAAO,UAAUL,CAAC,EAAE;IAAE,OAAQ;MAC1BC,MAAM,EAAE,gBAAUC,KAAK,EAAEC,MAAM,EAAE;QAAE,OAAQE,SAAS,CAACH,KAAK,CAAC,GAAGF,CAAC,CAACC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGA,MAAM;MAAG;IACrG,CAAC;EAAG,CAAC;AACT,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIG,YAAY,GAAG,SAAfA,YAAY,CAAaD,SAAS,EAAE;EAC3C,OAAO,UAAUL,CAAC,EAAE;IAAE,OAAQ;MAC1BC,MAAM,EAAE,gBAAUC,KAAK,EAAEC,MAAM,EAAE;QAAE,OAAQE,SAAS,CAACF,MAAM,CAAC,GAAGH,CAAC,CAACC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGD,KAAK;MAAG;IACrG,CAAC;EAAG,CAAC;AACT,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIK,IAAI,GAAG,SAAPA,IAAI,CAAaC,CAAC,EAAE;EAC3B,OAAO,UAAUR,CAAC,EAAE;IAAE,OAAQ;MAC1BC,MAAM,EAAE,gBAAUC,KAAK,EAAEC,MAAM,EAAE;QAAE,OAAOH,CAAC,CAACC,MAAM,CAACO,CAAC,CAACN,KAAK,CAAC,EAAEM,CAAC,CAACL,MAAM,CAAC,CAAC;MAAE;IAC7E,CAAC;EAAG,CAAC;AACT,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIM,SAAS,GAAG,SAAZA,SAAS,CAAaT,CAAC,EAAE;EAChC,OAAO,UAAUU,SAAS,EAAE;IACxB,OAAO,UAAUC,EAAE,EAAE;MACjB,OAAOA,EAAE,CAACC,MAAM,CAAC,UAAUC,CAAC,EAAEC,GAAG,EAAE;QAAE,OAAOd,CAAC,CAACC,MAAM,CAACY,CAAC,EAAEC,GAAG,CAAC;MAAE,CAAC,EAAEJ,SAAS,CAAC;IAC/E,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module"}