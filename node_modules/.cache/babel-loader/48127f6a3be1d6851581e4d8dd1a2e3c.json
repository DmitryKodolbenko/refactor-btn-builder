{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cell = void 0;\nconst BitString_1 = require(\"./BitString\");\nconst boc_1 = require(\"./boc\");\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass Cell {\n  constructor() {\n    let kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ordinary';\n    let bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BitString_1.BitString.alloc(1023);\n    this.refs = [];\n    this[_a] = () => this.toString();\n    this.kind = kind;\n    this.bits = bits;\n  }\n  static fromBoc(src) {\n    return (0, boc_1.deserializeBoc)(typeof src === 'string' ? Buffer.from(src, 'hex') : src);\n  }\n  get isExotic() {\n    return this.kind !== 'ordinary';\n  }\n  beginParse() {\n    if (this.isExotic) {\n      throw Error('Unable to parse exotic cell');\n    }\n    return __1.Slice.fromCell(this);\n  }\n  writeCell(anotherCell) {\n    this.bits.writeBitString(anotherCell.bits);\n    for (let r of anotherCell.refs) {\n      this.refs.push(r);\n    }\n  }\n  hash() {\n    return (0, boc_1.hashCell)(this);\n  }\n  toBoc(opts) {\n    let idx = opts && opts.idx !== null && opts.idx !== undefined ? opts.idx : true;\n    let crc32 = opts && opts.crc32 !== null && opts.crc32 !== undefined ? opts.crc32 : true;\n    let cacheBits = opts && opts.cacheBits !== null && opts.cacheBits !== undefined ? opts.cacheBits : false;\n    let flags = opts && opts.flags !== null && opts.flags !== undefined ? opts.flags : 0;\n    return (0, boc_1.serializeToBoc)(this, idx, crc32, cacheBits, flags);\n  }\n  toString(indent) {\n    let id = indent || '';\n    let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n    for (let k in this.refs) {\n      const i = this.refs[k];\n      s += i.toString(id + ' ');\n    }\n    return s;\n  }\n  toDebugString(indent) {\n    let id = indent || '';\n    if (this.isExotic) {\n      id += '(exotic)';\n    }\n    let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n    for (let k in this.refs) {\n      const i = this.refs[k];\n      s += i.toString(id + ' ');\n    }\n    return s;\n  }\n  withReference(cell) {\n    this.refs.push(cell);\n    return this;\n  }\n  withData(src) {\n    for (let s of src) {\n      if (s === '0') {\n        this.bits.writeBit(0);\n      } else {\n        this.bits.writeBit(1);\n      }\n    }\n    return this;\n  }\n  equals(src) {\n    if (src.refs.length !== this.refs.length) {\n      return false;\n    }\n    for (let i = 0; i < src.refs.length; i++) {\n      if (!src.refs[i].equals(this.refs[i])) {\n        return false;\n      }\n    }\n    return this.bits.equals(src.bits);\n  }\n  getMaxLevel() {\n    return (0, boc_1.getMaxLevel)(this);\n  }\n  getMaxDepth() {\n    return (0, boc_1.getMaxDepth)(this);\n  }\n}\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;","map":{"version":3,"names":["__importDefault","mod","__esModule","_a","Object","defineProperty","exports","value","Cell","BitString_1","require","boc_1","symbol_inspect_1","__1","constructor","kind","bits","BitString","alloc","refs","toString","fromBoc","src","deserializeBoc","Buffer","from","isExotic","beginParse","Error","Slice","fromCell","writeCell","anotherCell","writeBitString","r","push","hash","hashCell","toBoc","opts","idx","undefined","crc32","cacheBits","flags","serializeToBoc","indent","id","s","toFiftHex","k","i","toDebugString","withReference","cell","withData","writeBit","equals","length","getMaxLevel","getMaxDepth","default"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/Cell.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cell = void 0;\nconst BitString_1 = require(\"./BitString\");\nconst boc_1 = require(\"./boc\");\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass Cell {\n    constructor(kind = 'ordinary', bits = BitString_1.BitString.alloc(1023)) {\n        this.refs = [];\n        this[_a] = () => this.toString();\n        this.kind = kind;\n        this.bits = bits;\n    }\n    static fromBoc(src) {\n        return (0, boc_1.deserializeBoc)(typeof src === 'string' ? Buffer.from(src, 'hex') : src);\n    }\n    get isExotic() {\n        return this.kind !== 'ordinary';\n    }\n    beginParse() {\n        if (this.isExotic) {\n            throw Error('Unable to parse exotic cell');\n        }\n        return __1.Slice.fromCell(this);\n    }\n    writeCell(anotherCell) {\n        this.bits.writeBitString(anotherCell.bits);\n        for (let r of anotherCell.refs) {\n            this.refs.push(r);\n        }\n    }\n    hash() {\n        return (0, boc_1.hashCell)(this);\n    }\n    toBoc(opts) {\n        let idx = (opts && opts.idx !== null && opts.idx !== undefined) ? opts.idx : true;\n        let crc32 = (opts && opts.crc32 !== null && opts.crc32 !== undefined) ? opts.crc32 : true;\n        let cacheBits = (opts && opts.cacheBits !== null && opts.cacheBits !== undefined) ? opts.cacheBits : false;\n        let flags = (opts && opts.flags !== null && opts.flags !== undefined) ? opts.flags : 0;\n        return (0, boc_1.serializeToBoc)(this, idx, crc32, cacheBits, flags);\n    }\n    toString(indent) {\n        let id = indent || '';\n        let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n        for (let k in this.refs) {\n            const i = this.refs[k];\n            s += i.toString(id + ' ');\n        }\n        return s;\n    }\n    toDebugString(indent) {\n        let id = indent || '';\n        if (this.isExotic) {\n            id += '(exotic)';\n        }\n        let s = id + 'x{' + this.bits.toFiftHex() + '}\\n';\n        for (let k in this.refs) {\n            const i = this.refs[k];\n            s += i.toString(id + ' ');\n        }\n        return s;\n    }\n    withReference(cell) {\n        this.refs.push(cell);\n        return this;\n    }\n    withData(src) {\n        for (let s of src) {\n            if (s === '0') {\n                this.bits.writeBit(0);\n            }\n            else {\n                this.bits.writeBit(1);\n            }\n        }\n        return this;\n    }\n    equals(src) {\n        if (src.refs.length !== this.refs.length) {\n            return false;\n        }\n        for (let i = 0; i < src.refs.length; i++) {\n            if (!src.refs[i].equals(this.refs[i])) {\n                return false;\n            }\n        }\n        return this.bits.equals(src.bits);\n    }\n    getMaxLevel() {\n        return (0, boc_1.getMaxLevel)(this);\n    }\n    getMaxDepth() {\n        return (0, boc_1.getMaxDepth)(this);\n    }\n}\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}