{"ast":null,"code":"import phantom from\"../static/img/phantom.png\";import near from\"../static/img/near.png\";import tonIco from\"../static/img/ton.png\";import keplr from\"../static/img/keplr.png\";import metamask from\"../static/img/metamask.png\";import{Button}from\"antd\";import React from\"react\";import{utils}from\"near-api-js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SUGGESTED_DONATION=\"0\";var BOATLOAD_OF_GAS=utils.format.parseNearAmount(\"0.00000000003\");// const Content: React.FC = () => {\n// if (loading) {\n//   return null;\n// }\n//   if (!account) {\n//     return (\n//       <Fragment>\n//         <div>\n//           <button onClick={handleSignIn}>Log in</button>\n//         </div>\n//         <SignIn />\n//       </Fragment>\n//     );\n//   }\n//   return (\n//     <Fragment>\n//       <div>\n//         <button onClick={handleSignOut}>Log out</button>\n//         <button onClick={handleSwitchWallet}>Switch Wallet</button>\n//         <button onClick={handleVerifyOwner}>Verify Owner</button>\n//         {accounts.length > 1 && (\n//           <button onClick={handleSwitchAccount}>Switch Account</button>\n//         )}\n//       </div>\n//       <Form\n//         account={account}\n//         onSubmit={(e) => handleSubmit(e as unknown as Submitted)}\n//       />\n//       <Messages messages={messages} />\n//     </Fragment>\n//   );\n// };\nvar zipName=function zipName(name){return\"\".concat(name.slice(0,5),\"...\").concat(name.slice(-3));};export var generateBtn=function generateBtn(currencyName,btnProps){var selector=btnProps.selector,modal=btnProps.modal,accounts=btnProps.accounts,accountId=btnProps.accountId;// const addMessages = useCallback(\n// \tasync (message: string, donation: string, multiple: boolean) => {\n// \t\tconst { contract } = selector.store.getState();\n// \t\tconst wallet = await selector.wallet();\n// \t\tif (!multiple) {\n// \t\t\treturn wallet\n// \t\t\t\t.signAndSendTransaction({\n// \t\t\t\t\tsignerId: accountId!,\n// \t\t\t\t\tactions: [\n// \t\t\t\t\t\t{\n// \t\t\t\t\t\t\ttype: \"FunctionCall\",\n// \t\t\t\t\t\t\tparams: {\n// \t\t\t\t\t\t\t\tmethodName: \"addMessage\",\n// \t\t\t\t\t\t\t\targs: { text: message },\n// \t\t\t\t\t\t\t\tgas: BOATLOAD_OF_GAS,\n// \t\t\t\t\t\t\t\tdeposit: utils.format.parseNearAmount(donation)!,\n// \t\t\t\t\t\t\t},\n// \t\t\t\t\t\t},\n// \t\t\t\t\t],\n// \t\t\t\t})\n// \t\t\t\t.catch((err) => {\n// \t\t\t\t\talert(\"Failed to add message\");\n// \t\t\t\t\tconsole.log(\"Failed to add message\");\n// \t\t\t\t\tthrow err;\n// \t\t\t\t});\n// \t\t}\n// \t\tconst transactions: Array<Transaction> = [];\n// \t\tfor (let i = 0; i < 2; i += 1) {\n// \t\t\ttransactions.push({\n// \t\t\t\tsignerId: accountId!,\n// \t\t\t\treceiverId: contract!.contractId,\n// \t\t\t\tactions: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\ttype: \"FunctionCall\",\n// \t\t\t\t\t\tparams: {\n// \t\t\t\t\t\t\tmethodName: \"addMessage\",\n// \t\t\t\t\t\t\targs: {\n// \t\t\t\t\t\t\t\ttext: `${message} (${i + 1}/2)`,\n// \t\t\t\t\t\t\t},\n// \t\t\t\t\t\t\tgas: BOATLOAD_OF_GAS,\n// \t\t\t\t\t\t\tdeposit: utils.format.parseNearAmount(donation)!,\n// \t\t\t\t\t\t},\n// \t\t\t\t\t},\n// \t\t\t\t],\n// \t\t\t});\n// \t\t}\n// \t\treturn wallet.signAndSendTransactions({ transactions }).catch((err) => {\n// \t\t\talert(\"Failed to add messages exception \" + err);\n// \t\t\tconsole.log(\"Failed to add messages\");\n// \t\t\tthrow err;\n// \t\t});\n// \t},\n// \t[selector, accountId]\n// );\n// const handleVerifyOwner = async () => {\n// \tconst wallet = await selector.wallet();\n// \ttry {\n// \t\tconst owner = await wallet.verifyOwner({\n// \t\t\tmessage: \"test message for verification\",\n// \t\t});\n// \t\tif (owner) {\n// \t\t\talert(`Signature for verification: ${JSON.stringify(owner)}`);\n// \t\t}\n// \t} catch (err) {\n// \t\tconst message =\n// \t\t\terr instanceof Error ? err.message : \"Something went wrong\";\n// \t\talert(message);\n// \t}\n// };\n// const handleSubmit = useCallback(\n// \tasync (e: Submitted) => {\n// \t\te.preventDefault();\n// \t\tconst { fieldset, message, donation, multiple } = e.target.elements;\n// \t\tfieldset.disabled = true;\n// \t\treturn addMessages(message.value, donation.value || \"0\", multiple.checked)\n// \t\t\t.then(() => {\n// \t\t\t\treturn getMessages()\n// \t\t\t\t\t.then((nextMessages) => {\n// \t\t\t\t\t\tsetMessages(nextMessages);\n// \t\t\t\t\t\tmessage.value = \"\";\n// \t\t\t\t\t\tdonation.value = SUGGESTED_DONATION;\n// \t\t\t\t\t\tfieldset.disabled = false;\n// \t\t\t\t\t\tmultiple.checked = false;\n// \t\t\t\t\t\tmessage.focus();\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\talert(\"Failed to refresh messages\");\n// \t\t\t\t\t\tconsole.log(\"Failed to refresh messages\");\n// \t\t\t\t\t\tthrow err;\n// \t\t\t\t\t});\n// \t\t\t})\n// \t\t\t.catch((err) => {\n// \t\t\t\tconsole.error(err);\n// \t\t\t\tfieldset.disabled = false;\n// \t\t\t});\n// \t},\n// \t[addMessages, getMessages]\n// );\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[currencyName===\"SOL\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletSOL(btnProps.setSOLWalletKey);},children:btnProps.SOLwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:phantom,alt:\"#\"}),zipName(btnProps.SOLwalletKey)]}):\"Connect wallet\"}):null,currencyName===\"TON\"||currencyName===\"wNEAR (TON)\"||currencyName===\"wETH (TON)\"||currencyName===\"wSOL (TON)\"||currencyName===\"wAURORA (TON)\"||currencyName===\"wUSN (TON)\"||currencyName===\"wATOM (TON)\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletTON(btnProps.setTONwalletKey);},children:btnProps.TONwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:tonIco,alt:\"#\"}),zipName(btnProps.TONwalletKey)]}):\"Connect wallet\"}):null,currencyName===\"USN\"||currencyName===\"NEAR\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletNEAR(btnProps.setNEARwalletKey);},children:btnProps.NEARwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:near,alt:\"#\"}),zipName(btnProps.NEARwalletKey)]}):\"Connect wallet\"}):null,currencyName===\"ATOM\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletATOM(btnProps.setATOMwalletKey);},children:btnProps.ATOMwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:keplr,alt:\"#\"}),zipName(btnProps.ATOMwalletKey)]}):\"Connect wallet\"}):null,currencyName===\"AURORA\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletAUR(btnProps.setAURwalletKey);},children:btnProps.AURwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:metamask,alt:\"#\"}),zipName(btnProps.AURwalletKey)]}):\"Connect wallet\"}):null,currencyName===\"ETH\"?/*#__PURE__*/_jsx(Button,{type:\"primary\",id:\"connectWalletBtn\",onClick:function onClick(){return btnProps.connectWalletETH(btnProps.setETHWalletKey);},children:btnProps.ETHwalletKey?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:metamask,alt:\"#\"}),zipName(btnProps.ETHwalletKey)]}):\"Connect wallet\"}):null]});};","map":{"version":3,"names":["phantom","near","tonIco","keplr","metamask","Button","React","utils","SUGGESTED_DONATION","BOATLOAD_OF_GAS","format","parseNearAmount","zipName","name","slice","generateBtn","currencyName","btnProps","selector","modal","accounts","accountId","connectWalletSOL","setSOLWalletKey","SOLwalletKey","connectWalletTON","setTONwalletKey","TONwalletKey","connectWalletNEAR","setNEARwalletKey","NEARwalletKey","connectWalletATOM","setATOMwalletKey","ATOMwalletKey","connectWalletAUR","setAURwalletKey","AURwalletKey","connectWalletETH","setETHWalletKey","ETHwalletKey"],"sources":["/Users/sepezho/Work/tonana/fe/src/components/BtnBuilder.tsx"],"sourcesContent":["import phantom from \"../static/img/phantom.png\";\nimport near from \"../static/img/near.png\";\nimport tonIco from \"../static/img/ton.png\";\nimport keplr from \"../static/img/keplr.png\";\nimport metamask from \"../static/img/metamask.png\";\n\nimport { Button } from \"antd\";\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { providers, utils } from \"near-api-js\";\nimport type {\n\tAccountView,\n\tCodeResult,\n} from \"near-api-js/lib/providers/provider\";\nimport type { Transaction } from \"@near-wallet-selector/core\";\n\nimport { useWalletSelector } from \"../contexts/WalletSelectorContext\";\n\ntype Submitted = SubmitEvent & {\n\ttarget: { elements: { [key: string]: HTMLInputElement } };\n};\n\nconst SUGGESTED_DONATION = \"0\";\nconst BOATLOAD_OF_GAS = utils.format.parseNearAmount(\"0.00000000003\")!;\n\n// const Content: React.FC = () => {\n\n// if (loading) {\n//   return null;\n// }\n\n//   if (!account) {\n//     return (\n//       <Fragment>\n//         <div>\n//           <button onClick={handleSignIn}>Log in</button>\n//         </div>\n//         <SignIn />\n//       </Fragment>\n//     );\n//   }\n\n//   return (\n//     <Fragment>\n//       <div>\n//         <button onClick={handleSignOut}>Log out</button>\n//         <button onClick={handleSwitchWallet}>Switch Wallet</button>\n//         <button onClick={handleVerifyOwner}>Verify Owner</button>\n//         {accounts.length > 1 && (\n//           <button onClick={handleSwitchAccount}>Switch Account</button>\n//         )}\n//       </div>\n//       <Form\n//         account={account}\n//         onSubmit={(e) => handleSubmit(e as unknown as Submitted)}\n//       />\n//       <Messages messages={messages} />\n//     </Fragment>\n//   );\n// };\n\nconst zipName = (name: string) => `${name.slice(0, 5)}...${name.slice(-3)}`;\n\nexport const generateBtn = (currencyName: string, btnProps: any) => {\n\tconst { selector, modal, accounts, accountId } = btnProps;\n\n\t// const addMessages = useCallback(\n\t// \tasync (message: string, donation: string, multiple: boolean) => {\n\t// \t\tconst { contract } = selector.store.getState();\n\t// \t\tconst wallet = await selector.wallet();\n\n\t// \t\tif (!multiple) {\n\t// \t\t\treturn wallet\n\t// \t\t\t\t.signAndSendTransaction({\n\t// \t\t\t\t\tsignerId: accountId!,\n\t// \t\t\t\t\tactions: [\n\t// \t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\ttype: \"FunctionCall\",\n\t// \t\t\t\t\t\t\tparams: {\n\t// \t\t\t\t\t\t\t\tmethodName: \"addMessage\",\n\t// \t\t\t\t\t\t\t\targs: { text: message },\n\t// \t\t\t\t\t\t\t\tgas: BOATLOAD_OF_GAS,\n\t// \t\t\t\t\t\t\t\tdeposit: utils.format.parseNearAmount(donation)!,\n\t// \t\t\t\t\t\t\t},\n\t// \t\t\t\t\t\t},\n\t// \t\t\t\t\t],\n\t// \t\t\t\t})\n\t// \t\t\t\t.catch((err) => {\n\t// \t\t\t\t\talert(\"Failed to add message\");\n\t// \t\t\t\t\tconsole.log(\"Failed to add message\");\n\n\t// \t\t\t\t\tthrow err;\n\t// \t\t\t\t});\n\t// \t\t}\n\n\t// \t\tconst transactions: Array<Transaction> = [];\n\n\t// \t\tfor (let i = 0; i < 2; i += 1) {\n\t// \t\t\ttransactions.push({\n\t// \t\t\t\tsignerId: accountId!,\n\t// \t\t\t\treceiverId: contract!.contractId,\n\t// \t\t\t\tactions: [\n\t// \t\t\t\t\t{\n\t// \t\t\t\t\t\ttype: \"FunctionCall\",\n\t// \t\t\t\t\t\tparams: {\n\t// \t\t\t\t\t\t\tmethodName: \"addMessage\",\n\t// \t\t\t\t\t\t\targs: {\n\t// \t\t\t\t\t\t\t\ttext: `${message} (${i + 1}/2)`,\n\t// \t\t\t\t\t\t\t},\n\t// \t\t\t\t\t\t\tgas: BOATLOAD_OF_GAS,\n\t// \t\t\t\t\t\t\tdeposit: utils.format.parseNearAmount(donation)!,\n\t// \t\t\t\t\t\t},\n\t// \t\t\t\t\t},\n\t// \t\t\t\t],\n\t// \t\t\t});\n\t// \t\t}\n\n\t// \t\treturn wallet.signAndSendTransactions({ transactions }).catch((err) => {\n\t// \t\t\talert(\"Failed to add messages exception \" + err);\n\t// \t\t\tconsole.log(\"Failed to add messages\");\n\n\t// \t\t\tthrow err;\n\t// \t\t});\n\t// \t},\n\t// \t[selector, accountId]\n\t// );\n\n\t// const handleVerifyOwner = async () => {\n\t// \tconst wallet = await selector.wallet();\n\t// \ttry {\n\t// \t\tconst owner = await wallet.verifyOwner({\n\t// \t\t\tmessage: \"test message for verification\",\n\t// \t\t});\n\n\t// \t\tif (owner) {\n\t// \t\t\talert(`Signature for verification: ${JSON.stringify(owner)}`);\n\t// \t\t}\n\t// \t} catch (err) {\n\t// \t\tconst message =\n\t// \t\t\terr instanceof Error ? err.message : \"Something went wrong\";\n\t// \t\talert(message);\n\t// \t}\n\t// };\n\n\t// const handleSubmit = useCallback(\n\t// \tasync (e: Submitted) => {\n\t// \t\te.preventDefault();\n\n\t// \t\tconst { fieldset, message, donation, multiple } = e.target.elements;\n\n\t// \t\tfieldset.disabled = true;\n\n\t// \t\treturn addMessages(message.value, donation.value || \"0\", multiple.checked)\n\t// \t\t\t.then(() => {\n\t// \t\t\t\treturn getMessages()\n\t// \t\t\t\t\t.then((nextMessages) => {\n\t// \t\t\t\t\t\tsetMessages(nextMessages);\n\t// \t\t\t\t\t\tmessage.value = \"\";\n\t// \t\t\t\t\t\tdonation.value = SUGGESTED_DONATION;\n\t// \t\t\t\t\t\tfieldset.disabled = false;\n\t// \t\t\t\t\t\tmultiple.checked = false;\n\t// \t\t\t\t\t\tmessage.focus();\n\t// \t\t\t\t\t})\n\t// \t\t\t\t\t.catch((err) => {\n\t// \t\t\t\t\t\talert(\"Failed to refresh messages\");\n\t// \t\t\t\t\t\tconsole.log(\"Failed to refresh messages\");\n\n\t// \t\t\t\t\t\tthrow err;\n\t// \t\t\t\t\t});\n\t// \t\t\t})\n\t// \t\t\t.catch((err) => {\n\t// \t\t\t\tconsole.error(err);\n\n\t// \t\t\t\tfieldset.disabled = false;\n\t// \t\t\t});\n\t// \t},\n\t// \t[addMessages, getMessages]\n\t// );\n\n\treturn (\n\t\t<>\n\t\t\t{currencyName === \"SOL\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletSOL(btnProps.setSOLWalletKey)}>\n\t\t\t\t\t{btnProps.SOLwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={phantom} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.SOLwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t{currencyName === \"TON\" ||\n\t\t\tcurrencyName === \"wNEAR (TON)\" ||\n\t\t\tcurrencyName === \"wETH (TON)\" ||\n\t\t\tcurrencyName === \"wSOL (TON)\" ||\n\t\t\tcurrencyName === \"wAURORA (TON)\" ||\n\t\t\tcurrencyName === \"wUSN (TON)\" ||\n\t\t\tcurrencyName === \"wATOM (TON)\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletTON(btnProps.setTONwalletKey)}>\n\t\t\t\t\t{btnProps.TONwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={tonIco} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.TONwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t{currencyName === \"USN\" || currencyName === \"NEAR\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletNEAR(btnProps.setNEARwalletKey)}>\n\t\t\t\t\t{btnProps.NEARwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={near} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.NEARwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t{currencyName === \"ATOM\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletATOM(btnProps.setATOMwalletKey)}>\n\t\t\t\t\t{btnProps.ATOMwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={keplr} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.ATOMwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t{currencyName === \"AURORA\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletAUR(btnProps.setAURwalletKey)}>\n\t\t\t\t\t{btnProps.AURwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={metamask} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.AURwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t\t{currencyName === \"ETH\" ? (\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid={\"connectWalletBtn\"}\n\t\t\t\t\tonClick={() => btnProps.connectWalletETH(btnProps.setETHWalletKey)}>\n\t\t\t\t\t{btnProps.ETHwalletKey ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img src={metamask} alt={\"#\"} />\n\t\t\t\t\t\t\t{zipName(btnProps.ETHwalletKey)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t\"Connect wallet\"\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t) : null}\n\t\t</>\n\t);\n};\n"],"mappings":"AAAA,MAAOA,QAAO,KAAM,2BAA2B,CAC/C,MAAOC,KAAI,KAAM,wBAAwB,CACzC,MAAOC,OAAM,KAAM,uBAAuB,CAC1C,MAAOC,MAAK,KAAM,yBAAyB,CAC3C,MAAOC,SAAQ,KAAM,4BAA4B,CAEjD,OAASC,MAAM,KAAQ,MAAM,CAE7B,MAAOC,MAAK,KAAsD,OAAO,CACzE,OAAoBC,KAAK,KAAQ,aAAa,CAAC,6IAa/C,GAAMC,mBAAkB,CAAG,GAAG,CAC9B,GAAMC,gBAAe,CAAGF,KAAK,CAACG,MAAM,CAACC,eAAe,CAAC,eAAe,CAAE,CAEtE;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,QAAO,CAAG,QAAVA,QAAO,CAAIC,IAAY,kBAAQA,IAAI,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,eAAMD,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAE,CAE3E,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAW,CAAIC,YAAoB,CAAEC,QAAa,CAAK,CACnE,GAAQC,SAAQ,CAAiCD,QAAQ,CAAjDC,QAAQ,CAAEC,KAAK,CAA0BF,QAAQ,CAAvCE,KAAK,CAAEC,QAAQ,CAAgBH,QAAQ,CAAhCG,QAAQ,CAAEC,SAAS,CAAKJ,QAAQ,CAAtmBACC,2BACEL,YAAY,GAAK,KAAK,cACtB,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACK,gBAAgB,CAACL,QAAQ,CAACM,eAAe,CAAC,EAAC,UAClEN,QAAQ,CAACO,YAAY,cACrB,wCACC,YAAK,GAAG,CAAExB,OAAQ,CAAC,GAAG,CAAE,GAAI,EAAG,CAC9BY,OAAO,CAACK,QAAQ,CAACO,YAAY,CAAC,GAC7B,CAEH,gBACA,EACO,CACN,IAAI,CACPR,YAAY,GAAK,KAAK,EACvBA,YAAY,GAAK,aAAa,EAC9BA,YAAY,GAAK,YAAY,EAC7BA,YAAY,GAAK,YAAY,EAC7BA,YAAY,GAAK,eAAe,EAChCA,YAAY,GAAK,YAAY,EAC7BA,YAAY,GAAK,aAAa,cAC7B,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACQ,gBAAgB,CAACR,QAAQ,CAACS,eAAe,CAAC,EAAC,UAClET,QAAQ,CAACU,YAAY,cACrB,wCACC,YAAK,GAAG,CAAEzB,MAAO,CAAC,GAAG,CAAE,GAAI,EAAG,CAC7BU,OAAO,CAACK,QAAQ,CAACU,YAAY,CAAC,GAC7B,CAEH,gBACA,EACO,CACN,IAAI,CACPX,YAAY,GAAK,KAAK,EAAIA,YAAY,GAAK,MAAM,cACjD,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACW,iBAAiB,CAACX,QAAQ,CAACY,gBAAgB,CAAC,EAAC,UACpEZ,QAAQ,CAACa,aAAa,cACtB,wCACC,YAAK,GAAG,CAAE7B,IAAK,CAAC,GAAG,CAAE,GAAI,EAAG,CAC3BW,OAAO,CAACK,QAAQ,CAACa,aAAa,CAAC,GAC9B,CAEH,gBACA,EACO,CACN,IAAI,CACPd,YAAY,GAAK,MAAM,cACvB,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACc,iBAAiB,CAACd,QAAQ,CAACe,gBAAgB,CAAC,EAAC,UACpEf,QAAQ,CAACgB,aAAa,cACtB,wCACC,YAAK,GAAG,CAAE9B,KAAM,CAAC,GAAG,CAAE,GAAI,EAAG,CAC5BS,OAAO,CAACK,QAAQ,CAACgB,aAAa,CAAC,GAC9B,CAEH,gBACA,EACO,CACN,IAAI,CACPjB,YAAY,GAAK,QAAQ,cACzB,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACiB,gBAAgB,CAACjB,QAAQ,CAACkB,eAAe,CAAC,EAAC,UAClElB,QAAQ,CAACmB,YAAY,cACrB,wCACC,YAAK,GAAG,CAAEhC,QAAS,CAAC,GAAG,CAAE,GAAI,EAAG,CAC/BQ,OAAO,CAACK,QAAQ,CAACmB,YAAY,CAAC,GAC7B,CAEH,gBACA,EACO,CACN,IAAI,CACPpB,YAAY,GAAK,KAAK,cACtB,KAAC,MAAM,EACN,IAAI,CAAC,SAAS,CACd,EAAE,CAAE,kBAAmB,CACvB,OAAO,CAAE,yBAAMC,SAAQ,CAACoB,gBAAgB,CAACpB,QAAQ,CAACqB,eAAe,CAAC,EAAC,UAClErB,QAAQ,CAACsB,YAAY,cACrB,wCACC,YAAK,GAAG,CAAEnC,QAAS,CAAC,GAAG,CAAE,GAAI,EAAG,CAC/BQ,OAAO,CAACK,QAAQ,CAACsB,YAAY,CAAC,GAC7B,CAEH,gBACA,EACO,CACN,IAAI,GACN,CAEL,CAAC"},"metadata":{},"sourceType":"module"}