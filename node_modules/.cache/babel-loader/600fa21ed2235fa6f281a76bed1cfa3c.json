{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.beginCell = exports.Builder = void 0;\nvar BitString_1 = require(\"./BitString\");\nvar Cell_1 = require(\"./Cell\");\nvar Builder = /*#__PURE__*/function () {\n  function Builder() {\n    var _this = this;\n    _classCallCheck(this, Builder);\n    this.bits = BitString_1.BitString.alloc(1023);\n    this.refs = [];\n    this.ended = false;\n    this.storeRef = function (src) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.refs.push(src);\n      return _this;\n    };\n    this.storeBit = function (value) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeBit(value);\n      return _this;\n    };\n    this.storeBitArray = function (value) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeBitArray(value);\n      return _this;\n    };\n    this.storeUint = function (value, bitLength) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeUint(value, bitLength);\n      return _this;\n    };\n    this.storeInt = function (value, bitLength) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeInt(value, bitLength);\n      return _this;\n    };\n    this.storeUint8 = function (value) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeUint8(value);\n      return _this;\n    };\n    this.storeVarUint = function (value, bitLength) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeVarUInt(value, bitLength);\n      return _this;\n    };\n    this.storeBuffer = function (buffer) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeBuffer(buffer);\n      return _this;\n    };\n    this.storeCoins = function (amount) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeCoins(amount);\n      return _this;\n    };\n    this.storeAddress = function (address) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeAddress(address);\n      return _this;\n    };\n    this.storeBitString = function (value) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      _this.bits.writeBitString(value);\n      return _this;\n    };\n    this.storeDict = function (src) {\n      if (_this.ended) {\n        throw Error('Already ended');\n      }\n      if (src) {\n        _this.bits.writeBit(true);\n        _this.refs.push(src);\n      } else {\n        _this.bits.writeBit(false);\n      }\n      return _this;\n    };\n    this.storeRefMaybe = function (src) {\n      return _this.storeDict(src);\n    };\n  }\n  _createClass(Builder, [{\n    key: \"endCell\",\n    value: function endCell() {\n      if (this.ended) {\n        throw Error('Already ended');\n      }\n      this.ended = true;\n      var res = new Cell_1.Cell('ordinary', this.bits);\n      var _iterator = _createForOfIteratorHelper(this.refs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var r = _step.value;\n          res.refs.push(r);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return res;\n    }\n  }]);\n  return Builder;\n}();\nexports.Builder = Builder;\nfunction beginCell() {\n  return new Builder();\n}\nexports.beginCell = beginCell;","map":{"version":3,"names":["Object","defineProperty","exports","value","beginCell","Builder","BitString_1","require","Cell_1","bits","BitString","alloc","refs","ended","storeRef","src","Error","push","storeBit","writeBit","storeBitArray","writeBitArray","storeUint","bitLength","writeUint","storeInt","writeInt","storeUint8","writeUint8","storeVarUint","writeVarUInt","storeBuffer","buffer","writeBuffer","storeCoins","amount","writeCoins","storeAddress","address","writeAddress","storeBitString","writeBitString","storeDict","storeRefMaybe","res","Cell","r"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/Builder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.beginCell = exports.Builder = void 0;\nconst BitString_1 = require(\"./BitString\");\nconst Cell_1 = require(\"./Cell\");\nclass Builder {\n    constructor() {\n        this.bits = BitString_1.BitString.alloc(1023);\n        this.refs = [];\n        this.ended = false;\n        this.storeRef = (src) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.refs.push(src);\n            return this;\n        };\n        this.storeBit = (value) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeBit(value);\n            return this;\n        };\n        this.storeBitArray = (value) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeBitArray(value);\n            return this;\n        };\n        this.storeUint = (value, bitLength) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeUint(value, bitLength);\n            return this;\n        };\n        this.storeInt = (value, bitLength) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeInt(value, bitLength);\n            return this;\n        };\n        this.storeUint8 = (value) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeUint8(value);\n            return this;\n        };\n        this.storeVarUint = (value, bitLength) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeVarUInt(value, bitLength);\n            return this;\n        };\n        this.storeBuffer = (buffer) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeBuffer(buffer);\n            return this;\n        };\n        this.storeCoins = (amount) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeCoins(amount);\n            return this;\n        };\n        this.storeAddress = (address) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeAddress(address);\n            return this;\n        };\n        this.storeBitString = (value) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            this.bits.writeBitString(value);\n            return this;\n        };\n        this.storeDict = (src) => {\n            if (this.ended) {\n                throw Error('Already ended');\n            }\n            if (src) {\n                this.bits.writeBit(true);\n                this.refs.push(src);\n            }\n            else {\n                this.bits.writeBit(false);\n            }\n            return this;\n        };\n        this.storeRefMaybe = (src) => {\n            return this.storeDict(src);\n        };\n    }\n    endCell() {\n        if (this.ended) {\n            throw Error('Already ended');\n        }\n        this.ended = true;\n        let res = new Cell_1.Cell('ordinary', this.bits);\n        for (let r of this.refs) {\n            res.refs.push(r);\n        }\n        return res;\n    }\n}\nexports.Builder = Builder;\nfunction beginCell() {\n    return new Builder();\n}\nexports.beginCell = beginCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}