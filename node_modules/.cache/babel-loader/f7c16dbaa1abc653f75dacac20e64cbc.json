{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\nvar json_rpc_1 = require(\"@cosmjs/json-rpc\");\nvar axios_1 = __importDefault(require(\"axios\"));\nvar rpcclient_1 = require(\"./rpcclient\");\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(\"Bad status on response: \".concat(res.status));\n  }\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction http(_x, _x2, _x3, _x4) {\n  return _http.apply(this, arguments);\n}\nfunction _http() {\n  _http = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, url, headers, request) {\n    var settings;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof fetch !== \"undefined\")) {\n              _context2.next = 5;\n              break;\n            }\n            settings = {\n              method: method,\n              body: request ? JSON.stringify(request) : undefined,\n              headers: _objectSpread({\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                \"Content-Type\": \"application/json\"\n              }, headers)\n            };\n            return _context2.abrupt(\"return\", fetch(url, settings).then(filterBadStatus).then(function (res) {\n              return res.json();\n            }));\n          case 5:\n            return _context2.abrupt(\"return\", axios_1.default.request({\n              url: url,\n              method: method,\n              data: request,\n              headers: headers\n            }).then(function (res) {\n              return res.data;\n            }));\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _http.apply(this, arguments);\n}\nexports.http = http;\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient(endpoint) {\n    _classCallCheck(this, HttpClient);\n    if (typeof endpoint === \"string\") {\n      // accept host.name:port and assume http protocol\n      this.url = (0, rpcclient_1.hasProtocol)(endpoint) ? endpoint : \"http://\" + endpoint;\n    } else {\n      this.url = endpoint.url;\n      this.headers = endpoint.headers;\n    }\n  }\n  _createClass(HttpClient, [{\n    key: \"disconnect\",\n    value: function disconnect() {\n      // nothing to be done\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = (0, json_rpc_1.parseJsonRpcResponse);\n                _context.next = 3;\n                return http(\"POST\", this.url, this.headers, request);\n              case 3:\n                _context.t1 = _context.sent;\n                response = (0, _context.t0)(_context.t1);\n                if (!(0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error(JSON.stringify(response.error));\n              case 7:\n                return _context.abrupt(\"return\", response);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute(_x5) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return HttpClient;\n}();\nexports.HttpClient = HttpClient;","map":{"version":3,"sources":["../../src/rpcclients/httpclient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAMA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAMA,SAAS,eAAe,CAAC,GAAQ,EAAA;EAC/B,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;IACrB,MAAM,IAAI,KAAK,mCAA4B,GAAG,CAAC,MAAM,EAAG;EACzD;EACD,OAAO,GAAG;AACZ;AAEA;;;;AAIG;AACH;AAAA,SACsB,IAAI;EAAA;AAAA;AAAA;EAAA,mEAAnB,kBACL,MAAc,EACd,GAAW,EACX,OAA2C,EAC3C,OAAa;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAET,OAAO,KAAK,KAAK,WAAW;cAAA;cAAA;YAAA;YACxB,QAAQ,GAAG;cACf,MAAM,EAAE,MAAM;cACd,IAAI,EAAE,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,SAAS;cACnD,OAAO;gBACL;gBACA,cAAc,EAAE;cAAkB,GAC/B,OAAO;aAEb;YAAA,kCACM,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CACxB,IAAI,CAAC,eAAe,CAAC,CACrB,IAAI,CAAC,UAAC,GAAQ;cAAA,OAAK,GAAG,CAAC,IAAI,EAAE;YAAA,EAAC;UAAA;YAAA,kCAE1B,OAAA,CAAA,OAAK,CACT,OAAO,CAAC;cAAE,GAAG,EAAE,GAAG;cAAE,MAAM,EAAE,MAAM;cAAE,IAAI,EAAE,OAAO;cAAE,OAAO,EAAE;YAAO,CAAE,CAAC,CACtE,IAAI,CAAC,UAAC,GAAG;cAAA,OAAK,GAAG,CAAC,IAAI;YAAA,EAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAE7B;EAAA;AAAA;AAxBD,OAAA,CAAA,IAAA,GAAA,IAAA;AAwBC,IAgBY,UAAU;EAIrB,oBAAmB,QAA+B,EAAA;IAAA;IAChD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;MAChC;MACA,IAAI,CAAC,GAAG,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,WAAW,EAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,SAAS,GAAG,QAAQ;KACnE,MAAM;MACL,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG;MACvB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO;IAChC;EACH;EAAC;IAAA;IAAA,OAEM,sBAAU;MACf;IAAA;EACD;IAAA;IAAA;MAAA,0EAEM,iBAAc,OAAuB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,eACzB,CAAA,EAAA,UAAA,CAAA,oBAAoB;gBAAA;gBAAA,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;cAAA;gBAAA;gBAAnF,QAAQ;gBAAA,KACV,CAAA,CAAA,EAAA,UAAA,CAAA,sBAAsB,EAAC,QAAQ,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,MAC5B,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;cAAA;gBAAA,iCAE1C,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAxBH,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.http = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction filterBadStatus(res) {\n    if (res.status >= 400) {\n        throw new Error(`Bad status on response: ${res.status}`);\n    }\n    return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nasync function http(method, url, headers, request) {\n    if (typeof fetch !== \"undefined\") {\n        const settings = {\n            method: method,\n            body: request ? JSON.stringify(request) : undefined,\n            headers: {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                \"Content-Type\": \"application/json\",\n                ...headers,\n            },\n        };\n        return fetch(url, settings)\n            .then(filterBadStatus)\n            .then((res) => res.json());\n    }\n    else {\n        return axios_1.default\n            .request({ url: url, method: method, data: request, headers: headers })\n            .then((res) => res.data);\n    }\n}\nexports.http = http;\nclass HttpClient {\n    constructor(endpoint) {\n        if (typeof endpoint === \"string\") {\n            // accept host.name:port and assume http protocol\n            this.url = (0, rpcclient_1.hasProtocol)(endpoint) ? endpoint : \"http://\" + endpoint;\n        }\n        else {\n            this.url = endpoint.url;\n            this.headers = endpoint.headers;\n        }\n    }\n    disconnect() {\n        // nothing to be done\n    }\n    async execute(request) {\n        const response = (0, json_rpc_1.parseJsonRpcResponse)(await http(\"POST\", this.url, this.headers, request));\n        if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n            throw new Error(JSON.stringify(response.error));\n        }\n        return response;\n    }\n}\nexports.HttpClient = HttpClient;\n//# sourceMappingURL=httpclient.js.map"]},"metadata":{},"sourceType":"script"}