{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1 = void 0;\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\nvar secp256k1signature_1 = require(\"./secp256k1signature\");\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nvar secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\nvar Secp256k1 = /*#__PURE__*/function () {\n  function Secp256k1() {\n    _classCallCheck(this, Secp256k1);\n  }\n  _createClass(Secp256k1, null, [{\n    key: \"makeKeypair\",\n    value:\n    /**\n     * Takes a 32 byte private key and returns a privkey/pubkey pair.\n     *\n     * The resulting pubkey is uncompressed. For the use in Cosmos it should\n     * be compressed first using `Secp256k1.compressPubkey`.\n     */\n    function () {\n      var _makeKeypair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privkey) {\n        var keypair, privkeyAsBigInteger, out;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(privkey.length !== 32)) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n              case 2:\n                keypair = secp256k1.keyFromPrivate(privkey);\n                if (!(keypair.validate().result !== true)) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n              case 5:\n                // range test that is not part of the elliptic implementation\n                privkeyAsBigInteger = new bn_js_1.default(privkey);\n                if (!privkeyAsBigInteger.gte(secp256k1N)) {\n                  _context.next = 8;\n                  break;\n                }\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n              case 8:\n                out = {\n                  privkey: (0, encoding_1.fromHex)(keypair.getPrivate(\"hex\")),\n                  // encodes uncompressed as\n                  // - 1-byte prefix \"04\"\n                  // - 32-byte x coordinate\n                  // - 32-byte y coordinate\n                  pubkey: Uint8Array.from(keypair.getPublic(\"array\"))\n                };\n                return _context.abrupt(\"return\", out);\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function makeKeypair(_x) {\n        return _makeKeypair.apply(this, arguments);\n      }\n      return makeKeypair;\n    }()\n    /**\n     * Creates a signature that is\n     * - deterministic (RFC 6979)\n     * - lowS signature\n     * - DER encoded\n     */\n  }, {\n    key: \"createSignature\",\n    value: function () {\n      var _createSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(messageHash, privkey) {\n        var keypair, _keypair$sign, r, s, recoveryParam;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new Error(\"Message hash must not be empty\");\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context2.next = 4;\n                  break;\n                }\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n              case 4:\n                keypair = secp256k1.keyFromPrivate(privkey); // the `canonical` option ensures creation of lowS signature representations\n                _keypair$sign = keypair.sign(messageHash, {\n                  canonical: true\n                }), r = _keypair$sign.r, s = _keypair$sign.s, recoveryParam = _keypair$sign.recoveryParam;\n                if (!(typeof recoveryParam !== \"number\")) {\n                  _context2.next = 8;\n                  break;\n                }\n                throw new Error(\"Recovery param missing\");\n              case 8:\n                return _context2.abrupt(\"return\", new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam));\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function createSignature(_x2, _x3) {\n        return _createSignature.apply(this, arguments);\n      }\n      return createSignature;\n    }()\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(signature, messageHash, pubkey) {\n        var keypair;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw new Error(\"Message hash must not be empty\");\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context3.next = 4;\n                  break;\n                }\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n              case 4:\n                keypair = secp256k1.keyFromPublic(pubkey); // From https://github.com/indutny/elliptic:\n                //\n                //     Sign the message's hash (input must be an array, or a hex-string)\n                //\n                //     Signature MUST be either:\n                //     1) DER-encoded signature as hex-string; or\n                //     2) DER-encoded signature as buffer; or\n                //     3) object with two hex-string properties (r and s); or\n                //     4) object with two buffer properties (r and s)\n                //\n                // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n                // common to both types. Uint8Array is not an array of ints but the interface is\n                // similar\n                _context3.prev = 5;\n                return _context3.abrupt(\"return\", keypair.verify(messageHash, signature.toDer()));\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](5);\n                return _context3.abrupt(\"return\", false);\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[5, 9]]);\n      }));\n      function verifySignature(_x4, _x5, _x6) {\n        return _verifySignature.apply(this, arguments);\n      }\n      return verifySignature;\n    }()\n  }, {\n    key: \"recoverPubkey\",\n    value: function recoverPubkey(signature, messageHash) {\n      var signatureForElliptic = {\n        r: (0, encoding_1.toHex)(signature.r()),\n        s: (0, encoding_1.toHex)(signature.s())\n      };\n      var point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n      var keypair = secp256k1.keyFromPublic(point);\n      return (0, encoding_1.fromHex)(keypair.getPublic(false, \"hex\"));\n    }\n    /**\n     * Takes a compressed or uncompressed pubkey and return a compressed one.\n     *\n     * This function is idempotent.\n     */\n  }, {\n    key: \"compressPubkey\",\n    value: function compressPubkey(pubkey) {\n      switch (pubkey.length) {\n        case 33:\n          return pubkey;\n        case 65:\n          return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, \"array\"));\n        default:\n          throw new Error(\"Invalid pubkey length\");\n      }\n    }\n    /**\n     * Takes a compressed or uncompressed pubkey and returns an uncompressed one.\n     *\n     * This function is idempotent.\n     */\n  }, {\n    key: \"uncompressPubkey\",\n    value: function uncompressPubkey(pubkey) {\n      switch (pubkey.length) {\n        case 33:\n          return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(false, \"array\"));\n        case 65:\n          return pubkey;\n        default:\n          throw new Error(\"Invalid pubkey length\");\n      }\n    }\n  }, {\n    key: \"trimRecoveryByte\",\n    value: function trimRecoveryByte(signature) {\n      switch (signature.length) {\n        case 64:\n          return signature;\n        case 65:\n          return signature.slice(0, 64);\n        default:\n          throw new Error(\"Invalid signature length\");\n      }\n    }\n  }]);\n  return Secp256k1;\n}();\nexports.Secp256k1 = Secp256k1;","map":{"version":3,"sources":["../src/secp256k1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1 = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst secp256k1signature_1 = require(\"./secp256k1signature\");\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nconst secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\nclass Secp256k1 {\n    /**\n     * Takes a 32 byte private key and returns a privkey/pubkey pair.\n     *\n     * The resulting pubkey is uncompressed. For the use in Cosmos it should\n     * be compressed first using `Secp256k1.compressPubkey`.\n     */\n    static async makeKeypair(privkey) {\n        if (privkey.length !== 32) {\n            // is this check missing in secp256k1.validatePrivateKey?\n            // https://github.com/bitjson/bitcoin-ts/issues/4\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        const keypair = secp256k1.keyFromPrivate(privkey);\n        if (keypair.validate().result !== true) {\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        // range test that is not part of the elliptic implementation\n        const privkeyAsBigInteger = new bn_js_1.default(privkey);\n        if (privkeyAsBigInteger.gte(secp256k1N)) {\n            // not strictly smaller than N\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        const out = {\n            privkey: (0, encoding_1.fromHex)(keypair.getPrivate(\"hex\")),\n            // encodes uncompressed as\n            // - 1-byte prefix \"04\"\n            // - 32-byte x coordinate\n            // - 32-byte y coordinate\n            pubkey: Uint8Array.from(keypair.getPublic(\"array\")),\n        };\n        return out;\n    }\n    /**\n     * Creates a signature that is\n     * - deterministic (RFC 6979)\n     * - lowS signature\n     * - DER encoded\n     */\n    static async createSignature(messageHash, privkey) {\n        if (messageHash.length === 0) {\n            throw new Error(\"Message hash must not be empty\");\n        }\n        if (messageHash.length > 32) {\n            throw new Error(\"Message hash length must not exceed 32 bytes\");\n        }\n        const keypair = secp256k1.keyFromPrivate(privkey);\n        // the `canonical` option ensures creation of lowS signature representations\n        const { r, s, recoveryParam } = keypair.sign(messageHash, { canonical: true });\n        if (typeof recoveryParam !== \"number\")\n            throw new Error(\"Recovery param missing\");\n        return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam);\n    }\n    static async verifySignature(signature, messageHash, pubkey) {\n        if (messageHash.length === 0) {\n            throw new Error(\"Message hash must not be empty\");\n        }\n        if (messageHash.length > 32) {\n            throw new Error(\"Message hash length must not exceed 32 bytes\");\n        }\n        const keypair = secp256k1.keyFromPublic(pubkey);\n        // From https://github.com/indutny/elliptic:\n        //\n        //     Sign the message's hash (input must be an array, or a hex-string)\n        //\n        //     Signature MUST be either:\n        //     1) DER-encoded signature as hex-string; or\n        //     2) DER-encoded signature as buffer; or\n        //     3) object with two hex-string properties (r and s); or\n        //     4) object with two buffer properties (r and s)\n        //\n        // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n        // common to both types. Uint8Array is not an array of ints but the interface is\n        // similar\n        try {\n            return keypair.verify(messageHash, signature.toDer());\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    static recoverPubkey(signature, messageHash) {\n        const signatureForElliptic = { r: (0, encoding_1.toHex)(signature.r()), s: (0, encoding_1.toHex)(signature.s()) };\n        const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n        const keypair = secp256k1.keyFromPublic(point);\n        return (0, encoding_1.fromHex)(keypair.getPublic(false, \"hex\"));\n    }\n    /**\n     * Takes a compressed or uncompressed pubkey and return a compressed one.\n     *\n     * This function is idempotent.\n     */\n    static compressPubkey(pubkey) {\n        switch (pubkey.length) {\n            case 33:\n                return pubkey;\n            case 65:\n                return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, \"array\"));\n            default:\n                throw new Error(\"Invalid pubkey length\");\n        }\n    }\n    /**\n     * Takes a compressed or uncompressed pubkey and returns an uncompressed one.\n     *\n     * This function is idempotent.\n     */\n    static uncompressPubkey(pubkey) {\n        switch (pubkey.length) {\n            case 33:\n                return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(false, \"array\"));\n            case 65:\n                return pubkey;\n            default:\n                throw new Error(\"Invalid pubkey length\");\n        }\n    }\n    static trimRecoveryByte(signature) {\n        switch (signature.length) {\n            case 64:\n                return signature;\n            case 65:\n                return signature.slice(0, 64);\n            default:\n                throw new Error(\"Invalid signature length\");\n        }\n    }\n}\nexports.Secp256k1 = Secp256k1;\n//# sourceMappingURL=secp256k1.js.map"]},"metadata":{},"sourceType":"script"}