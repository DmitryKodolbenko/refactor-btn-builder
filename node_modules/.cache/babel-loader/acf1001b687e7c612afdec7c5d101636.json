{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupBankExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        (0, utils_1.assert)(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async () => {\n        const {\n          supply\n        } = await queryService.TotalSupply({});\n        return supply;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        (0, utils_1.assert)(amount);\n        return amount;\n      },\n      denomMetadata: async denom => {\n        const {\n          metadata\n        } = await queryService.DenomMetadata({\n          denom\n        });\n        (0, utils_1.assert)(metadata);\n        return metadata;\n      },\n      denomsMetadata: async () => {\n        const {\n          metadatas\n        } = await queryService.DenomsMetadata({\n          pagination: undefined // Not implemented\n        });\n\n        return metadatas;\n      }\n    }\n  };\n}\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"sources":["../../../src/modules/bank/queries.ts"],"names":[],"mappings":";;;;;;AAAA;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAGA,MAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAaA,SAAgB,kBAAkB,CAAC,IAAiB,EAAA;EAClD,MAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC;EACA;EACA,MAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,IAAI,EAAE;MACJ,OAAO,EAAE,OAAO,OAAe,EAAE,KAAa,KAAI;QAChD,MAAM;UAAE;QAAO,CAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;UAAE,OAAO,EAAE,OAAO;UAAE,KAAK,EAAE;QAAK,CAAE,CAAC;QAClF,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAC,OAAO,CAAC;QACf,OAAO,OAAO;MAChB,CAAC;MACD,WAAW,EAAE,MAAO,OAAe,IAAI;QACrC,MAAM;UAAE;QAAQ,CAAE,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC;UAAE,OAAO,EAAE;QAAO,CAAE,CAAC;QACzE,OAAO,QAAQ;MACjB,CAAC;MACD,WAAW,EAAE,YAAW;QACtB,MAAM;UAAE;QAAM,CAAE,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC,CAAA,CAAE,CAAC;QACrD,OAAO,MAAM;MACf,CAAC;MACD,QAAQ,EAAE,MAAO,KAAa,IAAI;QAChC,MAAM;UAAE;QAAM,CAAE,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;UAAE,KAAK,EAAE;QAAK,CAAE,CAAC;QAChE,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAC,MAAM,CAAC;QACd,OAAO,MAAM;MACf,CAAC;MACD,aAAa,EAAE,MAAO,KAAa,IAAI;QACrC,MAAM;UAAE;QAAQ,CAAE,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC;UAAE;QAAK,CAAE,CAAC;QAChE,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAC,QAAQ,CAAC;QAChB,OAAO,QAAQ;MACjB,CAAC;MACD,cAAc,EAAE,YAAW;QACzB,MAAM;UAAE;QAAS,CAAE,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC;UACtD,UAAU,EAAE,SAAS,CAAE;SACxB,CAAC;;QACF,OAAO,SAAS;MAClB;IACD;GACF;AACH;AAvCA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupBankExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        bank: {\n            balance: async (address, denom) => {\n                const { balance } = await queryService.Balance({ address: address, denom: denom });\n                (0, utils_1.assert)(balance);\n                return balance;\n            },\n            allBalances: async (address) => {\n                const { balances } = await queryService.AllBalances({ address: address });\n                return balances;\n            },\n            totalSupply: async () => {\n                const { supply } = await queryService.TotalSupply({});\n                return supply;\n            },\n            supplyOf: async (denom) => {\n                const { amount } = await queryService.SupplyOf({ denom: denom });\n                (0, utils_1.assert)(amount);\n                return amount;\n            },\n            denomMetadata: async (denom) => {\n                const { metadata } = await queryService.DenomMetadata({ denom });\n                (0, utils_1.assert)(metadata);\n                return metadata;\n            },\n            denomsMetadata: async () => {\n                const { metadatas } = await queryService.DenomsMetadata({\n                    pagination: undefined, // Not implemented\n                });\n                return metadatas;\n            },\n        },\n    };\n}\nexports.setupBankExtension = setupBankExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}