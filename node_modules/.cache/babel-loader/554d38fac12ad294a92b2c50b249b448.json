{"ast":null,"code":"import { message } from \"antd\";\nconst connectWalletSOL = async setSOLWalletKey => {\n  try {\n    // @ts-ignore\n    const solana = window.solana;\n    if (solana) {\n      const response = await solana.connect();\n      setSOLWalletKey(response.publicKey.toString());\n    } else {\n      message.error(\"Install Phantom wallet. Close all Phantom wallet windows and try again pls\", 5);\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport default connectWalletSOL;","map":{"version":3,"names":["message","connectWalletSOL","setSOLWalletKey","solana","window","response","connect","publicKey","toString","error","err","console","log"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/wallet/connectWalletSOL.ts"],"sourcesContent":["import { message } from \"antd\";\n\nconst connectWalletSOL = async (setSOLWalletKey: any) => {\n  try {\n    // @ts-ignore\n    const solana = window.solana;\n    if (solana) {\n      const response = await solana.connect();\n      setSOLWalletKey(response.publicKey.toString());\n    } else {\n      message.error(\n        \"Install Phantom wallet. Close all Phantom wallet windows and try again pls\",\n        5\n      );\n    }\n  } catch (err) {console.log(err)}\n};\n\nexport default connectWalletSOL"],"mappings":"AAAA,SAASA,OAAO,QAAQ,MAAM;AAE9B,MAAMC,gBAAgB,GAAG,MAAOC,eAAoB,IAAK;EACvD,IAAI;IACF;IACA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAM;IAC5B,IAAIA,MAAM,EAAE;MACV,MAAME,QAAQ,GAAG,MAAMF,MAAM,CAACG,OAAO,EAAE;MACvCJ,eAAe,CAACG,QAAQ,CAACE,SAAS,CAACC,QAAQ,EAAE,CAAC;IAChD,CAAC,MAAM;MACLR,OAAO,CAACS,KAAK,CACX,4EAA4E,EAC5E,CAAC,CACF;IACH;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IAACC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAAA;AACjC,CAAC;AAED,eAAeT,gBAAgB"},"metadata":{},"sourceType":"module"}