{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n  var out = (0, encoding_1.fromRfc3339)(dateTimeString);\n  var nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n  var nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n  out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n  return out;\n}\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\nfunction toRfc3339WithNanoseconds(dateTime) {\n  var _a, _b;\n  var millisecondIso = dateTime.toISOString();\n  var nanoseconds = (_b = (_a = dateTime.nanoseconds) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n  return \"\".concat(millisecondIso.slice(0, -1)).concat(nanoseconds.padStart(6, \"0\"), \"Z\");\n}\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\nfunction fromSeconds(seconds) {\n  var nanos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var checkedNanos = new math_1.Uint32(nanos).toNumber();\n  if (checkedNanos > 999999999) {\n    throw new Error(\"Nano seconds must not exceed 999999999\");\n  }\n  var out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n  out.nanoseconds = checkedNanos % 1000000;\n  return out;\n}\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\nfunction toSeconds(date) {\n  var _a;\n  return {\n    seconds: Math.floor(date.getTime() / 1000),\n    nanos: date.getTime() % 1000 * 1000000 + ((_a = date.nanoseconds) !== null && _a !== void 0 ? _a : 0)\n  };\n}\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\nvar DateTime = /*#__PURE__*/function () {\n  function DateTime() {\n    _classCallCheck(this, DateTime);\n  }\n  _createClass(DateTime, null, [{\n    key: \"decode\",\n    value: /** @deprecated Use fromRfc3339WithNanoseconds instead */\n    function decode(dateTimeString) {\n      return fromRfc3339WithNanoseconds(dateTimeString);\n    }\n    /** @deprecated Use toRfc3339WithNanoseconds instead */\n  }, {\n    key: \"encode\",\n    value: function encode(dateTime) {\n      return toRfc3339WithNanoseconds(dateTime);\n    }\n  }]);\n  return DateTime;\n}();\nexports.DateTime = DateTime;","map":{"version":3,"sources":["../src/dates.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAaA,SAAgB,0BAA0B,CAAC,cAAsB,EAAA;EAC/D,IAAM,GAAG,GAAwB,CAAA,CAAA,EAAA,UAAA,CAAA,WAAW,EAAC,cAAc,CAAC;EAC5D,IAAM,gBAAgB,GAAG,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC;EAC1D,IAAM,WAAW,GAAG,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EACxE,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;EAC1D,OAAO,GAAG;AACZ;AANA,OAAA,CAAA,0BAAA,GAAA,0BAAA;AAQA,SAAgB,wBAAwB,CAAC,QAAqC,EAAA;;EAC5E,IAAM,cAAc,GAAG,QAAQ,CAAC,WAAW,EAAE;EAC7C,IAAM,WAAW,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;EAC1D,iBAAU,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACtE;AAJA,OAAA,CAAA,wBAAA,GAAA,wBAAA;AAMA,SAAgB,WAAW,CAAC,OAAe,EAAW;EAAA,IAAT,KAAK,uEAAG,CAAC;EACpD,IAAM,YAAY,GAAG,IAAI,MAAA,CAAA,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;EACjD,IAAI,YAAY,GAAG,SAAW,EAAE;IAC9B,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;EAC1D;EACD,IAAM,GAAG,GAAwB,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC;EAC9F,GAAG,CAAC,WAAW,GAAG,YAAY,GAAG,OAAO;EACxC,OAAO,GAAG;AACZ;AARA,OAAA,CAAA,WAAA,GAAA,WAAA;AAUA;;;;;;AAMG;AACH,SAAgB,SAAS,CAAC,IAAiC,EAAA;;EACzD,OAAO;IACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC1C,KAAK,EAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,GAAI,OAAO,IAAI,CAAA,EAAA,GAAA,IAAI,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC;GAClE;AACH;AALA,OAAA,CAAA,SAAA,GAAA,SAAA;AAOA;AAAA,IACa,QAAQ;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACnB;IACO,gBAAc,cAAsB,EAAA;MACzC,OAAO,0BAA0B,CAAC,cAAc,CAAC;IACnD;IAEA;EAAA;IAAA;IAAA,OACO,gBAAc,QAAqC,EAAA;MACxD,OAAO,wBAAwB,CAAC,QAAQ,CAAC;IAC3C;EAAC;EAAA;AAAA;AATH,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n    const out = (0, encoding_1.fromRfc3339)(dateTimeString);\n    const nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n    const nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n    out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n    return out;\n}\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\nfunction toRfc3339WithNanoseconds(dateTime) {\n    var _a, _b;\n    const millisecondIso = dateTime.toISOString();\n    const nanoseconds = (_b = (_a = dateTime.nanoseconds) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n    return `${millisecondIso.slice(0, -1)}${nanoseconds.padStart(6, \"0\")}Z`;\n}\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\nfunction fromSeconds(seconds, nanos = 0) {\n    const checkedNanos = new math_1.Uint32(nanos).toNumber();\n    if (checkedNanos > 999999999) {\n        throw new Error(\"Nano seconds must not exceed 999999999\");\n    }\n    const out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n    out.nanoseconds = checkedNanos % 1000000;\n    return out;\n}\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\nfunction toSeconds(date) {\n    var _a;\n    return {\n        seconds: Math.floor(date.getTime() / 1000),\n        nanos: (date.getTime() % 1000) * 1000000 + ((_a = date.nanoseconds) !== null && _a !== void 0 ? _a : 0),\n    };\n}\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\nclass DateTime {\n    /** @deprecated Use fromRfc3339WithNanoseconds instead */\n    static decode(dateTimeString) {\n        return fromRfc3339WithNanoseconds(dateTimeString);\n    }\n    /** @deprecated Use toRfc3339WithNanoseconds instead */\n    static encode(dateTime) {\n        return toRfc3339WithNanoseconds(dateTime);\n    }\n}\nexports.DateTime = DateTime;\n//# sourceMappingURL=dates.js.map"]},"metadata":{},"sourceType":"script"}