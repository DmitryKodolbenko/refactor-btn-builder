{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar utils = require(\"./utils\");\nvar Address = utils.Address;\nvar boc = require(\"./boc\");\nvar AppTon = require(\"./ledger/AppTon\");\nvar HttpProvider = require(\"./providers\").default;\nvar _require = require(\"./contract\"),\n  Contract = _require.Contract;\nvar Wallets = require(\"./contract/wallet\").default;\nvar LockupWallets = require(\"./contract/lockup\").default;\nvar NFT = require(\"./contract/token/nft\").default;\nvar JETTON = require(\"./contract/token/ft\").default;\nvar _require2 = require(\"./providers/blockSubscription\"),\n  BlockSubscription = _require2.BlockSubscription,\n  InMemoryBlockStorage = _require2.InMemoryBlockStorage;\nvar _require3 = require(\"./contract/subscription/index\"),\n  SubscriptionContract = _require3.SubscriptionContract;\nvar TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\nvar TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\nvar BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\nvar version = '0.0.35';\nvar TonWeb = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function TonWeb(provider) {\n    _classCallCheck(this, TonWeb);\n    this.version = version;\n    this.utils = utils;\n    this.Address = Address;\n    this.boc = boc;\n    this.Contract = Contract;\n    this.BlockSubscription = BlockSubscription;\n    this.InMemoryBlockStorage = InMemoryBlockStorage;\n    this.provider = provider || new HttpProvider();\n    this.wallet = new Wallets(this.provider);\n    this.lockupWallet = LockupWallets;\n  }\n\n  /**\n   * Use this method to get transaction history of a given address.\n   * @param address   {Address | string}\n   * @param limit?    {number}\n   * @param lt?    {number}\n   * @param txhash?    {string}   in HEX\n   * @param to_lt?    {number}\n   * @return array of transaction objects\n   */\n  _createClass(TonWeb, [{\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {\n        var limit,\n          lt,\n          txhash,\n          to_lt,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                limit = _args.length > 1 && _args[1] !== undefined ? _args[1] : 20;\n                lt = _args.length > 2 && _args[2] !== undefined ? _args[2] : undefined;\n                txhash = _args.length > 3 && _args[3] !== undefined ? _args[3] : undefined;\n                to_lt = _args.length > 4 && _args[4] !== undefined ? _args[4] : undefined;\n                return _context.abrupt(\"return\", this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt));\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getTransactions(_x) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n  }, {\n    key: \"getBalance\",\n    value:\n    /**\n     * @param address   {Address | string}\n     * @return {Promise<string>} - The current balance for the given address in nanograms.\n     */\n    function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.provider.getBalance(address.toString()));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getBalance(_x2) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param bytes {Uint8Array}\n     */\n  }, {\n    key: \"sendBoc\",\n    value: function () {\n      var _sendBoc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bytes) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.provider.sendBoc(utils.bytesToBase64(bytes)));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function sendBoc(_x3) {\n        return _sendBoc.apply(this, arguments);\n      }\n      return sendBoc;\n    }()\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {Address | string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address, method) {\n        var params,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                params = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : [];\n                return _context4.abrupt(\"return\", this.provider.call(address.toString(), method, params));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function call(_x4, _x5) {\n        return _call.apply(this, arguments);\n      }\n      return call;\n    }()\n  }]);\n  return TonWeb;\n}();\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n  TransportWebUSB: TransportWebUSB,\n  TransportWebHID: TransportWebHID,\n  BluetoothTransport: BluetoothTransport,\n  AppTon: AppTon\n};\nTonWeb.token = {\n  nft: NFT,\n  ft: JETTON,\n  jetton: JETTON\n};\nmodule.exports = TonWeb;","map":{"version":3,"names":["utils","require","Address","boc","AppTon","HttpProvider","default","Contract","Wallets","LockupWallets","NFT","JETTON","BlockSubscription","InMemoryBlockStorage","SubscriptionContract","TransportWebUSB","TransportWebHID","BluetoothTransport","version","TonWeb","provider","wallet","lockupWallet","address","limit","lt","undefined","txhash","to_lt","getTransactions","toString","getBalance","bytes","sendBoc","bytesToBase64","method","params","call","ledger","token","nft","ft","jetton","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/index.js"],"sourcesContent":["const utils = require(\"./utils\");\nconst Address = utils.Address;\nconst boc = require(\"./boc\");\nconst AppTon = require(\"./ledger/AppTon\");\nconst HttpProvider = require(\"./providers\").default;\nconst {Contract} = require(\"./contract\");\nconst Wallets = require(\"./contract/wallet\").default;\nconst LockupWallets = require(\"./contract/lockup\").default;\nconst NFT = require(\"./contract/token/nft\").default;\nconst JETTON = require(\"./contract/token/ft\").default;\nconst {BlockSubscription, InMemoryBlockStorage} = require(\"./providers/blockSubscription\");\nconst {SubscriptionContract} = require(\"./contract/subscription/index\");\nconst TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\nconst TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\nconst BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\nconst version = '0.0.35';\n\nclass TonWeb {\n    constructor(provider) {\n        this.version = version;\n        this.utils = utils;\n        this.Address = Address;\n        this.boc = boc;\n        this.Contract = Contract;\n        this.BlockSubscription = BlockSubscription;\n        this.InMemoryBlockStorage = InMemoryBlockStorage;\n\n        this.provider = provider || new HttpProvider();\n        this.wallet = new Wallets(this.provider);\n        this.lockupWallet = LockupWallets;\n    }\n\n    /**\n     * Use this method to get transaction history of a given address.\n     * @param address   {Address | string}\n     * @param limit?    {number}\n     * @param lt?    {number}\n     * @param txhash?    {string}   in HEX\n     * @param to_lt?    {number}\n     * @return array of transaction objects\n     */\n    async getTransactions(address, limit = 20, lt = undefined, txhash = undefined, to_lt = undefined) {\n        return this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt);\n    };\n\n    /**\n     * @param address   {Address | string}\n     * @return {Promise<string>} - The current balance for the given address in nanograms.\n     */\n    async getBalance(address) {\n        return this.provider.getBalance(address.toString());\n    }\n\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param bytes {Uint8Array}\n     */\n    async sendBoc(bytes) {\n        return this.provider.sendBoc(utils.bytesToBase64(bytes));\n    }\n\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {Address | string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    async call(address, method, params = []) {\n        return this.provider.call(address.toString(), method, params);\n    }\n}\n\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n    TransportWebUSB,\n    TransportWebHID,\n    BluetoothTransport,\n    AppTon,\n};\nTonWeb.token = {\n    nft: NFT,\n    ft: JETTON,\n    jetton: JETTON,\n}\n\nmodule.exports = TonWeb;\n"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,IAAMC,OAAO,GAAGF,KAAK,CAACE,OAAO;AAC7B,IAAMC,GAAG,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAMG,MAAM,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AACzC,IAAMI,YAAY,GAAGJ,OAAO,CAAC,aAAa,CAAC,CAACK,OAAO;AACnD,eAAmBL,OAAO,CAAC,YAAY,CAAC;EAAjCM,QAAQ,YAARA,QAAQ;AACf,IAAMC,OAAO,GAAGP,OAAO,CAAC,mBAAmB,CAAC,CAACK,OAAO;AACpD,IAAMG,aAAa,GAAGR,OAAO,CAAC,mBAAmB,CAAC,CAACK,OAAO;AAC1D,IAAMI,GAAG,GAAGT,OAAO,CAAC,sBAAsB,CAAC,CAACK,OAAO;AACnD,IAAMK,MAAM,GAAGV,OAAO,CAAC,qBAAqB,CAAC,CAACK,OAAO;AACrD,gBAAkDL,OAAO,CAAC,+BAA+B,CAAC;EAAnFW,iBAAiB,aAAjBA,iBAAiB;EAAEC,oBAAoB,aAApBA,oBAAoB;AAC9C,gBAA+BZ,OAAO,CAAC,+BAA+B,CAAC;EAAhEa,oBAAoB,aAApBA,oBAAoB;AAC3B,IAAMC,eAAe,GAAGd,OAAO,CAAC,+BAA+B,CAAC,CAACK,OAAO;AACxE,IAAMU,eAAe,GAAGf,OAAO,CAAC,+BAA+B,CAAC,CAACK,OAAO;AACxE,IAAMW,kBAAkB,GAAGhB,OAAO,CAAC,gCAAgC,CAAC,CAACK,OAAO;AAC5E,IAAMY,OAAO,GAAG,QAAQ;AAAC,IAEnBC,MAAM;EAAA;;EACR,gBAAYC,QAAQ,EAAE;IAAA;IAClB,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAClB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACK,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAEhD,IAAI,CAACO,QAAQ,GAAGA,QAAQ,IAAI,IAAIf,YAAY,EAAE;IAC9C,IAAI,CAACgB,MAAM,GAAG,IAAIb,OAAO,CAAC,IAAI,CAACY,QAAQ,CAAC;IACxC,IAAI,CAACE,YAAY,GAAGb,aAAa;EACrC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI;IAAA;IAAA;MAAA,kFASA,iBAAsBc,OAAO;QAAA;UAAA;UAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAEC,KAAK,2DAAG,EAAE;gBAAEC,EAAE,2DAAGC,SAAS;gBAAEC,MAAM,2DAAGD,SAAS;gBAAEE,KAAK,2DAAGF,SAAS;gBAAA,iCACrF,IAAI,CAACN,QAAQ,CAACS,eAAe,CAACN,OAAO,CAACO,QAAQ,EAAE,EAAEN,KAAK,EAAEC,EAAE,EAAEE,MAAM,EAAEC,KAAK,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACrF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;IAED;AACJ;AACA;AACA;IAHI;MAAA,6EAIA,kBAAiBL,OAAO;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACb,IAAI,CAACH,QAAQ,CAACW,UAAU,CAACR,OAAO,CAACO,QAAQ,EAAE,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtD;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAA;IAAA;MAAA,0EAIA,kBAAcE,KAAK;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACR,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAACjC,KAAK,CAACkC,aAAa,CAACF,KAAK,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3D;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA;MAAA,uEAMA,kBAAWT,OAAO,EAAEY,MAAM;QAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAEC,MAAM,8DAAG,EAAE;gBAAA,kCAC5B,IAAI,CAAChB,QAAQ,CAACiB,IAAI,CAACd,OAAO,CAACO,QAAQ,EAAE,EAAEK,MAAM,EAAEC,MAAM,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChE;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGLjB,MAAM,CAACD,OAAO,GAAGA,OAAO;AACxBC,MAAM,CAACnB,KAAK,GAAGA,KAAK;AACpBmB,MAAM,CAACjB,OAAO,GAAGA,OAAO;AACxBiB,MAAM,CAAChB,GAAG,GAAGA,GAAG;AAChBgB,MAAM,CAACd,YAAY,GAAGA,YAAY;AAClCc,MAAM,CAACZ,QAAQ,GAAGA,QAAQ;AAC1BY,MAAM,CAACX,OAAO,GAAGA,OAAO;AACxBW,MAAM,CAACV,aAAa,GAAGA,aAAa;AACpCU,MAAM,CAACL,oBAAoB,GAAGA,oBAAoB;AAClDK,MAAM,CAACP,iBAAiB,GAAGA,iBAAiB;AAC5CO,MAAM,CAACN,oBAAoB,GAAGA,oBAAoB;AAClDM,MAAM,CAACmB,MAAM,GAAG;EACZvB,eAAe,EAAfA,eAAe;EACfC,eAAe,EAAfA,eAAe;EACfC,kBAAkB,EAAlBA,kBAAkB;EAClBb,MAAM,EAANA;AACJ,CAAC;AACDe,MAAM,CAACoB,KAAK,GAAG;EACXC,GAAG,EAAE9B,GAAG;EACR+B,EAAE,EAAE9B,MAAM;EACV+B,MAAM,EAAE/B;AACZ,CAAC;AAEDgC,MAAM,CAACC,OAAO,GAAGzB,MAAM"},"metadata":{},"sourceType":"script"}