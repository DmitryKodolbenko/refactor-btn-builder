{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"../../index\"),\n  Contract = _require.Contract;\nvar _require2 = require(\"../../../boc\"),\n  Cell = _require2.Cell;\nvar _require3 = require(\"./NftUtils\"),\n  parseAddress = _require3.parseAddress;\nvar _require4 = require(\"../../../utils\"),\n  BN = _require4.BN;\nvarn\n/**\n * Not release - will change\n */\nvar NftSale = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(NftSale, _Contract);\n  var _super = _createSuper(NftSale);\n  /**\n   * @param provider\n   * @param options   {{marketplaceAddress: Address, nftAddress: Address, fullPrice: BN, marketplaceFee: BN, royaltyAddress: Address, royaltyAmount: BN, address?: Address | string, code?: Cell}}\n   */\n  function NftSale(provider, options) {\n    var _this;\n    _classCallCheck(this, NftSale);\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(NFT_SALE_HEX_CODE);\n    _this = _super.call(this, provider, options);\n    _this.methods.getData = _this.getData.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft sale data\n   */\n  _createClass(NftSale, [{\n    key: \"createDataCell\",\n    value: function createDataCell() {\n      var cell = new Cell();\n      cell.bits.writeAddress(this.options.marketplaceAddress);\n      cell.bits.writeAddress(this.options.nftAddress);\n      cell.bits.writeAddress(null); // nft_owner_address\n      cell.bits.writeCoins(this.options.fullPrice);\n      var feesCell = new Cell();\n      feesCell.bits.writeCoins(this.options.marketplaceFee);\n      feesCell.bits.writeAddress(this.options.royaltyAddress);\n      feesCell.bits.writeCoins(this.options.royaltyAmount);\n      cell.refs[0] = feesCell;\n      return cell;\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var myAddress, result, marketplaceAddress, nftAddress, nftOwnerAddress, fullPrice, marketplaceFee, royaltyAddress, royaltyAmount;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getAddress();\n              case 2:\n                myAddress = _context.sent;\n                _context.next = 5;\n                return this.provider.call2(myAddress.toString(), 'get_sale_data');\n              case 5:\n                result = _context.sent;\n                marketplaceAddress = parseAddress(result[0]);\n                nftAddress = parseAddress(result[1]);\n                nftOwnerAddress = parseAddress(result[2]);\n                fullPrice = result[3];\n                marketplaceFee = result[4];\n                royaltyAddress = parseAddress(result[5]);\n                royaltyAmount = result[6];\n                return _context.abrupt(\"return\", {\n                  marketplaceAddress: marketplaceAddress,\n                  nftAddress: nftAddress,\n                  nftOwnerAddress: nftOwnerAddress,\n                  fullPrice: fullPrice,\n                  marketplaceFee: marketplaceFee,\n                  royaltyAddress: royaltyAddress,\n                  royaltyAmount: royaltyAmount\n                });\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n      return getData;\n    }()\n    /**\n     * @param params    {{queryId?: number}}\n     */\n  }, {\n    key: \"createCancelBody\",\n    value: function () {\n      var _createCancelBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var cell;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cell = new Cell();\n                cell.bits.writeUint(3, 32); // cancel op\n                cell.bits.writeUint(params.queryId || 0, 64);\n                return _context2.abrupt(\"return\", cell);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function createCancelBody(_x) {\n        return _createCancelBody.apply(this, arguments);\n      }\n      return createCancelBody;\n    }()\n  }]);\n  return NftSale;\n}(Contract);\nNftSale.codeHex = NFT_SALE_HEX_CODE;\nmodule.exports = {\n  NftSale: NftSale\n};","map":{"version":3,"names":["require","Contract","Cell","parseAddress","BN","NFT_SALE_HEX_CODE","NftSale","provider","options","wc","code","oneFromBoc","methods","getData","bind","cell","bits","writeAddress","marketplaceAddress","nftAddress","writeCoins","fullPrice","feesCell","marketplaceFee","royaltyAddress","royaltyAmount","refs","getAddress","myAddress","call2","toString","result","nftOwnerAddress","params","writeUint","queryId","codeHex","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/token/nft/NftSale.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {parseAddress} = require(\"./NftUtils\");\nconst {BN} = require(\"../../../utils\");\n\nconstn\n/**\n * Not release - will change\n */\nclass NftSale extends Contract {\n\n    /**\n     * @param provider\n     * @param options   {{marketplaceAddress: Address, nftAddress: Address, fullPrice: BN, marketplaceFee: BN, royaltyAddress: Address, royaltyAmount: BN, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(NFT_SALE_HEX_CODE);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft sale data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeAddress(this.options.marketplaceAddress);\n        cell.bits.writeAddress(this.options.nftAddress);\n        cell.bits.writeAddress(null); // nft_owner_address\n        cell.bits.writeCoins(this.options.fullPrice);\n\n        const feesCell = new Cell();\n        feesCell.bits.writeCoins(this.options.marketplaceFee);\n        feesCell.bits.writeAddress(this.options.royaltyAddress);\n        feesCell.bits.writeCoins(this.options.royaltyAmount);\n        cell.refs[0] = feesCell;\n\n        return cell;\n    }\n\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_sale_data');\n\n        const marketplaceAddress = parseAddress(result[0]);\n        const nftAddress = parseAddress(result[1]);\n        const nftOwnerAddress = parseAddress(result[2]);\n        const fullPrice = result[3];\n        const marketplaceFee = result[4];\n        const royaltyAddress = parseAddress(result[5]);\n        const royaltyAmount = result[6];\n\n        return {marketplaceAddress, nftAddress, nftOwnerAddress, fullPrice, marketplaceFee, royaltyAddress, royaltyAmount};\n    }\n\n    /**\n     * @param params    {{queryId?: number}}\n     */\n    async createCancelBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(3, 32); // cancel op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        return cell;\n    }\n\n}\n\nNftSale.codeHex = NFT_SALE_HEX_CODE;\n\nmodule.exports = {NftSale};"],"mappings":";;;;;;;AAAA,eAAmBA,OAAO,CAAC,aAAa,CAAC;EAAlCC,QAAQ,YAARA,QAAQ;AACf,gBAAeD,OAAO,CAAC,cAAc,CAAC;EAA/BE,IAAI,aAAJA,IAAI;AACX,gBAAuBF,OAAO,CAAC,YAAY,CAAC;EAArCG,YAAY,aAAZA,YAAY;AACnB,gBAAaH,OAAO,CAAC,gBAAgB,CAAC;EAA/BI,EAAE,aAAFA,EAAE;AAET,IAAMC,iBAAiB,GAAG,w3BAAw3B;;AAEl5B;AACA;AACA;AAFA,IAGMC,OAAO;EAAA;;EAAA;EAAA;EAET;AACJ;AACA;AACA;EACI,iBAAYC,QAAQ,EAAEC,OAAO,EAAE;IAAA;IAAA;IAC3BA,OAAO,CAACC,EAAE,GAAG,CAAC;IACdD,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACE,IAAI,IAAIR,IAAI,CAACS,UAAU,CAACN,iBAAiB,CAAC;IACjE,0BAAME,QAAQ,EAAEC,OAAO;IAEvB,MAAKI,OAAO,CAACC,OAAO,GAAG,MAAKA,OAAO,CAACC,IAAI,+BAAM;IAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,0BAAiB;MACb,IAAMC,IAAI,GAAG,IAAIb,IAAI,EAAE;MACvBa,IAAI,CAACC,IAAI,CAACC,YAAY,CAAC,IAAI,CAACT,OAAO,CAACU,kBAAkB,CAAC;MACvDH,IAAI,CAACC,IAAI,CAACC,YAAY,CAAC,IAAI,CAACT,OAAO,CAACW,UAAU,CAAC;MAC/CJ,IAAI,CAACC,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MAC9BF,IAAI,CAACC,IAAI,CAACI,UAAU,CAAC,IAAI,CAACZ,OAAO,CAACa,SAAS,CAAC;MAE5C,IAAMC,QAAQ,GAAG,IAAIpB,IAAI,EAAE;MAC3BoB,QAAQ,CAACN,IAAI,CAACI,UAAU,CAAC,IAAI,CAACZ,OAAO,CAACe,cAAc,CAAC;MACrDD,QAAQ,CAACN,IAAI,CAACC,YAAY,CAAC,IAAI,CAACT,OAAO,CAACgB,cAAc,CAAC;MACvDF,QAAQ,CAACN,IAAI,CAACI,UAAU,CAAC,IAAI,CAACZ,OAAO,CAACiB,aAAa,CAAC;MACpDV,IAAI,CAACW,IAAI,CAAC,CAAC,CAAC,GAAGJ,QAAQ;MAEvB,OAAOP,IAAI;IACf;EAAC;IAAA;IAAA;MAAA,0EAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC4B,IAAI,CAACY,UAAU,EAAE;cAAA;gBAAnCC,SAAS;gBAAA;gBAAA,OACM,IAAI,CAACrB,QAAQ,CAACsB,KAAK,CAACD,SAAS,CAACE,QAAQ,EAAE,EAAE,eAAe,CAAC;cAAA;gBAAzEC,MAAM;gBAENb,kBAAkB,GAAGf,YAAY,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5CZ,UAAU,GAAGhB,YAAY,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpCC,eAAe,GAAG7B,YAAY,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzCV,SAAS,GAAGU,MAAM,CAAC,CAAC,CAAC;gBACrBR,cAAc,GAAGQ,MAAM,CAAC,CAAC,CAAC;gBAC1BP,cAAc,GAAGrB,YAAY,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxCN,aAAa,GAAGM,MAAM,CAAC,CAAC,CAAC;gBAAA,iCAExB;kBAACb,kBAAkB,EAAlBA,kBAAkB;kBAAEC,UAAU,EAAVA,UAAU;kBAAEa,eAAe,EAAfA,eAAe;kBAAEX,SAAS,EAATA,SAAS;kBAAEE,cAAc,EAAdA,cAAc;kBAAEC,cAAc,EAAdA,cAAc;kBAAEC,aAAa,EAAbA;gBAAa,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACrH;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;AACJ;AACA;EAFI;IAAA;IAAA;MAAA,mFAGA,kBAAuBQ,MAAM;QAAA;QAAA;UAAA;YAAA;cAAA;gBACnBlB,IAAI,GAAG,IAAIb,IAAI,EAAE;gBACvBa,IAAI,CAACC,IAAI,CAACkB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC5BnB,IAAI,CAACC,IAAI,CAACkB,SAAS,CAACD,MAAM,CAACE,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC;gBAAC,kCACtCpB,IAAI;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EA1DiBd,QAAQ;AA8D9BK,OAAO,CAAC8B,OAAO,GAAG/B,iBAAiB;AAEnCgC,MAAM,CAACC,OAAO,GAAG;EAAChC,OAAO,EAAPA;AAAO,CAAC"},"metadata":{},"sourceType":"script"}