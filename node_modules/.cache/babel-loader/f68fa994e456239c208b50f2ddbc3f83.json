{"ast":null,"code":"import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { chainEitherK as chainEitherK_, fromEitherK as fromEitherK_, chainFirstEitherK as chainFirstEitherK_ } from './FromEither';\nimport { constNull, constUndefined, flow, identity, pipe } from './function';\nimport { let as let__, bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { not } from './Predicate';\nimport { first, last } from './Semigroup';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var none = _.none;\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var some = _.some;\nexport function fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? some(a) : none;\n  };\n}\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getLeft = function getLeft(ma) {\n  return ma._tag === 'Right' ? none : some(ma.left);\n};\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getRight = function getRight(ma) {\n  return ma._tag === 'Left' ? none : some(ma.right);\n};\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\nvar _foldMap = function _foldMap(M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\nvar _filter = function _filter(fa, predicate) {\n  return pipe(fa, filter(predicate));\n};\n/* istanbul ignore next */\nvar _filterMap = function _filterMap(fa, f) {\n  return pipe(fa, filterMap(f));\n};\n/* istanbul ignore next */\nvar _extend = function _extend(wa, f) {\n  return pipe(wa, extend(f));\n};\n/* istanbul ignore next */\nvar _partition = function _partition(fa, predicate) {\n  return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function _partitionMap(fa, f) {\n  return pipe(fa, partitionMap(f));\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function getShow(S) {\n  return {\n    show: function show(ma) {\n      return isNone(ma) ? 'none' : \"some(\".concat(S.show(ma.value), \")\");\n    }\n  };\n};\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function getEq(E) {\n  return {\n    equals: function equals(x, y) {\n      return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value));\n    }\n  };\n};\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const O = getOrd(N.Ord)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = function getOrd(O) {\n  return {\n    equals: getEq(O).equals,\n    compare: function compare(x, y) {\n      return x === y ? 0 : isSome(x) ? isSome(y) ? O.compare(x.value, y.value) : 1 : -1;\n    }\n  };\n};\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(b) | some(b)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const M = getMonoid(SemigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function getMonoid(S) {\n  return {\n    concat: function concat(x, y) {\n      return isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value));\n    },\n    empty: none\n  };\n};\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function map(f) {\n  return function (fa) {\n    return isNone(fa) ? none : some(f(fa.value));\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = some;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @since 2.0.0\n */\nexport var ap = function ap(fa) {\n  return function (fab) {\n    return isNone(fab) ? none : isNone(fa) ? none : some(fab.value(fa.value));\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chain = function chain(f) {\n  return function (ma) {\n    return isNone(ma) ? none : f(ma.value);\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function reduce(b, f) {\n  return function (fa) {\n    return isNone(fa) ? b : f(b, fa.value);\n  };\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function foldMap(M) {\n  return function (f) {\n    return function (fa) {\n      return isNone(fa) ? M.empty : f(fa.value);\n    };\n  };\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function reduceRight(b, f) {\n  return function (fa) {\n    return isNone(fa) ? b : f(fa.value, b);\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function altW(that) {\n  return function (fa) {\n    return isNone(fa) ? that() : fa;\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Option` returns the left-most non-`None` value.\n *\n * | x       | y       | pipe(x, alt(() => y) |\n * | ------- | ------- | -------------------- |\n * | none    | none    | none                 |\n * | some(a) | none    | some(a)              |\n * | none    | some(b) | some(b)              |\n * | some(a) | some(b) | some(a)              |\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.none)\n *   ),\n *   O.none\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt<string>(() => O.none)\n *   ),\n *   O.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @since 2.7.0\n */\nexport var zero = function zero() {\n  return none;\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n  URI: URI,\n  zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  alt: _alt,\n  zero: zero\n};\n/**\n * @since 2.0.0\n */\nexport var extend = function extend(f) {\n  return function (wa) {\n    return isNone(wa) ? none : some(f(wa));\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n  URI: URI,\n  map: _map,\n  extend: _extend\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/chain(identity);\nvar defaultSeparated = /*#__PURE__*/separated(none, none);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function separate(ma) {\n  return isNone(ma) ? defaultSeparated : separated(getLeft(ma.value), getRight(ma.value));\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n  URI: URI,\n  compact: compact,\n  separate: separate\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function filter(predicate) {\n  return function (fa) {\n    return isNone(fa) ? none : predicate(fa.value) ? fa : none;\n  };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function filterMap(f) {\n  return function (fa) {\n    return isNone(fa) ? none : f(fa.value);\n  };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function partition(predicate) {\n  return function (fa) {\n    return separated(_filter(fa, not(predicate)), _filter(fa, predicate));\n  };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function partitionMap(f) {\n  return flow(map(f), separate);\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function traverse(F) {\n  return function (f) {\n    return function (ta) {\n      return isNone(ta) ? F.of(none) : F.map(f(ta.value), some);\n    };\n  };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function sequence(F) {\n  return function (ta) {\n    return isNone(ta) ? F.of(none) : F.map(ta.value, some);\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\nvar _wither = /*#__PURE__*/witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/wiltDefault(Traversable, Compactable);\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function wither(F) {\n  var _witherF = _wither(F);\n  return function (f) {\n    return function (fa) {\n      return _witherF(fa, f);\n    };\n  };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function wilt(F) {\n  var _wiltF = _wilt(F);\n  return function (f) {\n    return function (fa) {\n      return _wiltF(fa, f);\n    };\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  wither: _wither,\n  wilt: _wilt\n};\n/**\n * @since 2.7.0\n */\nexport var throwError = function throwError() {\n  return none;\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain,\n  throwError: throwError\n};\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getright)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = getRight;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n  URI: URI,\n  fromEither: fromEither\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isSome = _.isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNone = function isNone(fa) {\n  return fa._tag === 'None';\n};\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function matchW(onNone, onSome) {\n  return function (ma) {\n    return isNone(ma) ? onNone() : onSome(ma.value);\n  };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, match } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = function getOrElseW(onNone) {\n  return function (ma) {\n    return isNone(ma) ? onNone() : ma.value;\n  };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = compact;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/fromEitherK_(FromEither);\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainEitherK = /*#__PURE__*/chainEitherK_(FromEither, Chain);\n/**\n * @category sequencing\n * @since 2.12.0\n */\nexport var chainFirstEitherK = /*#__PURE__*/chainFirstEitherK_(FromEither, Chain);\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromNullable = function fromNullable(a) {\n  return a == null ? none : some(a);\n};\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function tryCatch(f) {\n  try {\n    return some(f());\n  } catch (e) {\n    return none;\n  }\n};\n/**\n * Converts a function that may throw to one returning a `Option`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function tryCatchK(f) {\n  return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n    return tryCatch(function () {\n      return f.apply(void 0, a);\n    });\n  };\n};\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category lifting\n * @since 2.9.0\n */\nexport var fromNullableK = function fromNullableK(f) {\n  return flow(f, fromNullable);\n};\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   readonly company?: {\n *     readonly address?: {\n *       readonly street?: {\n *         readonly name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category sequencing\n * @since 2.9.0\n */\nexport var chainNullableK = function chainNullableK(f) {\n  return function (ma) {\n    return isNone(ma) ? none : fromNullable(f(ma.value));\n  };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toNullable = /*#__PURE__*/match(constNull, identity);\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toUndefined = /*#__PURE__*/match(constUndefined, identity);\nexport function elem(E) {\n  return function (a, ma) {\n    if (ma === undefined) {\n      var elemE_1 = elem(E);\n      return function (ma) {\n        return elemE_1(a, ma);\n      };\n    }\n    return isNone(ma) ? false : E.equals(a, ma.value);\n  };\n}\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nexport var exists = function exists(predicate) {\n  return function (ma) {\n    return isNone(ma) ? false : predicate(ma.value);\n  };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\nvar let_ = /*#__PURE__*/let__(Functor);\nexport {\n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/apS_(Apply);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function traverseReadonlyNonEmptyArrayWithIndex(f) {\n  return function (as) {\n    var o = f(0, _.head(as));\n    if (isNone(o)) {\n      return none;\n    }\n    var out = [o.value];\n    for (var i = 1; i < as.length; i++) {\n      var o_1 = f(i, as[i]);\n      if (isNone(o_1)) {\n        return none;\n      }\n      out.push(o_1.value);\n    }\n    return some(out);\n  };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function traverseReadonlyArrayWithIndex(f) {\n  var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n  return function (as) {\n    return _.isNonEmpty(as) ? g(as) : ApT;\n  };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function traverseArray(f) {\n  return traverseReadonlyArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = /*#__PURE__*/traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `Refinement` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getRefinement(getOption) {\n  return function (a) {\n    return isSome(getOption(a));\n  };\n}\n/**\n * Use [`chainNullableK`](#chainnullablek) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var mapNullable = chainNullableK;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `O.Functor` instead of `O.option`\n * (where `O` is from `import O from 'fp-ts/Option'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var option = {\n  URI: URI,\n  map: _map,\n  of: of,\n  ap: _ap,\n  chain: _chain,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  zero: zero,\n  alt: _alt,\n  extend: _extend,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  wither: _wither,\n  wilt: _wilt,\n  throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = /*#__PURE__*/getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = /*#__PURE__*/getApplicativeMonoid(Applicative);\n/**\n * Use\n *\n * ```ts\n * import { first } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(first())\n * ```\n *\n * instead.\n *\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstMonoid = function getFirstMonoid() {\n  return getMonoid(first());\n};\n/**\n * Use\n *\n * ```ts\n * import { last } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(last())\n * ```\n *\n * instead.\n *\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastMonoid = function getLastMonoid() {\n  return getMonoid(last());\n};","map":{"version":3,"names":["getApplicativeMonoid","apFirst","apFirst_","apS","apS_","apSecond","apSecond_","getApplySemigroup","getApplySemigroup_","bind","bind_","chainFirst","chainFirst_","chainEitherK","chainEitherK_","fromEitherK","fromEitherK_","chainFirstEitherK","chainFirstEitherK_","constNull","constUndefined","flow","identity","pipe","let","let__","bindTo","bindTo_","flap","flap_","_","not","first","last","separated","wiltDefault","witherDefault","guard","guard_","none","some","fromPredicate","predicate","a","getLeft","ma","_tag","left","getRight","right","_map","fa","f","map","_ap","fab","ap","_chain","chain","_reduce","b","reduce","_foldMap","M","foldMapM","foldMap","_reduceRight","reduceRight","_traverse","F","traverseF","traverse","ta","_alt","that","alt","_filter","filter","_filterMap","filterMap","_extend","wa","extend","_partition","partition","_partitionMap","partitionMap","URI","getShow","S","show","isNone","concat","value","getEq","E","equals","x","y","getOrd","O","compare","isSome","getMonoid","empty","Functor","of","Pointed","Apply","Applicative","Chain","Monad","Foldable","altW","Alt","zero","Zero","Alternative","Extend","compact","defaultSeparated","separate","Compactable","Filterable","sequence","Traversable","_wither","_wilt","wither","_witherF","wilt","_wiltF","Witherable","throwError","MonadThrow","fromEither","FromEither","matchW","onNone","onSome","foldW","match","fold","getOrElseW","getOrElse","flatten","duplicate","fromNullable","tryCatch","e","tryCatchK","_i","arguments","length","apply","fromNullableK","chainNullableK","toNullable","toUndefined","elem","undefined","elemE_1","exists","Do","emptyRecord","let_","ApT","emptyReadonlyArray","traverseReadonlyNonEmptyArrayWithIndex","as","o","head","out","i","o_1","push","traverseReadonlyArrayWithIndex","g","isNonEmpty","traverseArrayWithIndex","traverseArray","sequenceArray","getRefinement","getOption","mapNullable","option","getApplyMonoid","getFirstMonoid","getLastMonoid"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/fp-ts/es6/Option.js"],"sourcesContent":["import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { chainEitherK as chainEitherK_, fromEitherK as fromEitherK_, chainFirstEitherK as chainFirstEitherK_ } from './FromEither';\nimport { constNull, constUndefined, flow, identity, pipe } from './function';\nimport { let as let__, bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { not } from './Predicate';\nimport { first, last } from './Semigroup';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var none = _.none;\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var some = _.some;\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? some(a) : none); };\n}\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getLeft = function (ma) { return (ma._tag === 'Right' ? none : some(ma.left)); };\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getRight = function (ma) { return (ma._tag === 'Left' ? none : some(ma.right)); };\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function (S) { return ({\n    show: function (ma) { return (isNone(ma) ? 'none' : \"some(\".concat(S.show(ma.value), \")\")); }\n}); };\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function (E) { return ({\n    equals: function (x, y) { return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value)); }\n}); };\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const O = getOrd(N.Ord)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = function (O) { return ({\n    equals: getEq(O).equals,\n    compare: function (x, y) { return (x === y ? 0 : isSome(x) ? (isSome(y) ? O.compare(x.value, y.value) : 1) : -1); }\n}); };\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(b) | some(b)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const M = getMonoid(SemigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function (S) { return ({\n    concat: function (x, y) { return (isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value))); },\n    empty: none\n}); };\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isNone(fa) ? none : some(f(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category constructors\n * @since 2.7.0\n */\nexport var of = some;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) {\n    return isNone(fab) ? none : isNone(fa) ? none : some(fab.value(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chain = function (f) { return function (ma) {\n    return isNone(ma) ? none : f(ma.value);\n}; };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(b, fa.value);\n}; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isNone(fa) ? M.empty : f(fa.value);\n}; }; };\n/**\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(fa.value, b);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) {\n    return isNone(fa) ? that() : fa;\n}; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Option` returns the left-most non-`None` value.\n *\n * | x       | y       | pipe(x, alt(() => y) |\n * | ------- | ------- | -------------------- |\n * | none    | none    | none                 |\n * | some(a) | none    | some(a)              |\n * | none    | some(b) | some(b)              |\n * | some(a) | some(b) | some(a)              |\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.none)\n *   ),\n *   O.none\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt<string>(() => O.none)\n *   ),\n *   O.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @since 2.7.0\n */\nexport var zero = function () { return none; };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isNone(wa) ? none : some(f(wa));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/ chain(identity);\nvar defaultSeparated = /*#__PURE__*/ separated(none, none);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (ma) {\n    return isNone(ma) ? defaultSeparated : separated(getLeft(ma.value), getRight(ma.value));\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n    return function (fa) {\n        return isNone(fa) ? none : predicate(fa.value) ? fa : none;\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return isNone(fa) ? none : f(fa.value);\n}; };\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return function (fa) {\n        return separated(_filter(fa, not(predicate)), _filter(fa, predicate));\n    };\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return flow(map(f), separate); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    return function (f) {\n        return function (ta) {\n            return isNone(ta) ? F.of(none) : F.map(f(ta.value), some);\n        };\n    };\n};\n/**\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return isNone(ta) ? F.of(none) : F.map(ta.value, some);\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @since 2.7.0\n */\nexport var throwError = function () { return none; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    throwError: throwError\n};\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getright)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromEither = getRight;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isSome = _.isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNone = function (fa) { return fa._tag === 'None'; };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchW = function (onNone, onSome) {\n    return function (ma) {\n        return isNone(ma) ? onNone() : onSome(ma.value);\n    };\n};\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, match } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * The `W` suffix (short for **W**idening) means that the handler return type will be merged.\n *\n * @category error handling\n * @since 2.6.0\n */\nexport var getOrElseW = function (onNone) {\n    return function (ma) {\n        return isNone(ma) ? onNone() : ma.value;\n    };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n/**\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.0.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.0.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport var flatten = compact;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/ chainFirst_(Chain);\n/**\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainEitherK = \n/*#__PURE__*/ chainEitherK_(FromEither, Chain);\n/**\n * @category sequencing\n * @since 2.12.0\n */\nexport var chainFirstEitherK = \n/*#__PURE__*/ chainFirstEitherK_(FromEither, Chain);\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var fromNullable = function (a) { return (a == null ? none : some(a)); };\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f) {\n    try {\n        return some(f());\n    }\n    catch (e) {\n        return none;\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Option`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return tryCatch(function () { return f.apply(void 0, a); });\n    };\n};\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category lifting\n * @since 2.9.0\n */\nexport var fromNullableK = function (f) { return flow(f, fromNullable); };\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   readonly company?: {\n *     readonly address?: {\n *       readonly street?: {\n *         readonly name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category sequencing\n * @since 2.9.0\n */\nexport var chainNullableK = function (f) {\n    return function (ma) {\n        return isNone(ma) ? none : fromNullable(f(ma.value));\n    };\n};\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toNullable = /*#__PURE__*/ match(constNull, identity);\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category conversions\n * @since 2.0.0\n */\nexport var toUndefined = /*#__PURE__*/ match(constUndefined, identity);\nexport function elem(E) {\n    return function (a, ma) {\n        if (ma === undefined) {\n            var elemE_1 = elem(E);\n            return function (ma) { return elemE_1(a, ma); };\n        }\n        return isNone(ma) ? false : E.equals(a, ma.value);\n    };\n}\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nexport var exists = function (predicate) {\n    return function (ma) {\n        return isNone(ma) ? false : predicate(ma.value);\n    };\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n/**\n * @since 2.11.0\n */\nexport var ApT = /*#__PURE__*/ of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return function (as) {\n        var o = f(0, _.head(as));\n        if (isNone(o)) {\n            return none;\n        }\n        var out = [o.value];\n        for (var i = 1; i < as.length; i++) {\n            var o_1 = f(i, as[i]);\n            if (isNone(o_1)) {\n                return none;\n            }\n            out.push(o_1.value);\n        }\n        return some(out);\n    };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/ traverseArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `Refinement` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport function getRefinement(getOption) {\n    return function (a) { return isSome(getOption(a)); };\n}\n/**\n * Use [`chainNullableK`](#chainnullablek) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var mapNullable = chainNullableK;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `O.Functor` instead of `O.option`\n * (where `O` is from `import O from 'fp-ts/Option'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var option = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: _chain,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    zero: zero,\n    alt: _alt,\n    extend: _extend,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = /*#__PURE__*/ getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = /*#__PURE__*/ getApplicativeMonoid(Applicative);\n/**\n * Use\n *\n * ```ts\n * import { first } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(first())\n * ```\n *\n * instead.\n *\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstMonoid = function () { return getMonoid(first()); };\n/**\n * Use\n *\n * ```ts\n * import { last } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(last())\n * ```\n *\n * instead.\n *\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastMonoid = function () { return getMonoid(last()); };\n"],"mappings":"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ACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,KAAK,GAAGJ,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIK,IAAI,GAAGD,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,UAAU,GAAG,SAAbA,UAAU,CAAaL,MAAM,EAAE;EACtC,OAAO,UAAU7F,EAAE,EAAE;IACjB,OAAO8C,MAAM,CAAC9C,EAAE,CAAC,GAAG6F,MAAM,EAAE,GAAG7F,EAAE,CAACgD,KAAK;EAC3C,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAImD,SAAS,GAAGD,UAAU;AACjC;AACA;AACA;AACA;AACA,OAAO,IAAInH,IAAI,GAAG,aAAcC,KAAK,CAAC4E,OAAO,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIxG,OAAO,GAAG,aAAcC,QAAQ,CAAC0G,KAAK,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIvG,QAAQ,GAAG,aAAcC,SAAS,CAACsG,KAAK,CAAC;AACpD;AACA;AACA;AACA;AACA,OAAO,IAAIqC,OAAO,GAAG1B,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI5G,UAAU,GACrB,aAAcC,WAAW,CAACkG,KAAK,CAAC;AAChC;AACA;AACA;AACA,OAAO,IAAIoC,SAAS,GAAG,aAAchE,MAAM,CAAC5D,QAAQ,CAAC;AACrD;AACA;AACA;AACA;AACA,OAAO,IAAIP,WAAW,GAAG,aAAcC,YAAY,CAACwH,UAAU,CAAC;AAC/D;AACA;AACA;AACA;AACA,OAAO,IAAI3H,YAAY,GACvB,aAAcC,aAAa,CAAC0H,UAAU,EAAE1B,KAAK,CAAC;AAC9C;AACA;AACA;AACA;AACA,OAAO,IAAI7F,iBAAiB,GAC5B,aAAcC,kBAAkB,CAACsH,UAAU,EAAE1B,KAAK,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIqC,YAAY,GAAG,SAAfA,YAAY,CAAaxG,CAAC,EAAE;EAAE,OAAQA,CAAC,IAAI,IAAI,GAAGJ,IAAI,GAAGC,IAAI,CAACG,CAAC,CAAC;AAAG,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIyG,QAAQ,GAAG,SAAXA,QAAQ,CAAahG,CAAC,EAAE;EAC/B,IAAI;IACA,OAAOZ,IAAI,CAACY,CAAC,EAAE,CAAC;EACpB,CAAC,CACD,OAAOiG,CAAC,EAAE;IACN,OAAO9G,IAAI;EACf;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI+G,SAAS,GAAG,SAAZA,SAAS,CAAalG,CAAC,EAAE;EAChC,OAAO,YAAY;IACf,IAAIT,CAAC,GAAG,EAAE;IACV,KAAK,IAAI4G,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC1C5G,CAAC,CAAC4G,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;IACzB;IACA,OAAOH,QAAQ,CAAC,YAAY;MAAE,OAAOhG,CAAC,CAACsG,KAAK,CAAC,KAAK,CAAC,EAAE/G,CAAC,CAAC;IAAE,CAAC,CAAC;EAC/D,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIgH,aAAa,GAAG,SAAhBA,aAAa,CAAavG,CAAC,EAAE;EAAE,OAAO/B,IAAI,CAAC+B,CAAC,EAAE+F,YAAY,CAAC;AAAE,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIS,cAAc,GAAG,SAAjBA,cAAc,CAAaxG,CAAC,EAAE;EACrC,OAAO,UAAUP,EAAE,EAAE;IACjB,OAAO8C,MAAM,CAAC9C,EAAE,CAAC,GAAGN,IAAI,GAAG4G,YAAY,CAAC/F,CAAC,CAACP,EAAE,CAACgD,KAAK,CAAC,CAAC;EACxD,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIgE,UAAU,GAAG,aAAchB,KAAK,CAAC1H,SAAS,EAAEG,QAAQ,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIwI,WAAW,GAAG,aAAcjB,KAAK,CAACzH,cAAc,EAAEE,QAAQ,CAAC;AACtE,OAAO,SAASyI,IAAI,CAAChE,CAAC,EAAE;EACpB,OAAO,UAAUpD,CAAC,EAAEE,EAAE,EAAE;IACpB,IAAIA,EAAE,KAAKmH,SAAS,EAAE;MAClB,IAAIC,OAAO,GAAGF,IAAI,CAAChE,CAAC,CAAC;MACrB,OAAO,UAAUlD,EAAE,EAAE;QAAE,OAAOoH,OAAO,CAACtH,CAAC,EAAEE,EAAE,CAAC;MAAE,CAAC;IACnD;IACA,OAAO8C,MAAM,CAAC9C,EAAE,CAAC,GAAG,KAAK,GAAGkD,CAAC,CAACC,MAAM,CAACrD,CAAC,EAAEE,EAAE,CAACgD,KAAK,CAAC;EACrD,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIqE,MAAM,GAAG,SAATA,MAAM,CAAaxH,SAAS,EAAE;EACrC,OAAO,UAAUG,EAAE,EAAE;IACjB,OAAO8C,MAAM,CAAC9C,EAAE,CAAC,GAAG,KAAK,GAAGH,SAAS,CAACG,EAAE,CAACgD,KAAK,CAAC;EACnD,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIsE,EAAE,GAAG,aAAczD,EAAE,CAAC5E,CAAC,CAACsI,WAAW,CAAC;AAC/C;AACA;AACA;AACA;AACA,OAAO,IAAI1I,MAAM,GAAG,aAAcC,OAAO,CAAC8E,OAAO,CAAC;AAClD,IAAI4D,IAAI,GAAG,aAAc5I,KAAK,CAACgF,OAAO,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA4D,IAAI,IAAI7I,GAAG;AACX;AACA;AACA;AACA;AACA,OAAO,IAAIf,IAAI,GAAG,aAAcC,KAAK,CAACoG,KAAK,CAAC;AAC5C;AACA;AACA;AACA;AACA,OAAO,IAAI3G,GAAG,GAAG,aAAcC,IAAI,CAACwG,KAAK,CAAC;AAC1C;AACA;AACA;AACA,OAAO,IAAI0D,GAAG,GAAG,aAAc5D,EAAE,CAAC5E,CAAC,CAACyI,kBAAkB,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,sCAAsC,GAAG,SAAzCA,sCAAsC,CAAapH,CAAC,EAAE;EAC7D,OAAO,UAAUqH,EAAE,EAAE;IACjB,IAAIC,CAAC,GAAGtH,CAAC,CAAC,CAAC,EAAEtB,CAAC,CAAC6I,IAAI,CAACF,EAAE,CAAC,CAAC;IACxB,IAAI9E,MAAM,CAAC+E,CAAC,CAAC,EAAE;MACX,OAAOnI,IAAI;IACf;IACA,IAAIqI,GAAG,GAAG,CAACF,CAAC,CAAC7E,KAAK,CAAC;IACnB,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,EAAE,CAAChB,MAAM,EAAEoB,CAAC,EAAE,EAAE;MAChC,IAAIC,GAAG,GAAG1H,CAAC,CAACyH,CAAC,EAAEJ,EAAE,CAACI,CAAC,CAAC,CAAC;MACrB,IAAIlF,MAAM,CAACmF,GAAG,CAAC,EAAE;QACb,OAAOvI,IAAI;MACf;MACAqI,GAAG,CAACG,IAAI,CAACD,GAAG,CAACjF,KAAK,CAAC;IACvB;IACA,OAAOrD,IAAI,CAACoI,GAAG,CAAC;EACpB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,8BAA8B,GAAG,SAAjCA,8BAA8B,CAAa5H,CAAC,EAAE;EACrD,IAAI6H,CAAC,GAAGT,sCAAsC,CAACpH,CAAC,CAAC;EACjD,OAAO,UAAUqH,EAAE,EAAE;IAAE,OAAQ3I,CAAC,CAACoJ,UAAU,CAACT,EAAE,CAAC,GAAGQ,CAAC,CAACR,EAAE,CAAC,GAAGH,GAAG;EAAG,CAAC;AACrE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIa,sBAAsB,GAAGH,8BAA8B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,aAAa,GAAG,SAAhBA,aAAa,CAAahI,CAAC,EAAE;EACpC,OAAO4H,8BAA8B,CAAC,UAAUlJ,CAAC,EAAEa,CAAC,EAAE;IAAE,OAAOS,CAAC,CAACT,CAAC,CAAC;EAAE,CAAC,CAAC;AAC3E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI0I,aAAa,GACxB,aAAcD,aAAa,CAAC9J,QAAQ,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgK,aAAa,CAACC,SAAS,EAAE;EACrC,OAAO,UAAU5I,CAAC,EAAE;IAAE,OAAO2D,MAAM,CAACiF,SAAS,CAAC5I,CAAC,CAAC,CAAC;EAAE,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI6I,WAAW,GAAG5B,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI6B,MAAM,GAAG;EAChBlG,GAAG,EAAEA,GAAG;EACRlC,GAAG,EAAEH,IAAI;EACTwD,EAAE,EAAEA,EAAE;EACNlD,EAAE,EAAEF,GAAG;EACPI,KAAK,EAAED,MAAM;EACbI,MAAM,EAAEF,OAAO;EACfM,OAAO,EAAEH,QAAQ;EACjBK,WAAW,EAAED,YAAY;EACzBK,QAAQ,EAAEH,SAAS;EACnBwD,QAAQ,EAAEA,QAAQ;EAClBT,IAAI,EAAEA,IAAI;EACVxC,GAAG,EAAEF,IAAI;EACTS,MAAM,EAAEF,OAAO;EACfuC,OAAO,EAAEA,OAAO;EAChBE,QAAQ,EAAEA,QAAQ;EAClB5C,MAAM,EAAED,OAAO;EACfG,SAAS,EAAED,UAAU;EACrBM,SAAS,EAAED,UAAU;EACrBG,YAAY,EAAED,aAAa;EAC3B2C,MAAM,EAAEF,OAAO;EACfI,IAAI,EAAEH,KAAK;EACXM,UAAU,EAAEA;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI9H,iBAAiB,GAAG,aAAcC,kBAAkB,CAACoG,KAAK,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI8E,cAAc,GAAG,aAAc1L,oBAAoB,CAAC6G,WAAW,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI8E,cAAc,GAAG,SAAjBA,cAAc,GAAe;EAAE,OAAOpF,SAAS,CAACvE,KAAK,EAAE,CAAC;AAAE,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI4J,aAAa,GAAG,SAAhBA,aAAa,GAAe;EAAE,OAAOrF,SAAS,CAACtE,IAAI,EAAE,CAAC;AAAE,CAAC"},"metadata":{},"sourceType":"module"}