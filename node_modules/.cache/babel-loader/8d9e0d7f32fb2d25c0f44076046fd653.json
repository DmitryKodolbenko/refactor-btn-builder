{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar utils_1 = require(\"@cosmjs/utils\");\nvar query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nvar queryclient_1 = require(\"../../queryclient\");\nfunction setupBankExtension(base) {\n  var rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: function () {\n        var _balance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address, denom) {\n          var _yield$queryService$B, balance;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Balance({\n                    address: address,\n                    denom: denom\n                  });\n                case 2:\n                  _yield$queryService$B = _context.sent;\n                  balance = _yield$queryService$B.balance;\n                  (0, utils_1.assert)(balance);\n                  return _context.abrupt(\"return\", balance);\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        function balance(_x, _x2) {\n          return _balance.apply(this, arguments);\n        }\n        return balance;\n      }(),\n      allBalances: function () {\n        var _allBalances = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {\n          var _yield$queryService$A, balances;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return queryService.AllBalances({\n                    address: address\n                  });\n                case 2:\n                  _yield$queryService$A = _context2.sent;\n                  balances = _yield$queryService$A.balances;\n                  return _context2.abrupt(\"return\", balances);\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        function allBalances(_x3) {\n          return _allBalances.apply(this, arguments);\n        }\n        return allBalances;\n      }(),\n      totalSupply: function () {\n        var _totalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var _yield$queryService$T, supply;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return queryService.TotalSupply({});\n                case 2:\n                  _yield$queryService$T = _context3.sent;\n                  supply = _yield$queryService$T.supply;\n                  return _context3.abrupt(\"return\", supply);\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n        function totalSupply() {\n          return _totalSupply.apply(this, arguments);\n        }\n        return totalSupply;\n      }(),\n      supplyOf: function () {\n        var _supplyOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(denom) {\n          var _yield$queryService$S, amount;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return queryService.SupplyOf({\n                    denom: denom\n                  });\n                case 2:\n                  _yield$queryService$S = _context4.sent;\n                  amount = _yield$queryService$S.amount;\n                  (0, utils_1.assert)(amount);\n                  return _context4.abrupt(\"return\", amount);\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n        function supplyOf(_x4) {\n          return _supplyOf.apply(this, arguments);\n        }\n        return supplyOf;\n      }(),\n      denomMetadata: function () {\n        var _denomMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(denom) {\n          var _yield$queryService$D, metadata;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return queryService.DenomMetadata({\n                    denom: denom\n                  });\n                case 2:\n                  _yield$queryService$D = _context5.sent;\n                  metadata = _yield$queryService$D.metadata;\n                  (0, utils_1.assert)(metadata);\n                  return _context5.abrupt(\"return\", metadata);\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n        function denomMetadata(_x5) {\n          return _denomMetadata.apply(this, arguments);\n        }\n        return denomMetadata;\n      }(),\n      denomsMetadata: function () {\n        var _denomsMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          var _yield$queryService$D2, metadatas;\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return queryService.DenomsMetadata({\n                    pagination: undefined // Not implemented\n                  });\n                case 2:\n                  _yield$queryService$D2 = _context6.sent;\n                  metadatas = _yield$queryService$D2.metadatas;\n                  return _context6.abrupt(\"return\", metadatas);\n                case 5:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n        function denomsMetadata() {\n          return _denomsMetadata.apply(this, arguments);\n        }\n        return denomsMetadata;\n      }()\n    }\n  };\n}\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"sources":["../../../src/modules/bank/queries.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupBankExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        bank: {\n            balance: async (address, denom) => {\n                const { balance } = await queryService.Balance({ address: address, denom: denom });\n                (0, utils_1.assert)(balance);\n                return balance;\n            },\n            allBalances: async (address) => {\n                const { balances } = await queryService.AllBalances({ address: address });\n                return balances;\n            },\n            totalSupply: async () => {\n                const { supply } = await queryService.TotalSupply({});\n                return supply;\n            },\n            supplyOf: async (denom) => {\n                const { amount } = await queryService.SupplyOf({ denom: denom });\n                (0, utils_1.assert)(amount);\n                return amount;\n            },\n            denomMetadata: async (denom) => {\n                const { metadata } = await queryService.DenomMetadata({ denom });\n                (0, utils_1.assert)(metadata);\n                return metadata;\n            },\n            denomsMetadata: async () => {\n                const { metadatas } = await queryService.DenomsMetadata({\n                    pagination: undefined, // Not implemented\n                });\n                return metadatas;\n            },\n        },\n    };\n}\nexports.setupBankExtension = setupBankExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}