{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _KeyStore_salt, _KeyStore_publicKey, _KeyStore_records;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyStore = exports.createKeyStoreKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst t = __importStar(require(\"io-ts\"));\nconst Either_1 = require(\"fp-ts/lib/Either\");\nconst __1 = require(\"..\");\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst codec = t.type({\n  version: t.number,\n  salt: t.string,\n  publicKey: t.string,\n  records: t.array(t.type({\n    name: t.string,\n    address: t.string,\n    kind: t.string,\n    config: t.string,\n    publicKey: t.string,\n    secretKey: t.string,\n    comment: t.string\n  }))\n});\nasync function createKeyStoreKey(password, salt) {\n  let secretKey = await (0, ton_crypto_1.pbkdf2_sha512)(password, salt, 400000, 32);\n  let r = tweetnacl_1.default.box.keyPair.fromSecretKey(secretKey);\n  return {\n    secretKey: Buffer.from(r.secretKey),\n    publicKey: Buffer.from(r.publicKey)\n  };\n}\nexports.createKeyStoreKey = createKeyStoreKey;\nclass KeyStore {\n  constructor(src) {\n    _KeyStore_salt.set(this, void 0);\n    _KeyStore_publicKey.set(this, void 0);\n    _KeyStore_records.set(this, new Map());\n    this.checkPassword = async password => {\n      let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n      if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n    this.hasKey = name => {\n      return __classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name);\n    };\n    this.getKey = name => {\n      let ex = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n      if (ex) {\n        return {\n          name: ex.name,\n          address: ex.address,\n          kind: ex.kind,\n          config: ex.config,\n          comment: ex.comment,\n          publicKey: Buffer.from(ex.publicKey, 'hex')\n        };\n      }\n      return null;\n    };\n    this.getSecret = async (name, password) => {\n      if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n        throw Error('Key with name ' + name + ' does not exist');\n      }\n      let record = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n      let src = Buffer.from(record.secretKey, 'hex');\n      let nonce = src.slice(0, 24);\n      let publicKey = src.slice(24, 24 + 32);\n      let data = src.slice(24 + 32);\n      // Derive key\n      let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n      if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n        throw Error('Invalid password');\n      }\n      // Decode\n      let decoded = tweetnacl_1.default.box.open(data, nonce, publicKey, key.secretKey);\n      if (!decoded) {\n        throw Error('Invalid password');\n      }\n      return Buffer.from(decoded);\n    };\n    this.addKey = async (record, key) => {\n      if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(record.name)) {\n        throw Error('Key with name ' + record.name + ' already exists');\n      }\n      // Create key\n      let ephemeralKeySecret = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n      let ephemeralKeyPublic = Buffer.from(tweetnacl_1.default.box.keyPair.fromSecretKey(ephemeralKeySecret).publicKey);\n      let nonce = await (0, ton_crypto_1.getSecureRandomBytes)(24);\n      let encrypted = tweetnacl_1.default.box(key, nonce, Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'), ephemeralKeySecret);\n      let data = Buffer.concat([nonce, ephemeralKeyPublic, encrypted]);\n      // Create record\n      let rec = {\n        name: record.name,\n        address: record.address,\n        kind: record.kind,\n        config: record.config,\n        comment: record.comment,\n        publicKey: record.publicKey.toString('hex'),\n        secretKey: data.toString('hex')\n      };\n      Object.freeze(rec);\n      __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(record.name, rec);\n    };\n    this.removeKey = name => {\n      if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n        throw Error('Key with name ' + name + ' does not exist');\n      }\n      __classPrivateFieldGet(this, _KeyStore_records, \"f\").delete(name);\n    };\n    if (src.version !== 1) {\n      throw Error('Unsupported keystore');\n    }\n    __classPrivateFieldSet(this, _KeyStore_salt, src.salt, \"f\");\n    __classPrivateFieldSet(this, _KeyStore_publicKey, src.publicKey, \"f\");\n    for (let r of src.records) {\n      if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(r.name)) {\n        throw Error('Broken keystore');\n      }\n      const record = {\n        name: r.name,\n        address: __1.Address.parseRaw(r.address),\n        kind: r.kind,\n        config: r.config,\n        comment: r.comment,\n        publicKey: r.publicKey,\n        secretKey: r.secretKey\n      };\n      Object.freeze(record);\n      __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(r.name, record);\n    }\n  }\n  static async createNew(password) {\n    let salt = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n    let key = await createKeyStoreKey(password, salt);\n    return new KeyStore({\n      version: 1,\n      salt: salt.toString('hex'),\n      publicKey: key.publicKey.toString('hex'),\n      records: []\n    });\n  }\n  static async load(source) {\n    // Validate checksum\n    if (source.length < 32) {\n      throw Error('Broken keystore');\n    }\n    let hash = source.slice(0, 32);\n    let data = source.slice(32);\n    let hash2 = await (0, ton_crypto_1.sha256)(data);\n    if (!hash.equals(hash2)) {\n      // We don't care about timing attacks here\n      throw Error('Broken keystore');\n    }\n    // Parse storage\n    let parsed = JSON.parse(data.toString('utf-8'));\n    let decoded = codec.decode(parsed);\n    if ((0, Either_1.isLeft)(decoded)) {\n      throw Error('Broken keystore');\n    }\n    return new KeyStore(decoded.right);\n  }\n  get allKeys() {\n    let res = [];\n    for (let k of __classPrivateFieldGet(this, _KeyStore_records, \"f\").keys()) {\n      let r = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(k);\n      res.push({\n        name: r.name,\n        address: r.address,\n        kind: r.kind,\n        config: r.config,\n        comment: r.comment,\n        publicKey: Buffer.from(r.publicKey, 'hex')\n      });\n    }\n    return res;\n  }\n  async save() {\n    let store = {\n      version: 1,\n      salt: __classPrivateFieldGet(this, _KeyStore_salt, \"f\"),\n      publicKey: __classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"),\n      records: Array.from(__classPrivateFieldGet(this, _KeyStore_records, \"f\").entries()).map(v => ({\n        name: v[1].name,\n        address: v[1].address.toString(),\n        kind: v[1].kind,\n        config: v[1].config,\n        comment: v[1].comment,\n        publicKey: v[1].publicKey,\n        secretKey: v[1].secretKey\n      }))\n    };\n    let data = Buffer.from(JSON.stringify(store), 'utf-8');\n    let hash = await (0, ton_crypto_1.sha256)(data);\n    return Buffer.concat([hash, data]);\n  }\n}\nexports.KeyStore = KeyStore;\n_KeyStore_salt = new WeakMap(), _KeyStore_publicKey = new WeakMap(), _KeyStore_records = new WeakMap();","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__classPrivateFieldSet","receiver","state","kind","f","TypeError","has","set","__classPrivateFieldGet","__importDefault","_KeyStore_salt","_KeyStore_publicKey","_KeyStore_records","exports","KeyStore","createKeyStoreKey","ton_crypto_1","require","t","Either_1","__1","tweetnacl_1","codec","type","version","number","salt","string","publicKey","records","array","name","address","config","secretKey","comment","password","pbkdf2_sha512","r","default","box","keyPair","fromSecretKey","Buffer","from","constructor","src","Map","checkPassword","key","equals","hasKey","getKey","ex","getSecret","Error","record","nonce","slice","data","decoded","open","addKey","ephemeralKeySecret","getSecureRandomBytes","ephemeralKeyPublic","encrypted","concat","rec","toString","freeze","removeKey","delete","Address","parseRaw","createNew","load","source","length","hash","hash2","sha256","parsed","JSON","parse","decode","isLeft","right","allKeys","res","keys","push","save","store","Array","entries","map","stringify","WeakMap"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/keystore/KeyStore.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _KeyStore_salt, _KeyStore_publicKey, _KeyStore_records;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyStore = exports.createKeyStoreKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst t = __importStar(require(\"io-ts\"));\nconst Either_1 = require(\"fp-ts/lib/Either\");\nconst __1 = require(\"..\");\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst codec = t.type({\n    version: t.number,\n    salt: t.string,\n    publicKey: t.string,\n    records: t.array(t.type({\n        name: t.string,\n        address: t.string,\n        kind: t.string,\n        config: t.string,\n        publicKey: t.string,\n        secretKey: t.string,\n        comment: t.string\n    }))\n});\nasync function createKeyStoreKey(password, salt) {\n    let secretKey = await (0, ton_crypto_1.pbkdf2_sha512)(password, salt, 400000, 32);\n    let r = tweetnacl_1.default.box.keyPair.fromSecretKey(secretKey);\n    return {\n        secretKey: Buffer.from(r.secretKey),\n        publicKey: Buffer.from(r.publicKey)\n    };\n}\nexports.createKeyStoreKey = createKeyStoreKey;\nclass KeyStore {\n    constructor(src) {\n        _KeyStore_salt.set(this, void 0);\n        _KeyStore_publicKey.set(this, void 0);\n        _KeyStore_records.set(this, new Map());\n        this.checkPassword = async (password) => {\n            let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n            if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        };\n        this.hasKey = (name) => {\n            return __classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name);\n        };\n        this.getKey = (name) => {\n            let ex = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n            if (ex) {\n                return {\n                    name: ex.name,\n                    address: ex.address,\n                    kind: ex.kind,\n                    config: ex.config,\n                    comment: ex.comment,\n                    publicKey: Buffer.from(ex.publicKey, 'hex')\n                };\n            }\n            return null;\n        };\n        this.getSecret = async (name, password) => {\n            if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n                throw Error('Key with name ' + name + ' does not exist');\n            }\n            let record = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n            let src = Buffer.from(record.secretKey, 'hex');\n            let nonce = src.slice(0, 24);\n            let publicKey = src.slice(24, 24 + 32);\n            let data = src.slice(24 + 32);\n            // Derive key\n            let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n            if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                throw Error('Invalid password');\n            }\n            // Decode\n            let decoded = tweetnacl_1.default.box.open(data, nonce, publicKey, key.secretKey);\n            if (!decoded) {\n                throw Error('Invalid password');\n            }\n            return Buffer.from(decoded);\n        };\n        this.addKey = async (record, key) => {\n            if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(record.name)) {\n                throw Error('Key with name ' + record.name + ' already exists');\n            }\n            // Create key\n            let ephemeralKeySecret = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n            let ephemeralKeyPublic = Buffer.from((tweetnacl_1.default.box.keyPair.fromSecretKey(ephemeralKeySecret)).publicKey);\n            let nonce = await (0, ton_crypto_1.getSecureRandomBytes)(24);\n            let encrypted = tweetnacl_1.default.box(key, nonce, Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'), ephemeralKeySecret);\n            let data = Buffer.concat([nonce, ephemeralKeyPublic, encrypted]);\n            // Create record\n            let rec = {\n                name: record.name,\n                address: record.address,\n                kind: record.kind,\n                config: record.config,\n                comment: record.comment,\n                publicKey: record.publicKey.toString('hex'),\n                secretKey: data.toString('hex')\n            };\n            Object.freeze(rec);\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(record.name, rec);\n        };\n        this.removeKey = (name) => {\n            if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n                throw Error('Key with name ' + name + ' does not exist');\n            }\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").delete(name);\n        };\n        if (src.version !== 1) {\n            throw Error('Unsupported keystore');\n        }\n        __classPrivateFieldSet(this, _KeyStore_salt, src.salt, \"f\");\n        __classPrivateFieldSet(this, _KeyStore_publicKey, src.publicKey, \"f\");\n        for (let r of src.records) {\n            if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(r.name)) {\n                throw Error('Broken keystore');\n            }\n            const record = {\n                name: r.name,\n                address: __1.Address.parseRaw(r.address),\n                kind: r.kind,\n                config: r.config,\n                comment: r.comment,\n                publicKey: r.publicKey,\n                secretKey: r.secretKey\n            };\n            Object.freeze(record);\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(r.name, record);\n        }\n    }\n    static async createNew(password) {\n        let salt = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n        let key = await createKeyStoreKey(password, salt);\n        return new KeyStore({ version: 1, salt: salt.toString('hex'), publicKey: key.publicKey.toString('hex'), records: [] });\n    }\n    static async load(source) {\n        // Validate checksum\n        if (source.length < 32) {\n            throw Error('Broken keystore');\n        }\n        let hash = source.slice(0, 32);\n        let data = source.slice(32);\n        let hash2 = await (0, ton_crypto_1.sha256)(data);\n        if (!hash.equals(hash2)) { // We don't care about timing attacks here\n            throw Error('Broken keystore');\n        }\n        // Parse storage\n        let parsed = JSON.parse(data.toString('utf-8'));\n        let decoded = codec.decode(parsed);\n        if ((0, Either_1.isLeft)(decoded)) {\n            throw Error('Broken keystore');\n        }\n        return new KeyStore(decoded.right);\n    }\n    get allKeys() {\n        let res = [];\n        for (let k of __classPrivateFieldGet(this, _KeyStore_records, \"f\").keys()) {\n            let r = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(k);\n            res.push({\n                name: r.name,\n                address: r.address,\n                kind: r.kind,\n                config: r.config,\n                comment: r.comment,\n                publicKey: Buffer.from(r.publicKey, 'hex')\n            });\n        }\n        return res;\n    }\n    async save() {\n        let store = {\n            version: 1,\n            salt: __classPrivateFieldGet(this, _KeyStore_salt, \"f\"),\n            publicKey: __classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"),\n            records: Array.from(__classPrivateFieldGet(this, _KeyStore_records, \"f\").entries()).map((v) => ({\n                name: v[1].name,\n                address: v[1].address.toString(),\n                kind: v[1].kind,\n                config: v[1].config,\n                comment: v[1].comment,\n                publicKey: v[1].publicKey,\n                secretKey: v[1].secretKey\n            }))\n        };\n        let data = Buffer.from(JSON.stringify(store), 'utf-8');\n        let hash = await (0, ton_crypto_1.sha256)(data);\n        return Buffer.concat([hash, data]);\n    }\n}\nexports.KeyStore = KeyStore;\n_KeyStore_salt = new WeakMap(), _KeyStore_publicKey = new WeakMap(), _KeyStore_records = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}