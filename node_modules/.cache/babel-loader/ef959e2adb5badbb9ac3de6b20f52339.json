{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSupportedMessage = void 0;\nvar crc32_1 = require(\"../utils/crc32\");\nfunction parseNominatorsMessage(op, sc) {\n  // Deposit\n  if (op === (0, crc32_1.crc32str)('op::stake_deposit')) {\n    var queryId = sc.readUint(64);\n    var gasLimit = sc.readCoins().toNumber();\n    return {\n      type: 'deposit',\n      data: {\n        'query_id': queryId,\n        'gas_limit': gasLimit\n      }\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::stake_deposit::response')) {\n    return {\n      type: 'deposit::ok',\n      data: {}\n    };\n  }\n  // Withdraw\n  if (op === (0, crc32_1.crc32str)('op::stake_withdraw')) {\n    var _queryId = sc.readUint(64);\n    var _gasLimit = sc.readCoins().toNumber();\n    var stake = sc.readCoins();\n    return {\n      type: 'withdraw',\n      data: {\n        'stake': stake,\n        'query_id': _queryId,\n        'gas_limit': _gasLimit\n      }\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::stake_withdraw::delayed')) {\n    return {\n      type: 'withdraw::delayed',\n      data: {}\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::stake_withdraw::response')) {\n    return {\n      type: 'withdraw::ok',\n      data: {}\n    };\n  }\n  // Upgrade\n  if (op === (0, crc32_1.crc32str)('op::upgrade')) {\n    var _queryId2 = sc.readUint(64);\n    var _gasLimit2 = sc.readCoins().toNumber();\n    var code = sc.readCell();\n    return {\n      type: 'upgrade',\n      data: {\n        'code': code,\n        'query_id': _queryId2,\n        'gas_limit': _gasLimit2\n      }\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::upgrade::response')) {\n    return {\n      type: 'upgrade::ok',\n      data: {}\n    };\n  }\n  // Upgrade\n  if (op === (0, crc32_1.crc32str)('op::upgrade')) {\n    var _queryId3 = sc.readUint(64);\n    var _gasLimit3 = sc.readCoins().toNumber();\n    var _code = sc.readCell();\n    return {\n      type: 'upgrade',\n      data: {\n        'code': _code,\n        'query_id': _queryId3,\n        'gas_limit': _gasLimit3\n      }\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::upgrade::ok')) {\n    return {\n      type: 'upgrade::ok',\n      data: {}\n    };\n  }\n  // Update\n  if (op === (0, crc32_1.crc32str)('op::update')) {\n    var _queryId4 = sc.readUint(64);\n    var _gasLimit4 = sc.readCoins().toNumber();\n    var params = sc.readCell();\n    return {\n      type: 'update',\n      data: {\n        'code': params,\n        'query_id': _queryId4,\n        'gas_limit': _gasLimit4\n      }\n    };\n  }\n  if (op === (0, crc32_1.crc32str)('op::update::ok')) {\n    return {\n      type: 'update::ok',\n      data: {}\n    };\n  }\n  return null;\n}\nfunction parseJettonWallet(op, sc) {\n  // excesses#d53276db query_id:uint64 = InternalMsgBody;\n  if (op === 0xd53276db) {\n    var queryId = sc.readUint(64);\n    return {\n      type: 'jetton::excesses',\n      data: {\n        'query_id': queryId\n      }\n    };\n  }\n  // transfer#f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress\n  //              response_destination:MsgAddress custom_payload:(Maybe ^Cell)\n  //              forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)\n  //              = InternalMsgBody;\n  if (op === 0xf8a7ea5) {\n    var _queryId5 = sc.readUint(64);\n    var amount = sc.readCoins();\n    var destination = sc.readAddress();\n    var responseDestination = sc.readAddress();\n    var customPayload = sc.readBit() ? sc.readCell() : null;\n    var forwardTonAmount = sc.readCoins();\n    var forwardPayload = sc.readBit() ? sc.readCell() : sc.toCell();\n    return {\n      type: 'jetton::transfer',\n      data: {\n        'query_id': _queryId5,\n        'amount': amount,\n        'destination': destination,\n        'response_destination': responseDestination,\n        'custom_payload': customPayload,\n        'forward_ton': forwardTonAmount,\n        'payload': forwardPayload\n      }\n    };\n  }\n  // transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16)\n  //        sender:MsgAddress forward_payload:(Either Cell ^Cell)\n  //        = InternalMsgBody;\n  if (op === 0x7362d09c) {\n    var _queryId6 = sc.readUint(64);\n    var _amount = sc.readCoins();\n    var sender = sc.readAddress();\n    var _forwardPayload = sc.readBit() ? sc.readCell() : sc.toCell();\n    return {\n      type: 'jetton::transfer_notification',\n      data: {\n        'query_id': _queryId6,\n        'amount': _amount,\n        'sender': sender,\n        'payload': _forwardPayload\n      }\n    };\n  }\n  return null;\n}\nfunction parseJettonMaster(op, sc) {\n  return null;\n}\nfunction parseSupportedMessage(knownInteface, message) {\n  try {\n    // Load OP\n    var sc = message.beginParse();\n    if (sc.remaining < 32) {\n      return null;\n    }\n    var op = sc.readUintNumber(32);\n    if (op === 0) {\n      return null;\n    }\n    // Nominators parsing\n    if (knownInteface === 'com.tonwhales.nominators:v0') {\n      return parseNominatorsMessage(op, sc);\n    }\n    // Jettons\n    if (knownInteface === 'org.ton.jetton.wallet.v1') {\n      return parseJettonWallet(op, sc);\n    }\n    if (knownInteface === 'org.ton.jetton.master.v1') {\n      return parseJettonMaster(op, sc);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n  return null;\n}\nexports.parseSupportedMessage = parseSupportedMessage;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseSupportedMessage","crc32_1","require","parseNominatorsMessage","op","sc","crc32str","queryId","readUint","gasLimit","readCoins","toNumber","type","data","stake","code","readCell","params","parseJettonWallet","amount","destination","readAddress","responseDestination","customPayload","readBit","forwardTonAmount","forwardPayload","toCell","sender","parseJettonMaster","knownInteface","message","beginParse","remaining","readUintNumber","e","console","warn"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/introspection/parseSupportedMessage.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseSupportedMessage = void 0;\nconst crc32_1 = require(\"../utils/crc32\");\nfunction parseNominatorsMessage(op, sc) {\n    // Deposit\n    if (op === (0, crc32_1.crc32str)('op::stake_deposit')) {\n        let queryId = sc.readUint(64);\n        let gasLimit = sc.readCoins().toNumber();\n        return {\n            type: 'deposit',\n            data: {\n                'query_id': queryId,\n                'gas_limit': gasLimit\n            }\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::stake_deposit::response')) {\n        return {\n            type: 'deposit::ok',\n            data: {}\n        };\n    }\n    // Withdraw\n    if (op === (0, crc32_1.crc32str)('op::stake_withdraw')) {\n        let queryId = sc.readUint(64);\n        let gasLimit = sc.readCoins().toNumber();\n        const stake = sc.readCoins();\n        return {\n            type: 'withdraw',\n            data: {\n                'stake': stake,\n                'query_id': queryId,\n                'gas_limit': gasLimit\n            }\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::stake_withdraw::delayed')) {\n        return {\n            type: 'withdraw::delayed',\n            data: {}\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::stake_withdraw::response')) {\n        return {\n            type: 'withdraw::ok',\n            data: {}\n        };\n    }\n    // Upgrade\n    if (op === (0, crc32_1.crc32str)('op::upgrade')) {\n        let queryId = sc.readUint(64);\n        let gasLimit = sc.readCoins().toNumber();\n        const code = sc.readCell();\n        return {\n            type: 'upgrade',\n            data: {\n                'code': code,\n                'query_id': queryId,\n                'gas_limit': gasLimit\n            }\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::upgrade::response')) {\n        return {\n            type: 'upgrade::ok',\n            data: {}\n        };\n    }\n    // Upgrade\n    if (op === (0, crc32_1.crc32str)('op::upgrade')) {\n        let queryId = sc.readUint(64);\n        let gasLimit = sc.readCoins().toNumber();\n        const code = sc.readCell();\n        return {\n            type: 'upgrade',\n            data: {\n                'code': code,\n                'query_id': queryId,\n                'gas_limit': gasLimit\n            }\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::upgrade::ok')) {\n        return {\n            type: 'upgrade::ok',\n            data: {}\n        };\n    }\n    // Update\n    if (op === (0, crc32_1.crc32str)('op::update')) {\n        let queryId = sc.readUint(64);\n        let gasLimit = sc.readCoins().toNumber();\n        const params = sc.readCell();\n        return {\n            type: 'update',\n            data: {\n                'code': params,\n                'query_id': queryId,\n                'gas_limit': gasLimit\n            }\n        };\n    }\n    if (op === (0, crc32_1.crc32str)('op::update::ok')) {\n        return {\n            type: 'update::ok',\n            data: {}\n        };\n    }\n    return null;\n}\nfunction parseJettonWallet(op, sc) {\n    // excesses#d53276db query_id:uint64 = InternalMsgBody;\n    if (op === 0xd53276db) {\n        let queryId = sc.readUint(64);\n        return {\n            type: 'jetton::excesses',\n            data: {\n                'query_id': queryId\n            }\n        };\n    }\n    // transfer#f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress\n    //              response_destination:MsgAddress custom_payload:(Maybe ^Cell)\n    //              forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)\n    //              = InternalMsgBody;\n    if (op === 0xf8a7ea5) {\n        let queryId = sc.readUint(64);\n        let amount = sc.readCoins();\n        let destination = sc.readAddress();\n        let responseDestination = sc.readAddress();\n        let customPayload = sc.readBit() ? sc.readCell() : null;\n        let forwardTonAmount = sc.readCoins();\n        let forwardPayload = sc.readBit() ? sc.readCell() : sc.toCell();\n        return {\n            type: 'jetton::transfer',\n            data: {\n                'query_id': queryId,\n                'amount': amount,\n                'destination': destination,\n                'response_destination': responseDestination,\n                'custom_payload': customPayload,\n                'forward_ton': forwardTonAmount,\n                'payload': forwardPayload\n            }\n        };\n    }\n    // transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16)\n    //        sender:MsgAddress forward_payload:(Either Cell ^Cell)\n    //        = InternalMsgBody;\n    if (op === 0x7362d09c) {\n        let queryId = sc.readUint(64);\n        let amount = sc.readCoins();\n        let sender = sc.readAddress();\n        let forwardPayload = sc.readBit() ? sc.readCell() : sc.toCell();\n        return {\n            type: 'jetton::transfer_notification',\n            data: {\n                'query_id': queryId,\n                'amount': amount,\n                'sender': sender,\n                'payload': forwardPayload\n            }\n        };\n    }\n    return null;\n}\nfunction parseJettonMaster(op, sc) {\n    return null;\n}\nfunction parseSupportedMessage(knownInteface, message) {\n    try {\n        // Load OP\n        let sc = message.beginParse();\n        if (sc.remaining < 32) {\n            return null;\n        }\n        let op = sc.readUintNumber(32);\n        if (op === 0) {\n            return null;\n        }\n        // Nominators parsing\n        if (knownInteface === 'com.tonwhales.nominators:v0') {\n            return parseNominatorsMessage(op, sc);\n        }\n        // Jettons\n        if (knownInteface === 'org.ton.jetton.wallet.v1') {\n            return parseJettonWallet(op, sc);\n        }\n        if (knownInteface === 'org.ton.jetton.master.v1') {\n            return parseJettonMaster(op, sc);\n        }\n    }\n    catch (e) {\n        console.warn(e);\n    }\n    return null;\n}\nexports.parseSupportedMessage = parseSupportedMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}