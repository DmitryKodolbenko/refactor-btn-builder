{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TonClient_api;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TonClient = void 0;\nvar ton_crypto_1 = require(\"ton-crypto\");\nvar Address_1 = require(\"../address/Address\");\nvar Cell_1 = require(\"../boc/Cell\");\nvar HttpApi_1 = require(\"./api/HttpApi\");\nvar ExternalMessage_1 = require(\"../messages/ExternalMessage\");\nvar CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nvar StateInit_1 = require(\"../messages/StateInit\");\nvar Wallet_1 = require(\"./Wallet\");\nvar bn_js_1 = require(\"bn.js\");\nvar __1 = require(\"..\");\nvar ConfigContract_1 = require(\"../contracts/ConfigContract\");\nvar TonCache_1 = require(\"./TonCache\");\nfunction convertMessage(t) {\n  return {\n    source: t.source !== '' ? Address_1.Address.parseFriendly(t.source).address : null,\n    destination: t.destination !== '' ? Address_1.Address.parseFriendly(t.destination).address : null,\n    forwardFee: new bn_js_1.BN(t.fwd_fee),\n    ihrFee: new bn_js_1.BN(t.ihr_fee),\n    value: new bn_js_1.BN(t.value),\n    createdLt: t.created_lt,\n    body: t.msg_data['@type'] === 'msg.dataRaw' ? {\n      type: 'data',\n      data: Buffer.from(t.msg_data.body, 'base64')\n    } : t.msg_data['@type'] === 'msg.dataText' ? {\n      type: 'text',\n      text: Buffer.from(t.msg_data.text, 'base64').toString('utf-8')\n    } : null\n  };\n}\nfunction convertTransaction(r) {\n  return {\n    id: {\n      lt: r.transaction_id.lt,\n      hash: r.transaction_id.hash\n    },\n    time: r.utime,\n    data: r.data,\n    storageFee: new bn_js_1.BN(r.storage_fee),\n    otherFee: new bn_js_1.BN(r.other_fee),\n    fee: new bn_js_1.BN(r.fee),\n    inMessage: r.in_msg ? convertMessage(r.in_msg) : null,\n    outMessages: r.out_msgs.map(convertMessage)\n  };\n}\nvar TonClient = /*#__PURE__*/function () {\n  function TonClient(parameters) {\n    _classCallCheck(this, TonClient);\n    _TonClient_api.set(this, void 0);\n    this.services = {\n      configs: new ConfigContract_1.ConfigContract(this)\n    };\n    this.parameters = {\n      endpoint: parameters.endpoint,\n      cache: parameters.cache ? parameters.cache : new TonCache_1.InMemoryCache()\n    };\n    __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, this.parameters.cache, {\n      timeout: parameters.timeout,\n      apiKey: parameters.apiKey,\n      adapter: parameters.httpAdapter\n    }), \"f\");\n  }\n  /**\n   * Get Address Balance\n   * @param address address for balance check\n   * @returns balance\n   */\n  _createClass(TonClient, [{\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(address) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getContractState(address);\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.balance);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getBalance(_x) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Invoke get method\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     */\n  }, {\n    key: \"callGetMethod\",\n    value: function () {\n      var _callGetMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address, name) {\n        var params,\n          res,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                params = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : [];\n                _context2.next = 3;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n              case 3:\n                res = _context2.sent;\n                if (!(res.exit_code !== 0)) {\n                  _context2.next = 6;\n                  break;\n                }\n                throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);\n              case 6:\n                return _context2.abrupt(\"return\", {\n                  gas_used: res.gas_used,\n                  stack: res.stack\n                });\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function callGetMethod(_x2, _x3) {\n        return _callGetMethod.apply(this, arguments);\n      }\n      return callGetMethod;\n    }()\n    /**\n     * Invoke get method that returns error code instead of throwing error\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n    */\n  }, {\n    key: \"callGetMethodWithError\",\n    value: function () {\n      var _callGetMethodWithError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address, name) {\n        var params,\n          res,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                params = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : [];\n                _context3.next = 3;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n              case 3:\n                res = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  gas_used: res.gas_used,\n                  stack: res.stack,\n                  exit_code: res.exit_code\n                });\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function callGetMethodWithError(_x4, _x5) {\n        return _callGetMethodWithError.apply(this, arguments);\n      }\n      return callGetMethodWithError;\n    }()\n    /**\n     * Get transactions\n     * @param address address\n     */\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address, opts) {\n        var tx, res, _iterator, _step, r;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransactions(address, opts);\n              case 2:\n                tx = _context4.sent;\n                res = [];\n                _iterator = _createForOfIteratorHelper(tx);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    r = _step.value;\n                    res.push(convertTransaction(r));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                return _context4.abrupt(\"return\", res);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getTransactions(_x6, _x7) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n    /**\n     * Get transaction by it's id\n     * @param address address\n     * @param lt logical time\n     * @param hash transaction hash\n     * @returns transaction or null if not exist\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(address, lt, hash) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransaction(address, lt, hash);\n              case 2:\n                res = _context5.sent;\n                if (!res) {\n                  _context5.next = 7;\n                  break;\n                }\n                return _context5.abrupt(\"return\", convertTransaction(res));\n              case 7:\n                return _context5.abrupt(\"return\", null);\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getTransaction(_x8, _x9, _x10) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     * Fetch latest masterchain info\n     * @returns masterchain info\n     */\n  }, {\n    key: \"getMasterchainInfo\",\n    value: function () {\n      var _getMasterchainInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getMasterchainInfo();\n              case 2:\n                r = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  workchain: r.init.workchain,\n                  shard: r.last.shard,\n                  initSeqno: r.init.seqno,\n                  latestSeqno: r.last.seqno\n                });\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getMasterchainInfo() {\n        return _getMasterchainInfo.apply(this, arguments);\n      }\n      return getMasterchainInfo;\n    }()\n    /**\n     * Fetch latest workchain shards\n     * @param seqno masterchain seqno\n     */\n  }, {\n    key: \"getWorkchainShards\",\n    value: function () {\n      var _getWorkchainShards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(seqno) {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getShards(seqno);\n              case 2:\n                r = _context7.sent;\n                return _context7.abrupt(\"return\", r.map(function (m) {\n                  return {\n                    workchain: m.workchain,\n                    shard: m.shard,\n                    seqno: m.seqno\n                  };\n                }));\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function getWorkchainShards(_x11) {\n        return _getWorkchainShards.apply(this, arguments);\n      }\n      return getWorkchainShards;\n    }()\n    /**\n     * Fetch transactions inf shards\n     * @param workchain\n     * @param seqno\n     * @param shard\n     */\n  }, {\n    key: \"getShardTransactions\",\n    value: function () {\n      var _getShardTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(workchain, seqno, shard) {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getBlockTransactions(workchain, seqno, shard);\n              case 2:\n                tx = _context8.sent;\n                if (!tx.incomplete) {\n                  _context8.next = 5;\n                  break;\n                }\n                throw Error('Unsupported');\n              case 5:\n                return _context8.abrupt(\"return\", tx.transactions.map(function (v) {\n                  return {\n                    account: Address_1.Address.parseRaw(v.account),\n                    lt: v.lt,\n                    hash: v.hash\n                  };\n                }));\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function getShardTransactions(_x12, _x13, _x14) {\n        return _getShardTransactions.apply(this, arguments);\n      }\n      return getShardTransactions;\n    }()\n    /**\n     * Send message to a network\n     * @param src source message\n     */\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(src) {\n        var cell, boc;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                cell = new Cell_1.Cell();\n                src.writeTo(cell);\n                _context9.next = 4;\n                return cell.toBoc({\n                  idx: false\n                });\n              case 4:\n                boc = _context9.sent;\n                _context9.next = 7;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(boc);\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function sendMessage(_x15) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n    /**\n     * Send file to a network\n     * @param src source file\n     */\n  }, {\n    key: \"sendFile\",\n    value: function () {\n      var _sendFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(src) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(src);\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function sendFile(_x16) {\n        return _sendFile.apply(this, arguments);\n      }\n      return sendFile;\n    }()\n    /**\n     * Estimate fees for external message\n     * @param address target address\n     * @returns\n     */\n  }, {\n    key: \"estimateExternalMessageFee\",\n    value: function () {\n      var _estimateExternalMessageFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(address, args) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").estimateFee(address, {\n                  body: args.body,\n                  initCode: args.initCode,\n                  initData: args.initData,\n                  ignoreSignature: args.ignoreSignature\n                });\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function estimateExternalMessageFee(_x17, _x18) {\n        return _estimateExternalMessageFee.apply(this, arguments);\n      }\n      return estimateExternalMessageFee;\n    }()\n    /**\n     * Send external message to contract\n     * @param contract contract to send message\n     * @param src message body\n     */\n  }, {\n    key: \"sendExternalMessage\",\n    value: function () {\n      var _sendExternalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(contract, src) {\n        var message, _message;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.isContractDeployed(contract.address);\n              case 2:\n                if (!_context12.sent) {\n                  _context12.next = 8;\n                  break;\n                }\n                message = new ExternalMessage_1.ExternalMessage({\n                  to: contract.address,\n                  body: new CommonMessageInfo_1.CommonMessageInfo({\n                    body: new __1.CellMessage(src)\n                  })\n                });\n                _context12.next = 6;\n                return this.sendMessage(message);\n              case 6:\n                _context12.next = 11;\n                break;\n              case 8:\n                _message = new ExternalMessage_1.ExternalMessage({\n                  to: contract.address,\n                  body: new CommonMessageInfo_1.CommonMessageInfo({\n                    stateInit: new StateInit_1.StateInit({\n                      code: contract.source.initialCode,\n                      data: contract.source.initialData\n                    }),\n                    body: new __1.CellMessage(src)\n                  })\n                });\n                _context12.next = 11;\n                return this.sendMessage(_message);\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function sendExternalMessage(_x19, _x20) {\n        return _sendExternalMessage.apply(this, arguments);\n      }\n      return sendExternalMessage;\n    }()\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */\n  }, {\n    key: \"isContractDeployed\",\n    value: function () {\n      var _isContractDeployed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(address) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getContractState(address);\n              case 2:\n                _context13.t0 = _context13.sent.state;\n                return _context13.abrupt(\"return\", _context13.t0 === 'active');\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function isContractDeployed(_x21) {\n        return _isContractDeployed.apply(this, arguments);\n      }\n      return isContractDeployed;\n    }()\n    /**\n     * Resolves contract state\n     * @param address contract address\n     */\n  }, {\n    key: \"getContractState\",\n    value: function () {\n      var _getContractState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(address) {\n        var info, balance, state;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return __classPrivateFieldGet(this, _TonClient_api, \"f\").getAddressInformation(address);\n              case 2:\n                info = _context14.sent;\n                balance = new bn_js_1.BN(info.balance);\n                state = info.state;\n                return _context14.abrupt(\"return\", {\n                  balance: balance,\n                  state: state,\n                  code: info.code !== '' ? Buffer.from(info.code, 'base64') : null,\n                  data: info.data !== '' ? Buffer.from(info.data, 'base64') : null,\n                  lastTransaction: info.last_transaction_id.lt !== '0' ? {\n                    lt: info.last_transaction_id.lt,\n                    hash: info.last_transaction_id.hash\n                  } : null,\n                  blockId: {\n                    workchain: info.block_id.workchain,\n                    shard: info.block_id.shard,\n                    seqno: info.block_id.seqno\n                  },\n                  timestampt: info.sync_utime\n                });\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function getContractState(_x22) {\n        return _getContractState.apply(this, arguments);\n      }\n      return getContractState;\n    }()\n    /**\n     * Open Wallet from address\n     * @param source wallet address\n     * @returns wallet with specified address\n     */\n  }, {\n    key: \"openWalletFromAddress\",\n    value: function openWalletFromAddress(args) {\n      return Wallet_1.Wallet.open(this, args.source);\n    }\n    /**\n     * Open Wallet from secret key. Searches for best wallet contract.\n     * @param workchain wallet workchain\n     * @param secretKey wallet secret key\n     * @returns best matched wallet\n     */\n  }, {\n    key: \"findWalletFromSecretKey\",\n    value: function findWalletFromSecretKey(args) {\n      return Wallet_1.Wallet.findBestBySecretKey(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n  }, {\n    key: \"openWalletDefaultFromSecretKey\",\n    value: function openWalletDefaultFromSecretKey(args) {\n      return Wallet_1.Wallet.openDefault(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n  }, {\n    key: \"openWalletFromSecretKey\",\n    value: function openWalletFromSecretKey(args) {\n      return Wallet_1.Wallet.openByType(this, args.workchain, args.secretKey, args.type);\n    }\n    /**\n     * Opens wallet from custom contract\n     * @param src source\n     * @returns wallet\n     */\n  }, {\n    key: \"openWalletFromCustomContract\",\n    value: function openWalletFromCustomContract(src) {\n      return Wallet_1.Wallet.openFromSource(this, src);\n    }\n    /**\n     * Securely creates new wallet\n     * @param password optional password\n     */\n  }, {\n    key: \"createNewWallet\",\n    value: function () {\n      var _createNewWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(args) {\n        var mnemonic, key, kind, wallet;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return (0, ton_crypto_1.mnemonicNew)(24, args.password);\n              case 2:\n                mnemonic = _context15.sent;\n                _context15.next = 5;\n                return (0, ton_crypto_1.mnemonicToWalletKey)(mnemonic, args.password);\n              case 5:\n                key = _context15.sent;\n                kind = args.type || 'org.ton.wallets.v3';\n                wallet = Wallet_1.Wallet.openByType(this, args.workchain, key.secretKey, kind);\n                return _context15.abrupt(\"return\", {\n                  mnemonic: mnemonic,\n                  key: key,\n                  wallet: wallet\n                });\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function createNewWallet(_x23) {\n        return _createNewWallet.apply(this, arguments);\n      }\n      return createNewWallet;\n    }()\n  }]);\n  return TonClient;\n}();\nexports.TonClient = TonClient;\n_TonClient_api = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_TonClient_api","Object","defineProperty","exports","TonClient","ton_crypto_1","require","Address_1","Cell_1","HttpApi_1","ExternalMessage_1","CommonMessageInfo_1","StateInit_1","Wallet_1","bn_js_1","__1","ConfigContract_1","TonCache_1","convertMessage","t","source","Address","parseFriendly","address","destination","forwardFee","BN","fwd_fee","ihrFee","ihr_fee","createdLt","created_lt","body","msg_data","type","data","Buffer","from","text","toString","convertTransaction","r","id","lt","transaction_id","hash","time","utime","storageFee","storage_fee","otherFee","other_fee","fee","inMessage","in_msg","outMessages","out_msgs","map","parameters","services","configs","ConfigContract","endpoint","cache","InMemoryCache","HttpApi","timeout","apiKey","adapter","httpAdapter","getContractState","balance","name","params","callGetMethod","res","exit_code","Error","gas_used","stack","opts","getTransactions","tx","push","getTransaction","getMasterchainInfo","workchain","init","shard","last","initSeqno","seqno","latestSeqno","getShards","m","getBlockTransactions","incomplete","transactions","v","account","parseRaw","src","cell","Cell","writeTo","toBoc","idx","boc","sendBoc","args","estimateFee","initCode","initData","ignoreSignature","contract","isContractDeployed","message","ExternalMessage","to","CommonMessageInfo","CellMessage","sendMessage","stateInit","StateInit","code","initialCode","initialData","getAddressInformation","info","lastTransaction","last_transaction_id","blockId","block_id","timestampt","sync_utime","Wallet","open","findBestBySecretKey","secretKey","openDefault","openByType","openFromSource","mnemonicNew","password","mnemonic","mnemonicToWalletKey","key","wallet","WeakMap"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/client/TonClient.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TonClient_api;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonClient = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst Address_1 = require(\"../address/Address\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst HttpApi_1 = require(\"./api/HttpApi\");\nconst ExternalMessage_1 = require(\"../messages/ExternalMessage\");\nconst CommonMessageInfo_1 = require(\"../messages/CommonMessageInfo\");\nconst StateInit_1 = require(\"../messages/StateInit\");\nconst Wallet_1 = require(\"./Wallet\");\nconst bn_js_1 = require(\"bn.js\");\nconst __1 = require(\"..\");\nconst ConfigContract_1 = require(\"../contracts/ConfigContract\");\nconst TonCache_1 = require(\"./TonCache\");\nfunction convertMessage(t) {\n    return {\n        source: t.source !== '' ? Address_1.Address.parseFriendly(t.source).address : null,\n        destination: t.destination !== '' ? Address_1.Address.parseFriendly(t.destination).address : null,\n        forwardFee: new bn_js_1.BN(t.fwd_fee),\n        ihrFee: new bn_js_1.BN(t.ihr_fee),\n        value: new bn_js_1.BN(t.value),\n        createdLt: t.created_lt,\n        body: (t.msg_data['@type'] === 'msg.dataRaw'\n            ? { type: 'data', data: Buffer.from(t.msg_data.body, 'base64') }\n            : (t.msg_data['@type'] === 'msg.dataText'\n                ? { type: 'text', text: Buffer.from(t.msg_data.text, 'base64').toString('utf-8') }\n                : null))\n    };\n}\nfunction convertTransaction(r) {\n    return {\n        id: { lt: r.transaction_id.lt, hash: r.transaction_id.hash },\n        time: r.utime,\n        data: r.data,\n        storageFee: new bn_js_1.BN(r.storage_fee),\n        otherFee: new bn_js_1.BN(r.other_fee),\n        fee: new bn_js_1.BN(r.fee),\n        inMessage: r.in_msg ? convertMessage(r.in_msg) : null,\n        outMessages: r.out_msgs.map(convertMessage)\n    };\n}\nclass TonClient {\n    constructor(parameters) {\n        _TonClient_api.set(this, void 0);\n        this.services = {\n            configs: new ConfigContract_1.ConfigContract(this)\n        };\n        this.parameters = {\n            endpoint: parameters.endpoint,\n            cache: parameters.cache ? parameters.cache : new TonCache_1.InMemoryCache()\n        };\n        __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, this.parameters.cache, {\n            timeout: parameters.timeout,\n            apiKey: parameters.apiKey,\n            adapter: parameters.httpAdapter\n        }), \"f\");\n    }\n    /**\n     * Get Address Balance\n     * @param address address for balance check\n     * @returns balance\n     */\n    async getBalance(address) {\n        return (await this.getContractState(address)).balance;\n    }\n    /**\n     * Invoke get method\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n     */\n    async callGetMethod(address, name, params = []) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n        if (res.exit_code !== 0) {\n            throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);\n        }\n        return { gas_used: res.gas_used, stack: res.stack };\n    }\n    /**\n     * Invoke get method that returns error code instead of throwing error\n     * @param address contract address\n     * @param name name of method\n     * @param params optional parameters\n     * @returns stack and gas_used field\n    */\n    async callGetMethodWithError(address, name, params = []) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").callGetMethod(address, name, params);\n        return { gas_used: res.gas_used, stack: res.stack, exit_code: res.exit_code };\n    }\n    /**\n     * Get transactions\n     * @param address address\n     */\n    async getTransactions(address, opts) {\n        // Fetch transactions\n        let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransactions(address, opts);\n        let res = [];\n        for (let r of tx) {\n            res.push(convertTransaction(r));\n        }\n        return res;\n    }\n    /**\n     * Get transaction by it's id\n     * @param address address\n     * @param lt logical time\n     * @param hash transaction hash\n     * @returns transaction or null if not exist\n     */\n    async getTransaction(address, lt, hash) {\n        let res = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getTransaction(address, lt, hash);\n        if (res) {\n            return convertTransaction(res);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Fetch latest masterchain info\n     * @returns masterchain info\n     */\n    async getMasterchainInfo() {\n        let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getMasterchainInfo();\n        return {\n            workchain: r.init.workchain,\n            shard: r.last.shard,\n            initSeqno: r.init.seqno,\n            latestSeqno: r.last.seqno\n        };\n    }\n    /**\n     * Fetch latest workchain shards\n     * @param seqno masterchain seqno\n     */\n    async getWorkchainShards(seqno) {\n        let r = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getShards(seqno);\n        return r.map((m) => ({\n            workchain: m.workchain,\n            shard: m.shard,\n            seqno: m.seqno\n        }));\n    }\n    /**\n     * Fetch transactions inf shards\n     * @param workchain\n     * @param seqno\n     * @param shard\n     */\n    async getShardTransactions(workchain, seqno, shard) {\n        let tx = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getBlockTransactions(workchain, seqno, shard);\n        if (tx.incomplete) {\n            throw Error('Unsupported');\n        }\n        return tx.transactions.map((v) => ({\n            account: Address_1.Address.parseRaw(v.account),\n            lt: v.lt,\n            hash: v.hash\n        }));\n    }\n    /**\n     * Send message to a network\n     * @param src source message\n     */\n    async sendMessage(src) {\n        const cell = new Cell_1.Cell();\n        src.writeTo(cell);\n        const boc = await cell.toBoc({ idx: false });\n        await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(boc);\n    }\n    /**\n     * Send file to a network\n     * @param src source file\n     */\n    async sendFile(src) {\n        await __classPrivateFieldGet(this, _TonClient_api, \"f\").sendBoc(src);\n    }\n    /**\n     * Estimate fees for external message\n     * @param address target address\n     * @returns\n     */\n    async estimateExternalMessageFee(address, args) {\n        return await __classPrivateFieldGet(this, _TonClient_api, \"f\").estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });\n    }\n    /**\n     * Send external message to contract\n     * @param contract contract to send message\n     * @param src message body\n     */\n    async sendExternalMessage(contract, src) {\n        if (await this.isContractDeployed(contract.address)) {\n            const message = new ExternalMessage_1.ExternalMessage({\n                to: contract.address,\n                body: new CommonMessageInfo_1.CommonMessageInfo({\n                    body: new __1.CellMessage(src)\n                })\n            });\n            await this.sendMessage(message);\n        }\n        else {\n            const message = new ExternalMessage_1.ExternalMessage({\n                to: contract.address,\n                body: new CommonMessageInfo_1.CommonMessageInfo({\n                    stateInit: new StateInit_1.StateInit({ code: contract.source.initialCode, data: contract.source.initialData }),\n                    body: new __1.CellMessage(src)\n                })\n            });\n            await this.sendMessage(message);\n        }\n    }\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */\n    async isContractDeployed(address) {\n        return (await this.getContractState(address)).state === 'active';\n    }\n    /**\n     * Resolves contract state\n     * @param address contract address\n     */\n    async getContractState(address) {\n        let info = await __classPrivateFieldGet(this, _TonClient_api, \"f\").getAddressInformation(address);\n        let balance = new bn_js_1.BN(info.balance);\n        let state = info.state;\n        return {\n            balance,\n            state,\n            code: info.code !== '' ? Buffer.from(info.code, 'base64') : null,\n            data: info.data !== '' ? Buffer.from(info.data, 'base64') : null,\n            lastTransaction: info.last_transaction_id.lt !== '0' ? {\n                lt: info.last_transaction_id.lt,\n                hash: info.last_transaction_id.hash,\n            } : null,\n            blockId: {\n                workchain: info.block_id.workchain,\n                shard: info.block_id.shard,\n                seqno: info.block_id.seqno\n            },\n            timestampt: info.sync_utime\n        };\n    }\n    /**\n     * Open Wallet from address\n     * @param source wallet address\n     * @returns wallet with specified address\n     */\n    openWalletFromAddress(args) {\n        return Wallet_1.Wallet.open(this, args.source);\n    }\n    /**\n     * Open Wallet from secret key. Searches for best wallet contract.\n     * @param workchain wallet workchain\n     * @param secretKey wallet secret key\n     * @returns best matched wallet\n     */\n    findWalletFromSecretKey(args) {\n        return Wallet_1.Wallet.findBestBySecretKey(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n    openWalletDefaultFromSecretKey(args) {\n        return Wallet_1.Wallet.openDefault(this, args.workchain, args.secretKey);\n    }\n    /**\n     * Open wallet with default contract\n     * @param args workchain and secret key\n     * @returns wallet\n     */\n    openWalletFromSecretKey(args) {\n        return Wallet_1.Wallet.openByType(this, args.workchain, args.secretKey, args.type);\n    }\n    /**\n     * Opens wallet from custom contract\n     * @param src source\n     * @returns wallet\n     */\n    openWalletFromCustomContract(src) {\n        return Wallet_1.Wallet.openFromSource(this, src);\n    }\n    /**\n     * Securely creates new wallet\n     * @param password optional password\n     */\n    async createNewWallet(args) {\n        let mnemonic = await (0, ton_crypto_1.mnemonicNew)(24, args.password);\n        let key = await (0, ton_crypto_1.mnemonicToWalletKey)(mnemonic, args.password);\n        let kind = args.type || 'org.ton.wallets.v3';\n        let wallet = Wallet_1.Wallet.openByType(this, args.workchain, key.secretKey, kind);\n        return {\n            mnemonic,\n            key,\n            wallet\n        };\n    }\n}\nexports.TonClient = TonClient;\n_TonClient_api = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}