{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupMintExtension = void 0;\nvar utils_1 = require(\"@cosmjs/utils\");\nvar query_1 = require(\"cosmjs-types/cosmos/mint/v1beta1/query\");\nvar queryclient_1 = require(\"../../queryclient\");\nfunction setupMintExtension(base) {\n  var rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    mint: {\n      params: function () {\n        var _params = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _yield$queryService$P, params;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Params({});\n                case 2:\n                  _yield$queryService$P = _context.sent;\n                  params = _yield$queryService$P.params;\n                  (0, utils_1.assert)(params);\n                  return _context.abrupt(\"return\", {\n                    blocksPerYear: params.blocksPerYear,\n                    goalBonded: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.goalBonded),\n                    inflationMin: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMin),\n                    inflationMax: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMax),\n                    inflationRateChange: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationRateChange),\n                    mintDenom: params.mintDenom\n                  });\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        function params() {\n          return _params.apply(this, arguments);\n        }\n        return params;\n      }(),\n      inflation: function () {\n        var _inflation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _yield$queryService$I, inflation;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return queryService.Inflation({});\n                case 2:\n                  _yield$queryService$I = _context2.sent;\n                  inflation = _yield$queryService$I.inflation;\n                  return _context2.abrupt(\"return\", (0, queryclient_1.decodeCosmosSdkDecFromProto)(inflation));\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        function inflation() {\n          return _inflation.apply(this, arguments);\n        }\n        return inflation;\n      }(),\n      annualProvisions: function () {\n        var _annualProvisions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var _yield$queryService$A, annualProvisions;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return queryService.AnnualProvisions({});\n                case 2:\n                  _yield$queryService$A = _context3.sent;\n                  annualProvisions = _yield$queryService$A.annualProvisions;\n                  return _context3.abrupt(\"return\", (0, queryclient_1.decodeCosmosSdkDecFromProto)(annualProvisions));\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n        function annualProvisions() {\n          return _annualProvisions.apply(this, arguments);\n        }\n        return annualProvisions;\n      }()\n    }\n  };\n}\nexports.setupMintExtension = setupMintExtension;","map":{"version":3,"sources":["../../../src/modules/mint/queries.ts"],"names":[],"mappings":";;;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAqBA,SAAgB,kBAAkB,CAAC,IAAiB,EAAA;EAClD,IAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC;EACA;EACA,IAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,IAAI,EAAE;MACJ,MAAM;QAAA,yEAAE;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,OACmB,YAAY,CAAC,MAAM,CAAC,CAAA,CAAE,CAAC;gBAAA;kBAAA;kBAAxC,MAAM,yBAAN,MAAM;kBACd,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAC,MAAM,CAAC;kBAAC,iCAER;oBACL,aAAa,EAAE,MAAM,CAAC,aAAa;oBACnC,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,UAAU,CAAC;oBAC1D,YAAY,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,YAAY,CAAC;oBAC9D,YAAY,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,YAAY,CAAC;oBAC9D,mBAAmB,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,mBAAmB,CAAC;oBAC5E,SAAS,EAAE,MAAM,CAAC;mBACnB;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CACF;QAAA;UAAA;QAAA;QAAA;MAAA;MACD,SAAS;QAAA,4EAAE;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,OACmB,YAAY,CAAC,SAAS,CAAC,CAAA,CAAE,CAAC;gBAAA;kBAAA;kBAA9C,SAAS,yBAAT,SAAS;kBAAA,kCACV,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,SAAS,CAAC;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAC9C;QAAA;UAAA;QAAA;QAAA;MAAA;MACD,gBAAgB;QAAA,mFAAE;UAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA;kBAAA,OACmB,YAAY,CAAC,gBAAgB,CAAC,CAAA,CAAE,CAAC;gBAAA;kBAAA;kBAA5D,gBAAgB,yBAAhB,gBAAgB;kBAAA,kCACjB,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,gBAAgB,CAAC;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CACrD;QAAA;UAAA;QAAA;QAAA;MAAA;IACF;GACF;AACH;AA/BA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupMintExtension = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/mint/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupMintExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        mint: {\n            params: async () => {\n                const { params } = await queryService.Params({});\n                (0, utils_1.assert)(params);\n                return {\n                    blocksPerYear: params.blocksPerYear,\n                    goalBonded: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.goalBonded),\n                    inflationMin: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMin),\n                    inflationMax: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMax),\n                    inflationRateChange: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationRateChange),\n                    mintDenom: params.mintDenom,\n                };\n            },\n            inflation: async () => {\n                const { inflation } = await queryService.Inflation({});\n                return (0, queryclient_1.decodeCosmosSdkDecFromProto)(inflation);\n            },\n            annualProvisions: async () => {\n                const { annualProvisions } = await queryService.AnnualProvisions({});\n                return (0, queryclient_1.decodeCosmosSdkDecFromProto)(annualProvisions);\n            },\n        },\n    };\n}\nexports.setupMintExtension = setupMintExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}