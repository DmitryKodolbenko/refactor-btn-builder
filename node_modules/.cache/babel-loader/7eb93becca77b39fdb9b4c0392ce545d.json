{"ast":null,"code":"import { assertIsDeliverTxSuccess, SigningStargateClient } from \"@cosmjs/stargate\";\nimport { message } from \"antd\";\nconst bs58 = require(\"bs58\");\nconst {\n  Buffer\n} = require(\"buffer\");\nconst web3 = require(\"@solana/web3.js\");\nconst axios = require(\"axios\").default;\nconst MakeATOMTrx = async (activeBtn, setIsload, connection, ATOMwalletKey, walletTo, netTo, ATOMAmount) => {\n  if (activeBtn) {\n    setIsload(true);\n    try {\n      if (window) {\n        if (window[\"keplr\"]) {\n          const chainId = \"cosmoshub-4\"; //theta-testnet-001\n          await window.keplr.enable(chainId);\n          //@ts-ignore\n          if (typeof window === \"undefined\") return;\n          await window.keplr.enable(chainId);\n          const offlineSigner = window.getOfflineSigner != null ? window.getOfflineSigner(chainId) : null;\n          if (offlineSigner == null) return \"error\";\n          const accounts = await offlineSigner.getAccounts();\n          // return\n          const client = await SigningStargateClient.connectWithSigner(\"https://proxy.tonana.org/https://rpc.cosmos.network/\",\n          // \"https://rpc.sentry-01.theta-testnet.polypore.xyz/\",\n          offlineSigner);\n          message.success(\"Wait BE trx pending...\", 2);\n          const amountFinal = {\n            denom: \"uatom\",\n            amount: (Number(ATOMAmount) * 1000000).toString()\n          };\n          const fee = {\n            amount: [{\n              denom: \"uatom\",\n              amount: \"5000\"\n            }],\n            gas: \"200000\"\n          };\n          const result = await client.sendTokens(accounts[0].address, process.env.REACT_APP_BACK_COSMOS_WALLET ? process.env.REACT_APP_BACK_COSMOS_WALLET : \"\", [amountFinal], fee, `${netTo}#${walletTo}`);\n          await assertIsDeliverTxSuccess(result);\n          if (result.code !== undefined && result.code !== 0) {\n            alert(\"Failed to send tx: \");\n          } else {\n            fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\" : \"https://api.tonana.org/\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                hash: result.transactionHash,\n                sourceChain: \"cosmos\"\n              })\n            });\n            setIsload(false);\n            message.success(\"Done trx!\", 10);\n\n            //     axios.get(\n            //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n            //         ).then((e:any)=>{\n            //           console.log(e);\n            // setIsload(false);\n\n            //           message.success(\"Done trx!\", 10);\n\n            //         })\n\n            // const int = setInterval(() => {\n            //   // return\n            //   fetch(`https://api.${process.env.REACT_APP_SOL_NET}.solana.com/`, {\n            //     method: \"POST\",\n            //     headers: {\n            //       Accept: \"application/json, text/plain, */*\",\n            //       \"Content-Type\": \"application/json\",\n            //     },\n            //     body: JSON.stringify({\n            //       jsonrpc: \"2.0\",\n            //       id: 1,\n            //       method: \"getTransaction\",\n\n            //       params: [\"json\"],\n            //     }),\n            //   })\n            //     .then((res) => res.json())\n            //     .then(async (res) => {\n            //       if (res.result == null) {\n            //         console.log(\"res: null \");\n            //         return false;\n            //       }\n            //       const buf = bs58.decode(\n            //         res.result.transaction.message.instructions[0].data.toString(16)\n            //       );\n            //       if (buf.toString() === `TON_WALLET_${walletTo}`) {\n            //         clearInterval(int);\n            //         message.success(\"Done BE trx!\", 10);\n\n            //         axios.get(\n            //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n            //         );\n\n            //         const int2 = setInterval(() => {\n            //           message.success(\"Wallet trx pending...\", 2);\n\n            //           fetch(\n            //             `https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`\n            //           )\n            //             .then((e: any) => e.json())\n            //             .then((e: any) => {\n            //               console.log(e.result);\n            //               const data = e.result.filter((e: any) =>\n            //                 e.out_msgs[0]\n            //                   ? e.out_msgs[0].message === true\n            //                   : false\n            //               );\n            //               if (data[0]) {\n            //                 clearInterval(int2);\n            //                 setIsload(false);\n            //                 message.success(\"Done wallet trx, check it!\", 10);\n            //               }\n            //             });\n            //         }, 10000);\n            //       }\n            //     });\n            // }, 5000);\n\n            //       \talert(\"Succeed to send tx:\" + result.transactionHash);\n          }\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n_c = MakeATOMTrx;\nexport default MakeATOMTrx;\nvar _c;\n$RefreshReg$(_c, \"MakeATOMTrx\");","map":{"version":3,"names":["assertIsDeliverTxSuccess","SigningStargateClient","message","bs58","require","Buffer","web3","axios","default","MakeATOMTrx","activeBtn","setIsload","connection","ATOMwalletKey","walletTo","netTo","ATOMAmount","window","chainId","keplr","enable","offlineSigner","getOfflineSigner","accounts","getAccounts","client","connectWithSigner","success","amountFinal","denom","amount","Number","toString","fee","gas","result","sendTokens","address","process","env","REACT_APP_BACK_COSMOS_WALLET","code","undefined","alert","fetch","REACT_APP_STATE","method","headers","body","JSON","stringify","hash","transactionHash","sourceChain","e","console","log","error"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeATOMTrx.ts"],"sourcesContent":["import {\n\tassertIsDeliverTxSuccess,\n\tSigningStargateClient,\n} from \"@cosmjs/stargate\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { message } from \"antd\";\nconst bs58 = require(\"bs58\");\nconst { Buffer } = require(\"buffer\");\nconst web3 = require(\"@solana/web3.js\");\nconst axios = require(\"axios\").default;\n\n\nconst MakeATOMTrx = async (\n  activeBtn: any,\n  setIsload: any,\n  connection: any,\n  ATOMwalletKey: any,\n  walletTo: any,\n  netTo: string,\n  ATOMAmount: any\n) => {\n  if (activeBtn) {\n    setIsload(true);\n    try {\n      if (window) {\n        if (window[\"keplr\"]) {\n          const chainId = \"cosmoshub-4\"; //theta-testnet-001\n          await window.keplr.enable(chainId);\n          //@ts-ignore\n          if (typeof window === \"undefined\") return;\n          await window.keplr.enable(chainId);\n          const offlineSigner =\n            window.getOfflineSigner != null\n              ? window.getOfflineSigner(chainId)\n              : null;\n          if (offlineSigner == null) return \"error\";\n          const accounts = await offlineSigner.getAccounts();\n          // return\n          const client = await SigningStargateClient.connectWithSigner(\n            \"https://proxy.tonana.org/https://rpc.cosmos.network/\",\n            // \"https://rpc.sentry-01.theta-testnet.polypore.xyz/\",\n            offlineSigner\n          );\n          message.success(\"Wait BE trx pending...\", 2);\n  \n          const amountFinal = {\n            denom: \"uatom\",\n            amount: (Number(ATOMAmount) * 1000000).toString(),\n          };\n          const fee = {\n            amount: [\n              {\n                denom: \"uatom\",\n                amount: \"5000\",\n              },\n            ],\n            gas: \"200000\",\n          };\n          const result = await client.sendTokens(\n            accounts[0].address,\n            process.env.REACT_APP_BACK_COSMOS_WALLET\n              ? process.env.REACT_APP_BACK_COSMOS_WALLET\n              : \"\",\n            [amountFinal],\n            fee,\n            `${netTo}#${walletTo}`\n          );\n          await assertIsDeliverTxSuccess(result);\n          if (result.code !== undefined && result.code !== 0) {\n          \talert(\"Failed to send tx: \");\n          } else {\n\n            fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\"   : \"https://api.tonana.org/\", {method: \"POST\", headers: { \"Content-Type\": \"application/json\" },body: JSON.stringify({\n              hash:result.transactionHash,\n              sourceChain:\"cosmos\"\n            })})\n              setIsload(false);\n              message.success(\"Done trx!\", 10);\n\n    //     axios.get(\n    //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n    //         ).then((e:any)=>{\n    //           console.log(e);\n    // setIsload(false);\n\n    //           message.success(\"Done trx!\", 10);\n\n    //         })\n\n    // const int = setInterval(() => {\n    //   // return\n    //   fetch(`https://api.${process.env.REACT_APP_SOL_NET}.solana.com/`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       Accept: \"application/json, text/plain, */*\",\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify({\n    //       jsonrpc: \"2.0\",\n    //       id: 1,\n    //       method: \"getTransaction\",\n\n    //       params: [\"json\"],\n    //     }),\n    //   })\n    //     .then((res) => res.json())\n    //     .then(async (res) => {\n    //       if (res.result == null) {\n    //         console.log(\"res: null \");\n    //         return false;\n    //       }\n    //       const buf = bs58.decode(\n    //         res.result.transaction.message.instructions[0].data.toString(16)\n    //       );\n    //       if (buf.toString() === `TON_WALLET_${walletTo}`) {\n    //         clearInterval(int);\n    //         message.success(\"Done BE trx!\", 10);\n\n    //         axios.get(\n    //           `https://us-central1-hoteloffice-293914.cloudfunctions.net/ton_solana_bridge/attr?=`\n    //         );\n\n    //         const int2 = setInterval(() => {\n    //           message.success(\"Wallet trx pending...\", 2);\n\n    //           fetch(\n    //             `https://toncenter.com/api/v2/getTransactions?address=${process.env.REACT_APP_BACK_TON_WALLET}&limit=10&to_lt=0&archival=false`\n    //           )\n    //             .then((e: any) => e.json())\n    //             .then((e: any) => {\n    //               console.log(e.result);\n    //               const data = e.result.filter((e: any) =>\n    //                 e.out_msgs[0]\n    //                   ? e.out_msgs[0].message === true\n    //                   : false\n    //               );\n    //               if (data[0]) {\n    //                 clearInterval(int2);\n    //                 setIsload(false);\n    //                 message.success(\"Done wallet trx, check it!\", 10);\n    //               }\n    //             });\n    //         }, 10000);\n    //       }\n    //     });\n    // }, 5000);\n\n\n    //       \talert(\"Succeed to send tx:\" + result.transactionHash);\n          }\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n\nexport default MakeATOMTrx\n"],"mappings":"AAAA,SACCA,wBAAwB,EACxBC,qBAAqB,QACf,kBAAkB;AAEzB,SAASC,OAAO,QAAQ,MAAM;AAC9B,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACvC,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC,CAACI,OAAO;AAGtC,MAAMC,WAAW,GAAG,OAClBC,SAAc,EACdC,SAAc,EACdC,UAAe,EACfC,aAAkB,EAClBC,QAAa,EACbC,KAAa,EACbC,UAAe,KACZ;EACH,IAAIN,SAAS,EAAE;IACbC,SAAS,CAAC,IAAI,CAAC;IACf,IAAI;MACF,IAAIM,MAAM,EAAE;QACV,IAAIA,MAAM,CAAC,OAAO,CAAC,EAAE;UACnB,MAAMC,OAAO,GAAG,aAAa,CAAC,CAAC;UAC/B,MAAMD,MAAM,CAACE,KAAK,CAACC,MAAM,CAACF,OAAO,CAAC;UAClC;UACA,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;UACnC,MAAMA,MAAM,CAACE,KAAK,CAACC,MAAM,CAACF,OAAO,CAAC;UAClC,MAAMG,aAAa,GACjBJ,MAAM,CAACK,gBAAgB,IAAI,IAAI,GAC3BL,MAAM,CAACK,gBAAgB,CAACJ,OAAO,CAAC,GAChC,IAAI;UACV,IAAIG,aAAa,IAAI,IAAI,EAAE,OAAO,OAAO;UACzC,MAAME,QAAQ,GAAG,MAAMF,aAAa,CAACG,WAAW,EAAE;UAClD;UACA,MAAMC,MAAM,GAAG,MAAMxB,qBAAqB,CAACyB,iBAAiB,CAC1D,sDAAsD;UACtD;UACAL,aAAa,CACd;UACDnB,OAAO,CAACyB,OAAO,CAAC,wBAAwB,EAAE,CAAC,CAAC;UAE5C,MAAMC,WAAW,GAAG;YAClBC,KAAK,EAAE,OAAO;YACdC,MAAM,EAAE,CAACC,MAAM,CAACf,UAAU,CAAC,GAAG,OAAO,EAAEgB,QAAQ;UACjD,CAAC;UACD,MAAMC,GAAG,GAAG;YACVH,MAAM,EAAE,CACN;cACED,KAAK,EAAE,OAAO;cACdC,MAAM,EAAE;YACV,CAAC,CACF;YACDI,GAAG,EAAE;UACP,CAAC;UACD,MAAMC,MAAM,GAAG,MAAMV,MAAM,CAACW,UAAU,CACpCb,QAAQ,CAAC,CAAC,CAAC,CAACc,OAAO,EACnBC,OAAO,CAACC,GAAG,CAACC,4BAA4B,GACpCF,OAAO,CAACC,GAAG,CAACC,4BAA4B,GACxC,EAAE,EACN,CAACZ,WAAW,CAAC,EACbK,GAAG,EACF,GAAElB,KAAM,IAAGD,QAAS,EAAC,CACvB;UACD,MAAMd,wBAAwB,CAACmC,MAAM,CAAC;UACtC,IAAIA,MAAM,CAACM,IAAI,KAAKC,SAAS,IAAIP,MAAM,CAACM,IAAI,KAAK,CAAC,EAAE;YACnDE,KAAK,CAAC,qBAAqB,CAAC;UAC7B,CAAC,MAAM;YAELC,KAAK,CAACN,OAAO,CAACC,GAAG,CAACM,eAAe,KAAK,KAAK,GAAG,uBAAuB,GAAGP,OAAO,CAACC,GAAG,CAACM,eAAe,KAAK,YAAY,GAAG,4BAA4B,GAAK,yBAAyB,EAAE;cAACC,MAAM,EAAE,MAAM;cAAEC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAACC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBACvQC,IAAI,EAAChB,MAAM,CAACiB,eAAe;gBAC3BC,WAAW,EAAC;cACd,CAAC;YAAC,CAAC,CAAC;YACF1C,SAAS,CAAC,KAAK,CAAC;YAChBT,OAAO,CAACyB,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;;YAE1C;YACA;YACA;YACA;YACA;;YAEA;;YAEA;;YAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;YAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;YAEA;YACA;YACA;;YAEA;YACA;;YAEA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;YAGA;UACM;QACF;MACF;IACF,CAAC,CAAC,OAAO2B,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB;EACF,CAAC,MAAM;IACLpD,OAAO,CAACuD,KAAK,CAAC,qCAAqC,EAAE,EAAE,CAAC;EAC1D;AACF,CAAC;AAAC,KAlJIhD,WAAW;AAoJjB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module"}