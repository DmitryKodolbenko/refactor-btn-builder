{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connection = void 0;\nvar providers_1 = require(\"./providers\");\nvar signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\nfunction getProvider(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n    case 'JsonRpcProvider':\n      return new providers_1.JsonRpcProvider(_objectSpread({}, config.args));\n    default:\n      throw new Error(\"Unknown provider type \".concat(config.type));\n  }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\nfunction getSigner(config) {\n  switch (config.type) {\n    case undefined:\n      return config;\n    case 'InMemorySigner':\n      {\n        return new signer_1.InMemorySigner(config.keyStore);\n      }\n    default:\n      throw new Error(\"Unknown signer type \".concat(config.type));\n  }\n}\n/**\n * Connects an account to a given network via a given provider\n */\nvar Connection = /*#__PURE__*/function () {\n  function Connection(networkId, provider, signer, jsvmAccountId) {\n    _classCallCheck(this, Connection);\n    this.networkId = networkId;\n    this.provider = provider;\n    this.signer = signer;\n    this.jsvmAccountId = jsvmAccountId;\n  }\n  /**\n   * @param config Contains connection info details\n   */\n  _createClass(Connection, null, [{\n    key: \"fromConfig\",\n    value: function fromConfig(config) {\n      var provider = getProvider(config.provider);\n      var signer = getSigner(config.signer);\n      return new Connection(config.networkId, provider, signer, config.jsvmAccountId);\n    }\n  }]);\n  return Connection;\n}();\nexports.Connection = Connection;","map":{"version":3,"names":["Object","defineProperty","exports","value","Connection","providers_1","require","signer_1","getProvider","config","type","undefined","JsonRpcProvider","args","Error","getSigner","InMemorySigner","keyStore","networkId","provider","signer","jsvmAccountId"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/connection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connection = void 0;\nconst providers_1 = require(\"./providers\");\nconst signer_1 = require(\"./signer\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */\nfunction getProvider(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'JsonRpcProvider': return new providers_1.JsonRpcProvider({ ...config.args });\n        default: throw new Error(`Unknown provider type ${config.type}`);\n    }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */\nfunction getSigner(config) {\n    switch (config.type) {\n        case undefined:\n            return config;\n        case 'InMemorySigner': {\n            return new signer_1.InMemorySigner(config.keyStore);\n        }\n        default: throw new Error(`Unknown signer type ${config.type}`);\n    }\n}\n/**\n * Connects an account to a given network via a given provider\n */\nclass Connection {\n    constructor(networkId, provider, signer, jsvmAccountId) {\n        this.networkId = networkId;\n        this.provider = provider;\n        this.signer = signer;\n        this.jsvmAccountId = jsvmAccountId;\n    }\n    /**\n     * @param config Contains connection info details\n     */\n    static fromConfig(config) {\n        const provider = getProvider(config.provider);\n        const signer = getSigner(config.signer);\n        return new Connection(config.networkId, provider, signer, config.jsvmAccountId);\n    }\n}\nexports.Connection = Connection;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAMC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC;AACA;AACA;AACA;AACA,SAASE,WAAW,CAACC,MAAM,EAAE;EACzB,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKC,SAAS;MACV,OAAOF,MAAM;IACjB,KAAK,iBAAiB;MAAE,OAAO,IAAIJ,WAAW,CAACO,eAAe,mBAAMH,MAAM,CAACI,IAAI,EAAG;IAClF;MAAS,MAAM,IAAIC,KAAK,iCAA0BL,MAAM,CAACC,IAAI,EAAG;EAAC;AAEzE;AACA;AACA;AACA;AACA;AACA,SAASK,SAAS,CAACN,MAAM,EAAE;EACvB,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKC,SAAS;MACV,OAAOF,MAAM;IACjB,KAAK,gBAAgB;MAAE;QACnB,OAAO,IAAIF,QAAQ,CAACS,cAAc,CAACP,MAAM,CAACQ,QAAQ,CAAC;MACvD;IACA;MAAS,MAAM,IAAIH,KAAK,+BAAwBL,MAAM,CAACC,IAAI,EAAG;EAAC;AAEvE;AACA;AACA;AACA;AAFA,IAGMN,UAAU;EACZ,oBAAYc,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,aAAa,EAAE;IAAA;IACpD,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,oBAAkBZ,MAAM,EAAE;MACtB,IAAMU,QAAQ,GAAGX,WAAW,CAACC,MAAM,CAACU,QAAQ,CAAC;MAC7C,IAAMC,MAAM,GAAGL,SAAS,CAACN,MAAM,CAACW,MAAM,CAAC;MACvC,OAAO,IAAIhB,UAAU,CAACK,MAAM,CAACS,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEX,MAAM,CAACY,aAAa,CAAC;IACnF;EAAC;EAAA;AAAA;AAELnB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script"}