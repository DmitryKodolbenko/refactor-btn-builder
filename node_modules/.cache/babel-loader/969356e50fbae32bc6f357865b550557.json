{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupAuthExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupAuthExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    auth: {\n      account: async address => {\n        const {\n          account\n        } = await queryService.Account({\n          address: address\n        });\n        return account !== null && account !== void 0 ? account : null;\n      }\n    }\n  };\n}\nexports.setupAuthExtension = setupAuthExtension;","map":{"version":3,"sources":["../../../src/modules/auth/queries.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAGA,MAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAeA,SAAgB,kBAAkB,CAAC,IAAiB,EAAA;EAClD,MAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC;EACA;EACA,MAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,IAAI,EAAE;MACJ,OAAO,EAAE,MAAO,OAAe,IAAI;QACjC,MAAM;UAAE;QAAO,CAAE,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;UAAE,OAAO,EAAE;QAAO,CAAE,CAAC;QACpE,OAAO,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAP,OAAO,GAAI,IAAI;MACxB;IACD;GACF;AACH;AAdA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupAuthExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupAuthExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        auth: {\n            account: async (address) => {\n                const { account } = await queryService.Account({ address: address });\n                return account !== null && account !== void 0 ? account : null;\n            },\n        },\n    };\n}\nexports.setupAuthExtension = setupAuthExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}