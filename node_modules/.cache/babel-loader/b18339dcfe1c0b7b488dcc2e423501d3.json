{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMeteorPostMessenger = void 0;\nvar nanoid_1 = require(\"nanoid\");\nvar envConfig_1 = require(\"../envConfig\");\nvar ExternalActionTypes_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionTypes\");\nvar query_string_1 = require(\"query-string\");\nvar ExternalActionErrorMessages_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionErrorMessages\");\nvar app_constants_1 = require(\"../../../meteor-common/src/constants/app_constants\");\nvar ComWindow = /*#__PURE__*/function () {\n  function ComWindow(connection, listener) {\n    _classCallCheck(this, ComWindow);\n    var baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\n    var url = new URL(baseWalletUrl);\n    this.walletOrigin = url.origin;\n    if (window.meteorCom == null) {\n      this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message;\n      console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\n      var queryParams = {\n        source: ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message,\n        connectionUid: connection.uid\n      };\n      var w = app_constants_1.SIGN_POPUP_WIDTH;\n      var h = app_constants_1.SIGN_POPUP_HEIGHT;\n      var y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\n      var x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\n      var newWindow = window.open(\"\".concat(baseWalletUrl, \"/connect/\").concat(connection.network, \"/\").concat(connection.actionType, \"?\").concat((0, query_string_1.stringify)(queryParams)), \"_blank\", \"popup=1,width=\".concat(w, \",height=\").concat(h, \",top=\").concat(y, \",left=\").concat(x));\n      if (newWindow != null) {\n        this.websiteWindow = newWindow;\n      } else {\n        throw new ExternalActionTypes_1.MeteorActionError({\n          message: \"Couldn't open popup window to complete wallet action\",\n          endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.POPUP_WINDOW_OPEN_FAILED]\n        });\n      }\n      window.addEventListener(\"message\", function (event) {\n        return listener(event.data);\n      });\n      this.wasOpened = false;\n    } else {\n      this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.extension_injected;\n      this.wasOpened = true;\n      // console.log(\"Need to communicate with the extension!\");\n      window.meteorCom.addMessageDataListener(listener);\n    }\n  }\n  _createClass(ComWindow, [{\n    key: \"focus\",\n    value: function focus() {\n      var _a;\n      if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n        (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(data) {\n      var _a, _b;\n      if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n        (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.postMessage(data, this.walletOrigin);\n      } else {\n        (_b = window.meteorCom) === null || _b === void 0 ? void 0 : _b.sendMessageData(data);\n      }\n    }\n  }, {\n    key: \"isWindowClosed\",\n    value: function isWindowClosed() {\n      var _a, _b;\n      if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n        return (_b = (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"hasActiveWindow\",\n    value: function hasActiveWindow() {\n      if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n        return this.websiteWindow != null;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n        delete this.websiteWindow;\n      } else {}\n    }\n  }]);\n  return ComWindow;\n}();\nvar pingInterval = 450;\nvar MeteorPostMessenger = /*#__PURE__*/function () {\n  function MeteorPostMessenger() {\n    var _this = this;\n    _classCallCheck(this, MeteorPostMessenger);\n    this.connections = [];\n    // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\n    var baseUrl = envConfig_1.envConfig.wallet_base_url;\n    var url = new URL(baseUrl);\n    this.baseWalletUrl = baseUrl;\n    this.walletOrigin = url.origin;\n    this.listener = function (data) {\n      if (data != null) {\n        // const data: TClientPostMessageResponse = event.data;\n        // console.log(\"Meteor Post Messenger received event with data: \", data);\n        var currentConnection = _this.connections.find(function (con) {\n          return con.uid === data.uid;\n        });\n        if (currentConnection != null) {\n          _this.updateConnection(currentConnection.uid, {\n            lastConnection: Date.now()\n          });\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.attempting_reconnect) {\n            _this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing\n            });\n            _this.sendComs();\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.connected && currentConnection.status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\n            _this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.connected\n            });\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success) {\n            currentConnection.resolve({\n              success: true,\n              endTags: [],\n              payload: data.payload\n            });\n            _this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success\n            });\n            _this.sendComs();\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail) {\n            _this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail\n            });\n            _this.sendComs();\n            // const error = new MeteorActionError({ endTags: data.endTags });\n            // console.log(\"Ending failure with error\", { ...error });\n            currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\n              endTags: data.endTags\n            }));\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window) {\n            _this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window\n            });\n            currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\n              endTags: data.endTags,\n              message: \"User closed the window\"\n            }));\n          }\n          if ([ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success].includes(data.status)) {\n            _this.removeConnection(currentConnection.uid);\n          }\n        } /* else {\r\n          console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n          }*/\n      }\n    };\n    // window.addEventListener(\"message\", this.listener);\n  }\n  _createClass(MeteorPostMessenger, [{\n    key: \"removeConnection\",\n    value: function removeConnection(uid) {\n      this.connections = this.connections.filter(function (con) {\n        return con.uid !== uid;\n      });\n      if (this.connections.length === 0) {\n        delete this.comWindow;\n        clearInterval(this.comInterval);\n        delete this.comInterval;\n      }\n    }\n  }, {\n    key: \"updateConnection\",\n    value: function updateConnection(uid, newConnectionProperties) {\n      this.connections = this.connections.map(function (con) {\n        if (con.uid === uid) {\n          return _objectSpread(_objectSpread(_objectSpread({}, con), newConnectionProperties), {}, {\n            uid: con.uid\n          });\n        }\n        return con;\n      });\n    }\n  }, {\n    key: \"sendComs\",\n    value: function sendComs() {\n      var _this2 = this;\n      var _a;\n      if (((_a = this.comWindow) === null || _a === void 0 ? void 0 : _a.hasActiveWindow()) && this.connections.length > 0) {\n        if (this.comInterval == null) {\n          this.comInterval = setInterval(function () {\n            return _this2.sendComs();\n          }, pingInterval);\n        }\n        if (this.comWindow.isWindowClosed()) {\n          if (this.comWindow.wasOpened) {\n            var _iterator = _createForOfIteratorHelper(this.connections),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var con = _step.value;\n                con.reject(new ExternalActionTypes_1.MeteorActionError({\n                  message: \"User closed the window before completing the action\",\n                  endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.INCOMPLETE_ACTION, ExternalActionErrorMessages_1.EMeteorActionErrorTag.WINDOW_CLOSED]\n                }));\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            this.connections = [];\n            this.comWindow.close();\n          } else {\n            console.log(\"Window is closed, need to allow popup\");\n          }\n        } else {\n          this.comWindow.wasOpened = true;\n          var _iterator2 = _createForOfIteratorHelper(this.connections),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _step2.value,\n                network = _step2$value.network,\n                actionType = _step2$value.actionType,\n                endTags = _step2$value.endTags,\n                status = _step2$value.status,\n                inputs = _step2$value.inputs,\n                uid = _step2$value.uid;\n              var postMessage = {\n                endTags: endTags,\n                actionType: actionType,\n                status: status,\n                uid: uid,\n                network: network\n              };\n              if (status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\n                postMessage.inputs = inputs;\n              }\n              this.comWindow.sendMessage(postMessage);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } else {\n        clearInterval(this.comInterval);\n        delete this.comInterval;\n      }\n    }\n  }, {\n    key: \"addAndStartConnection\",\n    value: function addAndStartConnection(connection) {\n      if (this.connections.length > 0) {\n        var _iterator3 = _createForOfIteratorHelper(this.connections),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var con = _step3.value;\n            con.status = ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected;\n            con.endTags = [ExternalActionErrorMessages_1.EMeteorActionErrorTag.NEW_ACTION_STARTED];\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      this.connections.push(connection);\n      if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\n        this.comWindow = new ComWindow(connection, this.listener);\n      } else {\n        this.comWindow.focus();\n      }\n      this.sendComs();\n    }\n  }, {\n    key: \"connectAndWaitForResponse\",\n    value: function () {\n      var _connectAndWaitForResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var _this3 = this;\n        var actionType, network, inputs, newConnection, promise;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                actionType = _ref.actionType, network = _ref.network, inputs = _ref.inputs;\n                newConnection = {\n                  uid: (0, nanoid_1.nanoid)(),\n                  actionType: actionType,\n                  lastAttemptedConnection: 0,\n                  lastConnection: 0,\n                  status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\n                  promise: undefined,\n                  reject: undefined,\n                  resolve: undefined,\n                  currentPayload: {},\n                  inputs: inputs,\n                  network: network,\n                  endTags: []\n                };\n                promise = new Promise(function (resolve, reject) {\n                  newConnection.resolve = resolve;\n                  newConnection.reject = function (error) {\n                    _this3.connections = _this3.connections.filter(function (con) {\n                      return con.uid !== newConnection.uid;\n                    });\n                    reject(error);\n                  };\n                });\n                newConnection.promise = promise;\n                this.addAndStartConnection(newConnection);\n                _context.next = 7;\n                return promise;\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function connectAndWaitForResponse(_x) {\n        return _connectAndWaitForResponse.apply(this, arguments);\n      }\n      return connectAndWaitForResponse;\n    }()\n  }]);\n  return MeteorPostMessenger;\n}();\nvar postMessenger;\nfunction getMeteorPostMessenger() {\n  if (postMessenger == null) {\n    postMessenger = new MeteorPostMessenger();\n  }\n  return postMessenger;\n}\nexports.getMeteorPostMessenger = getMeteorPostMessenger;","map":{"version":3,"sources":["meteor-sdk/src/postMessage/MeteorPostMessenger.ts"],"names":[],"mappings":"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","sourceRoot":"./src/","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getMeteorPostMessenger = void 0;\r\nconst nanoid_1 = require(\"nanoid\");\r\nconst envConfig_1 = require(\"../envConfig\");\r\nconst ExternalActionTypes_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionTypes\");\r\nconst query_string_1 = require(\"query-string\");\r\nconst ExternalActionErrorMessages_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionErrorMessages\");\r\nconst app_constants_1 = require(\"../../../meteor-common/src/constants/app_constants\");\r\nclass ComWindow {\r\n    constructor(connection, listener) {\r\n        const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseWalletUrl);\r\n        this.walletOrigin = url.origin;\r\n        if (window.meteorCom == null) {\r\n            this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message;\r\n            console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\r\n            const queryParams = {\r\n                source: ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message,\r\n                connectionUid: connection.uid,\r\n            };\r\n            const w = app_constants_1.SIGN_POPUP_WIDTH;\r\n            const h = app_constants_1.SIGN_POPUP_HEIGHT;\r\n            const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\r\n            const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\r\n            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, \"_blank\", `popup=1,width=${w},height=${h},top=${y},left=${x}`);\r\n            if (newWindow != null) {\r\n                this.websiteWindow = newWindow;\r\n            }\r\n            else {\r\n                throw new ExternalActionTypes_1.MeteorActionError({\r\n                    message: \"Couldn't open popup window to complete wallet action\",\r\n                    endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.POPUP_WINDOW_OPEN_FAILED],\r\n                });\r\n            }\r\n            window.addEventListener(\"message\", (event) => listener(event.data));\r\n            this.wasOpened = false;\r\n        }\r\n        else {\r\n            this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.extension_injected;\r\n            this.wasOpened = true;\r\n            // console.log(\"Need to communicate with the extension!\");\r\n            window.meteorCom.addMessageDataListener(listener);\r\n        }\r\n    }\r\n    focus() {\r\n        var _a;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.focus();\r\n        }\r\n    }\r\n    sendMessage(data) {\r\n        var _a, _b;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.postMessage(data, this.walletOrigin);\r\n        }\r\n        else {\r\n            (_b = window.meteorCom) === null || _b === void 0 ? void 0 : _b.sendMessageData(data);\r\n        }\r\n    }\r\n    isWindowClosed() {\r\n        var _a, _b;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            return (_b = (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hasActiveWindow() {\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            return this.websiteWindow != null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    close() {\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            delete this.websiteWindow;\r\n        }\r\n        else {\r\n        }\r\n    }\r\n}\r\nconst pingInterval = 450;\r\nclass MeteorPostMessenger {\r\n    constructor() {\r\n        this.connections = [];\r\n        // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\r\n        const baseUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseUrl);\r\n        this.baseWalletUrl = baseUrl;\r\n        this.walletOrigin = url.origin;\r\n        this.listener = (data) => {\r\n            if (data != null) {\r\n                // const data: TClientPostMessageResponse = event.data;\r\n                // console.log(\"Meteor Post Messenger received event with data: \", data);\r\n                const currentConnection = this.connections.find((con) => con.uid === data.uid);\r\n                if (currentConnection != null) {\r\n                    this.updateConnection(currentConnection.uid, {\r\n                        lastConnection: Date.now(),\r\n                    });\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.attempting_reconnect) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.connected &&\r\n                        currentConnection.status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.connected,\r\n                        });\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success) {\r\n                        currentConnection.resolve({\r\n                            success: true,\r\n                            endTags: [],\r\n                            payload: data.payload,\r\n                        });\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail,\r\n                        });\r\n                        this.sendComs();\r\n                        // const error = new MeteorActionError({ endTags: data.endTags });\r\n                        // console.log(\"Ending failure with error\", { ...error });\r\n                        currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({ endTags: data.endTags }));\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window,\r\n                        });\r\n                        currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\r\n                            endTags: data.endTags,\r\n                            message: \"User closed the window\",\r\n                        }));\r\n                    }\r\n                    if ([\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success,\r\n                    ].includes(data.status)) {\r\n                        this.removeConnection(currentConnection.uid);\r\n                    }\r\n                } /* else {\r\n                  console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n                }*/\r\n            }\r\n        };\r\n        // window.addEventListener(\"message\", this.listener);\r\n    }\r\n    removeConnection(uid) {\r\n        this.connections = this.connections.filter((con) => con.uid !== uid);\r\n        if (this.connections.length === 0) {\r\n            delete this.comWindow;\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    updateConnection(uid, newConnectionProperties) {\r\n        this.connections = this.connections.map((con) => {\r\n            if (con.uid === uid) {\r\n                return {\r\n                    ...con,\r\n                    ...newConnectionProperties,\r\n                    uid: con.uid,\r\n                };\r\n            }\r\n            return con;\r\n        });\r\n    }\r\n    sendComs() {\r\n        var _a;\r\n        if (((_a = this.comWindow) === null || _a === void 0 ? void 0 : _a.hasActiveWindow()) && this.connections.length > 0) {\r\n            if (this.comInterval == null) {\r\n                this.comInterval = setInterval(() => this.sendComs(), pingInterval);\r\n            }\r\n            if (this.comWindow.isWindowClosed()) {\r\n                if (this.comWindow.wasOpened) {\r\n                    for (const con of this.connections) {\r\n                        con.reject(new ExternalActionTypes_1.MeteorActionError({\r\n                            message: \"User closed the window before completing the action\",\r\n                            endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.INCOMPLETE_ACTION, ExternalActionErrorMessages_1.EMeteorActionErrorTag.WINDOW_CLOSED],\r\n                        }));\r\n                    }\r\n                    this.connections = [];\r\n                    this.comWindow.close();\r\n                }\r\n                else {\r\n                    console.log(\"Window is closed, need to allow popup\");\r\n                }\r\n            }\r\n            else {\r\n                this.comWindow.wasOpened = true;\r\n                for (const { network, actionType, endTags, status, inputs, uid } of this.connections) {\r\n                    const postMessage = {\r\n                        endTags,\r\n                        actionType: actionType,\r\n                        status,\r\n                        uid,\r\n                        network,\r\n                    };\r\n                    if (status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\r\n                        postMessage.inputs = inputs;\r\n                    }\r\n                    this.comWindow.sendMessage(postMessage);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    addAndStartConnection(connection) {\r\n        if (this.connections.length > 0) {\r\n            for (const con of this.connections) {\r\n                con.status = ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected;\r\n                con.endTags = [ExternalActionErrorMessages_1.EMeteorActionErrorTag.NEW_ACTION_STARTED];\r\n            }\r\n        }\r\n        this.connections.push(connection);\r\n        if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\r\n            this.comWindow = new ComWindow(connection, this.listener);\r\n        }\r\n        else {\r\n            this.comWindow.focus();\r\n        }\r\n        this.sendComs();\r\n    }\r\n    async connectAndWaitForResponse({ actionType, network, inputs, }) {\r\n        let newConnection = {\r\n            uid: (0, nanoid_1.nanoid)(),\r\n            actionType,\r\n            lastAttemptedConnection: 0,\r\n            lastConnection: 0,\r\n            status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\r\n            promise: undefined,\r\n            reject: undefined,\r\n            resolve: undefined,\r\n            currentPayload: {},\r\n            inputs,\r\n            network,\r\n            endTags: [],\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            newConnection.resolve = resolve;\r\n            newConnection.reject = (error) => {\r\n                this.connections = this.connections.filter((con) => con.uid !== newConnection.uid);\r\n                reject(error);\r\n            };\r\n        });\r\n        newConnection.promise = promise;\r\n        this.addAndStartConnection(newConnection);\r\n        return await promise;\r\n    }\r\n}\r\nlet postMessenger;\r\nfunction getMeteorPostMessenger() {\r\n    if (postMessenger == null) {\r\n        postMessenger = new MeteorPostMessenger();\r\n    }\r\n    return postMessenger;\r\n}\r\nexports.getMeteorPostMessenger = getMeteorPostMessenger;\r\n//# sourceMappingURL=MeteorPostMessenger.js.map"]},"metadata":{},"sourceType":"script"}