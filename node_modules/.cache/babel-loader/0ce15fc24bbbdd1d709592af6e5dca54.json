{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nvar ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport function requestLedgerDevice() {\n  return _requestLedgerDevice.apply(this, arguments);\n}\nfunction _requestLedgerDevice() {\n  _requestLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var device;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return navigator.usb.requestDevice({\n              filters: ledgerDevices\n            });\n          case 2:\n            device = _context.sent;\n            return _context.abrupt(\"return\", device);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestLedgerDevice.apply(this, arguments);\n}\nexport function getLedgerDevices() {\n  return _getLedgerDevices.apply(this, arguments);\n}\nfunction _getLedgerDevices() {\n  _getLedgerDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var devices;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return navigator.usb.getDevices();\n          case 2:\n            devices = _context2.sent;\n            return _context2.abrupt(\"return\", devices.filter(function (d) {\n              return d.vendorId === ledgerUSBVendorId;\n            }));\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getLedgerDevices.apply(this, arguments);\n}\nexport function getFirstLedgerDevice() {\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\nfunction _getFirstLedgerDevice() {\n  _getFirstLedgerDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var existingDevices;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getLedgerDevices();\n          case 2:\n            existingDevices = _context3.sent;\n            if (!(existingDevices.length > 0)) {\n              _context3.next = 5;\n              break;\n            }\n            return _context3.abrupt(\"return\", existingDevices[0]);\n          case 5:\n            return _context3.abrupt(\"return\", requestLedgerDevice());\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\nexport var isSupported = function isSupported() {\n  return Promise.resolve(!!navigator &&\n  // $FlowFixMe\n  !!navigator.usb && typeof navigator.usb.getDevices === \"function\");\n};","map":{"version":3,"sources":["../src/webusb.js"],"names":["ledgerUSBVendorId","ledgerDevices","vendorId","requestLedgerDevice","device","usb","requestDevice","filters","getLedgerDevices","devices","navigator","getDevices","filter","d","getFirstLedgerDevice","existingDevices","length","isSupported","Promise","resolve"],"mappings":";;AACA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,IAAMC,aAAa,GAAG,CAAC;EAAEC,QAAQ,EAAEF;AAAZ,CAAD,CAAtB;AAEA,gBAAsBG,mBAAf;EAAA;AAAA;AAIN;EAAA,kFAJM;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAEgB,SAAS,CAACE,GAAV,CAAcC,aAAd,CAA4B;cAAEC,OAAO,EAAEN;YAAX,CAA5B,CAArB;UAAA;YAAMG,MAAM;YAAA,iCACLA,MAAP;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACD;EAAA;AAAA;AAED,gBAAsBI,gBAAf;EAAA;AAAA;AAIN;EAAA,+EAJM;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAEiBE,SAAS,CAACL,GAAVK,CAAcC,UAAdD,EAAtB;UAAA;YAAMD,OAAO;YAAA,kCACNA,OAAO,CAACG,MAARH,CAAgBI,UAAAA,CAAD;cAAA,OAAOA,CAAC,CAACX,QAAFW,KAAeb,iBAArCS;YAAAA,EAAP;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACD;EAAA;AAAA;AAED,gBAAsBK,oBAAf;EAAA;AAAA;AAIN;EAAA,mFAJM;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACyBN,gBAAgB,EAA9C;UAAA;YAAMO,eAAe;YAAA,MACjBA,eAAe,CAACC,MAAhBD,GAAyB,CAA7B;cAAA;cAAA;YAAA;YAAA,kCAAuCA,eAAe,CAAC,CAAD,CAAtB;UAAA;YAAA,kCACzBZ,mBAAmB,EAA1B;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACD;EAAA;AAAA;AAED,OAAO,IAAMc,WAAW,GAAG,SAAdA,WAAW;EAAA,OACtBC,OAAO,CAACC,OAARD,CACE,CAAC,CAACR,SAAF;EACE;EACA,CAAC,CAACA,SAAS,CAACL,GAFd,IAGE,OAAOK,SAAS,CAACL,GAAVK,CAAcC,UAArB,KAAoC,UAJxCO,CADK;AAAA","sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}