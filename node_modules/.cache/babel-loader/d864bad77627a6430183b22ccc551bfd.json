{"ast":null,"code":"const {\n  Cell\n} = require(\"../boc\");\nconst {\n  Address,\n  BN,\n  bytesToHex\n} = require(\"../utils\");\nconst {\n  Contract\n} = require(\"../contract\");\nclass AppTon {\n  /**\n   * @param transport {Transport} @ledgerhq/hw-transport\n   * @param ton   {TonWeb}\n   */\n  constructor(transport, ton) {\n    this.transport = transport;\n    this.ton = ton;\n    this.ADDRESS_FORMAT_HEX = 0;\n    this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n    this.ADDRESS_FORMAT_URL_SAFE = 2;\n    this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n    this.ADDRESS_FORMAT_TEST_ONLY = 8;\n\n    // todo: узнать зачем вызывается decorateAppAPIMethods\n    // const scrambleKey = \"w0w\";\n    // transport.decorateAppAPIMethods(\n    //     this,\n    //     [\n    //         \"getAppConfiguration\",\n    //         \"getAddress\",\n    //         \"sign\",\n    //         \"signTransfer\",\n    //     ],\n    //     scrambleKey\n    // );\n  }\n\n  /***\n   * Get App version\n   * @return {{version: string}}\n   */\n  async getAppConfiguration() {\n    const response = await this.transport.send(0xe0, 0x01, 0x00, 0x00);\n    return {\n      version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n    };\n  }\n\n  /**\n   * This command returns a public key for the given account number\n   * @param accountNumber {number}\n   * @param isDisplay {boolean} display public key and confirm before returning\n   * @return {{publicKey: Uint8Array}}\n   */\n  async getPublicKey(accountNumber, isDisplay) {\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32BE(accountNumber);\n    const response = await this.transport.send(0xe0, 0x02, isDisplay ? 0x01 : 0x00, 0x00, buffer);\n    const len = response[0];\n    const publicKey = new Uint8Array(response.slice(1, 1 + len));\n    return {\n      publicKey\n    };\n  }\n\n  /**\n   * This command returns a wallet v3R1 address for the given account number\n   * @param accountNumber {number}\n   * @param isDisplay {boolean} display address and confirm before returning\n   * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n   * @return {{address: Address}}\n   */\n  async getAddress(accountNumber, isDisplay, addressFormat) {\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32BE(accountNumber);\n    const response = await this.transport.send(0xe0, 0x05, isDisplay ? 0x01 : 0x00, addressFormat, buffer);\n    const len = response[0];\n    const addressHex = new Uint8Array(response.slice(1, 1 + len));\n    const address = new Address('0:' + bytesToHex(addressHex));\n    return {\n      address\n    };\n  }\n\n  /**\n   * Sign a bytes\n   * @param accountNumber {number}\n   * @param buffer    {Buffer}\n   * @return {{signature: Buffer}}\n   */\n  async sign(accountNumber, buffer) {\n    const accountNumberBuffer = Buffer.alloc(4);\n    accountNumberBuffer.writeInt32BE(accountNumber);\n    const signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n    const response = await this.transport.send(0xe0, 0x03, 0x00, 0x00, signBuffer);\n    const len = response[0];\n    const signature = response.slice(1, 1 + len);\n    return {\n      signature\n    };\n  }\n\n  /**\n   * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n   * if seqno === 0 it will be deploy wallet + transfer coins message\n   * @param accountNumber {number}\n   * @param wallet {WalletContract}  Sender wallet\n   * @param toAddress {String | Address}  Destination address in any format\n   * @param amount    {BN | number}  Transfer value in nanograms\n   * @param seqno {number}\n   * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n   * @return\n   */\n  async transfer(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n    const sendMode = 3;\n    const query = await wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n    const accountNumberBuffer = Buffer.alloc(4);\n    accountNumberBuffer.writeInt32BE(accountNumber);\n    const msgBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(await query.signingMessage.toBoc())]);\n    const response = await this.transport.send(0xe0, 0x04, addressFormat, 0x00, msgBuffer);\n    const len = response[0];\n    const signatureBuffer = response.slice(1, 1 + len);\n    const signature = new Uint8Array(signatureBuffer);\n    const body = new Cell();\n    body.bits.writeBytes(signature);\n    body.writeCell(query.signingMessage);\n    let stateInit = null,\n      code = null,\n      data = null;\n    if (seqno === 0) {\n      const deploy = await wallet.createStateInit();\n      stateInit = deploy.stateInit;\n      code = deploy.code;\n      data = deploy.data;\n    }\n    const selfAddress = await wallet.getAddress();\n    const header = Contract.createExternalMessageHeader(selfAddress);\n    const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n    const resultPromise = new Promise(resolve => {\n      resolve({\n        address: selfAddress,\n        message: resultMessage,\n        // old wallet_send_generate_external_message\n\n        body: body,\n        signature: signature,\n        signingMessage: query.signingMessage,\n        stateInit,\n        code,\n        data\n      });\n    });\n    return Contract.createMethod(this.ton.provider, resultPromise);\n  }\n}\nmodule.exports = AppTon;","map":{"version":3,"names":["Cell","require","Address","BN","bytesToHex","Contract","AppTon","constructor","transport","ton","ADDRESS_FORMAT_HEX","ADDRESS_FORMAT_USER_FRIENDLY","ADDRESS_FORMAT_URL_SAFE","ADDRESS_FORMAT_BOUNCEABLE","ADDRESS_FORMAT_TEST_ONLY","getAppConfiguration","response","send","version","getPublicKey","accountNumber","isDisplay","buffer","Buffer","alloc","writeInt32BE","len","publicKey","Uint8Array","slice","getAddress","addressFormat","addressHex","address","sign","accountNumberBuffer","signBuffer","concat","from","signature","transfer","wallet","toAddress","amount","seqno","sendMode","query","createTransferMessage","msgBuffer","signingMessage","toBoc","signatureBuffer","body","bits","writeBytes","writeCell","stateInit","code","data","deploy","createStateInit","selfAddress","header","createExternalMessageHeader","resultMessage","createCommonMsgInfo","resultPromise","Promise","resolve","message","createMethod","provider","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/ledger/AppTon.js"],"sourcesContent":["const {Cell} = require(\"../boc\");\nconst {Address, BN, bytesToHex} = require(\"../utils\");\nconst {Contract} = require(\"../contract\");\n\nclass AppTon {\n\n    /**\n     * @param transport {Transport} @ledgerhq/hw-transport\n     * @param ton   {TonWeb}\n     */\n    constructor(transport, ton) {\n        this.transport = transport;\n        this.ton = ton;\n\n        this.ADDRESS_FORMAT_HEX = 0;\n        this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n        this.ADDRESS_FORMAT_URL_SAFE = 2;\n        this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n        this.ADDRESS_FORMAT_TEST_ONLY = 8;\n\n        // todo: узнать зачем вызывается decorateAppAPIMethods\n        // const scrambleKey = \"w0w\";\n        // transport.decorateAppAPIMethods(\n        //     this,\n        //     [\n        //         \"getAppConfiguration\",\n        //         \"getAddress\",\n        //         \"sign\",\n        //         \"signTransfer\",\n        //     ],\n        //     scrambleKey\n        // );\n    }\n\n    /***\n     * Get App version\n     * @return {{version: string}}\n     */\n    async getAppConfiguration() {\n        const response = await this.transport.send(0xe0, 0x01, 0x00, 0x00);\n        return {\n            version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n        };\n    }\n\n    /**\n     * This command returns a public key for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display public key and confirm before returning\n     * @return {{publicKey: Uint8Array}}\n     */\n    async getPublicKey(accountNumber, isDisplay) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x02,\n                isDisplay ? 0x01 : 0x00,\n                0x00,\n                buffer\n            );\n        const len = response[0];\n        const publicKey = new Uint8Array(response.slice(1, 1 + len));\n        return {publicKey};\n    }\n\n    /**\n     * This command returns a wallet v3R1 address for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display address and confirm before returning\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return {{address: Address}}\n     */\n    async getAddress(accountNumber, isDisplay, addressFormat) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x05,\n                isDisplay ? 0x01 : 0x00,\n                addressFormat,\n                buffer\n            );\n        const len = response[0];\n        const addressHex = new Uint8Array(response.slice(1, 1 + len));\n        const address = new Address('0:' + bytesToHex(addressHex));\n        return {address};\n    }\n\n    /**\n     * Sign a bytes\n     * @param accountNumber {number}\n     * @param buffer    {Buffer}\n     * @return {{signature: Buffer}}\n     */\n    async sign(accountNumber, buffer) {\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x03,\n                0x00,\n                0x00,\n                signBuffer\n            );\n\n        const len = response[0];\n        const signature = response.slice(1, 1 + len);\n        return {signature};\n    }\n\n    /**\n     * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n     * if seqno === 0 it will be deploy wallet + transfer coins message\n     * @param accountNumber {number}\n     * @param wallet {WalletContract}  Sender wallet\n     * @param toAddress {String | Address}  Destination address in any format\n     * @param amount    {BN | number}  Transfer value in nanograms\n     * @param seqno {number}\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return\n     */\n    async transfer(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n        const sendMode = 3;\n\n        const query = await wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const msgBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(await query.signingMessage.toBoc())]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x04,\n                addressFormat,\n                0x00,\n                msgBuffer\n            );\n\n        const len = response[0];\n        const signatureBuffer = response.slice(1, 1 + len);\n        const signature = new Uint8Array(signatureBuffer);\n\n        const body = new Cell();\n        body.bits.writeBytes(signature);\n        body.writeCell(query.signingMessage);\n\n        let stateInit = null, code = null, data = null;\n\n        if (seqno === 0) {\n            const deploy = await wallet.createStateInit();\n            stateInit = deploy.stateInit;\n            code = deploy.code;\n            data = deploy.data;\n        }\n\n        const selfAddress = await wallet.getAddress();\n        const header = Contract.createExternalMessageHeader(selfAddress);\n        const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n\n        const resultPromise = new Promise(resolve => {\n            resolve({\n                address: selfAddress,\n                message: resultMessage, // old wallet_send_generate_external_message\n\n                body: body,\n                signature: signature,\n                signingMessage: query.signingMessage,\n\n                stateInit,\n                code,\n                data,\n            });\n        });\n\n        return Contract.createMethod(\n            this.ton.provider,\n            resultPromise\n        );\n    }\n}\n\nmodule.exports = AppTon;"],"mappings":"AAAA,MAAM;EAACA;AAAI,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAACC,OAAO;EAAEC,EAAE;EAAEC;AAAU,CAAC,GAAGH,OAAO,CAAC,UAAU,CAAC;AACrD,MAAM;EAACI;AAAQ,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMK,MAAM,CAAC;EAET;AACJ;AACA;AACA;EACIC,WAAW,CAACC,SAAS,EAAEC,GAAG,EAAE;IACxB,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,GAAG,GAAGA,GAAG;IAEd,IAAI,CAACC,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACC,4BAA4B,GAAG,CAAC;IACrC,IAAI,CAACC,uBAAuB,GAAG,CAAC;IAChC,IAAI,CAACC,yBAAyB,GAAG,CAAC;IAClC,IAAI,CAACC,wBAAwB,GAAG,CAAC;;IAEjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEA;AACJ;AACA;AACA;EACI,MAAMC,mBAAmB,GAAG;IACxB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAClE,OAAO;MACHC,OAAO,EAAE,EAAE,GAAGF,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMG,YAAY,CAACC,aAAa,EAAEC,SAAS,EAAE;IACzC,MAAMC,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BF,MAAM,CAACG,YAAY,CAACL,aAAa,CAAC;IAElC,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACR,SAAS,CAChCS,IAAI,CACD,IAAI,EACJ,IAAI,EACJI,SAAS,GAAG,IAAI,GAAG,IAAI,EACvB,IAAI,EACJC,MAAM,CACT;IACL,MAAMI,GAAG,GAAGV,QAAQ,CAAC,CAAC,CAAC;IACvB,MAAMW,SAAS,GAAG,IAAIC,UAAU,CAACZ,QAAQ,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGH,GAAG,CAAC,CAAC;IAC5D,OAAO;MAACC;IAAS,CAAC;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,UAAU,CAACV,aAAa,EAAEC,SAAS,EAAEU,aAAa,EAAE;IACtD,MAAMT,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BF,MAAM,CAACG,YAAY,CAACL,aAAa,CAAC;IAElC,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACR,SAAS,CAChCS,IAAI,CACD,IAAI,EACJ,IAAI,EACJI,SAAS,GAAG,IAAI,GAAG,IAAI,EACvBU,aAAa,EACbT,MAAM,CACT;IACL,MAAMI,GAAG,GAAGV,QAAQ,CAAC,CAAC,CAAC;IACvB,MAAMgB,UAAU,GAAG,IAAIJ,UAAU,CAACZ,QAAQ,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGH,GAAG,CAAC,CAAC;IAC7D,MAAMO,OAAO,GAAG,IAAI/B,OAAO,CAAC,IAAI,GAAGE,UAAU,CAAC4B,UAAU,CAAC,CAAC;IAC1D,OAAO;MAACC;IAAO,CAAC;EACpB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,IAAI,CAACd,aAAa,EAAEE,MAAM,EAAE;IAC9B,MAAMa,mBAAmB,GAAGZ,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3CW,mBAAmB,CAACV,YAAY,CAACL,aAAa,CAAC;IAC/C,MAAMgB,UAAU,GAAGb,MAAM,CAACc,MAAM,CAAC,CAACF,mBAAmB,EAAEZ,MAAM,CAACe,IAAI,CAAChB,MAAM,CAAC,CAAC,CAAC;IAE5E,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAACR,SAAS,CAChCS,IAAI,CACD,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJmB,UAAU,CACb;IAEL,MAAMV,GAAG,GAAGV,QAAQ,CAAC,CAAC,CAAC;IACvB,MAAMuB,SAAS,GAAGvB,QAAQ,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGH,GAAG,CAAC;IAC5C,OAAO;MAACa;IAAS,CAAC;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,QAAQ,CAACpB,aAAa,EAAEqB,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEb,aAAa,EAAE;IAC3E,MAAMc,QAAQ,GAAG,CAAC;IAElB,MAAMC,KAAK,GAAG,MAAML,MAAM,CAACM,qBAAqB,CAAC,IAAI,EAAEL,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAE,IAAI,EAAEC,QAAQ,EAAE,IAAI,CAAC;IAEtG,MAAMV,mBAAmB,GAAGZ,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3CW,mBAAmB,CAACV,YAAY,CAACL,aAAa,CAAC;IAC/C,MAAM4B,SAAS,GAAGzB,MAAM,CAACc,MAAM,CAAC,CAACF,mBAAmB,EAAEZ,MAAM,CAACe,IAAI,CAAC,MAAMQ,KAAK,CAACG,cAAc,CAACC,KAAK,EAAE,CAAC,CAAC,CAAC;IAEvG,MAAMlC,QAAQ,GAAG,MAAM,IAAI,CAACR,SAAS,CAChCS,IAAI,CACD,IAAI,EACJ,IAAI,EACJc,aAAa,EACb,IAAI,EACJiB,SAAS,CACZ;IAEL,MAAMtB,GAAG,GAAGV,QAAQ,CAAC,CAAC,CAAC;IACvB,MAAMmC,eAAe,GAAGnC,QAAQ,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGH,GAAG,CAAC;IAClD,MAAMa,SAAS,GAAG,IAAIX,UAAU,CAACuB,eAAe,CAAC;IAEjD,MAAMC,IAAI,GAAG,IAAIpD,IAAI,EAAE;IACvBoD,IAAI,CAACC,IAAI,CAACC,UAAU,CAACf,SAAS,CAAC;IAC/Ba,IAAI,CAACG,SAAS,CAACT,KAAK,CAACG,cAAc,CAAC;IAEpC,IAAIO,SAAS,GAAG,IAAI;MAAEC,IAAI,GAAG,IAAI;MAAEC,IAAI,GAAG,IAAI;IAE9C,IAAId,KAAK,KAAK,CAAC,EAAE;MACb,MAAMe,MAAM,GAAG,MAAMlB,MAAM,CAACmB,eAAe,EAAE;MAC7CJ,SAAS,GAAGG,MAAM,CAACH,SAAS;MAC5BC,IAAI,GAAGE,MAAM,CAACF,IAAI;MAClBC,IAAI,GAAGC,MAAM,CAACD,IAAI;IACtB;IAEA,MAAMG,WAAW,GAAG,MAAMpB,MAAM,CAACX,UAAU,EAAE;IAC7C,MAAMgC,MAAM,GAAGzD,QAAQ,CAAC0D,2BAA2B,CAACF,WAAW,CAAC;IAChE,MAAMG,aAAa,GAAG3D,QAAQ,CAAC4D,mBAAmB,CAACH,MAAM,EAAEN,SAAS,EAAEJ,IAAI,CAAC;IAE3E,MAAMc,aAAa,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAI;MACzCA,OAAO,CAAC;QACJnC,OAAO,EAAE4B,WAAW;QACpBQ,OAAO,EAAEL,aAAa;QAAE;;QAExBZ,IAAI,EAAEA,IAAI;QACVb,SAAS,EAAEA,SAAS;QACpBU,cAAc,EAAEH,KAAK,CAACG,cAAc;QAEpCO,SAAS;QACTC,IAAI;QACJC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAOrD,QAAQ,CAACiE,YAAY,CACxB,IAAI,CAAC7D,GAAG,CAAC8D,QAAQ,EACjBL,aAAa,CAChB;EACL;AACJ;AAEAM,MAAM,CAACC,OAAO,GAAGnE,MAAM"},"metadata":{},"sourceType":"script"}