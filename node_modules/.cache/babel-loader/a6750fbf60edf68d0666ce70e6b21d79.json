{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reporter = exports.formatValidationErrors = exports.formatValidationError = exports.TYPE_MAX_LEN = void 0;\n/**\n * An [io-ts Reporter](https://gcanti.github.io/io-ts/modules/Reporter.ts.html#reporter-interface).\n *\n * @example\n *\n * import * as t from 'io-ts';\n * import Reporter from 'io-ts-reporters';\n *\n * const User = t.interface({ name: t.string });\n *\n * assert.deepEqual(\n *   Reporter.report(User.decode({ nam: 'Jane' })),\n *   ['Expecting string at name but instead got: undefined'],\n * )\n * assert.deepEqual( Reporter.report(User.decode({ name: 'Jane' })), [])\n *\n * @since 1.2.0\n */\nvar A = require(\"fp-ts/Array\");\nvar E = require(\"fp-ts/Either\");\nvar NEA = require(\"fp-ts/NonEmptyArray\");\nvar O = require(\"fp-ts/Option\");\nvar R = require(\"fp-ts/Record\");\nvar pipeable_1 = require(\"fp-ts/pipeable\");\nvar t = require(\"io-ts\");\nvar utils_1 = require(\"./utils\");\nvar isUnionType = function (_a) {\n  var type = _a.type;\n  return type instanceof t.UnionType;\n};\nvar jsToString = function (value) {\n  return value === undefined ? 'undefined' : JSON.stringify(value);\n};\nvar keyPath = function (ctx) {\n  // The context entry with an empty key is the original\n  // type (\"default context\"), not a type error.\n  return ctx.map(function (c) {\n    return c.key;\n  }).filter(Boolean).join('.');\n};\n// The actual error is last in context\nvar getErrorFromCtx = function (validation) {\n  // https://github.com/gcanti/fp-ts/pull/544/files\n  return A.last(validation.context);\n};\nvar getValidationContext = function (validation) {\n  // https://github.com/gcanti/fp-ts/pull/544/files\n  return validation.context;\n};\n/**\n * @category internals\n * @since 1.2.1\n */\nexports.TYPE_MAX_LEN = 160; // Two lines of 80-col text\nvar truncateType = function (type, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.truncateLongTypes,\n    truncateLongTypes = _a === void 0 ? true : _a;\n  if (truncateLongTypes && type.length > exports.TYPE_MAX_LEN) {\n    return type.slice(0, exports.TYPE_MAX_LEN - 3) + \"...\";\n  }\n  return type;\n};\nvar errorMessageSimple = function (expectedType, path, error, options) {\n  // https://github.com/elm-lang/core/blob/18c9e84e975ed22649888bfad15d1efdb0128ab2/src/Native/Json.js#L199\n  return [\"Expecting \" + truncateType(expectedType, options), path === '' ? '' : \"at \" + path, \"but instead got: \" + jsToString(error.value), error.message ? \"(\" + error.message + \")\" : ''].filter(Boolean).join(' ');\n};\nvar errorMessageUnion = function (expectedTypes, path, value, options) {\n  // https://github.com/elm-lang/core/blob/18c9e84e975ed22649888bfad15d1efdb0128ab2/src/Native/Json.js#L199\n  return ['Expecting one of:\\n', expectedTypes.map(function (type) {\n    return \"    \" + truncateType(type, options);\n  }).join('\\n'), path === '' ? '\\n' : \"\\nat \" + path + \" \", \"but instead got: \" + jsToString(value)].filter(Boolean).join('');\n};\n// Find the union type in the list of ContextEntry\n// The next ContextEntry should be the type of this branch of the union\nvar findExpectedType = function (ctx) {\n  return pipeable_1.pipe(ctx, A.findIndex(isUnionType), O.chain(function (n) {\n    return A.lookup(n + 1, ctx);\n  }));\n};\nvar formatValidationErrorOfUnion = function (path, errors, options) {\n  var expectedTypes = pipeable_1.pipe(errors, A.map(getValidationContext), A.map(findExpectedType), A.compact);\n  var value = pipeable_1.pipe(expectedTypes, A.head, O.map(function (v) {\n    return v.actual;\n  }), O.getOrElse(function () {\n    return undefined;\n  }));\n  var expected = expectedTypes.map(function (_a) {\n    var type = _a.type;\n    return type.name;\n  });\n  return expected.length > 0 ? O.some(errorMessageUnion(expected, path, value, options)) : O.none;\n};\nvar formatValidationCommonError = function (path, error, options) {\n  return pipeable_1.pipe(error, getErrorFromCtx, O.map(function (errorContext) {\n    return errorMessageSimple(errorContext.type.name, path, error, options);\n  }));\n};\nvar groupByKey = NEA.groupBy(function (error) {\n  return pipeable_1.pipe(error.context, utils_1.takeUntil(isUnionType), keyPath);\n});\nvar format = function (path, errors, options) {\n  return NEA.tail(errors).length > 0 ? formatValidationErrorOfUnion(path, errors, options) : formatValidationCommonError(path, NEA.head(errors), options);\n};\n/**\n * Format a single validation error.\n *\n * @category formatters\n * @since 1.0.0\n */\nvar formatValidationError = function (error, options) {\n  return formatValidationCommonError(keyPath(error.context), error, options);\n};\nexports.formatValidationError = formatValidationError;\n/**\n * Format validation errors (`t.Errors`).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import * as t from 'io-ts'\n * import { formatValidationErrors } from 'io-ts-reporters'\n *\n * const result = t.string.decode(123)\n *\n * assert.deepEqual(\n *   E.mapLeft(formatValidationErrors)(result),\n *   E.left(['Expecting string but instead got: 123'])\n * )\n *\n * @category formatters\n * @since 1.2.0\n */\nvar formatValidationErrors = function (errors, options) {\n  return pipeable_1.pipe(errors, groupByKey, R.mapWithIndex(function (path, errors) {\n    return format(path, errors, options);\n  }), R.compact, R.toArray, A.map(function (_a) {\n    var _key = _a[0],\n      error = _a[1];\n    return error;\n  }));\n};\nexports.formatValidationErrors = formatValidationErrors;\n/**\n * Deprecated, use the default export instead.\n *\n * @category deprecated\n * @deprecated\n * @since 1.0.0\n */\nvar reporter = function (validation, options) {\n  return pipeable_1.pipe(validation, E.mapLeft(function (errors) {\n    return exports.formatValidationErrors(errors, options);\n  }), E.fold(function (errors) {\n    return errors;\n  }, function () {\n    return [];\n  }));\n};\nexports.reporter = reporter;\nvar prettyReporter = {\n  report: exports.reporter\n};\nexports.default = prettyReporter;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reporter = exports.formatValidationErrors = exports.formatValidationError = exports.TYPE_MAX_LEN = void 0;\n/**\n * An [io-ts Reporter](https://gcanti.github.io/io-ts/modules/Reporter.ts.html#reporter-interface).\n *\n * @example\n *\n * import * as t from 'io-ts';\n * import Reporter from 'io-ts-reporters';\n *\n * const User = t.interface({ name: t.string });\n *\n * assert.deepEqual(\n *   Reporter.report(User.decode({ nam: 'Jane' })),\n *   ['Expecting string at name but instead got: undefined'],\n * )\n * assert.deepEqual( Reporter.report(User.decode({ name: 'Jane' })), [])\n *\n * @since 1.2.0\n */\nvar A = require(\"fp-ts/Array\");\nvar E = require(\"fp-ts/Either\");\nvar NEA = require(\"fp-ts/NonEmptyArray\");\nvar O = require(\"fp-ts/Option\");\nvar R = require(\"fp-ts/Record\");\nvar pipeable_1 = require(\"fp-ts/pipeable\");\nvar t = require(\"io-ts\");\nvar utils_1 = require(\"./utils\");\nvar isUnionType = function (_a) {\n    var type = _a.type;\n    return type instanceof t.UnionType;\n};\nvar jsToString = function (value) {\n    return value === undefined ? 'undefined' : JSON.stringify(value);\n};\nvar keyPath = function (ctx) {\n    // The context entry with an empty key is the original\n    // type (\"default context\"), not a type error.\n    return ctx\n        .map(function (c) { return c.key; })\n        .filter(Boolean)\n        .join('.');\n};\n// The actual error is last in context\nvar getErrorFromCtx = function (validation) {\n    // https://github.com/gcanti/fp-ts/pull/544/files\n    return A.last(validation.context);\n};\nvar getValidationContext = function (validation) {\n    // https://github.com/gcanti/fp-ts/pull/544/files\n    return validation.context;\n};\n/**\n * @category internals\n * @since 1.2.1\n */\nexports.TYPE_MAX_LEN = 160; // Two lines of 80-col text\nvar truncateType = function (type, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.truncateLongTypes, truncateLongTypes = _a === void 0 ? true : _a;\n    if (truncateLongTypes && type.length > exports.TYPE_MAX_LEN) {\n        return type.slice(0, exports.TYPE_MAX_LEN - 3) + \"...\";\n    }\n    return type;\n};\nvar errorMessageSimple = function (expectedType, path, error, options) {\n    // https://github.com/elm-lang/core/blob/18c9e84e975ed22649888bfad15d1efdb0128ab2/src/Native/Json.js#L199\n    return [\n        \"Expecting \" + truncateType(expectedType, options),\n        path === '' ? '' : \"at \" + path,\n        \"but instead got: \" + jsToString(error.value),\n        error.message ? \"(\" + error.message + \")\" : '',\n    ]\n        .filter(Boolean)\n        .join(' ');\n};\nvar errorMessageUnion = function (expectedTypes, path, value, options) {\n    // https://github.com/elm-lang/core/blob/18c9e84e975ed22649888bfad15d1efdb0128ab2/src/Native/Json.js#L199\n    return [\n        'Expecting one of:\\n',\n        expectedTypes\n            .map(function (type) { return \"    \" + truncateType(type, options); })\n            .join('\\n'),\n        path === '' ? '\\n' : \"\\nat \" + path + \" \",\n        \"but instead got: \" + jsToString(value),\n    ]\n        .filter(Boolean)\n        .join('');\n};\n// Find the union type in the list of ContextEntry\n// The next ContextEntry should be the type of this branch of the union\nvar findExpectedType = function (ctx) {\n    return pipeable_1.pipe(ctx, A.findIndex(isUnionType), O.chain(function (n) { return A.lookup(n + 1, ctx); }));\n};\nvar formatValidationErrorOfUnion = function (path, errors, options) {\n    var expectedTypes = pipeable_1.pipe(errors, A.map(getValidationContext), A.map(findExpectedType), A.compact);\n    var value = pipeable_1.pipe(expectedTypes, A.head, O.map(function (v) { return v.actual; }), O.getOrElse(function () { return undefined; }));\n    var expected = expectedTypes.map(function (_a) {\n        var type = _a.type;\n        return type.name;\n    });\n    return expected.length > 0\n        ? O.some(errorMessageUnion(expected, path, value, options))\n        : O.none;\n};\nvar formatValidationCommonError = function (path, error, options) {\n    return pipeable_1.pipe(error, getErrorFromCtx, O.map(function (errorContext) {\n        return errorMessageSimple(errorContext.type.name, path, error, options);\n    }));\n};\nvar groupByKey = NEA.groupBy(function (error) {\n    return pipeable_1.pipe(error.context, utils_1.takeUntil(isUnionType), keyPath);\n});\nvar format = function (path, errors, options) {\n    return NEA.tail(errors).length > 0\n        ? formatValidationErrorOfUnion(path, errors, options)\n        : formatValidationCommonError(path, NEA.head(errors), options);\n};\n/**\n * Format a single validation error.\n *\n * @category formatters\n * @since 1.0.0\n */\nvar formatValidationError = function (error, options) { return formatValidationCommonError(keyPath(error.context), error, options); };\nexports.formatValidationError = formatValidationError;\n/**\n * Format validation errors (`t.Errors`).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import * as t from 'io-ts'\n * import { formatValidationErrors } from 'io-ts-reporters'\n *\n * const result = t.string.decode(123)\n *\n * assert.deepEqual(\n *   E.mapLeft(formatValidationErrors)(result),\n *   E.left(['Expecting string but instead got: 123'])\n * )\n *\n * @category formatters\n * @since 1.2.0\n */\nvar formatValidationErrors = function (errors, options) {\n    return pipeable_1.pipe(errors, groupByKey, R.mapWithIndex(function (path, errors) { return format(path, errors, options); }), R.compact, R.toArray, A.map(function (_a) {\n        var _key = _a[0], error = _a[1];\n        return error;\n    }));\n};\nexports.formatValidationErrors = formatValidationErrors;\n/**\n * Deprecated, use the default export instead.\n *\n * @category deprecated\n * @deprecated\n * @since 1.0.0\n */\nvar reporter = function (validation, options) {\n    return pipeable_1.pipe(validation, E.mapLeft(function (errors) { return exports.formatValidationErrors(errors, options); }), E.fold(function (errors) { return errors; }, function () { return []; }));\n};\nexports.reporter = reporter;\nvar prettyReporter = { report: exports.reporter };\nexports.default = prettyReporter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}