{"ast":null,"code":"import{Cell}from\"ton\";var OFF_CHAIN_CONTENT_PREFIX=0x01;export function flattenSnakeCell(cell){try{var c=cell;var res=Buffer.alloc(0);while(c){var cs=c.beginParse();console.log(cs);var data=cs.readRemainingBytes();res=Buffer.concat([res,data]);c=c.refs[0];}return res;}catch(e){console.log(e);return null;}}function bufferToChunks(buff,chunkSize){var chunks=[];while(buff.byteLength>0){chunks.push(buff.slice(0,chunkSize));buff=buff.slice(chunkSize);}return chunks;}export function makeSnakeCell(data){var chunks=bufferToChunks(data,127);var rootCell=new Cell();var curCell=rootCell;for(var i=0;i<chunks.length;i++){var chunk=chunks[i];curCell.bits.writeBuffer(chunk);if(chunks[i+1]){var nextCell=new Cell();curCell.refs.push(nextCell);curCell=nextCell;}}return rootCell;}export function encodeOffChainContent(content){var data=Buffer.from(content);var offChainPrefix=Buffer.from([OFF_CHAIN_CONTENT_PREFIX]);data=Buffer.concat([offChainPrefix,data]);return makeSnakeCell(data);}export function decodeOffChainContent(content){console.log(content);var data=flattenSnakeCell(content);if(data){var prefix=data[0];if(prefix!==OFF_CHAIN_CONTENT_PREFIX){console.log(\"Unknown content prefix: \".concat(prefix.toString(16)));return\"\";}return data.slice(1).toString();}else{return\"\";}}","map":{"version":3,"names":["Cell","OFF_CHAIN_CONTENT_PREFIX","flattenSnakeCell","cell","c","res","Buffer","alloc","cs","beginParse","console","log","data","readRemainingBytes","concat","refs","e","bufferToChunks","buff","chunkSize","chunks","byteLength","push","slice","makeSnakeCell","rootCell","curCell","i","length","chunk","bits","writeBuffer","nextCell","encodeOffChainContent","content","from","offChainPrefix","decodeOffChainContent","prefix","toString"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/BOCcontent.ts"],"sourcesContent":["import { Cell } from \"ton\";\n\nconst OFF_CHAIN_CONTENT_PREFIX = 0x01;\n\nexport function flattenSnakeCell(cell: Cell) {\n\ttry {\n\t\tlet c: Cell | null = cell;\n\n\t\tlet res = Buffer.alloc(0);\n\n\t\twhile (c) {\n\t\t\tlet cs = c.beginParse();\n\t\t\tconsole.log(cs);\n\t\t\tlet data = cs.readRemainingBytes();\n\t\t\tres = Buffer.concat([res, data]);\n\t\t\tc = c.refs[0];\n\t\t}\n\n\t\treturn res;\n\t} catch (e) {\n\t\tconsole.log(e);\n\t\treturn null;\n\t}\n}\n\nfunction bufferToChunks(buff: Buffer, chunkSize: number) {\n\tlet chunks: Buffer[] = [];\n\twhile (buff.byteLength > 0) {\n\t\tchunks.push(buff.slice(0, chunkSize));\n\t\tbuff = buff.slice(chunkSize);\n\t}\n\treturn chunks;\n}\n\nexport function makeSnakeCell(data: Buffer) {\n\tlet chunks = bufferToChunks(data, 127);\n\tlet rootCell = new Cell();\n\tlet curCell = rootCell;\n\n\tfor (let i = 0; i < chunks.length; i++) {\n\t\tlet chunk = chunks[i];\n\n\t\tcurCell.bits.writeBuffer(chunk);\n\n\t\tif (chunks[i + 1]) {\n\t\t\tlet nextCell = new Cell();\n\t\t\tcurCell.refs.push(nextCell);\n\t\t\tcurCell = nextCell;\n\t\t}\n\t}\n\n\treturn rootCell;\n}\n\nexport function encodeOffChainContent(content: string) {\n\tlet data = Buffer.from(content);\n\tlet offChainPrefix = Buffer.from([OFF_CHAIN_CONTENT_PREFIX]);\n\tdata = Buffer.concat([offChainPrefix, data]);\n\treturn makeSnakeCell(data);\n}\n\nexport function decodeOffChainContent(content: Cell) {\n\tconsole.log(content);\n\tlet data = flattenSnakeCell(content);\n\n\tif (data) {\n\t\tlet prefix = data[0];\n\t\tif (prefix !== OFF_CHAIN_CONTENT_PREFIX) {\n\t\t\tconsole.log(`Unknown content prefix: ${prefix.toString(16)}`);\n\t\t\treturn \"\";\n\t\t}\n\t\treturn data.slice(1).toString();\n\t} else {\n\t\treturn \"\";\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}