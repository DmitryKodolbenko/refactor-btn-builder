{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchJson = void 0;\nvar http_errors_1 = __importDefault(require(\"http-errors\"));\nvar exponential_backoff_1 = __importDefault(require(\"./exponential-backoff\"));\nvar providers_1 = require(\"../providers\");\nvar errors_1 = require(\"./errors\");\nvar START_WAIT_TIME_MS = 1000;\nvar BACKOFF_MULTIPLIER = 1.5;\nvar RETRY_NUMBER = 10;\nfunction fetchJson(_x, _x2) {\n  return _fetchJson.apply(this, arguments);\n}\nfunction _fetchJson() {\n  _fetchJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(connectionInfoOrUrl, json) {\n    var connectionInfo, response;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            connectionInfo = {\n              url: null\n            };\n            if (typeof connectionInfoOrUrl === 'string') {\n              connectionInfo.url = connectionInfoOrUrl;\n            } else {\n              connectionInfo = connectionInfoOrUrl;\n            }\n            _context2.next = 4;\n            return exponential_backoff_1.default(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var _response;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return fetch(connectionInfo.url, {\n                        method: json ? 'POST' : 'GET',\n                        body: json ? json : undefined,\n                        headers: _objectSpread(_objectSpread({}, connectionInfo.headers), {}, {\n                          'Content-Type': 'application/json'\n                        })\n                      });\n                    case 3:\n                      _response = _context.sent;\n                      if (_response.ok) {\n                        _context.next = 14;\n                        break;\n                      }\n                      if (!(_response.status === 503)) {\n                        _context.next = 8;\n                        break;\n                      }\n                      errors_1.logWarning(\"Retrying HTTP request for \".concat(connectionInfo.url, \" as it's not available now\"));\n                      return _context.abrupt(\"return\", null);\n                    case 8:\n                      _context.t0 = http_errors_1;\n                      _context.t1 = _response.status;\n                      _context.next = 12;\n                      return _response.text();\n                    case 12:\n                      _context.t2 = _context.sent;\n                      throw _context.t0.default.call(_context.t0, _context.t1, _context.t2);\n                    case 14:\n                      return _context.abrupt(\"return\", _response);\n                    case 17:\n                      _context.prev = 17;\n                      _context.t3 = _context[\"catch\"](0);\n                      if (!(_context.t3.toString().includes('FetchError') || _context.t3.toString().includes('Failed to fetch'))) {\n                        _context.next = 22;\n                        break;\n                      }\n                      errors_1.logWarning(\"Retrying HTTP request for \".concat(connectionInfo.url, \" because of error: \").concat(_context.t3));\n                      return _context.abrupt(\"return\", null);\n                    case 22:\n                      throw _context.t3;\n                    case 23:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[0, 17]]);\n            })));\n          case 4:\n            response = _context2.sent;\n            if (response) {\n              _context2.next = 7;\n              break;\n            }\n            throw new providers_1.TypedError(\"Exceeded \".concat(RETRY_NUMBER, \" attempts for \").concat(connectionInfo.url, \".\"), 'RetriesExceeded');\n          case 7:\n            _context2.next = 9;\n            return response.json();\n          case 9:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchJson.apply(this, arguments);\n}\nexports.fetchJson = fetchJson;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetchJson","http_errors_1","require","exponential_backoff_1","providers_1","errors_1","START_WAIT_TIME_MS","BACKOFF_MULTIPLIER","RETRY_NUMBER","connectionInfoOrUrl","json","connectionInfo","url","default","fetch","method","body","undefined","headers","response","ok","status","logWarning","text","toString","includes","TypedError"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/utils/web.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchJson = void 0;\nconst http_errors_1 = __importDefault(require(\"http-errors\"));\nconst exponential_backoff_1 = __importDefault(require(\"./exponential-backoff\"));\nconst providers_1 = require(\"../providers\");\nconst errors_1 = require(\"./errors\");\nconst START_WAIT_TIME_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.5;\nconst RETRY_NUMBER = 10;\nasync function fetchJson(connectionInfoOrUrl, json) {\n    let connectionInfo = { url: null };\n    if (typeof (connectionInfoOrUrl) === 'string') {\n        connectionInfo.url = connectionInfoOrUrl;\n    }\n    else {\n        connectionInfo = connectionInfoOrUrl;\n    }\n    const response = await exponential_backoff_1.default(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, async () => {\n        try {\n            const response = await fetch(connectionInfo.url, {\n                method: json ? 'POST' : 'GET',\n                body: json ? json : undefined,\n                headers: { ...connectionInfo.headers, 'Content-Type': 'application/json' }\n            });\n            if (!response.ok) {\n                if (response.status === 503) {\n                    errors_1.logWarning(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);\n                    return null;\n                }\n                throw http_errors_1.default(response.status, await response.text());\n            }\n            return response;\n        }\n        catch (error) {\n            if (error.toString().includes('FetchError') || error.toString().includes('Failed to fetch')) {\n                errors_1.logWarning(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);\n                return null;\n            }\n            throw error;\n        }\n    });\n    if (!response) {\n        throw new providers_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, 'RetriesExceeded');\n    }\n    return await response.json();\n}\nexports.fetchJson = fetchJson;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}