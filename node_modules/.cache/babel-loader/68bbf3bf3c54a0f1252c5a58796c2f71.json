{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\nvar math_1 = require(\"@cosmjs/math\");\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nvar vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n  var address = input.address,\n    pubKey = input.pubKey,\n    accountNumber = input.accountNumber,\n    sequence = input.sequence;\n  var pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  var typeUrl = input.typeUrl,\n    value = input.value;\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        var baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        var _baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        (0, utils_1.assert)(_baseAccount);\n        return accountFromBaseAccount(_baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        var _baseAccount2 = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        (0, utils_1.assert)(_baseAccount2);\n        return accountFromBaseAccount(_baseAccount2);\n      }\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        var _baseAccount3 = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        (0, utils_1.assert)(_baseAccount3);\n        return accountFromBaseAccount(_baseAccount3);\n      }\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        var _baseAccount4 = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        (0, utils_1.assert)(_baseAccount4);\n        return accountFromBaseAccount(_baseAccount4);\n      }\n    default:\n      throw new Error(\"Unsupported type: '\".concat(typeUrl, \"'\"));\n  }\n}\nexports.accountFromAny = accountFromAny;","map":{"version":3,"sources":["../src/accounts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accountFromAny = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n    return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n    const { address, pubKey, accountNumber, sequence } = input;\n    const pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n    return {\n        address: address,\n        pubkey: pubkey,\n        accountNumber: uint64FromProto(accountNumber).toNumber(),\n        sequence: uint64FromProto(sequence).toNumber(),\n    };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const { typeUrl, value } = input;\n    switch (typeUrl) {\n        // auth\n        case \"/cosmos.auth.v1beta1.BaseAccount\":\n            return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n        case \"/cosmos.auth.v1beta1.ModuleAccount\": {\n            const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n            (0, utils_1.assert)(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        // vesting\n        case \"/cosmos.vesting.v1beta1.BaseVestingAccount\": {\n            const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n            (0, utils_1.assert)(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\": {\n            const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n            (0, utils_1.assert)(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\": {\n            const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n            (0, utils_1.assert)(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\": {\n            const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n            (0, utils_1.assert)(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        default:\n            throw new Error(`Unsupported type: '${typeUrl}'`);\n    }\n}\nexports.accountFromAny = accountFromAny;\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"script"}