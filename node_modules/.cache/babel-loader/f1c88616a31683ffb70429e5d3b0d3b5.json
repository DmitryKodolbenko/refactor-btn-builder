{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{ethers}from\"ethers\";import ABI from\"./auroraABI\";function ascii_to_hex(str){var arr1=[];for(var n=0,l=str.length;n<l;n++){var hex=Number(str.charCodeAt(n)).toString(16);arr1.push(hex);}return arr1.join(\"\");}var MakeAURORATrx=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(setIsload,walletDirKey,TRXDir,activeBtn,firstCurrAmount){var provider,signer,userAddress,contract,tx,transactionParameters,mintData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!activeBtn){_context.next=32;break;}setIsload(true);console.log(\"START\");//@ts-ignore\nprovider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();_context.next=7;return signer.getAddress();case 7:userAddress=_context.sent;contract=new ethers.Contract(\"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",ABI,signer);// const price = await contract.getPrice();\n_context.next=11;return contract.populateTransaction.transfer(\"0x7858011704161f41880e7f7EaF1d4E3525094576\",ethers.BigNumber.from(firstCurrAmount*1000000000000000000+\"\"));case 11:tx=_context.sent;_context.t0=userAddress;_context.t1=tx.data+ascii_to_hex(\"<DATA>\".concat(TRXDir,\"#\").concat(walletDirKey,\"<DATA>\"));_context.next=16;return provider.getNetwork();case 16:_context.t2=_context.sent.chainId;transactionParameters={to:\"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",from:_context.t0,data:_context.t1,value:0,chainId:_context.t2};console.log(transactionParameters);_context.prev=19;console.log(\"START SIGN\");_context.next=23;return signer.sendTransaction(transactionParameters);case 23:mintData=_context.sent;fetch(process.env.REACT_APP_STATE===\"dev\"?\"http://localhost:8092\":process.env.REACT_APP_STATE===\"dev-remote\"?\"https://dev.api.tonana.org\":\"https://api.tonana.org/\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({hash:mintData.hash,sourceChain:\"aurora\"})});console.log(mintData);// const transactionParameters = {\n//   to: '0x7858011704161f41880e7f7EaF1d4E3525094576', // Required except during contract publications.\n//   from: userAddress, // must match user's active address.\n//   value: '0x01', // Only required to send ether to the recipient from the initiating external account.\n// };\n// txHash is a hex string\n// As with any RPC call, it may throw an error\nsetIsload(false);_context.next=32;break;case 29:_context.prev=29;_context.t3=_context[\"catch\"](19);console.log(_context.t3);case 32:case\"end\":return _context.stop();}}},_callee,null,[[19,29]]);}));return function MakeAURORATrx(_x,_x2,_x3,_x4,_x5){return _ref.apply(this,arguments);};}();export default MakeAURORATrx;","map":{"version":3,"names":["ethers","ABI","ascii_to_hex","str","arr1","n","l","length","hex","Number","charCodeAt","toString","push","join","MakeAURORATrx","setIsload","walletDirKey","TRXDir","activeBtn","firstCurrAmount","console","log","provider","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","userAddress","contract","Contract","populateTransaction","transfer","BigNumber","from","tx","data","getNetwork","chainId","transactionParameters","to","value","sendTransaction","mintData","fetch","process","env","REACT_APP_STATE","method","headers","body","JSON","stringify","hash","sourceChain"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeAURORATrx.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport ABI from \"./auroraABI\";\n\nfunction ascii_to_hex(str: string) {\n\tvar arr1 = [];\n\tfor (var n = 0, l = str.length; n < l; n++) {\n\t\tvar hex = Number(str.charCodeAt(n)).toString(16);\n\t\tarr1.push(hex);\n\t}\n\treturn arr1.join(\"\");\n}\n\nconst MakeAURORATrx = async (\n\tsetIsload: any,\n\twalletDirKey: any,\n\tTRXDir: any,\n\tactiveBtn: any,\n\tfirstCurrAmount: any\n) => {\n\tif (activeBtn) {\n\t\tsetIsload(true);\n\t\tconsole.log(\"START\");\n\n\t\t//@ts-ignore\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\n\t\tconst signer = provider.getSigner();\n\n\t\tlet userAddress = await signer.getAddress();\n\n\t\tconst contract = new ethers.Contract(\n\t\t\t\"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",\n\t\t\tABI,\n\t\t\tsigner\n\t\t);\n\t\t// const price = await contract.getPrice();\n\t\tconst tx = await contract.populateTransaction.transfer(\n\t\t\t\"0x7858011704161f41880e7f7EaF1d4E3525094576\",\n\t\t\tethers.BigNumber.from(firstCurrAmount * 1000000000000000000 + \"\")\n\t\t);\n\n\t\tconst transactionParameters = {\n\t\t\tto: \"0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79\",\n\t\t\tfrom: userAddress,\n\t\t\tdata: tx.data + ascii_to_hex(`<DATA>${TRXDir}#${walletDirKey}<DATA>`),\n\t\t\tvalue: 0,\n\t\t\tchainId: (await provider.getNetwork()).chainId, // mainnet ETH\n\t\t};\n\n\t\tconsole.log(transactionParameters);\n\t\ttry {\n\t\t\tconsole.log(\"START SIGN\");\n\n\t\t\tconst mintData = await signer.sendTransaction(transactionParameters);\n\n\t\t\tfetch(\n\t\t\t\tprocess.env.REACT_APP_STATE === \"dev\"\n\t\t\t\t\t? \"http://localhost:8092\"\n\t\t\t\t\t: process.env.REACT_APP_STATE === \"dev-remote\"\n\t\t\t\t\t? \"https://dev.api.tonana.org\"\n\t\t\t\t\t: \"https://api.tonana.org/\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\thash: mintData.hash,\n\t\t\t\t\t\tsourceChain: \"aurora\",\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconsole.log(mintData); // const transactionParameters = {\n\t\t\t//   to: '0x7858011704161f41880e7f7EaF1d4E3525094576', // Required except during contract publications.\n\t\t\t//   from: userAddress, // must match user's active address.\n\t\t\t//   value: '0x01', // Only required to send ether to the recipient from the initiating external account.\n\t\t\t// };\n\n\t\t\t// txHash is a hex string\n\t\t\t// As with any RPC call, it may throw an error\n\t\t\tsetIsload(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n};\n\nexport default MakeAURORATrx;\n"],"mappings":"sPAAA,OAASA,MAAM,KAAQ,QAAQ,CAC/B,MAAOC,IAAG,KAAM,aAAa,CAE7B,QAASC,aAAY,CAACC,GAAW,CAAE,CAClC,GAAIC,KAAI,CAAG,EAAE,CACb,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEC,CAAC,CAAGH,GAAG,CAACI,MAAM,CAAEF,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAE,CAAE,CAC3C,GAAIG,IAAG,CAAGC,MAAM,CAACN,GAAG,CAACO,UAAU,CAACL,CAAC,CAAC,CAAC,CAACM,QAAQ,CAAC,EAAE,CAAC,CAChDP,IAAI,CAACQ,IAAI,CAACJ,GAAG,CAAC,CACf,CACA,MAAOJ,KAAI,CAACS,IAAI,CAAC,EAAE,CAAC,CACrB,CAEA,GAAMC,cAAa,4FAAG,iBACrBC,SAAc,CACdC,YAAiB,CACjBC,MAAW,CACXC,SAAc,CACdC,eAAoB,mMAEhBD,SAAS,0BACZH,SAAS,CAAC,IAAI,CAAC,CACfK,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CAEpB;AACMC,QAAQ,CAAG,GAAItB,OAAM,CAACuB,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC,CAE7DC,MAAM,CAAGL,QAAQ,CAACM,SAAS,EAAE,uBAEXD,OAAM,CAACE,UAAU,EAAE,QAAvCC,WAAW,eAETC,QAAQ,CAAG,GAAI/B,OAAM,CAACgC,QAAQ,CACnC,4CAA4C,CAC5C/B,GAAG,CACH0B,MAAM,CACN,CACD;AAAA,uBACiBI,SAAQ,CAACE,mBAAmB,CAACC,QAAQ,CACrD,4CAA4C,CAC5ClC,MAAM,CAACmC,SAAS,CAACC,IAAI,CAACjB,eAAe,CAAG,mBAAmB,CAAG,EAAE,CAAC,CACjE,SAHKkB,EAAE,2BAODP,WAAW,aACXO,EAAE,CAACC,IAAI,CAAGpC,YAAY,iBAAUe,MAAM,aAAID,YAAY,WAAS,wBAErDM,SAAQ,CAACiB,UAAU,EAAE,mCAAEC,OAAO,CALzCC,qBAAqB,EAC1BC,EAAE,CAAE,4CAA4C,CAChDN,IAAI,aACJE,IAAI,aACJK,KAAK,CAAE,CAAC,CACRH,OAAO,cAGRpB,OAAO,CAACC,GAAG,CAACoB,qBAAqB,CAAC,CAAC,iBAElCrB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CAAC,uBAEHM,OAAM,CAACiB,eAAe,CAACH,qBAAqB,CAAC,SAA9DI,QAAQ,eAEdC,KAAK,CACJC,OAAO,CAACC,GAAG,CAACC,eAAe,GAAK,KAAK,CAClC,uBAAuB,CACvBF,OAAO,CAACC,GAAG,CAACC,eAAe,GAAK,YAAY,CAC5C,4BAA4B,CAC5B,yBAAyB,CAC5B,CACCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACpBC,IAAI,CAAEV,QAAQ,CAACU,IAAI,CACnBC,WAAW,CAAE,QACd,CAAC,CACF,CAAC,CACD,CAEDpC,OAAO,CAACC,GAAG,CAACwB,QAAQ,CAAC,CAAE;AACvB;AACA;AACA;AACA;AAEA;AACA;AACA9B,SAAS,CAAC,KAAK,CAAC,CAAC,kFAEjBK,OAAO,CAACC,GAAG,aAAG,CAAC,sEAGjB,kBAxEKP,cAAa,4DAwElB,CAED,cAAeA,cAAa"},"metadata":{},"sourceType":"module"}