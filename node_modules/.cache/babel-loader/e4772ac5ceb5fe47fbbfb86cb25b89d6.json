{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\nvar crypto_1 = require(\"@cosmjs/crypto\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar addresses_1 = require(\"./addresses\");\nvar signature_1 = require(\"./signature\");\nvar signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nvar Secp256k1Wallet = /*#__PURE__*/function () {\n  function Secp256k1Wallet(privkey, pubkey, prefix) {\n    _classCallCheck(this, Secp256k1Wallet);\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  _createClass(Secp256k1Wallet, [{\n    key: \"address\",\n    get: function get() {\n      return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", [{\n                  algo: \"secp256k1\",\n                  address: this.address,\n                  pubkey: this.pubkey\n                }]);\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n      return getAccounts;\n    }()\n  }, {\n    key: \"signAmino\",\n    value: function () {\n      var _signAmino = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signerAddress, signDoc) {\n        var message, signature, signatureBytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(signerAddress !== this.address)) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw new Error(\"Address \".concat(signerAddress, \" not found in wallet\"));\n              case 2:\n                message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n                _context2.next = 5;\n                return crypto_1.Secp256k1.createSignature(message, this.privkey);\n              case 5:\n                signature = _context2.sent;\n                signatureBytes = new Uint8Array([].concat(_toConsumableArray(signature.r(32)), _toConsumableArray(signature.s(32))));\n                return _context2.abrupt(\"return\", {\n                  signed: signDoc,\n                  signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n                });\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function signAmino(_x, _x2) {\n        return _signAmino.apply(this, arguments);\n      }\n      return signAmino;\n    }()\n  }], [{\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(privkey) {\n        var prefix,\n          uncompressed,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                prefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : \"cosmos\";\n                _context3.next = 3;\n                return crypto_1.Secp256k1.makeKeypair(privkey);\n              case 3:\n                uncompressed = _context3.sent.pubkey;\n                return _context3.abrupt(\"return\", new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix));\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function fromKey(_x3) {\n        return _fromKey.apply(this, arguments);\n      }\n      return fromKey;\n    }()\n  }]);\n  return Secp256k1Wallet;\n}();\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"sources":["../src/secp256k1wallet.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAGA;;;;AAIG;AAJH,IAKa,eAAe;EAgB1B,yBAAoB,OAAmB,EAAE,MAAkB,EAAE,MAAc,EAAA;IAAA;IACzE,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,MAAM,GAAG,MAAM;EACtB;EAnBA;;;;;AAKG;EALH;IAAA;IAAA,KAqBA,eAAmB;MACjB,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,IAAI,CAAC,MAAM,EAAE,CAAA,CAAA,EAAA,WAAA,CAAA,8BAA8B,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3E;EAAC;IAAA;IAAA;MAAA,8EAEM;QAAA;UAAA;YAAA;cAAA;gBAAA,iCACE,CACL;kBACE,IAAI,EAAE,WAAW;kBACjB,OAAO,EAAE,IAAI,CAAC,OAAO;kBACrB,MAAM,EAAE,IAAI,CAAC;iBACd,CACF;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,4EAEM,kBAAgB,aAAqB,EAAE,OAAmB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAC3D,aAAa,KAAK,IAAI,CAAC,OAAO;kBAAA;kBAAA;gBAAA;gBAAA,MAC1B,IAAI,KAAK,mBAAY,aAAa,0BAAuB;cAAA;gBAE3D,OAAO,GAAG,IAAI,QAAA,CAAA,MAAM,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,gBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE;gBAAA;gBAAA,OACtC,QAAA,CAAA,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;cAAA;gBAAlE,SAAS;gBACT,cAAc,GAAG,IAAI,UAAU,8BAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAE;gBAAA,kCACxE;kBACL,MAAM,EAAE,OAAO;kBACf,SAAS,EAAE,CAAA,CAAA,EAAA,WAAA,CAAA,wBAAwB,EAAC,IAAI,CAAC,MAAM,EAAE,cAAc;iBAChE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,0EAxCM,kBAAqB,OAAmB;QAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAE,MAAM,8DAAG,QAAQ;gBAAA;gBAAA,OACpC,QAAA,CAAA,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC;cAAA;gBAApD,YAAY,kBAA0C,MAAM;gBAAA,kCAC3D,IAAI,eAAe,CAAC,OAAO,EAAE,QAAA,CAAA,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAVH,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    /**\n     * Creates a Secp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signAmino(signerAddress, signDoc) {\n        if (signerAddress !== this.address) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes),\n        };\n    }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;\n//# sourceMappingURL=secp256k1wallet.js.map"]},"metadata":{},"sourceType":"script"}