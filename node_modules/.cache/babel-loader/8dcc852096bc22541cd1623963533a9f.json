{"ast":null,"code":"'use strict';\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account2FA = exports.AccountMultisig = exports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\nvar MultisigDeleteRequestRejectionError;\n(function (MultisigDeleteRequestRejectionError) {\n  MultisigDeleteRequestRejectionError[\"CANNOT_DESERIALIZE_STATE\"] = \"Cannot deserialize the contract state\";\n  MultisigDeleteRequestRejectionError[\"MULTISIG_NOT_INITIALIZED\"] = \"Smart contract panicked: Multisig contract should be initialized before usage\";\n  MultisigDeleteRequestRejectionError[\"NO_SUCH_REQUEST\"] = \"Smart contract panicked: panicked at 'No such request: either wrong number or already confirmed'\";\n  MultisigDeleteRequestRejectionError[\"REQUEST_COOLDOWN_ERROR\"] = \"Request cannot be deleted immediately after creation.\";\n  MultisigDeleteRequestRejectionError[\"METHOD_NOT_FOUND\"] = \"Contract method is not found\";\n})(MultisigDeleteRequestRejectionError = exports.MultisigDeleteRequestRejectionError || (exports.MultisigDeleteRequestRejectionError = {}));\n;\nvar MultisigStateStatus;\n(function (MultisigStateStatus) {\n  MultisigStateStatus[MultisigStateStatus[\"INVALID_STATE\"] = 0] = \"INVALID_STATE\";\n  MultisigStateStatus[MultisigStateStatus[\"STATE_NOT_INITIALIZED\"] = 1] = \"STATE_NOT_INITIALIZED\";\n  MultisigStateStatus[MultisigStateStatus[\"VALID_STATE\"] = 2] = \"VALID_STATE\";\n  MultisigStateStatus[MultisigStateStatus[\"UNKNOWN_STATE\"] = 3] = \"UNKNOWN_STATE\";\n})(MultisigStateStatus = exports.MultisigStateStatus || (exports.MultisigStateStatus = {}));\nvar MultisigCodeStatus;\n(function (MultisigCodeStatus) {\n  MultisigCodeStatus[MultisigCodeStatus[\"INVALID_CODE\"] = 0] = \"INVALID_CODE\";\n  MultisigCodeStatus[MultisigCodeStatus[\"VALID_CODE\"] = 1] = \"VALID_CODE\";\n  MultisigCodeStatus[MultisigCodeStatus[\"UNKNOWN_CODE\"] = 2] = \"UNKNOWN_CODE\";\n})(MultisigCodeStatus || (MultisigCodeStatus = {}));\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n  [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n  constructor(connection, accountId, options) {\n    super(connection, accountId);\n    this.storage = options.storage;\n    this.onAddRequestResult = options.onAddRequestResult;\n  }\n  async signAndSendTransactionWithAccount(receiverId, actions) {\n    return super.signAndSendTransaction({\n      receiverId,\n      actions\n    });\n  }\n  signAndSendTransaction() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n      return this._signAndSendTransaction({\n        receiverId: arguments.length <= 0 ? undefined : arguments[0],\n        actions: arguments.length <= 1 ? undefined : arguments[1]\n      });\n    }\n    return this._signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n  }\n  async _signAndSendTransaction(_ref) {\n    let {\n      receiverId,\n      actions\n    } = _ref;\n    const {\n      accountId\n    } = this;\n    const args = Buffer.from(JSON.stringify({\n      request: {\n        receiver_id: receiverId,\n        actions: convertActions(actions, accountId, receiverId)\n      }\n    }));\n    let result;\n    try {\n      result = await super.signAndSendTransaction({\n        receiverId: accountId,\n        actions: [transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n      });\n    } catch (e) {\n      if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n        await this.deleteUnconfirmedRequests();\n        return await this.signAndSendTransaction(receiverId, actions);\n      }\n      throw e;\n    }\n    // TODO: Are following even needed? Seems like it throws on error already\n    if (!result.status) {\n      throw new Error('Request failed');\n    }\n    const status = {\n      ...result.status\n    };\n    if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n      throw new Error('Request failed');\n    }\n    this.setRequest({\n      accountId,\n      actions,\n      requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n    });\n    if (this.onAddRequestResult) {\n      await this.onAddRequestResult(result);\n    }\n    // NOTE there is no await on purpose to avoid blocking for 2fa\n    this.deleteUnconfirmedRequests();\n    return result;\n  }\n  /*\n   * This method submits a canary transaction that is expected to always fail in order to determine whether the contract currently has valid multisig state\n   * and whether it is initialized. The canary transaction attempts to delete a request at index u32_max and will go through if a request exists at that index.\n   * a u32_max + 1 and -1 value cannot be used for the canary due to expected u32 error thrown before deserialization attempt.\n   */\n  async checkMultisigCodeAndStateStatus(contractBytes) {\n    const u32_max = 4294967295;\n    const validCodeStatusIfNoDeploy = contractBytes ? MultisigCodeStatus.UNKNOWN_CODE : MultisigCodeStatus.VALID_CODE;\n    try {\n      if (contractBytes) {\n        await super.signAndSendTransaction({\n          receiverId: this.accountId,\n          actions: [transaction_1.deployContract(contractBytes), transaction_1.functionCall('delete_request', {\n            request_id: u32_max\n          }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n        });\n      } else {\n        await this.deleteRequest(u32_max);\n      }\n      return {\n        codeStatus: MultisigCodeStatus.VALID_CODE,\n        stateStatus: MultisigStateStatus.VALID_STATE\n      };\n    } catch (e) {\n      if (new RegExp(MultisigDeleteRequestRejectionError.CANNOT_DESERIALIZE_STATE).test(e && e.kind && e.kind.ExecutionError)) {\n        return {\n          codeStatus: validCodeStatusIfNoDeploy,\n          stateStatus: MultisigStateStatus.INVALID_STATE\n        };\n      } else if (new RegExp(MultisigDeleteRequestRejectionError.MULTISIG_NOT_INITIALIZED).test(e && e.kind && e.kind.ExecutionError)) {\n        return {\n          codeStatus: validCodeStatusIfNoDeploy,\n          stateStatus: MultisigStateStatus.STATE_NOT_INITIALIZED\n        };\n      } else if (new RegExp(MultisigDeleteRequestRejectionError.NO_SUCH_REQUEST).test(e && e.kind && e.kind.ExecutionError)) {\n        return {\n          codeStatus: validCodeStatusIfNoDeploy,\n          stateStatus: MultisigStateStatus.VALID_STATE\n        };\n      } else if (new RegExp(MultisigDeleteRequestRejectionError.METHOD_NOT_FOUND).test(e && e.message)) {\n        // not reachable if transaction included a deploy\n        return {\n          codeStatus: MultisigCodeStatus.INVALID_CODE,\n          stateStatus: MultisigStateStatus.UNKNOWN_STATE\n        };\n      }\n      throw e;\n    }\n  }\n  deleteRequest(request_id) {\n    return super.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions: [transaction_1.functionCall('delete_request', {\n        request_id\n      }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n    });\n  }\n  async deleteAllRequests() {\n    const request_ids = await this.getRequestIds();\n    if (request_ids.length) {\n      await Promise.all(request_ids.map(id => this.deleteRequest(id)));\n    }\n  }\n  async deleteUnconfirmedRequests() {\n    // TODO: Delete in batch, don't delete unexpired\n    // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n    const request_ids = await this.getRequestIds();\n    const {\n      requestId\n    } = this.getRequest();\n    for (const requestIdToDelete of request_ids) {\n      if (requestIdToDelete == requestId) {\n        continue;\n      }\n      try {\n        await super.signAndSendTransaction({\n          receiverId: this.accountId,\n          actions: [transaction_1.functionCall('delete_request', {\n            request_id: requestIdToDelete\n          }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n        });\n      } catch (e) {\n        console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n      }\n    }\n  }\n  // helpers\n  async getRequestIds() {\n    // TODO: Read requests from state to allow filtering by expiration time\n    // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n    return this.viewFunction(this.accountId, 'list_request_ids');\n  }\n  getRequest() {\n    if (this.storage) {\n      return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n    }\n    return storageFallback[exports.MULTISIG_STORAGE_KEY];\n  }\n  setRequest(data) {\n    if (this.storage) {\n      return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n    }\n    storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n  }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n  constructor(connection, accountId, options) {\n    super(connection, accountId, options);\n    this.helperUrl = 'https://helper.testnet.near.org';\n    this.helperUrl = options.helperUrl || this.helperUrl;\n    this.storage = options.storage;\n    this.sendCode = options.sendCode || this.sendCodeDefault;\n    this.getCode = options.getCode || this.getCodeDefault;\n    this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n    this.onConfirmResult = options.onConfirmResult;\n  }\n  async signAndSendTransaction() {\n    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n      const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n      deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n      return this.__signAndSendTransaction({\n        receiverId: arguments.length <= 0 ? undefined : arguments[0],\n        actions: arguments.length <= 1 ? undefined : arguments[1]\n      });\n    } else {\n      return this.__signAndSendTransaction(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  }\n  async __signAndSendTransaction(_ref2) {\n    let {\n      receiverId,\n      actions\n    } = _ref2;\n    await super.signAndSendTransaction({\n      receiverId,\n      actions\n    });\n    // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n    await this.sendCode();\n    const result = await this.promptAndVerify();\n    if (this.onConfirmResult) {\n      await this.onConfirmResult(result);\n    }\n    return result;\n  }\n  // default helpers for CH deployments of multisig\n  async deployMultisig(contractBytes) {\n    const {\n      accountId\n    } = this;\n    const seedOrLedgerKey = (await this.getRecoveryMethods()).data.filter(_ref3 => {\n      let {\n        kind,\n        publicKey\n      } = _ref3;\n      return (kind === 'phrase' || kind === 'ledger') && publicKey !== null;\n    }).map(rm => rm.publicKey);\n    const fak2lak = (await this.getAccessKeys()).filter(_ref4 => {\n      let {\n        public_key,\n        access_key: {\n          permission\n        }\n      } = _ref4;\n      return permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key);\n    }).map(ak => ak.public_key).map(toPK);\n    const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', {\n      accountId\n    })).publicKey);\n    const newArgs = Buffer.from(JSON.stringify({\n      'num_confirmations': 2\n    }));\n    const actions = [...fak2lak.map(pk => transaction_1.deleteKey(pk)), ...fak2lak.map(pk => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))), transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)), transaction_1.deployContract(contractBytes)];\n    const newFunctionCallActionBatch = actions.concat(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n    console.log('deploying multisig contract for', accountId);\n    const {\n      stateStatus: multisigStateStatus\n    } = await this.checkMultisigCodeAndStateStatus(contractBytes);\n    switch (multisigStateStatus) {\n      case MultisigStateStatus.STATE_NOT_INITIALIZED:\n        return await super.signAndSendTransactionWithAccount(accountId, newFunctionCallActionBatch);\n      case MultisigStateStatus.VALID_STATE:\n        return await super.signAndSendTransactionWithAccount(accountId, actions);\n      case MultisigStateStatus.INVALID_STATE:\n        throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');\n      default:\n        throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n    }\n  }\n  async disableWithFAK(_ref5) {\n    let {\n      contractBytes,\n      cleanupContractBytes\n    } = _ref5;\n    let cleanupActions = [];\n    if (cleanupContractBytes) {\n      await this.deleteAllRequests().catch(e => e);\n      cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes);\n    }\n    const keyConversionActions = await this.get2faDisableKeyConversionActions();\n    const actions = [...cleanupActions, ...keyConversionActions, transaction_1.deployContract(contractBytes)];\n    const accessKeyInfo = await this.findAccessKey(this.accountId, actions);\n    if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {\n      throw new providers_1.TypedError(`No full access key found in keystore. Unable to bypass multisig`, 'NoFAKFound');\n    }\n    return this.signAndSendTransactionWithAccount(this.accountId, actions);\n  }\n  async get2faDisableCleanupActions(cleanupContractBytes) {\n    const currentAccountState = await this.viewState('').catch(error => {\n      const cause = error.cause && error.cause.name;\n      if (cause == 'NO_CONTRACT_CODE') {\n        return [];\n      }\n      throw cause == 'TOO_LARGE_CONTRACT_STATE' ? new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState') : error;\n    });\n    const currentAccountStateKeys = currentAccountState.map(_ref6 => {\n      let {\n        key\n      } = _ref6;\n      return key.toString('base64');\n    });\n    return currentAccountState.length ? [transaction_1.deployContract(cleanupContractBytes), transaction_1.functionCall('clean', {\n      keys: currentAccountStateKeys\n    }, exports.MULTISIG_GAS, new bn_js_1.default('0'))] : [];\n  }\n  async get2faDisableKeyConversionActions() {\n    const {\n      accountId\n    } = this;\n    const accessKeys = await this.getAccessKeys();\n    const lak2fak = accessKeys.filter(_ref7 => {\n      let {\n        access_key\n      } = _ref7;\n      return access_key.permission !== 'FullAccess';\n    }).filter(_ref8 => {\n      let {\n        access_key\n      } = _ref8;\n      const perm = access_key.permission.FunctionCall;\n      return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes('add_request_and_confirm');\n    });\n    const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', {\n      accountId\n    })).publicKey);\n    return [transaction_1.deleteKey(confirmOnlyKey), ...lak2fak.map(_ref9 => {\n      let {\n        public_key\n      } = _ref9;\n      return transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key));\n    }), ...lak2fak.map(_ref10 => {\n      let {\n        public_key\n      } = _ref10;\n      return transaction_1.addKey(key_pair_1.PublicKey.from(public_key), transaction_1.fullAccessKey());\n    })];\n  }\n  /**\n   * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n   * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n   * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}\n   */\n  async disable(contractBytes, cleanupContractBytes) {\n    const {\n      stateStatus\n    } = await this.checkMultisigCodeAndStateStatus();\n    if (stateStatus !== MultisigStateStatus.VALID_STATE && stateStatus !== MultisigStateStatus.STATE_NOT_INITIALIZED) {\n      throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n    }\n    let deleteAllRequestsError;\n    await this.deleteAllRequests().catch(e => deleteAllRequestsError = e);\n    const cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {\n      if (e.type === 'ContractHasExistingState') {\n        throw deleteAllRequestsError || e;\n      }\n      throw e;\n    });\n    const actions = [...cleanupActions, ...(await this.get2faDisableKeyConversionActions()), transaction_1.deployContract(contractBytes)];\n    console.log('disabling 2fa for', this.accountId);\n    return await this.signAndSendTransaction({\n      receiverId: this.accountId,\n      actions\n    });\n  }\n  async sendCodeDefault() {\n    const {\n      accountId\n    } = this;\n    const {\n      requestId\n    } = this.getRequest();\n    const method = await this.get2faMethod();\n    await this.postSignedJson('/2fa/send', {\n      accountId,\n      method,\n      requestId\n    });\n    return requestId;\n  }\n  async getCodeDefault(method) {\n    throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n  }\n  async promptAndVerify() {\n    const method = await this.get2faMethod();\n    const securityCode = await this.getCode(method);\n    try {\n      const result = await this.verifyCode(securityCode);\n      // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n      return result;\n    } catch (e) {\n      console.warn('Error validating security code:', e);\n      if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n        return await this.promptAndVerify();\n      }\n      throw e;\n    }\n  }\n  async verifyCodeDefault(securityCode) {\n    const {\n      accountId\n    } = this;\n    const request = this.getRequest();\n    if (!request) {\n      throw new Error('no request pending');\n    }\n    const {\n      requestId\n    } = request;\n    return await this.postSignedJson('/2fa/verify', {\n      accountId,\n      securityCode,\n      requestId\n    });\n  }\n  async getRecoveryMethods() {\n    const {\n      accountId\n    } = this;\n    return {\n      accountId,\n      data: await this.postSignedJson('/account/recoveryMethods', {\n        accountId\n      })\n    };\n  }\n  async get2faMethod() {\n    let {\n      data\n    } = await this.getRecoveryMethods();\n    if (data && data.length) {\n      data = data.find(m => m.kind.indexOf('2fa-') === 0);\n    }\n    if (!data) return null;\n    const {\n      kind,\n      detail\n    } = data;\n    return {\n      kind,\n      detail\n    };\n  }\n  async signatureFor() {\n    const {\n      accountId\n    } = this;\n    const block = await this.connection.provider.block({\n      finality: 'final'\n    });\n    const blockNumber = block.header.height.toString();\n    const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n    const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n    return {\n      blockNumber,\n      blockNumberSignature\n    };\n  }\n  async postSignedJson(path, body) {\n    return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n      ...body,\n      ...(await this.signatureFor())\n    }));\n  }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = pk => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = pk => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map(a => {\n  const type = a.enum;\n  const {\n    gas,\n    publicKey,\n    methodName,\n    args,\n    deposit,\n    accessKey,\n    code\n  } = a[type];\n  const action = {\n    type: type[0].toUpperCase() + type.substr(1),\n    gas: gas && gas.toString() || undefined,\n    public_key: publicKey && convertPKForContract(publicKey) || undefined,\n    method_name: methodName,\n    args: args && Buffer.from(args).toString('base64') || undefined,\n    code: code && Buffer.from(code).toString('base64') || undefined,\n    amount: deposit && deposit.toString() || undefined,\n    deposit: deposit && deposit.toString() || '0',\n    permission: undefined\n  };\n  if (accessKey) {\n    if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n      action.permission = {\n        receiver_id: accountId,\n        allowance: exports.MULTISIG_ALLOWANCE.toString(),\n        method_names: exports.MULTISIG_CHANGE_METHODS\n      };\n    }\n    if (accessKey.permission.enum === 'functionCall') {\n      const {\n        receiverId: receiver_id,\n        methodNames: method_names,\n        allowance\n      } = accessKey.permission.functionCall;\n      action.permission = {\n        receiver_id,\n        allowance: allowance && allowance.toString() || undefined,\n        method_names\n      };\n    }\n  }\n  return action;\n});","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account2FA","AccountMultisig","MultisigStateStatus","MultisigDeleteRequestRejectionError","MULTISIG_CONFIRM_METHODS","MULTISIG_CHANGE_METHODS","MULTISIG_DEPOSIT","MULTISIG_GAS","MULTISIG_ALLOWANCE","MULTISIG_STORAGE_KEY","bn_js_1","require","depd_1","account_1","format_1","key_pair_1","transaction_1","providers_1","web_1","default","parseNearAmount","MultisigCodeStatus","storageFallback","Account","constructor","connection","accountId","options","storage","onAddRequestResult","signAndSendTransactionWithAccount","receiverId","actions","signAndSendTransaction","_signAndSendTransaction","args","Buffer","from","JSON","stringify","request","receiver_id","convertActions","result","functionCall","e","toString","includes","deleteUnconfirmedRequests","status","Error","SuccessValue","setRequest","requestId","parseInt","checkMultisigCodeAndStateStatus","contractBytes","u32_max","validCodeStatusIfNoDeploy","UNKNOWN_CODE","VALID_CODE","deployContract","request_id","deleteRequest","codeStatus","stateStatus","VALID_STATE","RegExp","CANNOT_DESERIALIZE_STATE","test","kind","ExecutionError","INVALID_STATE","MULTISIG_NOT_INITIALIZED","STATE_NOT_INITIALIZED","NO_SUCH_REQUEST","METHOD_NOT_FOUND","message","INVALID_CODE","UNKNOWN_STATE","deleteAllRequests","request_ids","getRequestIds","length","Promise","all","map","id","getRequest","requestIdToDelete","console","warn","viewFunction","parse","getItem","data","setItem","helperUrl","sendCode","sendCodeDefault","getCode","getCodeDefault","verifyCode","verifyCodeDefault","onConfirmResult","deprecate","__signAndSendTransaction","promptAndVerify","deployMultisig","seedOrLedgerKey","getRecoveryMethods","filter","publicKey","rm","fak2lak","getAccessKeys","public_key","access_key","permission","ak","toPK","confirmOnlyKey","postSignedJson","newArgs","pk","deleteKey","addKey","functionCallAccessKey","newFunctionCallActionBatch","concat","log","multisigStateStatus","TypedError","networkId","disableWithFAK","cleanupContractBytes","cleanupActions","catch","get2faDisableCleanupActions","keyConversionActions","get2faDisableKeyConversionActions","accessKeyInfo","findAccessKey","accessKey","currentAccountState","viewState","error","cause","name","currentAccountStateKeys","key","keys","accessKeys","lak2fak","perm","FunctionCall","method_names","PublicKey","fullAccessKey","disable","deleteAllRequestsError","type","method","get2faMethod","securityCode","find","m","indexOf","detail","signatureFor","block","provider","finality","blockNumber","header","height","signed","signer","signMessage","blockNumberSignature","signature","path","body","fetchJson","convertPKForContract","replace","a","enum","gas","methodName","deposit","code","action","toUpperCase","substr","undefined","method_name","amount","allowance","methodNames"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-api-js/lib/account_multisig.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = exports.AccountMultisig = exports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\nvar MultisigDeleteRequestRejectionError;\n(function (MultisigDeleteRequestRejectionError) {\n    MultisigDeleteRequestRejectionError[\"CANNOT_DESERIALIZE_STATE\"] = \"Cannot deserialize the contract state\";\n    MultisigDeleteRequestRejectionError[\"MULTISIG_NOT_INITIALIZED\"] = \"Smart contract panicked: Multisig contract should be initialized before usage\";\n    MultisigDeleteRequestRejectionError[\"NO_SUCH_REQUEST\"] = \"Smart contract panicked: panicked at 'No such request: either wrong number or already confirmed'\";\n    MultisigDeleteRequestRejectionError[\"REQUEST_COOLDOWN_ERROR\"] = \"Request cannot be deleted immediately after creation.\";\n    MultisigDeleteRequestRejectionError[\"METHOD_NOT_FOUND\"] = \"Contract method is not found\";\n})(MultisigDeleteRequestRejectionError = exports.MultisigDeleteRequestRejectionError || (exports.MultisigDeleteRequestRejectionError = {}));\n;\nvar MultisigStateStatus;\n(function (MultisigStateStatus) {\n    MultisigStateStatus[MultisigStateStatus[\"INVALID_STATE\"] = 0] = \"INVALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"STATE_NOT_INITIALIZED\"] = 1] = \"STATE_NOT_INITIALIZED\";\n    MultisigStateStatus[MultisigStateStatus[\"VALID_STATE\"] = 2] = \"VALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"UNKNOWN_STATE\"] = 3] = \"UNKNOWN_STATE\";\n})(MultisigStateStatus = exports.MultisigStateStatus || (exports.MultisigStateStatus = {}));\nvar MultisigCodeStatus;\n(function (MultisigCodeStatus) {\n    MultisigCodeStatus[MultisigCodeStatus[\"INVALID_CODE\"] = 0] = \"INVALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"VALID_CODE\"] = 1] = \"VALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"UNKNOWN_CODE\"] = 2] = \"UNKNOWN_CODE\";\n})(MultisigCodeStatus || (MultisigCodeStatus = {}));\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction(receiverId, actions);\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    /*\n     * This method submits a canary transaction that is expected to always fail in order to determine whether the contract currently has valid multisig state\n     * and whether it is initialized. The canary transaction attempts to delete a request at index u32_max and will go through if a request exists at that index.\n     * a u32_max + 1 and -1 value cannot be used for the canary due to expected u32 error thrown before deserialization attempt.\n     */\n    async checkMultisigCodeAndStateStatus(contractBytes) {\n        const u32_max = 4294967295;\n        const validCodeStatusIfNoDeploy = contractBytes ? MultisigCodeStatus.UNKNOWN_CODE : MultisigCodeStatus.VALID_CODE;\n        try {\n            if (contractBytes) {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId, actions: [\n                        transaction_1.deployContract(contractBytes),\n                        transaction_1.functionCall('delete_request', { request_id: u32_max }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                    ]\n                });\n            }\n            else {\n                await this.deleteRequest(u32_max);\n            }\n            return { codeStatus: MultisigCodeStatus.VALID_CODE, stateStatus: MultisigStateStatus.VALID_STATE };\n        }\n        catch (e) {\n            if (new RegExp(MultisigDeleteRequestRejectionError.CANNOT_DESERIALIZE_STATE).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.INVALID_STATE };\n            }\n            else if (new RegExp(MultisigDeleteRequestRejectionError.MULTISIG_NOT_INITIALIZED).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.STATE_NOT_INITIALIZED };\n            }\n            else if (new RegExp(MultisigDeleteRequestRejectionError.NO_SUCH_REQUEST).test(e && e.kind && e.kind.ExecutionError)) {\n                return { codeStatus: validCodeStatusIfNoDeploy, stateStatus: MultisigStateStatus.VALID_STATE };\n            }\n            else if (new RegExp(MultisigDeleteRequestRejectionError.METHOD_NOT_FOUND).test(e && e.message)) {\n                // not reachable if transaction included a deploy\n                return { codeStatus: MultisigCodeStatus.INVALID_CODE, stateStatus: MultisigStateStatus.UNKNOWN_STATE };\n            }\n            throw e;\n        }\n    }\n    deleteRequest(request_id) {\n        return super.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.functionCall('delete_request', { request_id }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n        });\n    }\n    async deleteAllRequests() {\n        const request_ids = await this.getRequestIds();\n        if (request_ids.length) {\n            await Promise.all(request_ids.map((id) => this.deleteRequest(id)));\n        }\n    }\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction(this.accountId, 'list_request_ids');\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    async signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        else {\n            return this.__signAndSendTransaction(args[0]);\n        }\n    }\n    async __signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),\n            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),\n            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        const newFunctionCallActionBatch = actions.concat(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n        console.log('deploying multisig contract for', accountId);\n        const { stateStatus: multisigStateStatus } = await this.checkMultisigCodeAndStateStatus(contractBytes);\n        switch (multisigStateStatus) {\n            case MultisigStateStatus.STATE_NOT_INITIALIZED:\n                return await super.signAndSendTransactionWithAccount(accountId, newFunctionCallActionBatch);\n            case MultisigStateStatus.VALID_STATE:\n                return await super.signAndSendTransactionWithAccount(accountId, actions);\n            case MultisigStateStatus.INVALID_STATE:\n                throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState');\n            default:\n                throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n        }\n    }\n    async disableWithFAK({ contractBytes, cleanupContractBytes }) {\n        let cleanupActions = [];\n        if (cleanupContractBytes) {\n            await this.deleteAllRequests().catch(e => e);\n            cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes);\n        }\n        const keyConversionActions = await this.get2faDisableKeyConversionActions();\n        const actions = [\n            ...cleanupActions,\n            ...keyConversionActions,\n            transaction_1.deployContract(contractBytes)\n        ];\n        const accessKeyInfo = await this.findAccessKey(this.accountId, actions);\n        if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== 'FullAccess') {\n            throw new providers_1.TypedError(`No full access key found in keystore. Unable to bypass multisig`, 'NoFAKFound');\n        }\n        return this.signAndSendTransactionWithAccount(this.accountId, actions);\n    }\n    async get2faDisableCleanupActions(cleanupContractBytes) {\n        const currentAccountState = await this.viewState('').catch(error => {\n            const cause = error.cause && error.cause.name;\n            if (cause == 'NO_CONTRACT_CODE') {\n                return [];\n            }\n            throw cause == 'TOO_LARGE_CONTRACT_STATE'\n                ? new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, 'ContractHasExistingState')\n                : error;\n        });\n        const currentAccountStateKeys = currentAccountState.map(({ key }) => key.toString('base64'));\n        return currentAccountState.length ? [\n            transaction_1.deployContract(cleanupContractBytes),\n            transaction_1.functionCall('clean', { keys: currentAccountStateKeys }, exports.MULTISIG_GAS, new bn_js_1.default('0'))\n        ] : [];\n    }\n    async get2faDisableKeyConversionActions() {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        return [\n            transaction_1.deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), transaction_1.fullAccessKey()))\n        ];\n    }\n    /**\n     * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n     * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n     * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}\n     */\n    async disable(contractBytes, cleanupContractBytes) {\n        const { stateStatus } = await this.checkMultisigCodeAndStateStatus();\n        if (stateStatus !== MultisigStateStatus.VALID_STATE && stateStatus !== MultisigStateStatus.STATE_NOT_INITIALIZED) {\n            throw new providers_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, 'ContractStateUnknown');\n        }\n        let deleteAllRequestsError;\n        await this.deleteAllRequests().catch(e => deleteAllRequestsError = e);\n        const cleanupActions = await this.get2faDisableCleanupActions(cleanupContractBytes).catch(e => {\n            if (e.type === 'ContractHasExistingState') {\n                throw deleteAllRequestsError || e;\n            }\n            throw e;\n        });\n        const actions = [\n            ...cleanupActions,\n            ...(await this.get2faDisableKeyConversionActions()),\n            transaction_1.deployContract(contractBytes),\n        ];\n        console.log('disabling 2fa for', this.accountId);\n        return await this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions\n        });\n    }\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault(method) {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            console.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        if (data && data.length) {\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    async postSignedJson(path, body) {\n        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n            ...body,\n            ...(await this.signatureFor())\n        }));\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: exports.MULTISIG_ALLOWANCE.toString(),\n                method_names: exports.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}