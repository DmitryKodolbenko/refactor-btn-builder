{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupGovExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: async parametersType => {\n        const response = await queryService.Params({\n          paramsType: parametersType\n        });\n        return response;\n      },\n      proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n        const response = await queryService.Proposals({\n          proposalStatus,\n          depositor: depositorAddress,\n          voter: voterAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      proposal: async proposalId => {\n        const response = await queryService.Proposal({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      deposits: async (proposalId, paginationKey) => {\n        const response = await queryService.Deposits({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      deposit: async (proposalId, depositorAddress) => {\n        const response = await queryService.Deposit({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          depositor: depositorAddress\n        });\n        return response;\n      },\n      tally: async proposalId => {\n        const response = await queryService.TallyResult({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      votes: async (proposalId, paginationKey) => {\n        const response = await queryService.Votes({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      vote: async (proposalId, voterAddress) => {\n        const response = await queryService.Vote({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          voter: voterAddress\n        });\n        return response;\n      }\n    }\n  };\n}\nexports.setupGovExtension = setupGovExtension;","map":{"version":3,"sources":["../../../src/modules/gov/queries.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;AAaA,MAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AA2BA,SAAgB,iBAAiB,CAAC,IAAiB,EAAA;EACjD,MAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EAEzC;EACA;EACA,MAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,GAAG,EAAE;MACH,MAAM,EAAE,MAAO,cAA6B,IAAI;QAC9C,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC;UAAE,UAAU,EAAE;QAAc,CAAE,CAAC;QAC1E,OAAO,QAAQ;MACjB,CAAC;MACD,SAAS,EAAE,OACT,cAA8B,EAC9B,gBAAwB,EACxB,YAAoB,EACpB,aAA0B,KACxB;QACF,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC;UAC5C,cAAc;UACd,SAAS,EAAE,gBAAgB;UAC3B,KAAK,EAAE,YAAY;UACnB,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,gBAAgB,EAAC,aAAa;SAC3C,CAAC;QACF,OAAO,QAAQ;MACjB,CAAC;MACD,QAAQ,EAAE,MAAO,UAAyB,IAAI;QAC5C,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;UAAE,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU;QAAC,CAAE,CAAC;QACjF,OAAO,QAAQ;MACjB,CAAC;MACD,QAAQ,EAAE,OAAO,UAAyB,EAAE,aAA0B,KAAI;QACxE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;UAC3C,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU,CAAC;UAC/B,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,gBAAgB,EAAC,aAAa;SAC3C,CAAC;QACF,OAAO,QAAQ;MACjB,CAAC;MACD,OAAO,EAAE,OAAO,UAAyB,EAAE,gBAAwB,KAAI;QACrE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;UAC1C,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU,CAAC;UAC/B,SAAS,EAAE;SACZ,CAAC;QACF,OAAO,QAAQ;MACjB,CAAC;MACD,KAAK,EAAE,MAAO,UAAyB,IAAI;QACzC,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,WAAW,CAAC;UAC9C,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU;SAC/B,CAAC;QACF,OAAO,QAAQ;MACjB,CAAC;MACD,KAAK,EAAE,OAAO,UAAyB,EAAE,aAA0B,KAAI;QACrE,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC;UACxC,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU,CAAC;UAC/B,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,gBAAgB,EAAC,aAAa;SAC3C,CAAC;QACF,OAAO,QAAQ;MACjB,CAAC;MACD,IAAI,EAAE,OAAO,UAAyB,EAAE,YAAoB,KAAI;QAC9D,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC;UACvC,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,OAAO,EAAC,UAAU,CAAC;UAC/B,KAAK,EAAE;SACR,CAAC;QACF,OAAO,QAAQ;MACjB;IACD;GACF;AACH;AAnEA,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupGovExtension = void 0;\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupGovExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        gov: {\n            params: async (parametersType) => {\n                const response = await queryService.Params({ paramsType: parametersType });\n                return response;\n            },\n            proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n                const response = await queryService.Proposals({\n                    proposalStatus,\n                    depositor: depositorAddress,\n                    voter: voterAddress,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            proposal: async (proposalId) => {\n                const response = await queryService.Proposal({ proposalId: (0, queryclient_1.longify)(proposalId) });\n                return response;\n            },\n            deposits: async (proposalId, paginationKey) => {\n                const response = await queryService.Deposits({\n                    proposalId: (0, queryclient_1.longify)(proposalId),\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            deposit: async (proposalId, depositorAddress) => {\n                const response = await queryService.Deposit({\n                    proposalId: (0, queryclient_1.longify)(proposalId),\n                    depositor: depositorAddress,\n                });\n                return response;\n            },\n            tally: async (proposalId) => {\n                const response = await queryService.TallyResult({\n                    proposalId: (0, queryclient_1.longify)(proposalId),\n                });\n                return response;\n            },\n            votes: async (proposalId, paginationKey) => {\n                const response = await queryService.Votes({\n                    proposalId: (0, queryclient_1.longify)(proposalId),\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                });\n                return response;\n            },\n            vote: async (proposalId, voterAddress) => {\n                const response = await queryService.Vote({\n                    proposalId: (0, queryclient_1.longify)(proposalId),\n                    voter: voterAddress,\n                });\n                return response;\n            },\n        },\n    };\n}\nexports.setupGovExtension = setupGovExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}