{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nvar amino_1 = require(\"@cosmjs/amino\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nvar tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nvar tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nvar tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\nvar aminotypes_1 = require(\"./aminotypes\");\nvar fee_1 = require(\"./fee\");\nvar modules_1 = require(\"./modules\");\nvar modules_2 = require(\"./modules\");\nvar stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [[\"/cosmos.base.v1beta1.Coin\", coin_1.Coin]].concat(_toConsumableArray(modules_1.authzTypes), _toConsumableArray(modules_1.bankTypes), _toConsumableArray(modules_1.distributionTypes), _toConsumableArray(modules_1.feegrantTypes), _toConsumableArray(modules_1.govTypes), _toConsumableArray(modules_1.stakingTypes), _toConsumableArray(modules_1.ibcTypes), _toConsumableArray(modules_1.vestingTypes));\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nfunction createDefaultTypes(prefix) {\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, modules_2.createAuthzAminoConverters)()), (0, modules_2.createBankAminoConverters)()), (0, modules_2.createDistributionAminoConverters)()), (0, modules_2.createGovAminoConverters)()), (0, modules_2.createStakingAminoConverters)(prefix)), (0, modules_2.createIbcAminoConverters)()), (0, modules_2.createFreegrantAminoConverters)()), (0, modules_2.createVestingAminoConverters)());\n}\nvar SigningStargateClient = /*#__PURE__*/function (_stargateclient_1$Sta) {\n  _inherits(SigningStargateClient, _stargateclient_1$Sta);\n  var _super = _createSuper(SigningStargateClient);\n  function SigningStargateClient(tmClient, signer, options) {\n    var _this;\n    _classCallCheck(this, SigningStargateClient);\n    var _a;\n    _this = _super.call(this, tmClient, options);\n    // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n    var prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n    var _options$registry = options.registry,\n      registry = _options$registry === void 0 ? createDefaultRegistry() : _options$registry,\n      _options$aminoTypes = options.aminoTypes,\n      aminoTypes = _options$aminoTypes === void 0 ? new aminotypes_1.AminoTypes(createDefaultTypes(prefix)) : _options$aminoTypes;\n    _this.registry = registry;\n    _this.aminoTypes = aminoTypes;\n    _this.signer = signer;\n    _this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    _this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    _this.gasPrice = options.gasPrice;\n    return _this;\n  }\n  _createClass(SigningStargateClient, [{\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signerAddress, messages, memo) {\n        var _this2 = this;\n        var anyMsgs, accountFromSigner, pubkey, _yield$this$getSequen, sequence, _yield$this$forceGetQ, gasInfo;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                anyMsgs = messages.map(function (m) {\n                  return _this2.registry.encodeAsAny(m);\n                });\n                _context.next = 3;\n                return this.signer.getAccounts();\n              case 3:\n                accountFromSigner = _context.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n                if (accountFromSigner) {\n                  _context.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed to retrieve account from signer\");\n              case 6:\n                pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n                _context.next = 9;\n                return this.getSequence(signerAddress);\n              case 9:\n                _yield$this$getSequen = _context.sent;\n                sequence = _yield$this$getSequen.sequence;\n                _context.next = 13;\n                return this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n              case 13:\n                _yield$this$forceGetQ = _context.sent;\n                gasInfo = _yield$this$forceGetQ.gasInfo;\n                (0, utils_1.assertDefined)(gasInfo);\n                return _context.abrupt(\"return\", math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber());\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function simulate(_x, _x2, _x3) {\n        return _simulate.apply(this, arguments);\n      }\n      return simulate;\n    }()\n  }, {\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(senderAddress, recipientAddress, amount, fee) {\n        var memo,\n          sendMsg,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                memo = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : \"\";\n                sendMsg = {\n                  typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n                  value: {\n                    fromAddress: senderAddress,\n                    toAddress: recipientAddress,\n                    amount: _toConsumableArray(amount)\n                  }\n                };\n                return _context2.abrupt(\"return\", this.signAndBroadcast(senderAddress, [sendMsg], fee, memo));\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function sendTokens(_x4, _x5, _x6, _x7) {\n        return _sendTokens.apply(this, arguments);\n      }\n      return sendTokens;\n    }()\n  }, {\n    key: \"delegateTokens\",\n    value: function () {\n      var _delegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n          delegateMsg,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                memo = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : \"\";\n                delegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n                  value: tx_2.MsgDelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context3.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo));\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function delegateTokens(_x8, _x9, _x10, _x11) {\n        return _delegateTokens.apply(this, arguments);\n      }\n      return delegateTokens;\n    }()\n  }, {\n    key: \"undelegateTokens\",\n    value: function () {\n      var _undelegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n          undelegateMsg,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                memo = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : \"\";\n                undelegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n                  value: tx_2.MsgUndelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context4.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo));\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function undelegateTokens(_x12, _x13, _x14, _x15) {\n        return _undelegateTokens.apply(this, arguments);\n      }\n      return undelegateTokens;\n    }()\n  }, {\n    key: \"withdrawRewards\",\n    value: function () {\n      var _withdrawRewards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(delegatorAddress, validatorAddress, fee) {\n        var memo,\n          withdrawMsg,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : \"\";\n                withdrawMsg = {\n                  typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n                  value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress\n                  })\n                };\n                return _context5.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo));\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function withdrawRewards(_x16, _x17, _x18) {\n        return _withdrawRewards.apply(this, arguments);\n      }\n      return withdrawRewards;\n    }()\n  }, {\n    key: \"sendIbcTokens\",\n    value: function () {\n      var _sendIbcTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, /** timeout in seconds */\n      timeoutTimestamp, fee) {\n        var memo,\n          timeoutTimestampNanoseconds,\n          transferMsg,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                memo = _args6.length > 8 && _args6[8] !== undefined ? _args6[8] : \"\";\n                timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n                transferMsg = {\n                  typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                  value: tx_4.MsgTransfer.fromPartial({\n                    sourcePort: sourcePort,\n                    sourceChannel: sourceChannel,\n                    sender: senderAddress,\n                    receiver: recipientAddress,\n                    token: transferAmount,\n                    timeoutHeight: timeoutHeight,\n                    timeoutTimestamp: timeoutTimestampNanoseconds\n                  })\n                };\n                return _context6.abrupt(\"return\", this.signAndBroadcast(senderAddress, [transferMsg], fee, memo));\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function sendIbcTokens(_x19, _x20, _x21, _x22, _x23, _x24, _x25, _x26) {\n        return _sendIbcTokens.apply(this, arguments);\n      }\n      return sendIbcTokens;\n    }()\n  }, {\n    key: \"signAndBroadcast\",\n    value: function () {\n      var _signAndBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(signerAddress, messages, fee) {\n        var memo,\n          usedFee,\n          gasEstimation,\n          multiplier,\n          txRaw,\n          txBytes,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                memo = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : \"\";\n                if (!(fee == \"auto\" || typeof fee === \"number\")) {\n                  _context7.next = 10;\n                  break;\n                }\n                (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n                _context7.next = 5;\n                return this.simulate(signerAddress, messages, memo);\n              case 5:\n                gasEstimation = _context7.sent;\n                multiplier = typeof fee === \"number\" ? fee : 1.3;\n                usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n                _context7.next = 11;\n                break;\n              case 10:\n                usedFee = fee;\n              case 11:\n                _context7.next = 13;\n                return this.sign(signerAddress, messages, usedFee, memo);\n              case 13:\n                txRaw = _context7.sent;\n                txBytes = tx_3.TxRaw.encode(txRaw).finish();\n                return _context7.abrupt(\"return\", this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs));\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function signAndBroadcast(_x27, _x28, _x29) {\n        return _signAndBroadcast.apply(this, arguments);\n      }\n      return signAndBroadcast;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     *\n     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n     *\n     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n     * (See the SigningStargateClient.offline constructor).\n     */\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(signerAddress, messages, fee, memo, explicitSignerData) {\n        var signerData, _yield$this$getSequen2, accountNumber, sequence, chainId;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!explicitSignerData) {\n                  _context8.next = 4;\n                  break;\n                }\n                signerData = explicitSignerData;\n                _context8.next = 13;\n                break;\n              case 4:\n                _context8.next = 6;\n                return this.getSequence(signerAddress);\n              case 6:\n                _yield$this$getSequen2 = _context8.sent;\n                accountNumber = _yield$this$getSequen2.accountNumber;\n                sequence = _yield$this$getSequen2.sequence;\n                _context8.next = 11;\n                return this.getChainId();\n              case 11:\n                chainId = _context8.sent;\n                signerData = {\n                  accountNumber: accountNumber,\n                  sequence: sequence,\n                  chainId: chainId\n                };\n              case 13:\n                return _context8.abrupt(\"return\", (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData));\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function sign(_x30, _x31, _x32, _x33, _x34) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n  }, {\n    key: \"signAmino\",\n    value: function () {\n      var _signAmino = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(signerAddress, messages, fee, memo, _ref) {\n        var _this3 = this;\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, signMode, msgs, signDoc, _yield$this$signer$si, signature, signed, signedTxBody, signedTxBodyEncodeObject, signedTxBodyBytes, signedGasLimit, signedSequence, signedAuthInfoBytes;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accountNumber = _ref.accountNumber, sequence = _ref.sequence, chainId = _ref.chainId;\n                (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n                _context9.next = 4;\n                return this.signer.getAccounts();\n              case 4:\n                accountFromSigner = _context9.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n                if (accountFromSigner) {\n                  _context9.next = 7;\n                  break;\n                }\n                throw new Error(\"Failed to retrieve account from signer\");\n              case 7:\n                pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n                signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n                msgs = messages.map(function (msg) {\n                  return _this3.aminoTypes.toAmino(msg);\n                });\n                signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context9.next = 13;\n                return this.signer.signAmino(signerAddress, signDoc);\n              case 13:\n                _yield$this$signer$si = _context9.sent;\n                signature = _yield$this$signer$si.signature;\n                signed = _yield$this$signer$si.signed;\n                signedTxBody = {\n                  messages: signed.msgs.map(function (msg) {\n                    return _this3.aminoTypes.fromAmino(msg);\n                  }),\n                  memo: signed.memo\n                };\n                signedTxBodyEncodeObject = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: signedTxBody\n                };\n                signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n                signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n                signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n                signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n                  pubkey: pubkey,\n                  sequence: signedSequence\n                }], signed.fee.amount, signedGasLimit, signMode);\n                return _context9.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                  bodyBytes: signedTxBodyBytes,\n                  authInfoBytes: signedAuthInfoBytes,\n                  signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n                }));\n              case 23:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function signAmino(_x35, _x36, _x37, _x38, _x39) {\n        return _signAmino.apply(this, arguments);\n      }\n      return signAmino;\n    }()\n  }, {\n    key: \"signDirect\",\n    value: function () {\n      var _signDirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(signerAddress, messages, fee, memo, _ref2) {\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, txBodyEncodeObject, txBodyBytes, gasLimit, authInfoBytes, signDoc, _yield$this$signer$si2, signature, signed;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                accountNumber = _ref2.accountNumber, sequence = _ref2.sequence, chainId = _ref2.chainId;\n                (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n                _context10.next = 4;\n                return this.signer.getAccounts();\n              case 4:\n                accountFromSigner = _context10.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n                if (accountFromSigner) {\n                  _context10.next = 7;\n                  break;\n                }\n                throw new Error(\"Failed to retrieve account from signer\");\n              case 7:\n                pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n                txBodyEncodeObject = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: {\n                    messages: messages,\n                    memo: memo\n                  }\n                };\n                txBodyBytes = this.registry.encode(txBodyEncodeObject);\n                gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n                authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n                  pubkey: pubkey,\n                  sequence: sequence\n                }], fee.amount, gasLimit);\n                signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n                _context10.next = 15;\n                return this.signer.signDirect(signerAddress, signDoc);\n              case 15:\n                _yield$this$signer$si2 = _context10.sent;\n                signature = _yield$this$signer$si2.signature;\n                signed = _yield$this$signer$si2.signed;\n                return _context10.abrupt(\"return\", tx_3.TxRaw.fromPartial({\n                  bodyBytes: signed.bodyBytes,\n                  authInfoBytes: signed.authInfoBytes,\n                  signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n                }));\n              case 19:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function signDirect(_x40, _x41, _x42, _x43, _x44) {\n        return _signDirect.apply(this, arguments);\n      }\n      return signDirect;\n    }()\n  }], [{\n    key: \"connectWithSigner\",\n    value: function () {\n      var _connectWithSigner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(endpoint, signer) {\n        var options,\n          tmClient,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};\n                _context11.next = 3;\n                return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n              case 3:\n                tmClient = _context11.sent;\n                return _context11.abrupt(\"return\", new SigningStargateClient(tmClient, signer, options));\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n      function connectWithSigner(_x45, _x46) {\n        return _connectWithSigner.apply(this, arguments);\n      }\n      return connectWithSigner;\n    }()\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n  }, {\n    key: \"offline\",\n    value: function () {\n      var _offline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(signer) {\n        var options,\n          _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                return _context12.abrupt(\"return\", new SigningStargateClient(undefined, signer, options));\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n      function offline(_x47) {\n        return _offline.apply(this, arguments);\n      }\n      return offline;\n    }()\n  }]);\n  return SigningStargateClient;\n}(stargateclient_1.StargateClient);\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"sources":["../src/signingstargateclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst aminotypes_1 = require(\"./aminotypes\");\nconst fee_1 = require(\"./fee\");\nconst modules_1 = require(\"./modules\");\nconst modules_2 = require(\"./modules\");\nconst stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [\n    [\"/cosmos.base.v1beta1.Coin\", coin_1.Coin],\n    ...modules_1.authzTypes,\n    ...modules_1.bankTypes,\n    ...modules_1.distributionTypes,\n    ...modules_1.feegrantTypes,\n    ...modules_1.govTypes,\n    ...modules_1.stakingTypes,\n    ...modules_1.ibcTypes,\n    ...modules_1.vestingTypes,\n];\nfunction createDefaultRegistry() {\n    return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nfunction createDefaultTypes(prefix) {\n    return {\n        ...(0, modules_2.createAuthzAminoConverters)(),\n        ...(0, modules_2.createBankAminoConverters)(),\n        ...(0, modules_2.createDistributionAminoConverters)(),\n        ...(0, modules_2.createGovAminoConverters)(),\n        ...(0, modules_2.createStakingAminoConverters)(prefix),\n        ...(0, modules_2.createIbcAminoConverters)(),\n        ...(0, modules_2.createFreegrantAminoConverters)(),\n        ...(0, modules_2.createVestingAminoConverters)(),\n    };\n}\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n    constructor(tmClient, signer, options) {\n        var _a;\n        super(tmClient, options);\n        // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n        const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n        const { registry = createDefaultRegistry(), aminoTypes = new aminotypes_1.AminoTypes(createDefaultTypes(prefix)) } = options;\n        this.registry = registry;\n        this.aminoTypes = aminoTypes;\n        this.signer = signer;\n        this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n        this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n        this.gasPrice = options.gasPrice;\n    }\n    static async connectWithSigner(endpoint, signer, options = {}) {\n        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n        return new SigningStargateClient(tmClient, signer, options);\n    }\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n    static async offline(signer, options = {}) {\n        return new SigningStargateClient(undefined, signer, options);\n    }\n    async simulate(signerAddress, messages, memo) {\n        const anyMsgs = messages.map((m) => this.registry.encodeAsAny(m));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n        const { sequence } = await this.getSequence(signerAddress);\n        const { gasInfo } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n        (0, utils_1.assertDefined)(gasInfo);\n        return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n    }\n    async sendTokens(senderAddress, recipientAddress, amount, fee, memo = \"\") {\n        const sendMsg = {\n            typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n            value: {\n                fromAddress: senderAddress,\n                toAddress: recipientAddress,\n                amount: [...amount],\n            },\n        };\n        return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n    }\n    async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n        const delegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n            value: tx_2.MsgDelegate.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n                amount: amount,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n    }\n    async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n        const undelegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n            value: tx_2.MsgUndelegate.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n                amount: amount,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n    }\n    async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = \"\") {\n        const withdrawMsg = {\n            typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n            value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n    }\n    async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, \n    /** timeout in seconds */\n    timeoutTimestamp, fee, memo = \"\") {\n        const timeoutTimestampNanoseconds = timeoutTimestamp\n            ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000)\n            : undefined;\n        const transferMsg = {\n            typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n            value: tx_4.MsgTransfer.fromPartial({\n                sourcePort: sourcePort,\n                sourceChannel: sourceChannel,\n                sender: senderAddress,\n                receiver: recipientAddress,\n                token: transferAmount,\n                timeoutHeight: timeoutHeight,\n                timeoutTimestamp: timeoutTimestampNanoseconds,\n            }),\n        };\n        return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n    }\n    async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n        let usedFee;\n        if (fee == \"auto\" || typeof fee === \"number\") {\n            (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n            const gasEstimation = await this.simulate(signerAddress, messages, memo);\n            const multiplier = typeof fee === \"number\" ? fee : 1.3;\n            usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n        }\n        else {\n            usedFee = fee;\n        }\n        const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n        const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n        return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n    }\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     *\n     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n     *\n     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n     * (See the SigningStargateClient.offline constructor).\n     */\n    async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n        let signerData;\n        if (explicitSignerData) {\n            signerData = explicitSignerData;\n        }\n        else {\n            const { accountNumber, sequence } = await this.getSequence(signerAddress);\n            const chainId = await this.getChainId();\n            signerData = {\n                accountNumber: accountNumber,\n                sequence: sequence,\n                chainId: chainId,\n            };\n        }\n        return (0, proto_signing_1.isOfflineDirectSigner)(this.signer)\n            ? this.signDirect(signerAddress, messages, fee, memo, signerData)\n            : this.signAmino(signerAddress, messages, fee, memo, signerData);\n    }\n    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {\n        (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));\n        const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n        const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);\n        const signedTxBody = {\n            messages: signed.msgs.map((msg) => this.aminoTypes.fromAmino(msg)),\n            memo: signed.memo,\n        };\n        const signedTxBodyEncodeObject = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: signedTxBody,\n        };\n        const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n        const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n        const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n        const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence: signedSequence }], signed.fee.amount, signedGasLimit, signMode);\n        return tx_3.TxRaw.fromPartial({\n            bodyBytes: signedTxBodyBytes,\n            authInfoBytes: signedAuthInfoBytes,\n            signatures: [(0, encoding_1.fromBase64)(signature.signature)],\n        });\n    }\n    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {\n        (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n        const txBodyEncodeObject = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: {\n                messages: messages,\n                memo: memo,\n            },\n        };\n        const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n        const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n        const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{ pubkey, sequence }], fee.amount, gasLimit);\n        const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);\n        return tx_3.TxRaw.fromPartial({\n            bodyBytes: signed.bodyBytes,\n            authInfoBytes: signed.authInfoBytes,\n            signatures: [(0, encoding_1.fromBase64)(signature.signature)],\n        });\n    }\n}\nexports.SigningStargateClient = SigningStargateClient;\n//# sourceMappingURL=signingstargateclient.js.map"]},"metadata":{},"sourceType":"script"}