{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMeteorPostMessenger = void 0;\nconst nanoid_1 = require(\"nanoid\");\nconst envConfig_1 = require(\"../envConfig\");\nconst ExternalActionTypes_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionTypes\");\nconst query_string_1 = require(\"query-string\");\nconst ExternalActionErrorMessages_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionErrorMessages\");\nconst app_constants_1 = require(\"../../../meteor-common/src/constants/app_constants\");\nclass ComWindow {\n  constructor(connection, listener) {\n    const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\n    const url = new URL(baseWalletUrl);\n    this.walletOrigin = url.origin;\n    if (window.meteorCom == null) {\n      this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message;\n      console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\n      const queryParams = {\n        source: ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message,\n        connectionUid: connection.uid\n      };\n      const w = app_constants_1.SIGN_POPUP_WIDTH;\n      const h = app_constants_1.SIGN_POPUP_HEIGHT;\n      const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\n      const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\n      const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, \"_blank\", `popup=1,width=${w},height=${h},top=${y},left=${x}`);\n      if (newWindow != null) {\n        this.websiteWindow = newWindow;\n      } else {\n        throw new ExternalActionTypes_1.MeteorActionError({\n          message: \"Couldn't open popup window to complete wallet action\",\n          endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.POPUP_WINDOW_OPEN_FAILED]\n        });\n      }\n      window.addEventListener(\"message\", event => listener(event.data));\n      this.wasOpened = false;\n    } else {\n      this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.extension_injected;\n      this.wasOpened = true;\n      // console.log(\"Need to communicate with the extension!\");\n      window.meteorCom.addMessageDataListener(listener);\n    }\n  }\n  focus() {\n    var _a;\n    if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n      (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }\n  sendMessage(data) {\n    var _a, _b;\n    if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n      (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.postMessage(data, this.walletOrigin);\n    } else {\n      (_b = window.meteorCom) === null || _b === void 0 ? void 0 : _b.sendMessageData(data);\n    }\n  }\n  isWindowClosed() {\n    var _a, _b;\n    if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n      return (_b = (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : true;\n    } else {\n      return false;\n    }\n  }\n  hasActiveWindow() {\n    if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n      return this.websiteWindow != null;\n    } else {\n      return true;\n    }\n  }\n  close() {\n    if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\n      delete this.websiteWindow;\n    } else {}\n  }\n}\nconst pingInterval = 450;\nclass MeteorPostMessenger {\n  constructor() {\n    this.connections = [];\n    // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\n    const baseUrl = envConfig_1.envConfig.wallet_base_url;\n    const url = new URL(baseUrl);\n    this.baseWalletUrl = baseUrl;\n    this.walletOrigin = url.origin;\n    this.listener = data => {\n      if (data != null) {\n        // const data: TClientPostMessageResponse = event.data;\n        // console.log(\"Meteor Post Messenger received event with data: \", data);\n        const currentConnection = this.connections.find(con => con.uid === data.uid);\n        if (currentConnection != null) {\n          this.updateConnection(currentConnection.uid, {\n            lastConnection: Date.now()\n          });\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.attempting_reconnect) {\n            this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing\n            });\n            this.sendComs();\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.connected && currentConnection.status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\n            this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.connected\n            });\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success) {\n            currentConnection.resolve({\n              success: true,\n              endTags: [],\n              payload: data.payload\n            });\n            this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success\n            });\n            this.sendComs();\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail) {\n            this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail\n            });\n            this.sendComs();\n            // const error = new MeteorActionError({ endTags: data.endTags });\n            // console.log(\"Ending failure with error\", { ...error });\n            currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\n              endTags: data.endTags\n            }));\n          }\n          if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window) {\n            this.updateConnection(currentConnection.uid, {\n              status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window\n            });\n            currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\n              endTags: data.endTags,\n              message: \"User closed the window\"\n            }));\n          }\n          if ([ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window, ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success].includes(data.status)) {\n            this.removeConnection(currentConnection.uid);\n          }\n        } /* else {\r\n          console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n          }*/\n      }\n    };\n    // window.addEventListener(\"message\", this.listener);\n  }\n\n  removeConnection(uid) {\n    this.connections = this.connections.filter(con => con.uid !== uid);\n    if (this.connections.length === 0) {\n      delete this.comWindow;\n      clearInterval(this.comInterval);\n      delete this.comInterval;\n    }\n  }\n  updateConnection(uid, newConnectionProperties) {\n    this.connections = this.connections.map(con => {\n      if (con.uid === uid) {\n        return {\n          ...con,\n          ...newConnectionProperties,\n          uid: con.uid\n        };\n      }\n      return con;\n    });\n  }\n  sendComs() {\n    var _a;\n    if (((_a = this.comWindow) === null || _a === void 0 ? void 0 : _a.hasActiveWindow()) && this.connections.length > 0) {\n      if (this.comInterval == null) {\n        this.comInterval = setInterval(() => this.sendComs(), pingInterval);\n      }\n      if (this.comWindow.isWindowClosed()) {\n        if (this.comWindow.wasOpened) {\n          for (const con of this.connections) {\n            con.reject(new ExternalActionTypes_1.MeteorActionError({\n              message: \"User closed the window before completing the action\",\n              endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.INCOMPLETE_ACTION, ExternalActionErrorMessages_1.EMeteorActionErrorTag.WINDOW_CLOSED]\n            }));\n          }\n          this.connections = [];\n          this.comWindow.close();\n        } else {\n          console.log(\"Window is closed, need to allow popup\");\n        }\n      } else {\n        this.comWindow.wasOpened = true;\n        for (const {\n          network,\n          actionType,\n          endTags,\n          status,\n          inputs,\n          uid\n        } of this.connections) {\n          const postMessage = {\n            endTags,\n            actionType: actionType,\n            status,\n            uid,\n            network\n          };\n          if (status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\n            postMessage.inputs = inputs;\n          }\n          this.comWindow.sendMessage(postMessage);\n        }\n      }\n    } else {\n      clearInterval(this.comInterval);\n      delete this.comInterval;\n    }\n  }\n  addAndStartConnection(connection) {\n    if (this.connections.length > 0) {\n      for (const con of this.connections) {\n        con.status = ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected;\n        con.endTags = [ExternalActionErrorMessages_1.EMeteorActionErrorTag.NEW_ACTION_STARTED];\n      }\n    }\n    this.connections.push(connection);\n    if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\n      this.comWindow = new ComWindow(connection, this.listener);\n    } else {\n      this.comWindow.focus();\n    }\n    this.sendComs();\n  }\n  async connectAndWaitForResponse(_ref) {\n    let {\n      actionType,\n      network,\n      inputs\n    } = _ref;\n    let newConnection = {\n      uid: (0, nanoid_1.nanoid)(),\n      actionType,\n      lastAttemptedConnection: 0,\n      lastConnection: 0,\n      status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\n      promise: undefined,\n      reject: undefined,\n      resolve: undefined,\n      currentPayload: {},\n      inputs,\n      network,\n      endTags: []\n    };\n    const promise = new Promise((resolve, reject) => {\n      newConnection.resolve = resolve;\n      newConnection.reject = error => {\n        this.connections = this.connections.filter(con => con.uid !== newConnection.uid);\n        reject(error);\n      };\n    });\n    newConnection.promise = promise;\n    this.addAndStartConnection(newConnection);\n    return await promise;\n  }\n}\nlet postMessenger;\nfunction getMeteorPostMessenger() {\n  if (postMessenger == null) {\n    postMessenger = new MeteorPostMessenger();\n  }\n  return postMessenger;\n}\nexports.getMeteorPostMessenger = getMeteorPostMessenger;","map":{"version":3,"sources":["meteor-sdk/src/postMessage/MeteorPostMessenger.ts"],"names":[],"mappings":"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","sourceRoot":"./src/","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getMeteorPostMessenger = void 0;\r\nconst nanoid_1 = require(\"nanoid\");\r\nconst envConfig_1 = require(\"../envConfig\");\r\nconst ExternalActionTypes_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionTypes\");\r\nconst query_string_1 = require(\"query-string\");\r\nconst ExternalActionErrorMessages_1 = require(\"../../../meteor-common/src/models/external_actions/ExternalActionErrorMessages\");\r\nconst app_constants_1 = require(\"../../../meteor-common/src/constants/app_constants\");\r\nclass ComWindow {\r\n    constructor(connection, listener) {\r\n        const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseWalletUrl);\r\n        this.walletOrigin = url.origin;\r\n        if (window.meteorCom == null) {\r\n            this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message;\r\n            console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\r\n            const queryParams = {\r\n                source: ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message,\r\n                connectionUid: connection.uid,\r\n            };\r\n            const w = app_constants_1.SIGN_POPUP_WIDTH;\r\n            const h = app_constants_1.SIGN_POPUP_HEIGHT;\r\n            const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\r\n            const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\r\n            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, \"_blank\", `popup=1,width=${w},height=${h},top=${y},left=${x}`);\r\n            if (newWindow != null) {\r\n                this.websiteWindow = newWindow;\r\n            }\r\n            else {\r\n                throw new ExternalActionTypes_1.MeteorActionError({\r\n                    message: \"Couldn't open popup window to complete wallet action\",\r\n                    endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.POPUP_WINDOW_OPEN_FAILED],\r\n                });\r\n            }\r\n            window.addEventListener(\"message\", (event) => listener(event.data));\r\n            this.wasOpened = false;\r\n        }\r\n        else {\r\n            this.comType = ExternalActionTypes_1.EMeteorWalletExternalActionSource.extension_injected;\r\n            this.wasOpened = true;\r\n            // console.log(\"Need to communicate with the extension!\");\r\n            window.meteorCom.addMessageDataListener(listener);\r\n        }\r\n    }\r\n    focus() {\r\n        var _a;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.focus();\r\n        }\r\n    }\r\n    sendMessage(data) {\r\n        var _a, _b;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.postMessage(data, this.walletOrigin);\r\n        }\r\n        else {\r\n            (_b = window.meteorCom) === null || _b === void 0 ? void 0 : _b.sendMessageData(data);\r\n        }\r\n    }\r\n    isWindowClosed() {\r\n        var _a, _b;\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            return (_b = (_a = this.websiteWindow) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hasActiveWindow() {\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            return this.websiteWindow != null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    close() {\r\n        if (this.comType === ExternalActionTypes_1.EMeteorWalletExternalActionSource.website_post_message) {\r\n            delete this.websiteWindow;\r\n        }\r\n        else {\r\n        }\r\n    }\r\n}\r\nconst pingInterval = 450;\r\nclass MeteorPostMessenger {\r\n    constructor() {\r\n        this.connections = [];\r\n        // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\r\n        const baseUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseUrl);\r\n        this.baseWalletUrl = baseUrl;\r\n        this.walletOrigin = url.origin;\r\n        this.listener = (data) => {\r\n            if (data != null) {\r\n                // const data: TClientPostMessageResponse = event.data;\r\n                // console.log(\"Meteor Post Messenger received event with data: \", data);\r\n                const currentConnection = this.connections.find((con) => con.uid === data.uid);\r\n                if (currentConnection != null) {\r\n                    this.updateConnection(currentConnection.uid, {\r\n                        lastConnection: Date.now(),\r\n                    });\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.attempting_reconnect) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.connected &&\r\n                        currentConnection.status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.connected,\r\n                        });\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success) {\r\n                        currentConnection.resolve({\r\n                            success: true,\r\n                            endTags: [],\r\n                            payload: data.payload,\r\n                        });\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail,\r\n                        });\r\n                        this.sendComs();\r\n                        // const error = new MeteorActionError({ endTags: data.endTags });\r\n                        // console.log(\"Ending failure with error\", { ...error });\r\n                        currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({ endTags: data.endTags }));\r\n                    }\r\n                    if (data.status === ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window,\r\n                        });\r\n                        currentConnection.reject(new ExternalActionTypes_1.MeteorActionError({\r\n                            endTags: data.endTags,\r\n                            message: \"User closed the window\",\r\n                        }));\r\n                    }\r\n                    if ([\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_fail,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_window,\r\n                        ExternalActionTypes_1.EExternalActionConnectionStatus.closed_success,\r\n                    ].includes(data.status)) {\r\n                        this.removeConnection(currentConnection.uid);\r\n                    }\r\n                } /* else {\r\n                  console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n                }*/\r\n            }\r\n        };\r\n        // window.addEventListener(\"message\", this.listener);\r\n    }\r\n    removeConnection(uid) {\r\n        this.connections = this.connections.filter((con) => con.uid !== uid);\r\n        if (this.connections.length === 0) {\r\n            delete this.comWindow;\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    updateConnection(uid, newConnectionProperties) {\r\n        this.connections = this.connections.map((con) => {\r\n            if (con.uid === uid) {\r\n                return {\r\n                    ...con,\r\n                    ...newConnectionProperties,\r\n                    uid: con.uid,\r\n                };\r\n            }\r\n            return con;\r\n        });\r\n    }\r\n    sendComs() {\r\n        var _a;\r\n        if (((_a = this.comWindow) === null || _a === void 0 ? void 0 : _a.hasActiveWindow()) && this.connections.length > 0) {\r\n            if (this.comInterval == null) {\r\n                this.comInterval = setInterval(() => this.sendComs(), pingInterval);\r\n            }\r\n            if (this.comWindow.isWindowClosed()) {\r\n                if (this.comWindow.wasOpened) {\r\n                    for (const con of this.connections) {\r\n                        con.reject(new ExternalActionTypes_1.MeteorActionError({\r\n                            message: \"User closed the window before completing the action\",\r\n                            endTags: [ExternalActionErrorMessages_1.EMeteorActionErrorTag.INCOMPLETE_ACTION, ExternalActionErrorMessages_1.EMeteorActionErrorTag.WINDOW_CLOSED],\r\n                        }));\r\n                    }\r\n                    this.connections = [];\r\n                    this.comWindow.close();\r\n                }\r\n                else {\r\n                    console.log(\"Window is closed, need to allow popup\");\r\n                }\r\n            }\r\n            else {\r\n                this.comWindow.wasOpened = true;\r\n                for (const { network, actionType, endTags, status, inputs, uid } of this.connections) {\r\n                    const postMessage = {\r\n                        endTags,\r\n                        actionType: actionType,\r\n                        status,\r\n                        uid,\r\n                        network,\r\n                    };\r\n                    if (status === ExternalActionTypes_1.EExternalActionConnectionStatus.initializing) {\r\n                        postMessage.inputs = inputs;\r\n                    }\r\n                    this.comWindow.sendMessage(postMessage);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    addAndStartConnection(connection) {\r\n        if (this.connections.length > 0) {\r\n            for (const con of this.connections) {\r\n                con.status = ExternalActionTypes_1.EExternalActionConnectionStatus.disconnected;\r\n                con.endTags = [ExternalActionErrorMessages_1.EMeteorActionErrorTag.NEW_ACTION_STARTED];\r\n            }\r\n        }\r\n        this.connections.push(connection);\r\n        if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\r\n            this.comWindow = new ComWindow(connection, this.listener);\r\n        }\r\n        else {\r\n            this.comWindow.focus();\r\n        }\r\n        this.sendComs();\r\n    }\r\n    async connectAndWaitForResponse({ actionType, network, inputs, }) {\r\n        let newConnection = {\r\n            uid: (0, nanoid_1.nanoid)(),\r\n            actionType,\r\n            lastAttemptedConnection: 0,\r\n            lastConnection: 0,\r\n            status: ExternalActionTypes_1.EExternalActionConnectionStatus.initializing,\r\n            promise: undefined,\r\n            reject: undefined,\r\n            resolve: undefined,\r\n            currentPayload: {},\r\n            inputs,\r\n            network,\r\n            endTags: [],\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            newConnection.resolve = resolve;\r\n            newConnection.reject = (error) => {\r\n                this.connections = this.connections.filter((con) => con.uid !== newConnection.uid);\r\n                reject(error);\r\n            };\r\n        });\r\n        newConnection.promise = promise;\r\n        this.addAndStartConnection(newConnection);\r\n        return await promise;\r\n    }\r\n}\r\nlet postMessenger;\r\nfunction getMeteorPostMessenger() {\r\n    if (postMessenger == null) {\r\n        postMessenger = new MeteorPostMessenger();\r\n    }\r\n    return postMessenger;\r\n}\r\nexports.getMeteorPostMessenger = getMeteorPostMessenger;\r\n//# sourceMappingURL=MeteorPostMessenger.js.map"]},"metadata":{},"sourceType":"script"}