{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TupleSlice = void 0;\nconst bn_js_1 = require(\"bn.js\");\nconst bnToAddress_1 = require(\"../utils/bnToAddress\");\nconst Cell_1 = require(\"./Cell\");\nclass TupleSlice {\n  constructor(items) {\n    this.items = [...items];\n  }\n  get remaining() {\n    return this.items.length;\n  }\n  readNumber() {\n    if (this.items[0][0] !== 'num') {\n      throw Error('Not a number');\n    }\n    let res = parseInt(this.items[0][1]);\n    this.items.splice(0, 1);\n    return res;\n  }\n  readBoolean() {\n    if (this.items[0][0] !== 'num') {\n      throw Error('Not a number');\n    }\n    let res = parseInt(this.items[0][1]);\n    this.items.splice(0, 1);\n    return res === 0 ? false : true;\n  }\n  readBigNumber() {\n    if (this.items[0][0] !== 'num') {\n      throw Error('Not a number');\n    }\n    let res = new bn_js_1.BN(this.items[0][1].slice(2), 'hex');\n    this.items.splice(0, 1);\n    return res;\n  }\n  readCell() {\n    if (this.items[0][0] !== 'cell') {\n      throw Error('Not a cell');\n    }\n    let res = Cell_1.Cell.fromBoc(Buffer.from(this.items[0][1].bytes, 'base64'))[0];\n    this.items.splice(0, 1);\n    return res;\n  }\n  readNumericAddress(chain) {\n    if (this.items[0][0] !== 'num') {\n      throw Error('Not a number');\n    }\n    let bn = this.readBigNumber();\n    return (0, bnToAddress_1.bnToAddress)(chain, bn);\n  }\n}\nexports.TupleSlice = TupleSlice;","map":{"version":3,"names":["Object","defineProperty","exports","value","TupleSlice","bn_js_1","require","bnToAddress_1","Cell_1","constructor","items","remaining","length","readNumber","Error","res","parseInt","splice","readBoolean","readBigNumber","BN","slice","readCell","Cell","fromBoc","Buffer","from","bytes","readNumericAddress","chain","bn","bnToAddress"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/TupleSlice.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TupleSlice = void 0;\nconst bn_js_1 = require(\"bn.js\");\nconst bnToAddress_1 = require(\"../utils/bnToAddress\");\nconst Cell_1 = require(\"./Cell\");\nclass TupleSlice {\n    constructor(items) {\n        this.items = [...items];\n    }\n    get remaining() {\n        return this.items.length;\n    }\n    readNumber() {\n        if (this.items[0][0] !== 'num') {\n            throw Error('Not a number');\n        }\n        let res = parseInt(this.items[0][1]);\n        this.items.splice(0, 1);\n        return res;\n    }\n    readBoolean() {\n        if (this.items[0][0] !== 'num') {\n            throw Error('Not a number');\n        }\n        let res = parseInt(this.items[0][1]);\n        this.items.splice(0, 1);\n        return res === 0 ? false : true;\n    }\n    readBigNumber() {\n        if (this.items[0][0] !== 'num') {\n            throw Error('Not a number');\n        }\n        let res = new bn_js_1.BN(this.items[0][1].slice(2), 'hex');\n        this.items.splice(0, 1);\n        return res;\n    }\n    readCell() {\n        if (this.items[0][0] !== 'cell') {\n            throw Error('Not a cell');\n        }\n        let res = Cell_1.Cell.fromBoc(Buffer.from(this.items[0][1].bytes, 'base64'))[0];\n        this.items.splice(0, 1);\n        return res;\n    }\n    readNumericAddress(chain) {\n        if (this.items[0][0] !== 'num') {\n            throw Error('Not a number');\n        }\n        let bn = this.readBigNumber();\n        return (0, bnToAddress_1.bnToAddress)(chain, bn);\n    }\n}\nexports.TupleSlice = TupleSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}