{"ast":null,"code":"import { Cell, beginCell, Address } from \"ton\";\nimport { message } from \"antd\";\nimport BN from \"bn.js\";\nimport TonWeb from \"tonweb\";\nconst tonweb = new TonWeb(new TonWeb.HttpProvider(\"https://toncenter.com/api/v2/jsonRPC\", {\n  apiKey: \"0e864b650c2d3fed65729622d72fc8b40686f38242e0c187bf2aafe7a028ac59\"\n}));\nconst prepareParams = function () {\n  let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return params.map(p => {\n    if (p instanceof Cell) {\n      return [\"tvm.Slice\", p.toBoc({\n        idx: false\n      }).toString(\"base64\")];\n    }\n    throw new Error(\"unknown type!\");\n  });\n};\nconst parseGetMethodCall = stack => {\n  return stack.map(_ref => {\n    let [type, val] = _ref;\n    switch (type) {\n      case \"num\":\n        return new BN(val.replace(\"0x\", \"\"), \"hex\");\n      case \"cell\":\n        return Cell.fromBoc(Buffer.from(val.bytes, \"base64\"))[0];\n      case \"list\":\n        if (val.elements.length === 0) {\n          return null;\n        } else {\n          throw new Error(\"list parsing not supported\");\n        }\n      default:\n        throw new Error(`unknown type: ${type}, val: ${JSON.stringify(val)}`);\n    }\n  });\n};\nvar OPS;\n(function (OPS) {\n  OPS[OPS[\"ChangeAdmin\"] = 3] = \"ChangeAdmin\";\n  OPS[OPS[\"ReplaceMetadata\"] = 4] = \"ReplaceMetadata\";\n  OPS[OPS[\"Mint\"] = 21] = \"Mint\";\n  OPS[OPS[\"InternalTransfer\"] = 395134233] = \"InternalTransfer\";\n  OPS[OPS[\"Transfer\"] = 260734629] = \"Transfer\";\n  OPS[OPS[\"Burn\"] = 1499400124] = \"Burn\";\n})(OPS || (OPS = {}));\nexport function burn(JettonAmount, responseAddress, str) {\n  return beginCell().storeUint(OPS.Burn, 32) // action\n  .storeUint(1, 64) // query-id\n  .storeCoins(TonWeb.utils.toNano(JettonAmount)).storeAddress(responseAddress).storeRef(beginCell().storeBuffer(Buffer.from(`<DATA>${str}#${JettonAmount}<DATA>`, \"ascii\")).endCell()).storeDict(null).endCell();\n}\n\n// const jettonMainContractAdd =\n\nconst MakeTONJettonsBurnTrx = async (sourceChain, jettonMainContractAdd, activeBtn, setIsload, JettonAmount, TONwallet, netTo, walletTo) => {\n  if (activeBtn) {\n    try {\n      setIsload(true);\n      const jWalletAddress = await tonweb.call(jettonMainContractAdd, \"get_wallet_address\", prepareParams([beginCell().storeAddress(Address.parse(TONwallet)).endCell()]));\n      const data = await burn(JettonAmount, Address.parse(TONwallet), `${netTo}#${walletTo}`).toBoc().toString(\"base64\");\n      const userJWalletAdd = parseGetMethodCall(jWalletAddress.stack)[0].beginParse().readAddress().toString(false, false, false);\n      console.log(userJWalletAdd);\n      //@ts-ignore\n      await window.ton.send(\"ton_sendTransaction\", [{\n        to: userJWalletAdd,\n        dataType: \"boc\",\n        value: TonWeb.utils.toNano(0.05).toString(),\n        data: data\n      }]);\n      listener(sourceChain, walletTo, netTo, userJWalletAdd, JettonAmount, setIsload);\n\n      // setIsload(false)\n    } catch (e) {\n      console.log(\"Some Error\");\n      console.log(e);\n    }\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n_c = MakeTONJettonsBurnTrx;\nconst listener = (sourceChain, walletTo, netTo, userJWalletAdd, JettonAmount, setIsload) => {\n  let trxs = [];\n  const int = setInterval(async () => {\n    message.success(\"Wait BE trx pending...\", 2);\n    const trxsa = await tonweb.getTransactions(userJWalletAdd, 1);\n    const data = trxsa.filter(e => atob(e.in_msg.msg_data.body).split(\"<DATA>\")[1] === `${netTo}#${walletTo}#${JettonAmount}`);\n    if (!data[0] && trxs.length === 0) {\n      trxs.push({\n        transaction_id: {\n          hash: \"test\"\n        }\n      });\n    } else if (trxs.length === 0 && data[0]) {\n      trxs = data;\n    }\n    if (data[0].transaction_id.hash !== trxs[0].transaction_id.hash && trxs.length !== 0) {\n      clearInterval(int);\n      message.success(\"Done BE trx!\", 10);\n      fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\" : \"https://api.tonana.org/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          hash: data[0].transaction_id.hash,\n          sourceChain: sourceChain\n        })\n      });\n      // console.log(e);\n      setIsload(false);\n      message.success(\"Done trx!\", 10);\n    }\n  }, 8000);\n};\nexport default MakeTONJettonsBurnTrx;\nvar _c;\n$RefreshReg$(_c, \"MakeTONJettonsBurnTrx\");","map":{"version":3,"names":["Cell","beginCell","Address","message","BN","TonWeb","tonweb","HttpProvider","apiKey","prepareParams","params","map","p","toBoc","idx","toString","Error","parseGetMethodCall","stack","type","val","replace","fromBoc","Buffer","from","bytes","elements","length","JSON","stringify","OPS","burn","JettonAmount","responseAddress","str","storeUint","Burn","storeCoins","utils","toNano","storeAddress","storeRef","storeBuffer","endCell","storeDict","MakeTONJettonsBurnTrx","sourceChain","jettonMainContractAdd","activeBtn","setIsload","TONwallet","netTo","walletTo","jWalletAddress","call","parse","data","userJWalletAdd","beginParse","readAddress","console","log","window","ton","send","to","dataType","value","listener","e","error","trxs","int","setInterval","success","trxsa","getTransactions","filter","atob","in_msg","msg_data","body","split","push","transaction_id","hash","clearInterval","fetch","process","env","REACT_APP_STATE","method","headers"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeTONJettonsBurnTrx.ts"],"sourcesContent":["import { Cell, beginCell, Address, BitString } from \"ton\";\nimport { message } from \"antd\";\nimport BN from \"bn.js\";\nimport TonWeb from \"tonweb\";\n\nconst tonweb = new TonWeb(\n\tnew TonWeb.HttpProvider(\"https://toncenter.com/api/v2/jsonRPC\", {\n\t\tapiKey: \"0e864b650c2d3fed65729622d72fc8b40686f38242e0c187bf2aafe7a028ac59\",\n\t})\n);\n\nconst prepareParams = (params: Cell[] = []) => {\n\treturn params.map((p) => {\n\t\tif (p instanceof Cell) {\n\t\t\treturn [\"tvm.Slice\", p.toBoc({ idx: false }).toString(\"base64\")];\n\t\t}\n\t\tthrow new Error(\"unknown type!\");\n\t});\n};\n\nconst parseGetMethodCall = (stack: [[\"num\" | \"cell\" | \"list\", any]]): any[] => {\n\treturn stack.map(([type, val]) => {\n\t\tswitch (type) {\n\t\t\tcase \"num\":\n\t\t\t\treturn new BN(val.replace(\"0x\", \"\"), \"hex\");\n\t\t\tcase \"cell\":\n\t\t\t\treturn Cell.fromBoc(Buffer.from(val.bytes, \"base64\"))[0];\n\t\t\tcase \"list\":\n\t\t\t\tif (val.elements.length === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"list parsing not supported\");\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unknown type: ${type}, val: ${JSON.stringify(val)}`);\n\t\t}\n\t});\n};\n\nenum OPS {\n\tChangeAdmin = 3,\n\tReplaceMetadata = 4,\n\tMint = 21,\n\tInternalTransfer = 0x178d4519,\n\tTransfer = 0xf8a7ea5,\n\tBurn = 0x595f07bc,\n}\n\nexport function burn(\n\tJettonAmount: number,\n\tresponseAddress: Address,\n\tstr: String\n) {\n\treturn beginCell()\n\t\t.storeUint(OPS.Burn, 32) // action\n\t\t.storeUint(1, 64) // query-id\n\t\t.storeCoins(TonWeb.utils.toNano(JettonAmount))\n\t\t.storeAddress(responseAddress)\n\t\t.storeRef(\n\t\t\tbeginCell()\n\t\t\t\t.storeBuffer(Buffer.from(`<DATA>${str}#${JettonAmount}<DATA>`, \"ascii\"))\n\t\t\t\t.endCell()\n\t\t)\n\t\t.storeDict(null)\n\t\t.endCell();\n}\n\n// const jettonMainContractAdd =\n\nconst MakeTONJettonsBurnTrx = async (\n\tsourceChain: string,\n\tjettonMainContractAdd: string,\n\tactiveBtn: any,\n\tsetIsload: any,\n\tJettonAmount: any,\n\tTONwallet: any,\n\tnetTo: string,\n\twalletTo: any\n) => {\n\tif (activeBtn) {\n\t\ttry {\n\t\t\tsetIsload(true);\n\t\t\tconst jWalletAddress = await tonweb.call(\n\t\t\t\tjettonMainContractAdd,\n\t\t\t\t\"get_wallet_address\",\n\t\t\t\tprepareParams([\n\t\t\t\t\tbeginCell().storeAddress(Address.parse(TONwallet)).endCell(),\n\t\t\t\t]) as any\n\t\t\t);\n\t\t\tconst data = await burn(\n\t\t\t\tJettonAmount,\n\t\t\t\tAddress.parse(TONwallet),\n\t\t\t\t`${netTo}#${walletTo}`\n\t\t\t)\n\t\t\t\t.toBoc()\n\t\t\t\t.toString(\"base64\");\n\n\t\t\tconst userJWalletAdd = parseGetMethodCall(\n\t\t\t\tjWalletAddress.stack as [[\"num\" | \"cell\", any]]\n\t\t\t)[0]\n\t\t\t\t.beginParse()\n\t\t\t\t.readAddress()\n\t\t\t\t.toString(false, false, false);\n\t\t\tconsole.log(userJWalletAdd);\n\t\t\t//@ts-ignore\n\t\t\tawait window.ton.send(\"ton_sendTransaction\", [\n\t\t\t\t{\n\t\t\t\t\tto: userJWalletAdd,\n\t\t\t\t\tdataType: \"boc\",\n\t\t\t\t\tvalue: TonWeb.utils.toNano(0.05).toString(),\n\t\t\t\t\tdata: data,\n\t\t\t\t},\n\t\t\t]);\n\t\t\tlistener(\n\t\t\t\tsourceChain,\n\t\t\t\twalletTo,\n\t\t\t\tnetTo,\n\t\t\t\tuserJWalletAdd,\n\t\t\t\tJettonAmount,\n\t\t\t\tsetIsload\n\t\t\t);\n\n\t\t\t// setIsload(false)\n\t\t} catch (e: any) {\n\t\t\tconsole.log(\"Some Error\");\n\t\t\tconsole.log(e);\n\t\t}\n\t} else {\n\t\tmessage.error(\"Fill all forms and connect wallets!\", 10);\n\t}\n};\n\nconst listener = (\n\tsourceChain: string,\n\twalletTo: any,\n\tnetTo: string,\n\tuserJWalletAdd: any,\n\tJettonAmount: number,\n\tsetIsload: any\n) => {\n\tlet trxs: any = [];\n\tconst int = setInterval(async () => {\n\t\tmessage.success(\"Wait BE trx pending...\", 2);\n\n\t\tconst trxsa = await tonweb.getTransactions(userJWalletAdd, 1);\n\t\tconst data = trxsa.filter(\n\t\t\t(e: any) =>\n\t\t\t\tatob(e.in_msg.msg_data.body).split(\"<DATA>\")[1] ===\n\t\t\t\t`${netTo}#${walletTo}#${JettonAmount}`\n\t\t);\n\n\t\tif (!data[0] && trxs.length === 0) {\n\t\t\ttrxs.push({ transaction_id: { hash: \"test\" } });\n\t\t} else if (trxs.length === 0 && data[0]) {\n\t\t\ttrxs = data;\n\t\t}\n\n\t\tif (\n\t\t\tdata[0].transaction_id.hash !== trxs[0].transaction_id.hash &&\n\t\t\ttrxs.length !== 0\n\t\t) {\n\t\t\tclearInterval(int);\n\n\t\t\tmessage.success(\"Done BE trx!\", 10);\n\n\t\t\tfetch(\n\t\t\t\tprocess.env.REACT_APP_STATE === \"dev\"\n\t\t\t\t\t? \"http://localhost:8092\"\n\t\t\t\t\t: process.env.REACT_APP_STATE === \"dev-remote\"\n\t\t\t\t\t? \"https://dev.api.tonana.org\"\n\t\t\t\t\t: \"https://api.tonana.org/\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\thash: data[0].transaction_id.hash,\n\t\t\t\t\t\tsourceChain: sourceChain,\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t);\n\t\t\t// console.log(e);\n\t\t\tsetIsload(false);\n\n\t\t\tmessage.success(\"Done trx!\", 10);\n\t\t}\n\t}, 8000);\n};\n\nexport default MakeTONJettonsBurnTrx;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}