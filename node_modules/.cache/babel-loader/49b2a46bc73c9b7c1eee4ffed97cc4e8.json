{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _objectSpread = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\nvar coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nvar tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction isTsProtoGeneratedType(type) {\n  return typeof type.fromPartial === \"function\";\n}\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nfunction isPbjsGeneratedType(type) {\n  return !isTsProtoGeneratedType(type);\n}\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nvar defaultTypeUrls = {\n  cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n  cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n  cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n  googleAny: \"/google.protobuf.Any\"\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n  return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nvar Registry = /*#__PURE__*/function () {\n  /**\n   * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n   * actual implementations. Those implementations are typically generated with ts-proto\n   * but we also support protobuf.js as a type generator.\n   *\n   * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n   * for historic reasons. Those can be overriden by customTypes.\n   *\n   * There are currently two methods for adding new types:\n   * 1. Passing types to the constructor.\n   * 2. Using the `register()` method\n   */\n  function Registry(customTypes) {\n    _classCallCheck(this, Registry);\n    var cosmosCoin = defaultTypeUrls.cosmosCoin,\n      cosmosMsgSend = defaultTypeUrls.cosmosMsgSend;\n    this.types = customTypes ? new Map(_toConsumableArray(customTypes)) : new Map([[cosmosCoin, coin_1.Coin], [cosmosMsgSend, tx_1.MsgSend]]);\n  }\n  _createClass(Registry, [{\n    key: \"register\",\n    value: function register(typeUrl, type) {\n      this.types.set(typeUrl, type);\n    }\n    /**\n     * Looks up a type that was previously added to the registry.\n     *\n     * The generator information (ts-proto or pbjs) gets lost along the way.\n     * If you need to work with the result type in TypeScript, you can use:\n     *\n     * ```\n     * import { assert } from \"@cosmjs/utils\";\n     *\n     * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n     * assert(Coin); // Ensures not unset\n     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n     *\n     * // Coin is typed TsProtoGeneratedType now.\n     * ```\n     */\n  }, {\n    key: \"lookupType\",\n    value: function lookupType(typeUrl) {\n      return this.types.get(typeUrl);\n    }\n  }, {\n    key: \"lookupTypeWithError\",\n    value: function lookupTypeWithError(typeUrl) {\n      var type = this.lookupType(typeUrl);\n      if (!type) {\n        throw new Error(\"Unregistered type url: \".concat(typeUrl));\n      }\n      return type;\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to protobuf if\n     * the given type was previously registered.\n     *\n     * If the value has to be wrapped in an Any, this needs to be done\n     * manually after this call. Or use `encodeAsAny` instead.\n     */\n  }, {\n    key: \"encode\",\n    value: function encode(encodeObject) {\n      var value = encodeObject.value,\n        typeUrl = encodeObject.typeUrl;\n      if (isTxBodyEncodeObject(encodeObject)) {\n        return this.encodeTxBody(value);\n      }\n      var type = this.lookupTypeWithError(typeUrl);\n      var instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);\n      return type.encode(instance).finish();\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to an Any if\n     * the given type was previously registered.\n     */\n  }, {\n    key: \"encodeAsAny\",\n    value: function encodeAsAny(encodeObject) {\n      var binaryValue = this.encode(encodeObject);\n      return any_1.Any.fromPartial({\n        typeUrl: encodeObject.typeUrl,\n        value: binaryValue\n      });\n    }\n  }, {\n    key: \"encodeTxBody\",\n    value: function encodeTxBody(txBodyFields) {\n      var _this = this;\n      var wrappedMessages = txBodyFields.messages.map(function (message) {\n        return _this.encodeAsAny(message);\n      });\n      var txBody = tx_2.TxBody.fromPartial(_objectSpread(_objectSpread({}, txBodyFields), {}, {\n        messages: wrappedMessages\n      }));\n      return tx_2.TxBody.encode(txBody).finish();\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(_ref) {\n      var typeUrl = _ref.typeUrl,\n        value = _ref.value;\n      if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n        return this.decodeTxBody(value);\n      }\n      var type = this.lookupTypeWithError(typeUrl);\n      var decoded = type.decode(value);\n      Object.entries(decoded).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          val = _ref3[1];\n        if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n          decoded[key] = Uint8Array.from(val);\n        }\n      });\n      return decoded;\n    }\n  }, {\n    key: \"decodeTxBody\",\n    value: function decodeTxBody(txBody) {\n      var _this2 = this;\n      var decodedTxBody = tx_2.TxBody.decode(txBody);\n      return _objectSpread(_objectSpread({}, decodedTxBody), {}, {\n        messages: decodedTxBody.messages.map(function (_ref4) {\n          var typeUrl = _ref4.typeUrl,\n            value = _ref4.value;\n          if (!typeUrl) {\n            throw new Error(\"Missing type_url in Any\");\n          }\n          if (!value) {\n            throw new Error(\"Missing value in Any\");\n          }\n          return _this2.decode({\n            typeUrl: typeUrl,\n            value: value\n          });\n        })\n      });\n    }\n  }]);\n  return Registry;\n}();\nexports.Registry = Registry;","map":{"version":3,"sources":["../src/registry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\nconst tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction isTsProtoGeneratedType(type) {\n    return typeof type.fromPartial === \"function\";\n}\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nfunction isPbjsGeneratedType(type) {\n    return !isTsProtoGeneratedType(type);\n}\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nconst defaultTypeUrls = {\n    cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n    cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n    cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n    googleAny: \"/google.protobuf.Any\",\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n    return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nclass Registry {\n    /**\n     * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n     * actual implementations. Those implementations are typically generated with ts-proto\n     * but we also support protobuf.js as a type generator.\n     *\n     * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n     * for historic reasons. Those can be overriden by customTypes.\n     *\n     * There are currently two methods for adding new types:\n     * 1. Passing types to the constructor.\n     * 2. Using the `register()` method\n     */\n    constructor(customTypes) {\n        const { cosmosCoin, cosmosMsgSend } = defaultTypeUrls;\n        this.types = customTypes\n            ? new Map([...customTypes])\n            : new Map([\n                [cosmosCoin, coin_1.Coin],\n                [cosmosMsgSend, tx_1.MsgSend],\n            ]);\n    }\n    register(typeUrl, type) {\n        this.types.set(typeUrl, type);\n    }\n    /**\n     * Looks up a type that was previously added to the registry.\n     *\n     * The generator information (ts-proto or pbjs) gets lost along the way.\n     * If you need to work with the result type in TypeScript, you can use:\n     *\n     * ```\n     * import { assert } from \"@cosmjs/utils\";\n     *\n     * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n     * assert(Coin); // Ensures not unset\n     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n     *\n     * // Coin is typed TsProtoGeneratedType now.\n     * ```\n     */\n    lookupType(typeUrl) {\n        return this.types.get(typeUrl);\n    }\n    lookupTypeWithError(typeUrl) {\n        const type = this.lookupType(typeUrl);\n        if (!type) {\n            throw new Error(`Unregistered type url: ${typeUrl}`);\n        }\n        return type;\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to protobuf if\n     * the given type was previously registered.\n     *\n     * If the value has to be wrapped in an Any, this needs to be done\n     * manually after this call. Or use `encodeAsAny` instead.\n     */\n    encode(encodeObject) {\n        const { value, typeUrl } = encodeObject;\n        if (isTxBodyEncodeObject(encodeObject)) {\n            return this.encodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);\n        return type.encode(instance).finish();\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to an Any if\n     * the given type was previously registered.\n     */\n    encodeAsAny(encodeObject) {\n        const binaryValue = this.encode(encodeObject);\n        return any_1.Any.fromPartial({\n            typeUrl: encodeObject.typeUrl,\n            value: binaryValue,\n        });\n    }\n    encodeTxBody(txBodyFields) {\n        const wrappedMessages = txBodyFields.messages.map((message) => this.encodeAsAny(message));\n        const txBody = tx_2.TxBody.fromPartial({\n            ...txBodyFields,\n            messages: wrappedMessages,\n        });\n        return tx_2.TxBody.encode(txBody).finish();\n    }\n    decode({ typeUrl, value }) {\n        if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n            return this.decodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const decoded = type.decode(value);\n        Object.entries(decoded).forEach(([key, val]) => {\n            if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n                decoded[key] = Uint8Array.from(val);\n            }\n        });\n        return decoded;\n    }\n    decodeTxBody(txBody) {\n        const decodedTxBody = tx_2.TxBody.decode(txBody);\n        return {\n            ...decodedTxBody,\n            messages: decodedTxBody.messages.map(({ typeUrl: typeUrl, value }) => {\n                if (!typeUrl) {\n                    throw new Error(\"Missing type_url in Any\");\n                }\n                if (!value) {\n                    throw new Error(\"Missing value in Any\");\n                }\n                return this.decode({ typeUrl, value });\n            }),\n        };\n    }\n}\nexports.Registry = Registry;\n//# sourceMappingURL=registry.js.map"]},"metadata":{},"sourceType":"script"}