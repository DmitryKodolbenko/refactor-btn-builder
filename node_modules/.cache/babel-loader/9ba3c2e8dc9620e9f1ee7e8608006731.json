{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n  return tendermint_1.ClientState.decode(clientState.value);\n}\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\nfunction setupIbcExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n  const channelQueryService = new query_2.QueryClientImpl(rpc);\n  const clientQueryService = new query_3.QueryClientImpl(rpc);\n  const connectionQueryService = new query_4.QueryClientImpl(rpc);\n  const transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: async (portId, channelId) => channelQueryService.Channel({\n          portId: portId,\n          channelId: channelId\n        }),\n        channels: async paginationKey => channelQueryService.Channels({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allChannels: async () => {\n          var _a;\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.Channels({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n          connection: connection,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnectionChannels: async connection => {\n          var _a;\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.ConnectionChannels({\n              connection: connection,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n          portId: portId,\n          channelId: channelId\n        }),\n        consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n          portId: portId,\n          channelId: channelId,\n          revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }),\n        packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n          portId: portId,\n          channelId: channelId,\n          sequence: sequence\n        }),\n        packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n          channelId: channelId,\n          portId: portId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketCommitments: async (portId, channelId) => {\n          var _a;\n          const commitments = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.PacketCommitments({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            commitments.push(...response.commitments);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            commitments: commitments,\n            height: response.height\n          };\n        },\n        packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({\n          portId: portId,\n          channelId: channelId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketAcknowledgements: async (portId, channelId) => {\n          var _a;\n          const acknowledgements = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.PacketAcknowledgements({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            acknowledgements.push(...response.acknowledgements);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            acknowledgements: acknowledgements,\n            height: response.height\n          };\n        },\n        unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n          portId: portId,\n          channelId: channelId,\n          packetCommitmentSequences: packetCommitmentSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n          portId: portId,\n          channelId: channelId,\n          packetAckSequences: packetAckSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n          portId: portId,\n          channelId: channelId\n        })\n      },\n      client: {\n        state: async clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: async paginationKey => clientQueryService.ClientStates({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allStates: async () => {\n          var _a;\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            clientStates: clientStates\n          };\n        },\n        consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n          clientId: clientId,\n          revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId: clientId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConsensusStates: async clientId => {\n          var _a;\n          const consensusStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ConsensusStates({\n              clientId: clientId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            consensusStates: consensusStates\n          };\n        },\n        params: async () => clientQueryService.ClientParams({}),\n        stateTm: async clientId => {\n          const response = await clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        },\n        statesTm: async paginationKey => {\n          const {\n            clientStates\n          } = await clientQueryService.ClientStates({\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return clientStates.map(_ref => {\n            let {\n              clientState\n            } = _ref;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        allStatesTm: async () => {\n          var _a;\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return clientStates.map(_ref2 => {\n            let {\n              clientState\n            } = _ref2;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        consensusStateTm: async (clientId, consensusHeight) => {\n          const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n            clientId: clientId,\n            revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n            revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        }\n      },\n      connection: {\n        connection: async connectionId => connectionQueryService.Connection({\n          connectionId: connectionId\n        }),\n        connections: async paginationKey => connectionQueryService.Connections({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnections: async () => {\n          var _a;\n          const connections = [];\n          let response;\n          let key;\n          do {\n            response = await connectionQueryService.Connections({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            connections.push(...response.connections);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            connections: connections,\n            height: response.height\n          };\n        },\n        clientConnections: async clientId => connectionQueryService.ClientConnections({\n          clientId: clientId\n        }),\n        clientState: async connectionId => connectionQueryService.ConnectionClientState({\n          connectionId: connectionId\n        }),\n        consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n          connectionId: connectionId,\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }))\n      },\n      transfer: {\n        denomTrace: async hash => transferQueryService.DenomTrace({\n          hash: hash\n        }),\n        denomTraces: async paginationKey => transferQueryService.DenomTraces({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allDenomTraces: async () => {\n          var _a;\n          const denomTraces = [];\n          let response;\n          let key;\n          do {\n            response = await transferQueryService.DenomTraces({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            denomTraces.push(...response.denomTraces);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n          return {\n            denomTraces: denomTraces\n          };\n        },\n        params: async () => transferQueryService.Params({})\n      },\n      verified: {\n        channel: {\n          channel: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? channel_1.Channel.decode(responseData) : null;\n          },\n          packetCommitment: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n            const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return responseData;\n          },\n          packetAcknowledgement: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n            const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return responseData;\n          },\n          nextSequenceReceive: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n            const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;\n          }\n        }\n      }\n    }\n  };\n}\nexports.setupIbcExtension = setupIbcExtension;","map":{"version":3,"sources":["../../../src/modules/ibc/queries.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\nconst long_1 = __importDefault(require(\"long\"));\nconst queryclient_1 = require(\"../../queryclient\");\nfunction decodeTendermintClientStateAny(clientState) {\n    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n    }\n    return tendermint_1.ClientState.decode(clientState.value);\n}\nfunction decodeTendermintConsensusStateAny(clientState) {\n    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n    }\n    return tendermint_1.ConsensusState.decode(clientState.value);\n}\nfunction setupIbcExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use these services to get easy typed access to query methods\n    // These cannot be used for proof verification\n    const channelQueryService = new query_2.QueryClientImpl(rpc);\n    const clientQueryService = new query_3.QueryClientImpl(rpc);\n    const connectionQueryService = new query_4.QueryClientImpl(rpc);\n    const transferQueryService = new query_1.QueryClientImpl(rpc);\n    return {\n        ibc: {\n            channel: {\n                channel: async (portId, channelId) => channelQueryService.Channel({\n                    portId: portId,\n                    channelId: channelId,\n                }),\n                channels: async (paginationKey) => channelQueryService.Channels({\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allChannels: async () => {\n                    var _a;\n                    const channels = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await channelQueryService.Channels({\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        channels.push(...response.channels);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        channels: channels,\n                        height: response.height,\n                    };\n                },\n                connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n                    connection: connection,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allConnectionChannels: async (connection) => {\n                    var _a;\n                    const channels = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await channelQueryService.ConnectionChannels({\n                            connection: connection,\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        channels.push(...response.channels);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        channels: channels,\n                        height: response.height,\n                    };\n                },\n                clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n                    portId: portId,\n                    channelId: channelId,\n                }),\n                consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n                    portId: portId,\n                    channelId: channelId,\n                    revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n                    revisionHeight: long_1.default.fromNumber(revisionHeight, true),\n                }),\n                packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n                    portId: portId,\n                    channelId: channelId,\n                    sequence: sequence,\n                }),\n                packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n                    channelId: channelId,\n                    portId: portId,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allPacketCommitments: async (portId, channelId) => {\n                    var _a;\n                    const commitments = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await channelQueryService.PacketCommitments({\n                            channelId: channelId,\n                            portId: portId,\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        commitments.push(...response.commitments);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        commitments: commitments,\n                        height: response.height,\n                    };\n                },\n                packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n                    portId: portId,\n                    channelId: channelId,\n                    sequence: long_1.default.fromNumber(sequence, true),\n                }),\n                packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n                    portId: portId,\n                    channelId: channelId,\n                    sequence: long_1.default.fromNumber(sequence, true),\n                }),\n                packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({\n                    portId: portId,\n                    channelId: channelId,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allPacketAcknowledgements: async (portId, channelId) => {\n                    var _a;\n                    const acknowledgements = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await channelQueryService.PacketAcknowledgements({\n                            channelId: channelId,\n                            portId: portId,\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        acknowledgements.push(...response.acknowledgements);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        acknowledgements: acknowledgements,\n                        height: response.height,\n                    };\n                },\n                unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n                    portId: portId,\n                    channelId: channelId,\n                    packetCommitmentSequences: packetCommitmentSequences.map((s) => long_1.default.fromNumber(s, true)),\n                }),\n                unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n                    portId: portId,\n                    channelId: channelId,\n                    packetAckSequences: packetAckSequences.map((s) => long_1.default.fromNumber(s, true)),\n                }),\n                nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n                    portId: portId,\n                    channelId: channelId,\n                }),\n            },\n            client: {\n                state: async (clientId) => clientQueryService.ClientState({ clientId }),\n                states: async (paginationKey) => clientQueryService.ClientStates({\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allStates: async () => {\n                    var _a;\n                    const clientStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await clientQueryService.ClientStates({\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        clientStates.push(...response.clientStates);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        clientStates: clientStates,\n                    };\n                },\n                consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n                    clientId: clientId,\n                    revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n                    latestHeight: consensusHeight === undefined,\n                })),\n                consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n                    clientId: clientId,\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allConsensusStates: async (clientId) => {\n                    var _a;\n                    const consensusStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await clientQueryService.ConsensusStates({\n                            clientId: clientId,\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        consensusStates.push(...response.consensusStates);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        consensusStates: consensusStates,\n                    };\n                },\n                params: async () => clientQueryService.ClientParams({}),\n                stateTm: async (clientId) => {\n                    const response = await clientQueryService.ClientState({ clientId });\n                    return decodeTendermintClientStateAny(response.clientState);\n                },\n                statesTm: async (paginationKey) => {\n                    const { clientStates } = await clientQueryService.ClientStates({\n                        pagination: (0, queryclient_1.createPagination)(paginationKey),\n                    });\n                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));\n                },\n                allStatesTm: async () => {\n                    var _a;\n                    const clientStates = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await clientQueryService.ClientStates({\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        clientStates.push(...response.clientStates);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));\n                },\n                consensusStateTm: async (clientId, consensusHeight) => {\n                    const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n                        clientId: clientId,\n                        revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n                        revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n                        latestHeight: consensusHeight === undefined,\n                    }));\n                    return decodeTendermintConsensusStateAny(response.consensusState);\n                },\n            },\n            connection: {\n                connection: async (connectionId) => connectionQueryService.Connection({\n                    connectionId: connectionId,\n                }),\n                connections: async (paginationKey) => connectionQueryService.Connections({\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allConnections: async () => {\n                    var _a;\n                    const connections = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await connectionQueryService.Connections({\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        connections.push(...response.connections);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        connections: connections,\n                        height: response.height,\n                    };\n                },\n                clientConnections: async (clientId) => connectionQueryService.ClientConnections({\n                    clientId: clientId,\n                }),\n                clientState: async (connectionId) => connectionQueryService.ConnectionClientState({\n                    connectionId: connectionId,\n                }),\n                consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n                    connectionId: connectionId,\n                    revisionHeight: long_1.default.fromNumber(revisionHeight, true),\n                })),\n            },\n            transfer: {\n                denomTrace: async (hash) => transferQueryService.DenomTrace({ hash: hash }),\n                denomTraces: async (paginationKey) => transferQueryService.DenomTraces({\n                    pagination: (0, queryclient_1.createPagination)(paginationKey),\n                }),\n                allDenomTraces: async () => {\n                    var _a;\n                    const denomTraces = [];\n                    let response;\n                    let key;\n                    do {\n                        response = await transferQueryService.DenomTraces({\n                            pagination: (0, queryclient_1.createPagination)(key),\n                        });\n                        denomTraces.push(...response.denomTraces);\n                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n                    } while (key && key.length);\n                    return {\n                        denomTraces: denomTraces,\n                    };\n                },\n                params: async () => transferQueryService.Params({}),\n            },\n            verified: {\n                channel: {\n                    channel: async (portId, channelId) => {\n                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n                        const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);\n                        const responseData = await base.queryVerified(\"ibc\", key);\n                        return responseData.length ? channel_1.Channel.decode(responseData) : null;\n                    },\n                    packetCommitment: async (portId, channelId, sequence) => {\n                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n                        const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n                        const responseData = await base.queryVerified(\"ibc\", key);\n                        // keeper code doesn't parse, but returns raw\n                        return responseData;\n                    },\n                    packetAcknowledgement: async (portId, channelId, sequence) => {\n                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n                        const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n                        const responseData = await base.queryVerified(\"ibc\", key);\n                        // keeper code doesn't parse, but returns raw\n                        return responseData;\n                    },\n                    nextSequenceReceive: async (portId, channelId) => {\n                        // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n                        const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n                        const responseData = await base.queryVerified(\"ibc\", key);\n                        return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;\n                    },\n                },\n            },\n        },\n    };\n}\nexports.setupIbcExtension = setupIbcExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}