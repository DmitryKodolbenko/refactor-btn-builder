{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"../index.js\"),\n  Contract = _require.Contract;\nvar _require2 = require(\"../../boc\"),\n  Cell = _require2.Cell;\nvar _require3 = require(\"../../utils\"),\n  nacl = _require3.nacl,\n  stringToBytes = _require3.stringToBytes,\n  Address = _require3.Address,\n  BN = _require3.BN;\n\n/**\n * Abstract standard wallet class\n */\nvar WalletContract = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(WalletContract, _Contract);\n  var _super = _createSuper(WalletContract);\n  /**\n   * @param provider    {HttpProvider}\n   * @param options?    {{code: Uint8Array, publicKey?: Uint8Array, address?: Address | string, wc?: number}}\n   */\n  function WalletContract(provider, options) {\n    var _this;\n    _classCallCheck(this, WalletContract);\n    if (!options.publicKey && !options.address) throw new Error('WalletContract required publicKey or address in options');\n    _this = _super.call(this, provider, options);\n    _this.methods = {\n      /**\n       * @param   params {{secretKey: Uint8Array, toAddress: Address | string, amount: BN | number, seqno: number, payload: string | Uint8Array | Cell, sendMode: number, stateInit?: Cell}}\n       */\n      transfer: function transfer(params) {\n        return Contract.createMethod(provider, _this.createTransferMessage(params.secretKey, params.toAddress, params.amount, params.seqno, params.payload, params.sendMode, !Boolean(params.secretKey), params.stateInit));\n      },\n      seqno: function seqno() {\n        return {\n          /**\n           * @return {Promise<number>}\n           */\n          call: function () {\n            var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var address, n;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return _this.getAddress();\n                    case 2:\n                      address = _context.sent;\n                      n = null;\n                      _context.prev = 4;\n                      _context.next = 7;\n                      return provider.call2(address.toString(), 'seqno');\n                    case 7:\n                      n = _context.sent.toNumber();\n                      _context.next = 12;\n                      break;\n                    case 10:\n                      _context.prev = 10;\n                      _context.t0 = _context[\"catch\"](4);\n                    case 12:\n                      return _context.abrupt(\"return\", n);\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[4, 10]]);\n            }));\n            function call() {\n              return _call.apply(this, arguments);\n            }\n            return call;\n          }()\n        };\n      }\n    };\n\n    /**\n     * @param secretKey {Uint8Array}\n     */\n    _this.deploy = function (secretKey) {\n      return Contract.createMethod(provider, _this.createInitExternalMessage(secretKey));\n    };\n    return _this;\n  }\n  _createClass(WalletContract, [{\n    key: \"getName\",\n    value: function getName() {\n      throw new Error('override me');\n    }\n\n    /**\n     * @override\n     * @protected\n     * @return {Cell} cell contains wallet data\n     */\n  }, {\n    key: \"createDataCell\",\n    value: function createDataCell() {\n      // 4 byte seqno, 32 byte publicKey\n      var cell = new Cell();\n      cell.bits.writeUint(0, 32); // seqno\n      cell.bits.writeBytes(this.options.publicKey);\n      return cell;\n    }\n\n    /**\n     * @protected\n     * @param   seqno?   {number}\n     * @return {Cell}\n     */\n  }, {\n    key: \"createSigningMessage\",\n    value: function createSigningMessage(seqno) {\n      seqno = seqno || 0;\n      var cell = new Cell();\n      cell.bits.writeUint(seqno, 32);\n      return cell;\n    }\n\n    /**\n     * External message for initialization\n     * @param secretKey  {Uint8Array} nacl.KeyPair.secretKey\n     * @return {{address: Address, message: Cell, body: Cell, sateInit: Cell, code: Cell, data: Cell}}\n     */\n  }, {\n    key: \"createInitExternalMessage\",\n    value: function () {\n      var _createInitExternalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(secretKey) {\n        var keyPair, _yield$this$createSta, stateInit, address, code, data, signingMessage, signature, body, header, externalMessage;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.options.publicKey) {\n                  keyPair = nacl.sign.keyPair.fromSecretKey(secretKey);\n                  this.options.publicKey = keyPair.publicKey;\n                }\n                _context2.next = 3;\n                return this.createStateInit();\n              case 3:\n                _yield$this$createSta = _context2.sent;\n                stateInit = _yield$this$createSta.stateInit;\n                address = _yield$this$createSta.address;\n                code = _yield$this$createSta.code;\n                data = _yield$this$createSta.data;\n                signingMessage = this.createSigningMessage();\n                _context2.t0 = nacl.sign;\n                _context2.next = 12;\n                return signingMessage.hash();\n              case 12:\n                _context2.t1 = _context2.sent;\n                _context2.t2 = secretKey;\n                signature = _context2.t0.detached.call(_context2.t0, _context2.t1, _context2.t2);\n                body = new Cell();\n                body.bits.writeBytes(signature);\n                body.writeCell(signingMessage);\n                header = Contract.createExternalMessageHeader(address);\n                externalMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n                return _context2.abrupt(\"return\", {\n                  address: address,\n                  message: externalMessage,\n                  body: body,\n                  signingMessage: signingMessage,\n                  stateInit: stateInit,\n                  code: code,\n                  data: data\n                });\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function createInitExternalMessage(_x) {\n        return _createInitExternalMessage.apply(this, arguments);\n      }\n      return createInitExternalMessage;\n    }()\n    /**\n     * @protected\n     * @param signingMessage {Cell}\n     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey\n     * @param seqno {number}\n     * @param dummySignature?    {boolean}\n     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n     */\n  }, {\n    key: \"createExternalMessage\",\n    value: function () {\n      var _createExternalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(signingMessage, secretKey, seqno) {\n        var dummySignature,\n          signature,\n          body,\n          stateInit,\n          code,\n          data,\n          keyPair,\n          deploy,\n          selfAddress,\n          header,\n          resultMessage,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dummySignature = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : false;\n                if (!dummySignature) {\n                  _context3.next = 5;\n                  break;\n                }\n                _context3.t0 = new Uint8Array(64);\n                _context3.next = 11;\n                break;\n              case 5:\n                _context3.t1 = nacl.sign;\n                _context3.next = 8;\n                return signingMessage.hash();\n              case 8:\n                _context3.t2 = _context3.sent;\n                _context3.t3 = secretKey;\n                _context3.t0 = _context3.t1.detached.call(_context3.t1, _context3.t2, _context3.t3);\n              case 11:\n                signature = _context3.t0;\n                body = new Cell();\n                body.bits.writeBytes(signature);\n                body.writeCell(signingMessage);\n                stateInit = null, code = null, data = null;\n                if (!(seqno === 0)) {\n                  _context3.next = 24;\n                  break;\n                }\n                if (!this.options.publicKey) {\n                  keyPair = nacl.sign.keyPair.fromSecretKey(secretKey);\n                  this.options.publicKey = keyPair.publicKey;\n                }\n                _context3.next = 20;\n                return this.createStateInit();\n              case 20:\n                deploy = _context3.sent;\n                stateInit = deploy.stateInit;\n                code = deploy.code;\n                data = deploy.data;\n              case 24:\n                _context3.next = 26;\n                return this.getAddress();\n              case 26:\n                selfAddress = _context3.sent;\n                header = Contract.createExternalMessageHeader(selfAddress);\n                resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n                return _context3.abrupt(\"return\", {\n                  address: selfAddress,\n                  message: resultMessage,\n                  // old wallet_send_generate_external_message\n\n                  body: body,\n                  signature: signature,\n                  signingMessage: signingMessage,\n                  stateInit: stateInit,\n                  code: code,\n                  data: data\n                });\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function createExternalMessage(_x2, _x3, _x4) {\n        return _createExternalMessage.apply(this, arguments);\n      }\n      return createExternalMessage;\n    }()\n    /**\n     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey\n     * @param address   {Address | string}\n     * @param amount    {BN | number} in nanograms\n     * @param seqno {number}\n     * @param payload?   {string | Uint8Array | Cell}\n     * @param sendMode?  {number}\n     * @param dummySignature?    {boolean}\n     * @param stateInit? {Cell}\n     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n     */\n  }, {\n    key: \"createTransferMessage\",\n    value: function () {\n      var _createTransferMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(secretKey, address, amount, seqno) {\n        var payload,\n          sendMode,\n          dummySignature,\n          stateInit,\n          payloadCell,\n          payloadBytes,\n          orderHeader,\n          order,\n          signingMessage,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                payload = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : \"\";\n                sendMode = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : 3;\n                dummySignature = _args4.length > 6 && _args4[6] !== undefined ? _args4[6] : false;\n                stateInit = _args4.length > 7 && _args4[7] !== undefined ? _args4[7] : null;\n                payloadCell = new Cell();\n                if (payload) {\n                  if (payload.refs) {\n                    // is Cell\n                    payloadCell = payload;\n                  } else if (typeof payload === 'string') {\n                    if (payload.length > 0) {\n                      payloadCell.bits.writeUint(0, 32);\n                      payloadBytes = new TextEncoder().encode(payload);\n                      payloadCell.bits.writeBytes(payloadBytes);\n                    }\n                  } else {\n                    payloadCell.bits.writeBytes(payload);\n                  }\n                }\n                orderHeader = Contract.createInternalMessageHeader(new Address(address), new BN(amount));\n                order = Contract.createCommonMsgInfo(orderHeader, stateInit, payloadCell);\n                signingMessage = this.createSigningMessage(seqno);\n                signingMessage.bits.writeUint8(sendMode);\n                signingMessage.refs.push(order);\n                return _context4.abrupt(\"return\", this.createExternalMessage(signingMessage, secretKey, seqno, dummySignature));\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function createTransferMessage(_x5, _x6, _x7, _x8) {\n        return _createTransferMessage.apply(this, arguments);\n      }\n      return createTransferMessage;\n    }()\n  }]);\n  return WalletContract;\n}(Contract);\nmodule.exports = {\n  WalletContract: WalletContract\n};","map":{"version":3,"names":["require","Contract","Cell","nacl","stringToBytes","Address","BN","WalletContract","provider","options","publicKey","address","Error","methods","transfer","params","createMethod","createTransferMessage","secretKey","toAddress","amount","seqno","payload","sendMode","Boolean","stateInit","call","getAddress","n","call2","toString","toNumber","deploy","createInitExternalMessage","cell","bits","writeUint","writeBytes","keyPair","sign","fromSecretKey","createStateInit","code","data","signingMessage","createSigningMessage","hash","signature","detached","body","writeCell","header","createExternalMessageHeader","externalMessage","createCommonMsgInfo","message","dummySignature","Uint8Array","selfAddress","resultMessage","payloadCell","refs","length","payloadBytes","TextEncoder","encode","orderHeader","createInternalMessageHeader","order","writeUint8","push","createExternalMessage","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/wallet/WalletContract.js"],"sourcesContent":["const {Contract} = require(\"../index.js\");\nconst {Cell} = require(\"../../boc\");\nconst {nacl, stringToBytes, Address, BN} = require(\"../../utils\");\n\n/**\n * Abstract standard wallet class\n */\nclass WalletContract extends Contract {\n    /**\n     * @param provider    {HttpProvider}\n     * @param options?    {{code: Uint8Array, publicKey?: Uint8Array, address?: Address | string, wc?: number}}\n     */\n    constructor(provider, options) {\n        if (!options.publicKey && !options.address) throw new Error('WalletContract required publicKey or address in options')\n        super(provider, options);\n\n        this.methods = {\n            /**\n             * @param   params {{secretKey: Uint8Array, toAddress: Address | string, amount: BN | number, seqno: number, payload: string | Uint8Array | Cell, sendMode: number, stateInit?: Cell}}\n             */\n            transfer: (params) => Contract.createMethod(provider, this.createTransferMessage(params.secretKey, params.toAddress, params.amount, params.seqno, params.payload, params.sendMode, !Boolean(params.secretKey), params.stateInit)),\n\n            seqno: () => {\n                return {\n                    /**\n                     * @return {Promise<number>}\n                     */\n                    call: async () => {\n                        const address = await this.getAddress();\n                        let n = null;\n                        try {\n                            n = (await provider.call2(address.toString(), 'seqno')).toNumber();\n                        } catch (e) {\n                        }\n                        return n;\n                    }\n                }\n            }\n        }\n\n        /**\n         * @param secretKey {Uint8Array}\n         */\n        this.deploy = (secretKey) => Contract.createMethod(provider, this.createInitExternalMessage(secretKey));\n    }\n\n    getName() {\n        throw new Error('override me');\n    }\n\n    /**\n     * @override\n     * @protected\n     * @return {Cell} cell contains wallet data\n     */\n    createDataCell() {\n        // 4 byte seqno, 32 byte publicKey\n        const cell = new Cell();\n        cell.bits.writeUint(0, 32); // seqno\n        cell.bits.writeBytes(this.options.publicKey);\n        return cell;\n    }\n\n    /**\n     * @protected\n     * @param   seqno?   {number}\n     * @return {Cell}\n     */\n    createSigningMessage(seqno) {\n        seqno = seqno || 0;\n        const cell = new Cell();\n        cell.bits.writeUint(seqno, 32);\n        return cell;\n    }\n\n    /**\n     * External message for initialization\n     * @param secretKey  {Uint8Array} nacl.KeyPair.secretKey\n     * @return {{address: Address, message: Cell, body: Cell, sateInit: Cell, code: Cell, data: Cell}}\n     */\n    async createInitExternalMessage(secretKey) {\n        if (!this.options.publicKey) {\n            const keyPair = nacl.sign.keyPair.fromSecretKey(secretKey)\n            this.options.publicKey = keyPair.publicKey;\n        }\n        const {stateInit, address, code, data} = await this.createStateInit();\n\n        const signingMessage = this.createSigningMessage();\n        const signature = nacl.sign.detached(await signingMessage.hash(), secretKey);\n\n        const body = new Cell();\n        body.bits.writeBytes(signature);\n        body.writeCell(signingMessage);\n\n        const header = Contract.createExternalMessageHeader(address);\n        const externalMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n\n        return {\n            address: address,\n            message: externalMessage,\n\n            body,\n            signingMessage,\n            stateInit,\n            code,\n            data,\n        };\n    }\n\n    /**\n     * @protected\n     * @param signingMessage {Cell}\n     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey\n     * @param seqno {number}\n     * @param dummySignature?    {boolean}\n     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n     */\n    async createExternalMessage(\n        signingMessage,\n        secretKey,\n        seqno,\n        dummySignature = false\n    ) {\n        const signature = dummySignature ? new Uint8Array(64) : nacl.sign.detached(await signingMessage.hash(), secretKey);\n\n        const body = new Cell();\n        body.bits.writeBytes(signature);\n        body.writeCell(signingMessage);\n\n        let stateInit = null, code = null, data = null;\n\n        if (seqno === 0) {\n            if (!this.options.publicKey) {\n                const keyPair = nacl.sign.keyPair.fromSecretKey(secretKey)\n                this.options.publicKey = keyPair.publicKey;\n            }\n            const deploy = await this.createStateInit();\n            stateInit = deploy.stateInit;\n            code = deploy.code;\n            data = deploy.data;\n        }\n\n        const selfAddress = await this.getAddress();\n        const header = Contract.createExternalMessageHeader(selfAddress);\n        const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n\n        return {\n            address: selfAddress,\n            message: resultMessage, // old wallet_send_generate_external_message\n\n            body: body,\n            signature: signature,\n            signingMessage: signingMessage,\n\n            stateInit,\n            code,\n            data,\n        };\n    }\n\n    /**\n     * @param secretKey {Uint8Array}  nacl.KeyPair.secretKey\n     * @param address   {Address | string}\n     * @param amount    {BN | number} in nanograms\n     * @param seqno {number}\n     * @param payload?   {string | Uint8Array | Cell}\n     * @param sendMode?  {number}\n     * @param dummySignature?    {boolean}\n     * @param stateInit? {Cell}\n     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n     */\n    async createTransferMessage(\n        secretKey,\n        address,\n        amount,\n        seqno,\n        payload = \"\",\n        sendMode = 3,\n        dummySignature = false,\n        stateInit = null\n    ) {\n        let payloadCell = new Cell();\n        if (payload) {\n            if (payload.refs) { // is Cell\n                payloadCell = payload;\n            } else if (typeof payload === 'string') {\n                if (payload.length > 0) {\n                    payloadCell.bits.writeUint(0, 32);\n                    const payloadBytes = new TextEncoder().encode(payload);\n                    payloadCell.bits.writeBytes(payloadBytes);\n                }\n            } else {\n                payloadCell.bits.writeBytes(payload)\n            }\n        }\n\n        const orderHeader = Contract.createInternalMessageHeader(new Address(address), new BN(amount));\n        const order = Contract.createCommonMsgInfo(orderHeader, stateInit, payloadCell);\n        const signingMessage = this.createSigningMessage(seqno);\n        signingMessage.bits.writeUint8(sendMode);\n        signingMessage.refs.push(order);\n\n        return this.createExternalMessage(signingMessage, secretKey, seqno, dummySignature);\n    }\n}\n\nmodule.exports = {WalletContract};"],"mappings":"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"},"metadata":{},"sourceType":"script"}