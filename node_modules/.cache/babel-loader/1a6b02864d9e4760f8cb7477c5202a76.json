{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bech32 = exports.normalizeBech32 = exports.fromBech32 = exports.toBech32 = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nfunction toBech32(prefix, data, limit) {\n  const address = bech32.encode(prefix, bech32.toWords(data), limit);\n  return address;\n}\nexports.toBech32 = toBech32;\nfunction fromBech32(address) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const decodedAddress = bech32.decode(address, limit);\n  return {\n    prefix: decodedAddress.prefix,\n    data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n  };\n}\nexports.fromBech32 = fromBech32;\n/**\n * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n */\nfunction normalizeBech32(address) {\n  const {\n    prefix,\n    data\n  } = fromBech32(address);\n  return toBech32(prefix, data);\n}\nexports.normalizeBech32 = normalizeBech32;\n/**\n * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n */\nclass Bech32 {\n  /**\n   * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n   */\n  static encode(prefix, data, limit) {\n    return toBech32(prefix, data, limit);\n  }\n  /**\n   * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n   */\n  static decode(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    return fromBech32(address, limit);\n  }\n}\nexports.Bech32 = Bech32;","map":{"version":3,"sources":["../src/bech32.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AAEA,SAAgB,QAAQ,CAAC,MAAc,EAAE,IAAgB,EAAE,KAAc,EAAA;EACvE,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;EAClE,OAAO,OAAO;AAChB;AAHA,OAAA,CAAA,QAAA,GAAA,QAAA;AAKA,SAAgB,UAAU,CACxB,OAAe,EACC;EAAA,IAAhB,KAAK,uEAAG,QAAQ;EAEhB,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC;EACpD,OAAO;IACL,MAAM,EAAE,cAAc,CAAC,MAAM;IAC7B,IAAI,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC;GAC5D;AACH;AATA,OAAA,CAAA,UAAA,GAAA,UAAA;AAWA;;;;;AAKG;AACH,SAAgB,eAAe,CAAC,OAAe,EAAA;EAC7C,MAAM;IAAE,MAAM;IAAE;EAAI,CAAE,GAAG,UAAU,CAAC,OAAO,CAAC;EAC5C,OAAO,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;AAC/B;AAHA,OAAA,CAAA,eAAA,GAAA,eAAA;AAKA;;AAEG;AACH,MAAa,MAAM,CAAA;EACjB;;AAEG;EACI,OAAO,MAAM,CAAC,MAAc,EAAE,IAAgB,EAAE,KAAc,EAAA;IACnE,OAAO,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;EACtC;EAEA;;AAEG;EACI,OAAO,MAAM,CAClB,OAAe,EACC;IAAA,IAAhB,KAAK,uEAAG,QAAQ;IAEhB,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;EACnC;AACD;AAjBD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bech32 = exports.normalizeBech32 = exports.fromBech32 = exports.toBech32 = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nfunction toBech32(prefix, data, limit) {\n    const address = bech32.encode(prefix, bech32.toWords(data), limit);\n    return address;\n}\nexports.toBech32 = toBech32;\nfunction fromBech32(address, limit = Infinity) {\n    const decodedAddress = bech32.decode(address, limit);\n    return {\n        prefix: decodedAddress.prefix,\n        data: new Uint8Array(bech32.fromWords(decodedAddress.words)),\n    };\n}\nexports.fromBech32 = fromBech32;\n/**\n * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n */\nfunction normalizeBech32(address) {\n    const { prefix, data } = fromBech32(address);\n    return toBech32(prefix, data);\n}\nexports.normalizeBech32 = normalizeBech32;\n/**\n * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n */\nclass Bech32 {\n    /**\n     * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n     */\n    static encode(prefix, data, limit) {\n        return toBech32(prefix, data, limit);\n    }\n    /**\n     * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n     */\n    static decode(address, limit = Infinity) {\n        return fromBech32(address, limit);\n    }\n}\nexports.Bech32 = Bech32;\n//# sourceMappingURL=bech32.js.map"]},"metadata":{},"sourceType":"script"}