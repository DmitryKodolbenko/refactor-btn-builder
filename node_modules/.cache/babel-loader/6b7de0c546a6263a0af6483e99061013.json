{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromHex = exports.toHex = void 0;\nfunction toHex(data) {\n  var out = \"\";\n  var _iterator = _createForOfIteratorHelper(data),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return out;\n}\nexports.toHex = toHex;\nfunction fromHex(hexstring) {\n  if (hexstring.length % 2 !== 0) {\n    throw new Error(\"hex string length must be a multiple of 2\");\n  }\n  var out = new Uint8Array(hexstring.length / 2);\n  for (var i = 0; i < out.length; i++) {\n    var j = 2 * i;\n    var hexByteAsString = hexstring.slice(j, j + 2);\n    if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n      throw new Error(\"hex string contains invalid characters\");\n    }\n    out[i] = parseInt(hexByteAsString, 16);\n  }\n  return out;\n}\nexports.fromHex = fromHex;","map":{"version":3,"sources":["../src/hex.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAgB,KAAK,CAAC,IAAgB,EAAA;EACpC,IAAI,GAAG,GAAG,EAAE;EAAC,2CACM,IAAI;IAAA;EAAA;IAAvB,oDAAyB;MAAA,IAAd,IAAI;MACb,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;;EAC3C;IAAA;EAAA;IAAA;EAAA;EACD,OAAO,GAAG;AACZ;AANA,OAAA,CAAA,KAAA,GAAA,KAAA;AAQA,SAAgB,OAAO,CAAC,SAAiB,EAAA;EACvC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC;EAC7D;EAED,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;EAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC;IACf,IAAM,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACjD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;MAC1C,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;IAC1D;IACD,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,eAAe,EAAE,EAAE,CAAC;EACvC;EACD,OAAO,GAAG;AACZ;AAfA,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromHex = exports.toHex = void 0;\nfunction toHex(data) {\n    let out = \"\";\n    for (const byte of data) {\n        out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n    return out;\n}\nexports.toHex = toHex;\nfunction fromHex(hexstring) {\n    if (hexstring.length % 2 !== 0) {\n        throw new Error(\"hex string length must be a multiple of 2\");\n    }\n    const out = new Uint8Array(hexstring.length / 2);\n    for (let i = 0; i < out.length; i++) {\n        const j = 2 * i;\n        const hexByteAsString = hexstring.slice(j, j + 2);\n        if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n            throw new Error(\"hex string contains invalid characters\");\n        }\n        out[i] = parseInt(hexByteAsString, 16);\n    }\n    return out;\n}\nexports.fromHex = fromHex;\n//# sourceMappingURL=hex.js.map"]},"metadata":{},"sourceType":"script"}