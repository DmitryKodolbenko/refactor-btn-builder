{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\nfunction compareArrays(a, b) {\n  const aHex = (0, encoding_1.toHex)(a);\n  const bHex = (0, encoding_1.toHex)(b);\n  return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\nexports.compareArrays = compareArrays;\nfunction createMultisigThresholdPubkey(pubkeys, threshold) {\n  let nosort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const uintThreshold = new math_1.Uint53(threshold);\n  if (uintThreshold.toNumber() > pubkeys.length) {\n    throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n  }\n  const outPubkeys = nosort ? pubkeys : Array.from(pubkeys).sort((lhs, rhs) => {\n    // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n    const addressLhs = (0, addresses_1.pubkeyToRawAddress)(lhs);\n    const addressRhs = (0, addresses_1.pubkeyToRawAddress)(rhs);\n    return compareArrays(addressLhs, addressRhs);\n  });\n  return {\n    type: \"tendermint/PubKeyMultisigThreshold\",\n    value: {\n      threshold: uintThreshold.toString(),\n      pubkeys: outPubkeys\n    }\n  };\n}\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;","map":{"version":3,"sources":["../src/multisig.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAGA;;;;;;AAMG;AACH,SAAgB,aAAa,CAAC,CAAa,EAAE,CAAa,EAAA;EACxD,MAAM,IAAI,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,KAAK,EAAC,CAAC,CAAC;EACrB,MAAM,IAAI,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,KAAK,EAAC,CAAC,CAAC;EACrB,OAAO,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;AACjD;AAJA,OAAA,CAAA,aAAA,GAAA,aAAA;AAMA,SAAgB,6BAA6B,CAC3C,OAAgC,EAChC,SAAiB,EACH;EAAA,IAAd,MAAM,uEAAG,KAAK;EAEd,MAAM,aAAa,GAAG,IAAI,MAAA,CAAA,MAAM,CAAC,SAAS,CAAC;EAC3C,IAAI,aAAa,CAAC,QAAQ,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE;IAC7C,MAAM,IAAI,KAAK,CAAC,iBAAiB,aAAa,CAAC,QAAQ,EAAE,+BAA+B,OAAO,CAAC,MAAM,EAAE,CAAC;EAC1G;EAED,MAAM,UAAU,GAAG,MAAM,GACrB,OAAO,GACP,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,KAAI;IACpC;IACA,MAAM,UAAU,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,kBAAkB,EAAC,GAAG,CAAC;IAC1C,MAAM,UAAU,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,kBAAkB,EAAC,GAAG,CAAC;IAC1C,OAAO,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC;EAC9C,CAAC,CAAC;EACN,OAAO;IACL,IAAI,EAAE,oCAAoC;IAC1C,KAAK,EAAE;MACL,SAAS,EAAE,aAAa,CAAC,QAAQ,EAAE;MACnC,OAAO,EAAE;IACV;GACF;AACH;AAzBA,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\nfunction compareArrays(a, b) {\n    const aHex = (0, encoding_1.toHex)(a);\n    const bHex = (0, encoding_1.toHex)(b);\n    return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\nexports.compareArrays = compareArrays;\nfunction createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {\n    const uintThreshold = new math_1.Uint53(threshold);\n    if (uintThreshold.toNumber() > pubkeys.length) {\n        throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n    }\n    const outPubkeys = nosort\n        ? pubkeys\n        : Array.from(pubkeys).sort((lhs, rhs) => {\n            // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n            const addressLhs = (0, addresses_1.pubkeyToRawAddress)(lhs);\n            const addressRhs = (0, addresses_1.pubkeyToRawAddress)(rhs);\n            return compareArrays(addressLhs, addressRhs);\n        });\n    return {\n        type: \"tendermint/PubKeyMultisigThreshold\",\n        value: {\n            threshold: uintThreshold.toString(),\n            pubkeys: outPubkeys,\n        },\n    };\n}\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;\n//# sourceMappingURL=multisig.js.map"]},"metadata":{},"sourceType":"script"}