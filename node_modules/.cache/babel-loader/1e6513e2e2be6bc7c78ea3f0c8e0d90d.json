{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nvar amino_1 = require(\"@cosmjs/amino\");\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar accounts_1 = require(\"./accounts\");\nvar modules_1 = require(\"./modules\");\nvar queryclient_1 = require(\"./queryclient\");\nvar search_1 = require(\"./search\");\nvar TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n  var _super = _createSuper(TimeoutError);\n  function TimeoutError(message, txId) {\n    var _this;\n    _classCallCheck(this, TimeoutError);\n    _this = _super.call(this, message);\n    _this.txId = txId;\n    return _this;\n  }\n  return _createClass(TimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(\"Error when broadcasting tx \".concat(result.transactionHash, \" at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog));\n  }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(\"Transaction \".concat(result.transactionHash, \" did not fail at height \").concat(result.height, \". Code: \").concat(result.code, \"; Raw log: \").concat(result.rawLog));\n  }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\nvar StargateClient = /*#__PURE__*/function () {\n  function StargateClient(tmClient, options) {\n    _classCallCheck(this, StargateClient);\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n    }\n    var _options$accountParse = options.accountParser,\n      accountParser = _options$accountParse === void 0 ? accounts_1.accountFromAny : _options$accountParse;\n    this.accountParser = accountParser;\n  }\n  _createClass(StargateClient, [{\n    key: \"getTmClient\",\n    value: function getTmClient() {\n      return this.tmClient;\n    }\n  }, {\n    key: \"forceGetTmClient\",\n    value: function forceGetTmClient() {\n      if (!this.tmClient) {\n        throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n      }\n      return this.tmClient;\n    }\n  }, {\n    key: \"getQueryClient\",\n    value: function getQueryClient() {\n      return this.queryClient;\n    }\n  }, {\n    key: \"forceGetQueryClient\",\n    value: function forceGetQueryClient() {\n      if (!this.queryClient) {\n        throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n      }\n      return this.queryClient;\n    }\n  }, {\n    key: \"getChainId\",\n    value: function () {\n      var _getChainId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, chainId;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.chainId) {\n                  _context.next = 8;\n                  break;\n                }\n                _context.next = 3;\n                return this.forceGetTmClient().status();\n              case 3:\n                response = _context.sent;\n                chainId = response.nodeInfo.network;\n                if (chainId) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error(\"Chain ID must not be empty\");\n              case 7:\n                this.chainId = chainId;\n              case 8:\n                return _context.abrupt(\"return\", this.chainId);\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getChainId() {\n        return _getChainId.apply(this, arguments);\n      }\n      return getChainId;\n    }()\n  }, {\n    key: \"getHeight\",\n    value: function () {\n      var _getHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.forceGetTmClient().status();\n              case 2:\n                status = _context2.sent;\n                return _context2.abrupt(\"return\", status.syncInfo.latestBlockHeight);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getHeight() {\n        return _getHeight.apply(this, arguments);\n      }\n      return getHeight;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(searchAddress) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.forceGetQueryClient().auth.account(searchAddress);\n              case 3:\n                account = _context3.sent;\n                return _context3.abrupt(\"return\", account ? this.accountParser(account) : null);\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                if (!/rpc error: code = NotFound/i.test(_context3.t0.toString())) {\n                  _context3.next = 11;\n                  break;\n                }\n                return _context3.abrupt(\"return\", null);\n              case 11:\n                throw _context3.t0;\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n      function getAccount(_x) {\n        return _getAccount.apply(this, arguments);\n      }\n      return getAccount;\n    }()\n  }, {\n    key: \"getSequence\",\n    value: function () {\n      var _getSequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {\n        var account;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getAccount(address);\n              case 2:\n                account = _context4.sent;\n                if (account) {\n                  _context4.next = 5;\n                  break;\n                }\n                throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n              case 5:\n                return _context4.abrupt(\"return\", {\n                  accountNumber: account.accountNumber,\n                  sequence: account.sequence\n                });\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getSequence(_x2) {\n        return _getSequence.apply(this, arguments);\n      }\n      return getSequence;\n    }()\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(height) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.forceGetTmClient().block(height);\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n                  header: {\n                    version: {\n                      block: new math_1.Uint53(response.block.header.version.block).toString(),\n                      app: new math_1.Uint53(response.block.header.version.app).toString()\n                    },\n                    height: response.block.header.height,\n                    chainId: response.block.header.chainId,\n                    time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n                  },\n                  txs: response.block.txs\n                });\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getBlock(_x3) {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(address, searchDenom) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.forceGetQueryClient().bank.balance(address, searchDenom));\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function getBalance(_x4, _x5) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Queries all balances for all denoms that belong to this address.\n     *\n     * Uses the grpc queries (which iterates over the store internally), and we cannot get\n     * proofs from such a method.\n     */\n  }, {\n    key: \"getAllBalances\",\n    value: function () {\n      var _getAllBalances = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(address) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.forceGetQueryClient().bank.allBalances(address));\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function getAllBalances(_x6) {\n        return _getAllBalances.apply(this, arguments);\n      }\n      return getAllBalances;\n    }()\n  }, {\n    key: \"getBalanceStaked\",\n    value: function () {\n      var _getBalanceStaked = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(address) {\n        var allDelegations, startAtKey, _yield$this$forceGetQ, delegationResponses, pagination, loadedDelegations, sumValues;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                allDelegations = [];\n                startAtKey = undefined;\n              case 2:\n                _context8.next = 4;\n                return this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n              case 4:\n                _yield$this$forceGetQ = _context8.sent;\n                delegationResponses = _yield$this$forceGetQ.delegationResponses;\n                pagination = _yield$this$forceGetQ.pagination;\n                loadedDelegations = delegationResponses || [];\n                allDelegations.push.apply(allDelegations, _toConsumableArray(loadedDelegations));\n                startAtKey = pagination === null || pagination === void 0 ? void 0 : pagination.nextKey;\n              case 10:\n                if (startAtKey !== undefined && startAtKey.length !== 0) {\n                  _context8.next = 2;\n                  break;\n                }\n              case 11:\n                sumValues = allDelegations.reduce(function (previousValue, currentValue) {\n                  // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n                  (0, utils_1.assert)(currentValue.balance);\n                  return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n                }, null);\n                return _context8.abrupt(\"return\", sumValues);\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function getBalanceStaked(_x7) {\n        return _getBalanceStaked.apply(this, arguments);\n      }\n      return getBalanceStaked;\n    }()\n  }, {\n    key: \"getDelegation\",\n    value: function () {\n      var _getDelegation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(delegatorAddress, validatorAddress) {\n        var _a, delegatedAmount;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress);\n              case 3:\n                _context9.t1 = _a = _context9.sent.delegationResponse;\n                _context9.t0 = _context9.t1 === null;\n                if (_context9.t0) {\n                  _context9.next = 7;\n                  break;\n                }\n                _context9.t0 = _a === void 0;\n              case 7:\n                if (!_context9.t0) {\n                  _context9.next = 11;\n                  break;\n                }\n                _context9.t2 = void 0;\n                _context9.next = 12;\n                break;\n              case 11:\n                _context9.t2 = _a.balance;\n              case 12:\n                delegatedAmount = _context9.t2;\n                _context9.next = 21;\n                break;\n              case 15:\n                _context9.prev = 15;\n                _context9.t3 = _context9[\"catch\"](0);\n                if (!_context9.t3.toString().includes(\"key not found\")) {\n                  _context9.next = 20;\n                  break;\n                }\n                _context9.next = 21;\n                break;\n              case 20:\n                throw _context9.t3;\n              case 21:\n                return _context9.abrupt(\"return\", delegatedAmount || null);\n              case 22:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 15]]);\n      }));\n      function getDelegation(_x8, _x9) {\n        return _getDelegation.apply(this, arguments);\n      }\n      return getDelegation;\n    }()\n  }, {\n    key: \"getTx\",\n    value: function () {\n      var _getTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(id) {\n        var _a, results;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.txsQuery(\"tx.hash='\".concat(id, \"'\"));\n              case 2:\n                results = _context10.sent;\n                return _context10.abrupt(\"return\", (_a = results[0]) !== null && _a !== void 0 ? _a : null);\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function getTx(_x10) {\n        return _getTx.apply(this, arguments);\n      }\n      return getTx;\n    }()\n  }, {\n    key: \"searchTx\",\n    value: function () {\n      var _searchTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(query) {\n        var _this2 = this;\n        var filter,\n          minHeight,\n          maxHeight,\n          withFilters,\n          txs,\n          sentQuery,\n          receivedQuery,\n          _yield$Promise$all,\n          _yield$Promise$all2,\n          sent,\n          received,\n          sentHashes,\n          rawQuery,\n          filtered,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                withFilters = function _withFilters(originalQuery) {\n                  return \"\".concat(originalQuery, \" AND tx.height>=\").concat(minHeight, \" AND tx.height<=\").concat(maxHeight);\n                };\n                filter = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n                minHeight = filter.minHeight || 0;\n                maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n                if (!(maxHeight < minHeight)) {\n                  _context11.next = 6;\n                  break;\n                }\n                return _context11.abrupt(\"return\", []);\n              case 6:\n                if (!(0, search_1.isSearchByHeightQuery)(query)) {\n                  _context11.next = 17;\n                  break;\n                }\n                if (!(query.height >= minHeight && query.height <= maxHeight)) {\n                  _context11.next = 13;\n                  break;\n                }\n                _context11.next = 10;\n                return this.txsQuery(\"tx.height=\".concat(query.height));\n              case 10:\n                _context11.t0 = _context11.sent;\n                _context11.next = 14;\n                break;\n              case 13:\n                _context11.t0 = [];\n              case 14:\n                txs = _context11.t0;\n                _context11.next = 38;\n                break;\n              case 17:\n                if (!(0, search_1.isSearchBySentFromOrToQuery)(query)) {\n                  _context11.next = 30;\n                  break;\n                }\n                sentQuery = withFilters(\"message.module='bank' AND transfer.sender='\".concat(query.sentFromOrTo, \"'\"));\n                receivedQuery = withFilters(\"message.module='bank' AND transfer.recipient='\".concat(query.sentFromOrTo, \"'\"));\n                _context11.next = 22;\n                return Promise.all([sentQuery, receivedQuery].map(function (rawQuery) {\n                  return _this2.txsQuery(rawQuery);\n                }));\n              case 22:\n                _yield$Promise$all = _context11.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                sent = _yield$Promise$all2[0];\n                received = _yield$Promise$all2[1];\n                sentHashes = sent.map(function (t) {\n                  return t.hash;\n                });\n                txs = [].concat(_toConsumableArray(sent), _toConsumableArray(received.filter(function (t) {\n                  return !sentHashes.includes(t.hash);\n                })));\n                _context11.next = 38;\n                break;\n              case 30:\n                if (!(0, search_1.isSearchByTagsQuery)(query)) {\n                  _context11.next = 37;\n                  break;\n                }\n                rawQuery = withFilters(query.tags.map(function (t) {\n                  return \"\".concat(t.key, \"='\").concat(t.value, \"'\");\n                }).join(\" AND \"));\n                _context11.next = 34;\n                return this.txsQuery(rawQuery);\n              case 34:\n                txs = _context11.sent;\n                _context11.next = 38;\n                break;\n              case 37:\n                throw new Error(\"Unknown query type\");\n              case 38:\n                filtered = txs.filter(function (tx) {\n                  return tx.height >= minHeight && tx.height <= maxHeight;\n                });\n                return _context11.abrupt(\"return\", filtered);\n              case 40:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function searchTx(_x11) {\n        return _searchTx.apply(this, arguments);\n      }\n      return searchTx;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.tmClient) this.tmClient.disconnect();\n    }\n    /**\n     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n     *\n     * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n     * usually needs to check for execution success or failure.\n     */\n  }, {\n    key: \"broadcastTx\",\n    value: function () {\n      var _broadcastTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(tx) {\n        var _this3 = this;\n        var timeoutMs,\n          pollIntervalMs,\n          timedOut,\n          txPollTimeout,\n          pollForTx,\n          broadcasted,\n          transactionId,\n          _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                timeoutMs = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : 60000;\n                pollIntervalMs = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : 3000;\n                timedOut = false;\n                txPollTimeout = setTimeout(function () {\n                  timedOut = true;\n                }, timeoutMs);\n                pollForTx = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(txId) {\n                    var result;\n                    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                      while (1) {\n                        switch (_context12.prev = _context12.next) {\n                          case 0:\n                            if (!timedOut) {\n                              _context12.next = 2;\n                              break;\n                            }\n                            throw new TimeoutError(\"Transaction with ID \".concat(txId, \" was submitted but was not yet found on the chain. You might want to check later. There was a wait of \").concat(timeoutMs / 1000, \" seconds.\"), txId);\n                          case 2:\n                            _context12.next = 4;\n                            return (0, utils_1.sleep)(pollIntervalMs);\n                          case 4:\n                            _context12.next = 6;\n                            return _this3.getTx(txId);\n                          case 6:\n                            result = _context12.sent;\n                            return _context12.abrupt(\"return\", result ? {\n                              code: result.code,\n                              height: result.height,\n                              rawLog: result.rawLog,\n                              transactionHash: txId,\n                              gasUsed: result.gasUsed,\n                              gasWanted: result.gasWanted\n                            } : pollForTx(txId));\n                          case 8:\n                          case \"end\":\n                            return _context12.stop();\n                        }\n                      }\n                    }, _callee12);\n                  }));\n                  return function pollForTx(_x13) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n                _context13.next = 7;\n                return this.forceGetTmClient().broadcastTxSync({\n                  tx: tx\n                });\n              case 7:\n                broadcasted = _context13.sent;\n                if (!broadcasted.code) {\n                  _context13.next = 10;\n                  break;\n                }\n                return _context13.abrupt(\"return\", Promise.reject(new Error(\"Broadcasting transaction failed with code \".concat(broadcasted.code, \" (codespace: \").concat(broadcasted.codeSpace, \"). Log: \").concat(broadcasted.log))));\n              case 10:\n                transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n                return _context13.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  return pollForTx(transactionId).then(function (value) {\n                    clearTimeout(txPollTimeout);\n                    resolve(value);\n                  }, function (error) {\n                    clearTimeout(txPollTimeout);\n                    reject(error);\n                  });\n                }));\n              case 12:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function broadcastTx(_x12) {\n        return _broadcastTx.apply(this, arguments);\n      }\n      return broadcastTx;\n    }()\n  }, {\n    key: \"txsQuery\",\n    value: function () {\n      var _txsQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(query) {\n        var results;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.forceGetTmClient().txSearchAll({\n                  query: query\n                });\n              case 2:\n                results = _context14.sent;\n                return _context14.abrupt(\"return\", results.txs.map(function (tx) {\n                  return {\n                    height: tx.height,\n                    hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n                    code: tx.result.code,\n                    rawLog: tx.result.log || \"\",\n                    tx: tx.tx,\n                    gasUsed: tx.result.gasUsed,\n                    gasWanted: tx.result.gasWanted\n                  };\n                }));\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function txsQuery(_x14) {\n        return _txsQuery.apply(this, arguments);\n      }\n      return txsQuery;\n    }()\n  }], [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(endpoint) {\n        var options,\n          tmClient,\n          _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};\n                _context15.next = 3;\n                return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n              case 3:\n                tmClient = _context15.sent;\n                return _context15.abrupt(\"return\", new StargateClient(tmClient, options));\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n      function connect(_x15) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }]);\n  return StargateClient;\n}();\nexports.StargateClient = StargateClient;","map":{"version":3,"sources":["../src/stargateclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StargateClient = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst accounts_1 = require(\"./accounts\");\nconst modules_1 = require(\"./modules\");\nconst queryclient_1 = require(\"./queryclient\");\nconst search_1 = require(\"./search\");\nclass TimeoutError extends Error {\n    constructor(message, txId) {\n        super(message);\n        this.txId = txId;\n    }\n}\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n    return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n    return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n    if (isDeliverTxFailure(result)) {\n        throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n    }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n    if (isDeliverTxSuccess(result)) {\n        throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n    }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\nclass StargateClient {\n    constructor(tmClient, options) {\n        if (tmClient) {\n            this.tmClient = tmClient;\n            this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n        }\n        const { accountParser = accounts_1.accountFromAny } = options;\n        this.accountParser = accountParser;\n    }\n    static async connect(endpoint, options = {}) {\n        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n        return new StargateClient(tmClient, options);\n    }\n    getTmClient() {\n        return this.tmClient;\n    }\n    forceGetTmClient() {\n        if (!this.tmClient) {\n            throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n        }\n        return this.tmClient;\n    }\n    getQueryClient() {\n        return this.queryClient;\n    }\n    forceGetQueryClient() {\n        if (!this.queryClient) {\n            throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n        }\n        return this.queryClient;\n    }\n    async getChainId() {\n        if (!this.chainId) {\n            const response = await this.forceGetTmClient().status();\n            const chainId = response.nodeInfo.network;\n            if (!chainId)\n                throw new Error(\"Chain ID must not be empty\");\n            this.chainId = chainId;\n        }\n        return this.chainId;\n    }\n    async getHeight() {\n        const status = await this.forceGetTmClient().status();\n        return status.syncInfo.latestBlockHeight;\n    }\n    async getAccount(searchAddress) {\n        try {\n            const account = await this.forceGetQueryClient().auth.account(searchAddress);\n            return account ? this.accountParser(account) : null;\n        }\n        catch (error) {\n            if (/rpc error: code = NotFound/i.test(error.toString())) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    async getSequence(address) {\n        const account = await this.getAccount(address);\n        if (!account) {\n            throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n        }\n        return {\n            accountNumber: account.accountNumber,\n            sequence: account.sequence,\n        };\n    }\n    async getBlock(height) {\n        const response = await this.forceGetTmClient().block(height);\n        return {\n            id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n            header: {\n                version: {\n                    block: new math_1.Uint53(response.block.header.version.block).toString(),\n                    app: new math_1.Uint53(response.block.header.version.app).toString(),\n                },\n                height: response.block.header.height,\n                chainId: response.block.header.chainId,\n                time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time),\n            },\n            txs: response.block.txs,\n        };\n    }\n    async getBalance(address, searchDenom) {\n        return this.forceGetQueryClient().bank.balance(address, searchDenom);\n    }\n    /**\n     * Queries all balances for all denoms that belong to this address.\n     *\n     * Uses the grpc queries (which iterates over the store internally), and we cannot get\n     * proofs from such a method.\n     */\n    async getAllBalances(address) {\n        return this.forceGetQueryClient().bank.allBalances(address);\n    }\n    async getBalanceStaked(address) {\n        const allDelegations = [];\n        let startAtKey = undefined;\n        do {\n            const { delegationResponses, pagination } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n            const loadedDelegations = delegationResponses || [];\n            allDelegations.push(...loadedDelegations);\n            startAtKey = pagination === null || pagination === void 0 ? void 0 : pagination.nextKey;\n        } while (startAtKey !== undefined && startAtKey.length !== 0);\n        const sumValues = allDelegations.reduce((previousValue, currentValue) => {\n            // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n            (0, utils_1.assert)(currentValue.balance);\n            return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n        }, null);\n        return sumValues;\n    }\n    async getDelegation(delegatorAddress, validatorAddress) {\n        var _a;\n        let delegatedAmount;\n        try {\n            delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;\n        }\n        catch (e) {\n            if (e.toString().includes(\"key not found\")) {\n                // ignore, `delegatedAmount` remains undefined\n            }\n            else {\n                throw e;\n            }\n        }\n        return delegatedAmount || null;\n    }\n    async getTx(id) {\n        var _a;\n        const results = await this.txsQuery(`tx.hash='${id}'`);\n        return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    async searchTx(query, filter = {}) {\n        const minHeight = filter.minHeight || 0;\n        const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n        if (maxHeight < minHeight)\n            return []; // optional optimization\n        function withFilters(originalQuery) {\n            return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n        }\n        let txs;\n        if ((0, search_1.isSearchByHeightQuery)(query)) {\n            txs =\n                query.height >= minHeight && query.height <= maxHeight\n                    ? await this.txsQuery(`tx.height=${query.height}`)\n                    : [];\n        }\n        else if ((0, search_1.isSearchBySentFromOrToQuery)(query)) {\n            const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n            const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n            const [sent, received] = await Promise.all([sentQuery, receivedQuery].map((rawQuery) => this.txsQuery(rawQuery)));\n            const sentHashes = sent.map((t) => t.hash);\n            txs = [...sent, ...received.filter((t) => !sentHashes.includes(t.hash))];\n        }\n        else if ((0, search_1.isSearchByTagsQuery)(query)) {\n            const rawQuery = withFilters(query.tags.map((t) => `${t.key}='${t.value}'`).join(\" AND \"));\n            txs = await this.txsQuery(rawQuery);\n        }\n        else {\n            throw new Error(\"Unknown query type\");\n        }\n        const filtered = txs.filter((tx) => tx.height >= minHeight && tx.height <= maxHeight);\n        return filtered;\n    }\n    disconnect() {\n        if (this.tmClient)\n            this.tmClient.disconnect();\n    }\n    /**\n     * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n     *\n     * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n     * an error is thrown.\n     *\n     * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n     *\n     * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n     * usually needs to check for execution success or failure.\n     */\n    async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {\n        let timedOut = false;\n        const txPollTimeout = setTimeout(() => {\n            timedOut = true;\n        }, timeoutMs);\n        const pollForTx = async (txId) => {\n            if (timedOut) {\n                throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);\n            }\n            await (0, utils_1.sleep)(pollIntervalMs);\n            const result = await this.getTx(txId);\n            return result\n                ? {\n                    code: result.code,\n                    height: result.height,\n                    rawLog: result.rawLog,\n                    transactionHash: txId,\n                    gasUsed: result.gasUsed,\n                    gasWanted: result.gasWanted,\n                }\n                : pollForTx(txId);\n        };\n        const broadcasted = await this.forceGetTmClient().broadcastTxSync({ tx });\n        if (broadcasted.code) {\n            return Promise.reject(new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`));\n        }\n        const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n        return new Promise((resolve, reject) => pollForTx(transactionId).then((value) => {\n            clearTimeout(txPollTimeout);\n            resolve(value);\n        }, (error) => {\n            clearTimeout(txPollTimeout);\n            reject(error);\n        }));\n    }\n    async txsQuery(query) {\n        const results = await this.forceGetTmClient().txSearchAll({ query: query });\n        return results.txs.map((tx) => {\n            return {\n                height: tx.height,\n                hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n                code: tx.result.code,\n                rawLog: tx.result.log || \"\",\n                tx: tx.tx,\n                gasUsed: tx.result.gasUsed,\n                gasWanted: tx.result.gasWanted,\n            };\n        });\n    }\n}\nexports.StargateClient = StargateClient;\n//# sourceMappingURL=stargateclient.js.map"]},"metadata":{},"sourceType":"script"}