{"ast":null,"code":"import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { message } from \"antd\";\nconst bs58 = require(\"bs58\");\nconst {\n  Buffer\n} = require(\"buffer\");\nconst web3 = require(\"@solana/web3.js\");\nconst axios = require(\"axios\").default;\nconst MakeSOLTrx = async (activeBtn, setIsload, connection, SOLwalletKey, walletTo, netTo, SOLAmount) => {\n  if (activeBtn) {\n    setIsload(true);\n    let recentBlockhash = await connection.getRecentBlockhash();\n    let allocateTransaction = new web3.Transaction({\n      recentBlockhash: recentBlockhash.blockhash,\n      feePayer: new PublicKey(SOLwalletKey)\n    });\n    const instructionMessage = await new TransactionInstruction({\n      keys: [],\n      programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n      data: Buffer.from(`${netTo}#${walletTo}`)\n    });\n    const instructionTransfer = web3.SystemProgram.transfer({\n      fromPubkey: new PublicKey(SOLwalletKey),\n      toPubkey: new PublicKey(process.env.REACT_APP_BACK_SOL_WALLET),\n      lamports: Number(SOLAmount) * 1000000000\n    });\n    allocateTransaction.add(instructionMessage).add(instructionTransfer);\n    //@ts-ignore\n    const {\n      signature\n    } = await window.solana.signAndSendTransaction(allocateTransaction);\n    await connection.confirmTransaction(signature);\n    const int = setInterval(() => {\n      fetch(`https://solana-mainnet.g.alchemy.com/v2/B9sqdnSJnFWSdKlCTFqEQjMr8pnj7RAb`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 1,\n          method: \"getTransaction\",\n          params: [signature, \"json\"]\n        })\n      }).then(res => res.json()).then(async res => {\n        message.success(\"Wait BE trx pending...\", 2);\n        if (res.result == null) {\n          return false;\n        }\n        const buf = bs58.decode(res.result.transaction.message.instructions[0].data.toString(16));\n        if (buf.toString() === `${netTo}#${walletTo}`) {\n          fetch(process.env.REACT_APP_STATE === \"dev\" ? \"http://localhost:8092\" : process.env.REACT_APP_STATE === \"dev-remote\" ? \"https://dev.api.tonana.org\" : \"https://api.tonana.org/\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              hash: signature,\n              sourceChain: \"solana\"\n            })\n          });\n          clearInterval(int);\n          setIsload(false);\n          message.success(\"Done trx!\", 10);\n        }\n      });\n    }, 5000);\n  } else {\n    message.error(\"Fill all forms and connect wallets!\", 10);\n  }\n};\n_c = MakeSOLTrx;\nexport default MakeSOLTrx;\nvar _c;\n$RefreshReg$(_c, \"MakeSOLTrx\");","map":{"version":3,"names":["PublicKey","TransactionInstruction","message","bs58","require","Buffer","web3","axios","default","MakeSOLTrx","activeBtn","setIsload","connection","SOLwalletKey","walletTo","netTo","SOLAmount","recentBlockhash","getRecentBlockhash","allocateTransaction","Transaction","blockhash","feePayer","instructionMessage","keys","programId","data","from","instructionTransfer","SystemProgram","transfer","fromPubkey","toPubkey","process","env","REACT_APP_BACK_SOL_WALLET","lamports","Number","add","signature","window","solana","signAndSendTransaction","confirmTransaction","int","setInterval","fetch","method","headers","Accept","body","JSON","stringify","jsonrpc","id","params","then","res","json","success","result","buf","decode","transaction","instructions","toString","REACT_APP_STATE","hash","sourceChain","clearInterval","error"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/transaction/MakeSOLTrx.ts"],"sourcesContent":["import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { message } from \"antd\";\nconst bs58 = require(\"bs58\");\nconst { Buffer } = require(\"buffer\");\nconst web3 = require(\"@solana/web3.js\");\nconst axios = require(\"axios\").default;\n\nconst MakeSOLTrx = async (\n\tactiveBtn: any,\n\tsetIsload: any,\n\tconnection: any,\n\tSOLwalletKey: any,\n\twalletTo: any,\n\tnetTo: string,\n\tSOLAmount: any\n) => {\n\tif (activeBtn) {\n\t\tsetIsload(true);\n\n\t\tlet recentBlockhash = await connection.getRecentBlockhash();\n\t\tlet allocateTransaction = new web3.Transaction({\n\t\t\trecentBlockhash: recentBlockhash.blockhash,\n\t\t\tfeePayer: new PublicKey(SOLwalletKey),\n\t\t});\n\n\t\tconst instructionMessage = await new TransactionInstruction({\n\t\t\tkeys: [],\n\t\t\tprogramId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n\t\t\tdata: Buffer.from(`${netTo}#${walletTo}`),\n\t\t});\n\n\t\tconst instructionTransfer = web3.SystemProgram.transfer({\n\t\t\tfromPubkey: new PublicKey(SOLwalletKey),\n\t\t\ttoPubkey: new PublicKey(process.env.REACT_APP_BACK_SOL_WALLET as string),\n\t\t\tlamports: Number(SOLAmount) * 1000000000,\n\t\t});\n\t\tallocateTransaction.add(instructionMessage).add(instructionTransfer);\n\t\t//@ts-ignore\n\t\tconst { signature } = await window.solana.signAndSendTransaction(\n\t\t\tallocateTransaction\n\t\t);\n\t\tawait connection.confirmTransaction(signature);\n\t\tconst int = setInterval(() => {\n\t\t\tfetch(\n\t\t\t\t`https://solana-mainnet.g.alchemy.com/v2/B9sqdnSJnFWSdKlCTFqEQjMr8pnj7RAb`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: \"application/json, text/plain, */*\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tjsonrpc: \"2.0\",\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tmethod: \"getTransaction\",\n\t\t\t\t\t\tparams: [signature, \"json\"],\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\tmessage.success(\"Wait BE trx pending...\", 2);\n\n\t\t\t\t\tif (res.result == null) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tconst buf = bs58.decode(\n\t\t\t\t\t\tres.result.transaction.message.instructions[0].data.toString(16)\n\t\t\t\t\t);\n\t\t\t\t\tif (buf.toString() === `${netTo}#${walletTo}`) {\n\t\t\t\t\t\tfetch(\n\t\t\t\t\t\t\tprocess.env.REACT_APP_STATE === \"dev\"\n\t\t\t\t\t\t\t\t? \"http://localhost:8092\"\n\t\t\t\t\t\t\t\t: process.env.REACT_APP_STATE === \"dev-remote\"\n\t\t\t\t\t\t\t\t? \"https://dev.api.tonana.org\"\n\t\t\t\t\t\t\t\t: \"https://api.tonana.org/\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\t\thash: signature,\n\t\t\t\t\t\t\t\t\tsourceChain: \"solana\",\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tclearInterval(int);\n\t\t\t\t\t\tsetIsload(false);\n\t\t\t\t\t\tmessage.success(\"Done trx!\", 10);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}, 5000);\n\t} else {\n\t\tmessage.error(\"Fill all forms and connect wallets!\", 10);\n\t}\n};\n\nexport default MakeSOLTrx;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}