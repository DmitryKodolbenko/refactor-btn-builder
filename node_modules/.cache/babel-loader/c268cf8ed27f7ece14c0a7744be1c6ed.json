{"ast":null,"code":"import { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nconst ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport async function requestLedgerDevice() {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({\n    filters: ledgerDevices\n  });\n  return device;\n}\nexport async function getLedgerDevices() {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter(d => d.vendorId === ledgerUSBVendorId);\n}\nexport async function getFirstLedgerDevice() {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\nexport const isSupported = () => Promise.resolve(!!navigator &&\n// $FlowFixMe\n!!navigator.usb && typeof navigator.usb.getDevices === \"function\");","map":{"version":3,"sources":["../src/webusb.js"],"names":["ledgerUSBVendorId","ledgerDevices","vendorId","requestLedgerDevice","device","usb","requestDevice","filters","getLedgerDevices","devices","navigator","getDevices","filter","d","getFirstLedgerDevice","existingDevices","length","isSupported","Promise","resolve"],"mappings":"AACA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,MAAMC,aAAa,GAAG,CAAC;EAAEC,QAAQ,EAAEF;AAAZ,CAAD,CAAtB;AAEA,OAAO,eAAeG,mBAAf,GAAyD;EAC9D;EACA,MAAMC,MAAM,GAAG,MAAM,SAAS,CAACC,GAAV,CAAcC,aAAd,CAA4B;IAAEC,OAAO,EAAEN;EAAX,CAA5B,CAArB;EACA,OAAOG,MAAP;AACD;AAED,OAAO,eAAeI,gBAAf,GAAwD;EAC7D;EACA,MAAMC,OAAO,GAAG,MAAMC,SAAS,CAACL,GAAVK,CAAcC,UAAdD,EAAtB;EACA,OAAOD,OAAO,CAACG,MAARH,CAAgBI,CAAD,IAAOA,CAAC,CAACX,QAAFW,KAAeb,iBAArCS,CAAP;AACD;AAED,OAAO,eAAeK,oBAAf,GAA0D;EAC/D,MAAMC,eAAe,GAAG,MAAMP,gBAAgB,EAA9C;EACA,IAAIO,eAAe,CAACC,MAAhBD,GAAyB,CAA7B,EAAgC,OAAOA,eAAe,CAAC,CAAD,CAAtB;EAChC,OAAOZ,mBAAmB,EAA1B;AACD;AAED,OAAO,MAAMc,WAAW,GAAG,MACzBC,OAAO,CAACC,OAARD,CACE,CAAC,CAACR,SAAF;AACE;AACA,CAAC,CAACA,SAAS,CAACL,GAFd,IAGE,OAAOK,SAAS,CAACL,GAAVK,CAAcC,UAArB,KAAoC,UAJxCO,CADK","sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}