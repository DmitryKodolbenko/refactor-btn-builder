{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeSecp256k1Pubkey = void 0;\nvar encoding_1 = require(\"@cosmjs/encoding\");\nvar math_1 = require(\"@cosmjs/math\");\nvar utils_1 = require(\"@cosmjs/utils\");\nvar pubkeys_1 = require(\"./pubkeys\");\nfunction encodeSecp256k1Pubkey(pubkey) {\n  if (pubkey.length !== 33 || pubkey[0] !== 0x02 && pubkey[0] !== 0x03) {\n    throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n  }\n  return {\n    type: pubkeys_1.pubkeyType.secp256k1,\n    value: (0, encoding_1.toBase64)(pubkey)\n  };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nvar pubkeyAminoPrefixSecp256k1 = (0, encoding_1.fromHex)(\"eb5ae987\" + \"21\" /* fixed length */);\nvar pubkeyAminoPrefixEd25519 = (0, encoding_1.fromHex)(\"1624de64\" + \"20\" /* fixed length */);\nvar pubkeyAminoPrefixSr25519 = (0, encoding_1.fromHex)(\"0dfb1005\" + \"20\" /* fixed length */);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\nvar pubkeyAminoPrefixMultisigThreshold = (0, encoding_1.fromHex)(\"22c1f7e2\" /* variable length not included */);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n  if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {\n    var rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n    if (rest.length !== 33) {\n      throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.secp256k1,\n      value: (0, encoding_1.toBase64)(rest)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {\n    var _rest = data.slice(pubkeyAminoPrefixEd25519.length);\n    if (_rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.ed25519,\n      value: (0, encoding_1.toBase64)(_rest)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {\n    var _rest2 = data.slice(pubkeyAminoPrefixSr25519.length);\n    if (_rest2.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n    }\n    return {\n      type: pubkeys_1.pubkeyType.sr25519,\n      value: (0, encoding_1.toBase64)(_rest2)\n    };\n  } else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return decodeMultisigPubkey(data);\n  } else {\n    throw new Error(\"Unsupported public key type. Amino data starts with: \" + (0, encoding_1.toHex)(data.slice(0, 5)));\n  }\n}\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n  var _ref = (0, encoding_1.fromBech32)(bechEncoded),\n    data = _ref.data;\n  return decodeAminoPubkey(data);\n}\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\nfunction decodeUvarint(reader) {\n  if (reader.length < 1) {\n    throw new Error(\"Can't decode varint. EOF\");\n  }\n  if (reader[0] > 127) {\n    throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n  }\n  return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\nfunction decodeMultisigPubkey(data) {\n  var reader = Array.from(data);\n  // remove multisig amino prefix;\n  var prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n  if (!(0, utils_1.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n    throw new Error(\"Invalid multisig prefix.\");\n  }\n  // remove 0x08 threshold prefix;\n  if (reader.shift() != 0x08) {\n    throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n  }\n  // read threshold\n  var _decodeUvarint = decodeUvarint(reader),\n    _decodeUvarint2 = _slicedToArray(_decodeUvarint, 2),\n    threshold = _decodeUvarint2[0],\n    thresholdBytesLength = _decodeUvarint2[1];\n  reader.splice(0, thresholdBytesLength);\n  // read participants pubkeys\n  var pubkeys = [];\n  while (reader.length > 0) {\n    // remove 0x12 threshold prefix;\n    if (reader.shift() != 0x12) {\n      throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n    }\n    // read pubkey length\n    var _decodeUvarint3 = decodeUvarint(reader),\n      _decodeUvarint4 = _slicedToArray(_decodeUvarint3, 2),\n      pubkeyLength = _decodeUvarint4[0],\n      pubkeyLengthBytesSize = _decodeUvarint4[1];\n    reader.splice(0, pubkeyLengthBytesSize);\n    // verify that we can read pubkey\n    if (reader.length < pubkeyLength) {\n      throw new Error(\"Invalid multisig data length.\");\n    }\n    // read and decode participant pubkey\n    var encodedPubkey = reader.splice(0, pubkeyLength);\n    var pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n    pubkeys.push(pubkey);\n  }\n  return {\n    type: pubkeys_1.pubkeyType.multisigThreshold,\n    value: {\n      threshold: threshold.toString(),\n      pubkeys: pubkeys\n    }\n  };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\nfunction encodeUvarint(value) {\n  var checked = math_1.Uint53.fromString(value.toString()).toNumber();\n  if (checked > 127) {\n    throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n  }\n  return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n  if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n    var out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n    out.push(0x08); // TODO: What is this?\n    out.push.apply(out, _toConsumableArray(encodeUvarint(pubkey.value.threshold)));\n    var _iterator = _createForOfIteratorHelper(pubkey.value.pubkeys.map(function (p) {\n        return encodeAminoPubkey(p);\n      })),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var pubkeyData = _step.value;\n        out.push(0x12); // TODO: What is this?\n        out.push.apply(out, _toConsumableArray(encodeUvarint(pubkeyData.length)));\n        out.push.apply(out, _toConsumableArray(pubkeyData));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return new Uint8Array(out);\n  } else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n    return new Uint8Array([].concat(_toConsumableArray(pubkeyAminoPrefixEd25519), _toConsumableArray((0, encoding_1.fromBase64)(pubkey.value))));\n  } else if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n    return new Uint8Array([].concat(_toConsumableArray(pubkeyAminoPrefixSecp256k1), _toConsumableArray((0, encoding_1.fromBase64)(pubkey.value))));\n  } else {\n    throw new Error(\"Unsupported pubkey type\");\n  }\n}\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n  return (0, encoding_1.toBech32)(prefix, encodeAminoPubkey(pubkey));\n}\nexports.encodeBech32Pubkey = encodeBech32Pubkey;","map":{"version":3,"sources":["../src/encoding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeSecp256k1Pubkey = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst pubkeys_1 = require(\"./pubkeys\");\nfunction encodeSecp256k1Pubkey(pubkey) {\n    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {\n        throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n    }\n    return {\n        type: pubkeys_1.pubkeyType.secp256k1,\n        value: (0, encoding_1.toBase64)(pubkey),\n    };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nconst pubkeyAminoPrefixSecp256k1 = (0, encoding_1.fromHex)(\"eb5ae987\" + \"21\" /* fixed length */);\nconst pubkeyAminoPrefixEd25519 = (0, encoding_1.fromHex)(\"1624de64\" + \"20\" /* fixed length */);\nconst pubkeyAminoPrefixSr25519 = (0, encoding_1.fromHex)(\"0dfb1005\" + \"20\" /* fixed length */);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\nconst pubkeyAminoPrefixMultisigThreshold = (0, encoding_1.fromHex)(\"22c1f7e2\" /* variable length not included */);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n    if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {\n        const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n        if (rest.length !== 33) {\n            throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.secp256k1,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {\n        const rest = data.slice(pubkeyAminoPrefixEd25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.ed25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {\n        const rest = data.slice(pubkeyAminoPrefixSr25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.sr25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return decodeMultisigPubkey(data);\n    }\n    else {\n        throw new Error(\"Unsupported public key type. Amino data starts with: \" + (0, encoding_1.toHex)(data.slice(0, 5)));\n    }\n}\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n    const { data } = (0, encoding_1.fromBech32)(bechEncoded);\n    return decodeAminoPubkey(data);\n}\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\nfunction decodeUvarint(reader) {\n    if (reader.length < 1) {\n        throw new Error(\"Can't decode varint. EOF\");\n    }\n    if (reader[0] > 127) {\n        throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n    }\n    return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\nfunction decodeMultisigPubkey(data) {\n    const reader = Array.from(data);\n    // remove multisig amino prefix;\n    const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n    if (!(0, utils_1.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n        throw new Error(\"Invalid multisig prefix.\");\n    }\n    // remove 0x08 threshold prefix;\n    if (reader.shift() != 0x08) {\n        throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n    }\n    // read threshold\n    const [threshold, thresholdBytesLength] = decodeUvarint(reader);\n    reader.splice(0, thresholdBytesLength);\n    // read participants pubkeys\n    const pubkeys = [];\n    while (reader.length > 0) {\n        // remove 0x12 threshold prefix;\n        if (reader.shift() != 0x12) {\n            throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n        }\n        // read pubkey length\n        const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);\n        reader.splice(0, pubkeyLengthBytesSize);\n        // verify that we can read pubkey\n        if (reader.length < pubkeyLength) {\n            throw new Error(\"Invalid multisig data length.\");\n        }\n        // read and decode participant pubkey\n        const encodedPubkey = reader.splice(0, pubkeyLength);\n        const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n        pubkeys.push(pubkey);\n    }\n    return {\n        type: pubkeys_1.pubkeyType.multisigThreshold,\n        value: {\n            threshold: threshold.toString(),\n            pubkeys: pubkeys,\n        },\n    };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\nfunction encodeUvarint(value) {\n    const checked = math_1.Uint53.fromString(value.toString()).toNumber();\n    if (checked > 127) {\n        throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n    }\n    return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n    if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n        const out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n        out.push(0x08); // TODO: What is this?\n        out.push(...encodeUvarint(pubkey.value.threshold));\n        for (const pubkeyData of pubkey.value.pubkeys.map((p) => encodeAminoPubkey(p))) {\n            out.push(0x12); // TODO: What is this?\n            out.push(...encodeUvarint(pubkeyData.length));\n            out.push(...pubkeyData);\n        }\n        return new Uint8Array(out);\n    }\n    else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixEd25519, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else {\n        throw new Error(\"Unsupported pubkey type\");\n    }\n}\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n    return (0, encoding_1.toBech32)(prefix, encodeAminoPubkey(pubkey));\n}\nexports.encodeBech32Pubkey = encodeBech32Pubkey;\n//# sourceMappingURL=encoding.js.map"]},"metadata":{},"sourceType":"script"}