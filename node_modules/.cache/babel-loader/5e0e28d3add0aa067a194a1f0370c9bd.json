{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _KeyStore_salt, _KeyStore_publicKey, _KeyStore_records;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyStore = exports.createKeyStoreKey = void 0;\nvar ton_crypto_1 = require(\"ton-crypto\");\nvar t = __importStar(require(\"io-ts\"));\nvar Either_1 = require(\"fp-ts/lib/Either\");\nvar __1 = require(\"..\");\nvar tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nvar codec = t.type({\n  version: t.number,\n  salt: t.string,\n  publicKey: t.string,\n  records: t.array(t.type({\n    name: t.string,\n    address: t.string,\n    kind: t.string,\n    config: t.string,\n    publicKey: t.string,\n    secretKey: t.string,\n    comment: t.string\n  }))\n});\nfunction createKeyStoreKey(_x, _x2) {\n  return _createKeyStoreKey.apply(this, arguments);\n}\nfunction _createKeyStoreKey() {\n  _createKeyStoreKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(password, salt) {\n    var secretKey, r;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return (0, ton_crypto_1.pbkdf2_sha512)(password, salt, 400000, 32);\n          case 2:\n            secretKey = _context7.sent;\n            r = tweetnacl_1.default.box.keyPair.fromSecretKey(secretKey);\n            return _context7.abrupt(\"return\", {\n              secretKey: Buffer.from(r.secretKey),\n              publicKey: Buffer.from(r.publicKey)\n            });\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _createKeyStoreKey.apply(this, arguments);\n}\nexports.createKeyStoreKey = createKeyStoreKey;\nvar KeyStore = /*#__PURE__*/function () {\n  function KeyStore(src) {\n    var _this = this;\n    _classCallCheck(this, KeyStore);\n    _KeyStore_salt.set(this, void 0);\n    _KeyStore_publicKey.set(this, void 0);\n    _KeyStore_records.set(this, new Map());\n    this.checkPassword = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(password) {\n        var key;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(_this, _KeyStore_salt, \"f\"), 'hex'));\n              case 2:\n                key = _context.sent;\n                if (key.publicKey.equals(Buffer.from(__classPrivateFieldGet(_this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                  _context.next = 7;\n                  break;\n                }\n                return _context.abrupt(\"return\", false);\n              case 7:\n                return _context.abrupt(\"return\", true);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.hasKey = function (name) {\n      return __classPrivateFieldGet(_this, _KeyStore_records, \"f\").has(name);\n    };\n    this.getKey = function (name) {\n      var ex = __classPrivateFieldGet(_this, _KeyStore_records, \"f\").get(name);\n      if (ex) {\n        return {\n          name: ex.name,\n          address: ex.address,\n          kind: ex.kind,\n          config: ex.config,\n          comment: ex.comment,\n          publicKey: Buffer.from(ex.publicKey, 'hex')\n        };\n      }\n      return null;\n    };\n    this.getSecret = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, password) {\n        var record, src, nonce, publicKey, data, key, decoded;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (__classPrivateFieldGet(_this, _KeyStore_records, \"f\").has(name)) {\n                  _context2.next = 2;\n                  break;\n                }\n                throw Error('Key with name ' + name + ' does not exist');\n              case 2:\n                record = __classPrivateFieldGet(_this, _KeyStore_records, \"f\").get(name);\n                src = Buffer.from(record.secretKey, 'hex');\n                nonce = src.slice(0, 24);\n                publicKey = src.slice(24, 24 + 32);\n                data = src.slice(24 + 32); // Derive key\n                _context2.next = 9;\n                return createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(_this, _KeyStore_salt, \"f\"), 'hex'));\n              case 9:\n                key = _context2.sent;\n                if (key.publicKey.equals(Buffer.from(__classPrivateFieldGet(_this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                  _context2.next = 12;\n                  break;\n                }\n                throw Error('Invalid password');\n              case 12:\n                // Decode\n                decoded = tweetnacl_1.default.box.open(data, nonce, publicKey, key.secretKey);\n                if (decoded) {\n                  _context2.next = 15;\n                  break;\n                }\n                throw Error('Invalid password');\n              case 15:\n                return _context2.abrupt(\"return\", Buffer.from(decoded));\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x4, _x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.addKey = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(record, key) {\n        var ephemeralKeySecret, ephemeralKeyPublic, nonce, encrypted, data, rec;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!__classPrivateFieldGet(_this, _KeyStore_records, \"f\").has(record.name)) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw Error('Key with name ' + record.name + ' already exists');\n              case 2:\n                _context3.next = 4;\n                return (0, ton_crypto_1.getSecureRandomBytes)(32);\n              case 4:\n                ephemeralKeySecret = _context3.sent;\n                ephemeralKeyPublic = Buffer.from(tweetnacl_1.default.box.keyPair.fromSecretKey(ephemeralKeySecret).publicKey);\n                _context3.next = 8;\n                return (0, ton_crypto_1.getSecureRandomBytes)(24);\n              case 8:\n                nonce = _context3.sent;\n                encrypted = tweetnacl_1.default.box(key, nonce, Buffer.from(__classPrivateFieldGet(_this, _KeyStore_publicKey, \"f\"), 'hex'), ephemeralKeySecret);\n                data = Buffer.concat([nonce, ephemeralKeyPublic, encrypted]); // Create record\n                rec = {\n                  name: record.name,\n                  address: record.address,\n                  kind: record.kind,\n                  config: record.config,\n                  comment: record.comment,\n                  publicKey: record.publicKey.toString('hex'),\n                  secretKey: data.toString('hex')\n                };\n                Object.freeze(rec);\n                __classPrivateFieldGet(_this, _KeyStore_records, \"f\").set(record.name, rec);\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x6, _x7) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    this.removeKey = function (name) {\n      if (!__classPrivateFieldGet(_this, _KeyStore_records, \"f\").has(name)) {\n        throw Error('Key with name ' + name + ' does not exist');\n      }\n      __classPrivateFieldGet(_this, _KeyStore_records, \"f\").delete(name);\n    };\n    if (src.version !== 1) {\n      throw Error('Unsupported keystore');\n    }\n    __classPrivateFieldSet(this, _KeyStore_salt, src.salt, \"f\");\n    __classPrivateFieldSet(this, _KeyStore_publicKey, src.publicKey, \"f\");\n    var _iterator = _createForOfIteratorHelper(src.records),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var r = _step.value;\n        if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(r.name)) {\n          throw Error('Broken keystore');\n        }\n        var record = {\n          name: r.name,\n          address: __1.Address.parseRaw(r.address),\n          kind: r.kind,\n          config: r.config,\n          comment: r.comment,\n          publicKey: r.publicKey,\n          secretKey: r.secretKey\n        };\n        Object.freeze(record);\n        __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(r.name, record);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  _createClass(KeyStore, [{\n    key: \"allKeys\",\n    get: function get() {\n      var res = [];\n      var _iterator2 = _createForOfIteratorHelper(__classPrivateFieldGet(this, _KeyStore_records, \"f\").keys()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var k = _step2.value;\n          var r = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(k);\n          res.push({\n            name: r.name,\n            address: r.address,\n            kind: r.kind,\n            config: r.config,\n            comment: r.comment,\n            publicKey: Buffer.from(r.publicKey, 'hex')\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return res;\n    }\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var store, data, hash;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                store = {\n                  version: 1,\n                  salt: __classPrivateFieldGet(this, _KeyStore_salt, \"f\"),\n                  publicKey: __classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"),\n                  records: Array.from(__classPrivateFieldGet(this, _KeyStore_records, \"f\").entries()).map(function (v) {\n                    return {\n                      name: v[1].name,\n                      address: v[1].address.toString(),\n                      kind: v[1].kind,\n                      config: v[1].config,\n                      comment: v[1].comment,\n                      publicKey: v[1].publicKey,\n                      secretKey: v[1].secretKey\n                    };\n                  })\n                };\n                data = Buffer.from(JSON.stringify(store), 'utf-8');\n                _context4.next = 4;\n                return (0, ton_crypto_1.sha256)(data);\n              case 4:\n                hash = _context4.sent;\n                return _context4.abrupt(\"return\", Buffer.concat([hash, data]));\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function save() {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n  }], [{\n    key: \"createNew\",\n    value: function () {\n      var _createNew = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(password) {\n        var salt, key;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, ton_crypto_1.getSecureRandomBytes)(32);\n              case 2:\n                salt = _context5.sent;\n                _context5.next = 5;\n                return createKeyStoreKey(password, salt);\n              case 5:\n                key = _context5.sent;\n                return _context5.abrupt(\"return\", new KeyStore({\n                  version: 1,\n                  salt: salt.toString('hex'),\n                  publicKey: key.publicKey.toString('hex'),\n                  records: []\n                }));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      function createNew(_x8) {\n        return _createNew.apply(this, arguments);\n      }\n      return createNew;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(source) {\n        var hash, data, hash2, parsed, decoded;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(source.length < 32)) {\n                  _context6.next = 2;\n                  break;\n                }\n                throw Error('Broken keystore');\n              case 2:\n                hash = source.slice(0, 32);\n                data = source.slice(32);\n                _context6.next = 6;\n                return (0, ton_crypto_1.sha256)(data);\n              case 6:\n                hash2 = _context6.sent;\n                if (hash.equals(hash2)) {\n                  _context6.next = 9;\n                  break;\n                }\n                throw Error('Broken keystore');\n              case 9:\n                // Parse storage\n                parsed = JSON.parse(data.toString('utf-8'));\n                decoded = codec.decode(parsed);\n                if (!(0, Either_1.isLeft)(decoded)) {\n                  _context6.next = 13;\n                  break;\n                }\n                throw Error('Broken keystore');\n              case 13:\n                return _context6.abrupt(\"return\", new KeyStore(decoded.right));\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      function load(_x9) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }]);\n  return KeyStore;\n}();\nexports.KeyStore = KeyStore;\n_KeyStore_salt = new WeakMap(), _KeyStore_publicKey = new WeakMap(), _KeyStore_records = new WeakMap();","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__classPrivateFieldSet","receiver","state","kind","f","TypeError","has","set","__classPrivateFieldGet","__importDefault","_KeyStore_salt","_KeyStore_publicKey","_KeyStore_records","exports","KeyStore","createKeyStoreKey","ton_crypto_1","require","t","Either_1","__1","tweetnacl_1","codec","type","version","number","salt","string","publicKey","records","array","name","address","config","secretKey","comment","password","pbkdf2_sha512","r","default","box","keyPair","fromSecretKey","Buffer","from","src","Map","checkPassword","key","equals","hasKey","getKey","ex","getSecret","Error","record","nonce","slice","data","decoded","open","addKey","getSecureRandomBytes","ephemeralKeySecret","ephemeralKeyPublic","encrypted","concat","rec","toString","freeze","removeKey","delete","Address","parseRaw","res","keys","push","store","Array","entries","map","JSON","stringify","sha256","hash","source","length","hash2","parsed","parse","decode","isLeft","right","WeakMap"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/keystore/KeyStore.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _KeyStore_salt, _KeyStore_publicKey, _KeyStore_records;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyStore = exports.createKeyStoreKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst t = __importStar(require(\"io-ts\"));\nconst Either_1 = require(\"fp-ts/lib/Either\");\nconst __1 = require(\"..\");\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst codec = t.type({\n    version: t.number,\n    salt: t.string,\n    publicKey: t.string,\n    records: t.array(t.type({\n        name: t.string,\n        address: t.string,\n        kind: t.string,\n        config: t.string,\n        publicKey: t.string,\n        secretKey: t.string,\n        comment: t.string\n    }))\n});\nasync function createKeyStoreKey(password, salt) {\n    let secretKey = await (0, ton_crypto_1.pbkdf2_sha512)(password, salt, 400000, 32);\n    let r = tweetnacl_1.default.box.keyPair.fromSecretKey(secretKey);\n    return {\n        secretKey: Buffer.from(r.secretKey),\n        publicKey: Buffer.from(r.publicKey)\n    };\n}\nexports.createKeyStoreKey = createKeyStoreKey;\nclass KeyStore {\n    constructor(src) {\n        _KeyStore_salt.set(this, void 0);\n        _KeyStore_publicKey.set(this, void 0);\n        _KeyStore_records.set(this, new Map());\n        this.checkPassword = async (password) => {\n            let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n            if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        };\n        this.hasKey = (name) => {\n            return __classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name);\n        };\n        this.getKey = (name) => {\n            let ex = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n            if (ex) {\n                return {\n                    name: ex.name,\n                    address: ex.address,\n                    kind: ex.kind,\n                    config: ex.config,\n                    comment: ex.comment,\n                    publicKey: Buffer.from(ex.publicKey, 'hex')\n                };\n            }\n            return null;\n        };\n        this.getSecret = async (name, password) => {\n            if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n                throw Error('Key with name ' + name + ' does not exist');\n            }\n            let record = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(name);\n            let src = Buffer.from(record.secretKey, 'hex');\n            let nonce = src.slice(0, 24);\n            let publicKey = src.slice(24, 24 + 32);\n            let data = src.slice(24 + 32);\n            // Derive key\n            let key = await createKeyStoreKey(password, Buffer.from(__classPrivateFieldGet(this, _KeyStore_salt, \"f\"), 'hex'));\n            if (!key.publicKey.equals(Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'))) {\n                throw Error('Invalid password');\n            }\n            // Decode\n            let decoded = tweetnacl_1.default.box.open(data, nonce, publicKey, key.secretKey);\n            if (!decoded) {\n                throw Error('Invalid password');\n            }\n            return Buffer.from(decoded);\n        };\n        this.addKey = async (record, key) => {\n            if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(record.name)) {\n                throw Error('Key with name ' + record.name + ' already exists');\n            }\n            // Create key\n            let ephemeralKeySecret = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n            let ephemeralKeyPublic = Buffer.from((tweetnacl_1.default.box.keyPair.fromSecretKey(ephemeralKeySecret)).publicKey);\n            let nonce = await (0, ton_crypto_1.getSecureRandomBytes)(24);\n            let encrypted = tweetnacl_1.default.box(key, nonce, Buffer.from(__classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"), 'hex'), ephemeralKeySecret);\n            let data = Buffer.concat([nonce, ephemeralKeyPublic, encrypted]);\n            // Create record\n            let rec = {\n                name: record.name,\n                address: record.address,\n                kind: record.kind,\n                config: record.config,\n                comment: record.comment,\n                publicKey: record.publicKey.toString('hex'),\n                secretKey: data.toString('hex')\n            };\n            Object.freeze(rec);\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(record.name, rec);\n        };\n        this.removeKey = (name) => {\n            if (!__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(name)) {\n                throw Error('Key with name ' + name + ' does not exist');\n            }\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").delete(name);\n        };\n        if (src.version !== 1) {\n            throw Error('Unsupported keystore');\n        }\n        __classPrivateFieldSet(this, _KeyStore_salt, src.salt, \"f\");\n        __classPrivateFieldSet(this, _KeyStore_publicKey, src.publicKey, \"f\");\n        for (let r of src.records) {\n            if (__classPrivateFieldGet(this, _KeyStore_records, \"f\").has(r.name)) {\n                throw Error('Broken keystore');\n            }\n            const record = {\n                name: r.name,\n                address: __1.Address.parseRaw(r.address),\n                kind: r.kind,\n                config: r.config,\n                comment: r.comment,\n                publicKey: r.publicKey,\n                secretKey: r.secretKey\n            };\n            Object.freeze(record);\n            __classPrivateFieldGet(this, _KeyStore_records, \"f\").set(r.name, record);\n        }\n    }\n    static async createNew(password) {\n        let salt = await (0, ton_crypto_1.getSecureRandomBytes)(32);\n        let key = await createKeyStoreKey(password, salt);\n        return new KeyStore({ version: 1, salt: salt.toString('hex'), publicKey: key.publicKey.toString('hex'), records: [] });\n    }\n    static async load(source) {\n        // Validate checksum\n        if (source.length < 32) {\n            throw Error('Broken keystore');\n        }\n        let hash = source.slice(0, 32);\n        let data = source.slice(32);\n        let hash2 = await (0, ton_crypto_1.sha256)(data);\n        if (!hash.equals(hash2)) { // We don't care about timing attacks here\n            throw Error('Broken keystore');\n        }\n        // Parse storage\n        let parsed = JSON.parse(data.toString('utf-8'));\n        let decoded = codec.decode(parsed);\n        if ((0, Either_1.isLeft)(decoded)) {\n            throw Error('Broken keystore');\n        }\n        return new KeyStore(decoded.right);\n    }\n    get allKeys() {\n        let res = [];\n        for (let k of __classPrivateFieldGet(this, _KeyStore_records, \"f\").keys()) {\n            let r = __classPrivateFieldGet(this, _KeyStore_records, \"f\").get(k);\n            res.push({\n                name: r.name,\n                address: r.address,\n                kind: r.kind,\n                config: r.config,\n                comment: r.comment,\n                publicKey: Buffer.from(r.publicKey, 'hex')\n            });\n        }\n        return res;\n    }\n    async save() {\n        let store = {\n            version: 1,\n            salt: __classPrivateFieldGet(this, _KeyStore_salt, \"f\"),\n            publicKey: __classPrivateFieldGet(this, _KeyStore_publicKey, \"f\"),\n            records: Array.from(__classPrivateFieldGet(this, _KeyStore_records, \"f\").entries()).map((v) => ({\n                name: v[1].name,\n                address: v[1].address.toString(),\n                kind: v[1].kind,\n                config: v[1].config,\n                comment: v[1].comment,\n                publicKey: v[1].publicKey,\n                secretKey: v[1].secretKey\n            }))\n        };\n        let data = Buffer.from(JSON.stringify(store), 'utf-8');\n        let hash = await (0, ton_crypto_1.sha256)(data);\n        return Buffer.concat([hash, data]);\n    }\n}\nexports.KeyStore = KeyStore;\n_KeyStore_salt = new WeakMap(), _KeyStore_publicKey = new WeakMap(), _KeyStore_records = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}