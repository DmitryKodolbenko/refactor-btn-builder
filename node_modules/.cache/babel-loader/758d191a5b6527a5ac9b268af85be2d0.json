{"ast":null,"code":"\"use strict\";\n\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nfunction isArgon2idOptions(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.outputLength !== \"number\") return false;\n  if (typeof thing.opsLimit !== \"number\") return false;\n  if (typeof thing.memLimitKib !== \"number\") return false;\n  return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nclass Argon2id {\n  static async execute(password, salt, options) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt,\n    // libsodium only supports 16 byte salts and will throw when you don't respect that\n    options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n  }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n  static fromLibsodiumPrivkey(libsodiumPrivkey) {\n    if (libsodiumPrivkey.length !== 64) {\n      throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n    }\n    return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n  }\n  toLibsodiumPrivkey() {\n    return new Uint8Array([...this.privkey, ...this.pubkey]);\n  }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n  /**\n   * Generates a keypair deterministically from a given 32 bytes seed.\n   *\n   * This seed equals the Ed25519 private key.\n   * For implementation details see crypto_sign_seed_keypair in\n   * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n   * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  static async makeKeypair(seed) {\n    await libsodium_wrappers_1.default.ready;\n    const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n    return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n  }\n  static async createSignature(message, keyPair) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n  }\n  static async verifySignature(signature, message, pubkey) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n  }\n}\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nclass Xchacha20poly1305Ietf {\n  static async encrypt(message, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null,\n    // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    nonce, key);\n  }\n  static async decrypt(ciphertext, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null,\n    // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    ciphertext, additionalData, nonce, key);\n  }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"sources":["../src/libsodium.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nfunction isArgon2idOptions(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.outputLength !== \"number\")\n        return false;\n    if (typeof thing.opsLimit !== \"number\")\n        return false;\n    if (typeof thing.memLimitKib !== \"number\")\n        return false;\n    return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nclass Argon2id {\n    static async execute(password, salt, options) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n        options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n    }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n    static fromLibsodiumPrivkey(libsodiumPrivkey) {\n        if (libsodiumPrivkey.length !== 64) {\n            throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n        }\n        return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n    toLibsodiumPrivkey() {\n        return new Uint8Array([...this.privkey, ...this.pubkey]);\n    }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    static async makeKeypair(seed) {\n        await libsodium_wrappers_1.default.ready;\n        const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n        return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n    }\n    static async createSignature(message, keyPair) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n    }\n    static async verifySignature(signature, message, pubkey) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n    }\n}\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nclass Xchacha20poly1305Ietf {\n    static async encrypt(message, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        nonce, key);\n    }\n    static async decrypt(ciphertext, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        ciphertext, additionalData, nonce, key);\n    }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;\n//# sourceMappingURL=libsodium.js.map"]},"metadata":{},"sourceType":"script"}