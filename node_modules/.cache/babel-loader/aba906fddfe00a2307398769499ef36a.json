{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index\");\nconst {\n  Cell\n} = require(\"../../../boc\");\nconst {\n  Address,\n  BN\n} = require(\"../../../utils\");\nconst {\n  parseAddress\n} = require('./NftUtils.js');\nconstn\n/**\n * NFT Release Candidate - may still change slightly\n */\nclass NftItem extends Contract {\n  /**\n   * @param provider\n   * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n    super(provider, options);\n    this.methods.getData = this.getData.bind(this);\n  }\n\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft data\n   */\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeUint(this.options.index, 64);\n    cell.bits.writeAddress(this.options.collectionAddress);\n    return cell;\n  }\n\n  /**\n   * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentCell: Cell}>}\n   */\n  async getData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n    const isInitialized = result[0].toNumber() === -1;\n    const index = result[1].toNumber();\n    const collectionAddress = parseAddress(result[2]);\n    const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n    const contentCell = result[4];\n    return {\n      isInitialized,\n      index,\n      collectionAddress,\n      ownerAddress,\n      contentCell\n    };\n  }\n\n  /**\n   * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n   */\n  async createTransferBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n    cell.bits.writeUint(params.queryId || 0, 64);\n    cell.bits.writeAddress(params.newOwnerAddress);\n    cell.bits.writeAddress(params.responseAddress);\n    cell.bits.writeBit(false); // null custom_payload\n    cell.bits.writeCoins(params.forwardAmount || new BN(0));\n    cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n    if (params.forwardPayload) {\n      cell.bits.writeBytes(params.forwardPayload);\n    }\n    return cell;\n  }\n\n  /**\n   * params   {{queryId?: number}}\n   * @return {Cell}\n   */\n  createGetStaticDataBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(0x2fcb26a2, 32); // OP\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n    return body;\n  }\n}\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\nmodule.exports = {\n  NftItem\n};","map":{"version":3,"names":["Contract","require","Cell","Address","BN","parseAddress","NFT_ITEM_CODE_HEX","NftItem","constructor","provider","options","wc","code","oneFromBoc","methods","getData","bind","createDataCell","cell","bits","writeUint","index","writeAddress","collectionAddress","myAddress","getAddress","result","call2","toString","isInitialized","toNumber","ownerAddress","contentCell","createTransferBody","params","queryId","newOwnerAddress","responseAddress","writeBit","writeCoins","forwardAmount","forwardPayload","writeBytes","createGetStaticDataBody","body","codeHex","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/contract/token/nft/NftItem.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {Address, BN} = require(\"../../../utils\");\nconst {parseAddress} = require('./NftUtils.js');\n\nconstn\n/**\n * NFT Release Candidate - may still change slightly\n */\nclass NftItem extends Contract {\n    /**\n     * @param provider\n     * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeUint(this.options.index, 64);\n        cell.bits.writeAddress(this.options.collectionAddress);\n        return cell;\n    }\n\n    /**\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentCell: Cell}>}\n     */\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n\n        const isInitialized = result[0].toNumber() === -1;\n        const index = result[1].toNumber();\n        const collectionAddress =  parseAddress(result[2]);\n        const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n\n        const contentCell = result[4];\n\n        return {isInitialized, index, collectionAddress, ownerAddress, contentCell};\n    }\n\n    /**\n     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n     */\n    async createTransferBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeAddress(params.newOwnerAddress);\n        cell.bits.writeAddress(params.responseAddress);\n        cell.bits.writeBit(false); // null custom_payload\n        cell.bits.writeCoins(params.forwardAmount || new BN(0));\n        cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n        if (params.forwardPayload) {\n            cell.bits.writeBytes(params.forwardPayload);\n        }\n        return cell;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetStaticDataBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x2fcb26a2, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n}\n\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\n\nmodule.exports = {NftItem};"],"mappings":"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"},"metadata":{},"sourceType":"script"}