{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nvar depd_1 = __importDefault(require(\"depd\"));\nvar provider_1 = require(\"./provider\");\nvar web_1 = require(\"../utils/web\");\nvar errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function get() {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function get() {\n    return errors_1.ErrorContext;\n  }\n});\nvar borsh_1 = require(\"borsh\");\nvar exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nvar rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nvar REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nvar REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nvar REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nvar _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nvar JsonRpcProvider = /*#__PURE__*/function (_provider_1$Provider) {\n  _inherits(JsonRpcProvider, _provider_1$Provider);\n  var _super = _createSuper(JsonRpcProvider);\n  /**\n   * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n   */\n  function JsonRpcProvider(connectionInfoOrUrl) {\n    var _this;\n    _classCallCheck(this, JsonRpcProvider);\n    _this = _super.call(this);\n    if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n      _this.connection = connectionInfoOrUrl;\n    } else {\n      var deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n      deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n      _this.connection = {\n        url: connectionInfoOrUrl\n      };\n    }\n    return _this;\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n  _createClass(JsonRpcProvider, [{\n    key: \"status\",\n    value: function () {\n      var _status = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.sendJsonRpc('status', []));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function status() {\n        return _status.apply(this, arguments);\n      }\n      return status;\n    }()\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signedTransaction) {\n        var bytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                bytes = signedTransaction.encode();\n                return _context2.abrupt(\"return\", this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]));\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function sendTransaction(_x) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n  }, {\n    key: \"sendTransactionAsync\",\n    value: function () {\n      var _sendTransactionAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(signedTransaction) {\n        var bytes;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                bytes = signedTransaction.encode();\n                return _context3.abrupt(\"return\", this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]));\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function sendTransactionAsync(_x2) {\n        return _sendTransactionAsync.apply(this, arguments);\n      }\n      return sendTransactionAsync;\n    }()\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n  }, {\n    key: \"txStatus\",\n    value: function () {\n      var _txStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(txHash, accountId) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(typeof txHash === 'string')) {\n                  _context4.next = 4;\n                  break;\n                }\n                return _context4.abrupt(\"return\", this.txStatusString(txHash, accountId));\n              case 4:\n                return _context4.abrupt(\"return\", this.txStatusUint8Array(txHash, accountId));\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function txStatus(_x3, _x4) {\n        return _txStatus.apply(this, arguments);\n      }\n      return txStatus;\n    }()\n  }, {\n    key: \"txStatusUint8Array\",\n    value: function () {\n      var _txStatusUint8Array = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(txHash, accountId) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]));\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function txStatusUint8Array(_x5, _x6) {\n        return _txStatusUint8Array.apply(this, arguments);\n      }\n      return txStatusUint8Array;\n    }()\n  }, {\n    key: \"txStatusString\",\n    value: function () {\n      var _txStatusString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(txHash, accountId) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.sendJsonRpc('tx', [txHash, accountId]));\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function txStatusString(_x7, _x8) {\n        return _txStatusString.apply(this, arguments);\n      }\n      return txStatusString;\n    }()\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n  }, {\n    key: \"txStatusReceipts\",\n    value: function () {\n      var _txStatusReceipts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(txHash, accountId) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]));\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function txStatusReceipts(_x9, _x10) {\n        return _txStatusReceipts.apply(this, arguments);\n      }\n      return txStatusReceipts;\n    }()\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n  }, {\n    key: \"query\",\n    value: function () {\n      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var result,\n          _len,\n          args,\n          _key,\n          path,\n          data,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                for (_len = _args8.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args8[_key];\n                }\n                if (!(args.length === 1)) {\n                  _context8.next = 7;\n                  break;\n                }\n                _context8.next = 4;\n                return this.sendJsonRpc('query', args[0]);\n              case 4:\n                result = _context8.sent;\n                _context8.next = 11;\n                break;\n              case 7:\n                path = args[0], data = args[1];\n                _context8.next = 10;\n                return this.sendJsonRpc('query', [path, data]);\n              case 10:\n                result = _context8.sent;\n              case 11:\n                if (!(result && result.error)) {\n                  _context8.next = 13;\n                  break;\n                }\n                throw new errors_1.TypedError(\"Querying \".concat(args, \" failed: \").concat(result.error, \".\\n\").concat(JSON.stringify(result, null, 2)), rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n              case 13:\n                return _context8.abrupt(\"return\", result);\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function query() {\n        return _query.apply(this, arguments);\n      }\n      return query;\n    }()\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n  }, {\n    key: \"block\",\n    value: function () {\n      var _block = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(blockQuery) {\n        var finality, blockId, deprecate;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                if (typeof blockQuery !== 'object') {\n                  deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n                  deprecate('use `block({ blockId })` or `block({ finality })` instead');\n                  blockId = blockQuery;\n                }\n                return _context9.abrupt(\"return\", this.sendJsonRpc('block', {\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function block(_x11) {\n        return _block.apply(this, arguments);\n      }\n      return block;\n    }()\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n  }, {\n    key: \"blockChanges\",\n    value: function () {\n      var _blockChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context10.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function blockChanges(_x12) {\n        return _blockChanges.apply(this, arguments);\n      }\n      return blockChanges;\n    }()\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n  }, {\n    key: \"chunk\",\n    value: function () {\n      var _chunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(chunkId) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.sendJsonRpc('chunk', [chunkId]));\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function chunk(_x13) {\n        return _chunk.apply(this, arguments);\n      }\n      return chunk;\n    }()\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n  }, {\n    key: \"validators\",\n    value: function () {\n      var _validators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(blockId) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.sendJsonRpc('validators', [blockId]));\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function validators(_x14) {\n        return _validators.apply(this, arguments);\n      }\n      return validators;\n    }()\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n  }, {\n    key: \"experimental_genesisConfig\",\n    value: function () {\n      var _experimental_genesisConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var deprecate;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n                deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n                _context13.next = 4;\n                return this.sendJsonRpc('EXPERIMENTAL_protocol_config', {\n                  sync_checkpoint: 'genesis'\n                });\n              case 4:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function experimental_genesisConfig() {\n        return _experimental_genesisConfig.apply(this, arguments);\n      }\n      return experimental_genesisConfig;\n    }()\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n  }, {\n    key: \"experimental_protocolConfig\",\n    value: function () {\n      var _experimental_protocolConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(blockReference) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function experimental_protocolConfig(_x15) {\n        return _experimental_protocolConfig.apply(this, arguments);\n      }\n      return experimental_protocolConfig;\n    }()\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n  }, {\n    key: \"experimental_lightClientProof\",\n    value: function () {\n      var _experimental_lightClientProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(request) {\n        var deprecate;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n                deprecate('use `lightClientProof` instead');\n                _context15.next = 4;\n                return this.lightClientProof(request);\n              case 4:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function experimental_lightClientProof(_x16) {\n        return _experimental_lightClientProof.apply(this, arguments);\n      }\n      return experimental_lightClientProof;\n    }()\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n  }, {\n    key: \"lightClientProof\",\n    value: function () {\n      var _lightClientProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(request) {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n              case 2:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function lightClientProof(_x17) {\n        return _lightClientProof.apply(this, arguments);\n      }\n      return lightClientProof;\n    }()\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n  }, {\n    key: \"accessKeyChanges\",\n    value: function () {\n      var _accessKeyChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context17.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'all_access_key_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function accessKeyChanges(_x18, _x19) {\n        return _accessKeyChanges.apply(this, arguments);\n      }\n      return accessKeyChanges;\n    }()\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n  }, {\n    key: \"singleAccessKeyChanges\",\n    value: function () {\n      var _singleAccessKeyChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(accessKeyArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context18.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'single_access_key_changes',\n                  keys: accessKeyArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 3:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function singleAccessKeyChanges(_x20, _x21) {\n        return _singleAccessKeyChanges.apply(this, arguments);\n      }\n      return singleAccessKeyChanges;\n    }()\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n  }, {\n    key: \"accountChanges\",\n    value: function () {\n      var _accountChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context19.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'account_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function accountChanges(_x22, _x23) {\n        return _accountChanges.apply(this, arguments);\n      }\n      return accountChanges;\n    }()\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n  }, {\n    key: \"contractStateChanges\",\n    value: function () {\n      var _contractStateChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(accountIdArray, blockQuery) {\n        var keyPrefix,\n          finality,\n          blockId,\n          _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                keyPrefix = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : '';\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context20.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'data_changes',\n                  account_ids: accountIdArray,\n                  key_prefix_base64: keyPrefix,\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 4:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function contractStateChanges(_x24, _x25) {\n        return _contractStateChanges.apply(this, arguments);\n      }\n      return contractStateChanges;\n    }()\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n  }, {\n    key: \"contractCodeChanges\",\n    value: function () {\n      var _contractCodeChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(accountIdArray, blockQuery) {\n        var finality, blockId;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                finality = blockQuery.finality;\n                blockId = blockQuery.blockId;\n                return _context21.abrupt(\"return\", this.sendJsonRpc('EXPERIMENTAL_changes', {\n                  changes_type: 'contract_code_changes',\n                  account_ids: accountIdArray,\n                  block_id: blockId,\n                  finality: finality\n                }));\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function contractCodeChanges(_x26, _x27) {\n        return _contractCodeChanges.apply(this, arguments);\n      }\n      return contractCodeChanges;\n    }()\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n  }, {\n    key: \"gasPrice\",\n    value: function () {\n      var _gasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(blockId) {\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.sendJsonRpc('gas_price', [blockId]);\n              case 2:\n                return _context22.abrupt(\"return\", _context22.sent);\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function gasPrice(_x28) {\n        return _gasPrice.apply(this, arguments);\n      }\n      return gasPrice;\n    }()\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n  }, {\n    key: \"sendJsonRpc\",\n    value: function () {\n      var _sendJsonRpc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(method, params) {\n        var _this2 = this;\n        var response, result;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n                  var request, _response, errorMessage;\n                  return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n                    while (1) {\n                      switch (_context23.prev = _context23.next) {\n                        case 0:\n                          _context23.prev = 0;\n                          request = {\n                            method: method,\n                            params: params,\n                            id: _nextId++,\n                            jsonrpc: '2.0'\n                          };\n                          _context23.next = 4;\n                          return web_1.fetchJson(_this2.connection, JSON.stringify(request));\n                        case 4:\n                          _response = _context23.sent;\n                          if (!_response.error) {\n                            _context23.next = 16;\n                            break;\n                          }\n                          if (!(typeof _response.error.data === 'object')) {\n                            _context23.next = 12;\n                            break;\n                          }\n                          if (!(typeof _response.error.data.error_message === 'string' && typeof _response.error.data.error_type === 'string')) {\n                            _context23.next = 9;\n                            break;\n                          }\n                          throw new errors_1.TypedError(_response.error.data.error_message, _response.error.data.error_type);\n                        case 9:\n                          throw rpc_errors_1.parseRpcError(_response.error.data);\n                        case 12:\n                          errorMessage = \"[\".concat(_response.error.code, \"] \").concat(_response.error.message, \": \").concat(_response.error.data); // NOTE: All this hackery is happening because structured errors not implemented\n                          // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                          if (!(_response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out'))) {\n                            _context23.next = 15;\n                            break;\n                          }\n                          throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        case 15:\n                          throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(_response.error.data));\n                        case 16:\n                          return _context23.abrupt(\"return\", _response);\n                        case 19:\n                          _context23.prev = 19;\n                          _context23.t0 = _context23[\"catch\"](0);\n                          if (!(_context23.t0.type === 'TimeoutError')) {\n                            _context23.next = 24;\n                            break;\n                          }\n                          if (!process.env['NEAR_NO_LOGS']) {\n                            console.warn(\"Retrying request to \".concat(method, \" as it has timed out\"), params);\n                          }\n                          return _context23.abrupt(\"return\", null);\n                        case 24:\n                          throw _context23.t0;\n                        case 25:\n                        case \"end\":\n                          return _context23.stop();\n                      }\n                    }\n                  }, _callee23, null, [[0, 19]]);\n                })));\n              case 2:\n                response = _context24.sent;\n                result = response.result; // From jsonrpc spec:\n                // result\n                //   This member is REQUIRED on success.\n                //   This member MUST NOT exist if there was an error invoking the method.\n                if (!(typeof result === 'undefined')) {\n                  _context24.next = 6;\n                  break;\n                }\n                throw new errors_1.TypedError(\"Exceeded \".concat(REQUEST_RETRY_NUMBER, \" attempts for request to \").concat(method, \".\"), 'RetriesExceeded');\n              case 6:\n                return _context24.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n      function sendJsonRpc(_x29, _x30) {\n        return _sendJsonRpc.apply(this, arguments);\n      }\n      return sendJsonRpc;\n    }()\n  }]);\n  return JsonRpcProvider;\n}(provider_1.Provider);\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","ErrorContext","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","connectionInfoOrUrl","connection","deprecate","default","url","sendJsonRpc","signedTransaction","bytes","encode","Buffer","from","toString","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","args","length","result","path","data","error","JSON","stringify","getErrorTypeFromErrorMessage","blockQuery","finality","blockId","block_id","chunkId","sync_checkpoint","blockReference","request","lightClientProof","accountIdArray","changes_type","account_ids","accessKeyArray","keys","keyPrefix","key_prefix_base64","method","params","id","jsonrpc","fetchJson","response","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","process","env","console","warn","Provider"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n     */\n    constructor(connectionInfoOrUrl) {\n        super();\n        if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n            this.connection = connectionInfoOrUrl;\n        }\n        else {\n            const deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n            deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n            this.connection = { url: connectionInfoOrUrl };\n        }\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId) {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId) {\n        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    async txStatusString(txHash, accountId) {\n        return this.sendJsonRpc('tx', [txHash, accountId]);\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId) {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            result = await this.sendJsonRpc('query', args[0]);\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n    async experimental_genesisConfig() {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    }\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw rpc_errors_1.parseRpcError(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    if (!process.env['NEAR_NO_LOGS']) {\n                        console.warn(`Retrying request to ${method} as it has timed out`, params);\n                    }\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}