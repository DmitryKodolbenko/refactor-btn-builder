{"ast":null,"code":"'use strict';\n\n//Modules\nconst https = require('https');\nconst querystring = require('querystring');\n\n//Helpers\nconst Utils = require('./helpers/utilities');\nconst Constants = require('./helpers/constants');\nconst ReturnObject = require('./helpers/ReturnObject');\n\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\nclass CoinGecko {\n  /**\n   * @description Check API server status\n   * @function ping\n   * @returns {ReturnObject}\n   */\n  ping() {\n    const path = `/ping`;\n    return this._request(path);\n  }\n  /**\n   * @description Get cryptocurrency global data\n   * @function global\n   * @returns {ReturnObject}\n   */\n  global() {\n    const path = `/global`;\n    return this._request(path);\n  }\n  /**\n   * @description Calls related to coins\n   */\n  get coins() {\n    var _this = this;\n    const pathPrefix = 'coins';\n    return {\n      /**\n       * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n       * @function coins.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n       * @returns {ReturnObject}\n       */\n      all: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/${pathPrefix}`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Use this to obtain all the coins’ id in order to make API calls\n       * @function coins.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      },\n      /**\n       * @description Use this to obtain all the coins market data (price, market cap, volume)\n       * @function coins.markets()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n       * @param {array|string} params.ids - List of coin id to filter if you want specific results\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      markets: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/${pathPrefix}/markets`;\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n       * @function coins.fetch()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.tickers [default: true] - Include ticker data\n       * @param {boolean} params.market_data [default: true] - Include market data\n       * @param {boolean} params.community_data [default: true] - Include community data\n       * @param {boolean} params.developer_data [default: true] - Include developer data\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      fetch: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${coinId}`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get coin tickers (paginated to 100 items).\n       * @function coins.fetchTickers()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.page - Page through results\n       * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['exchange_ids'])) {\n          params.exchange_ids = params.exchange_ids.join(',');\n        }\n        const path = `/${pathPrefix}/${coinId}/tickers`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get historical data (name, price, market, stats) at a given date for a coin\n       * @function coins.fetchHistory()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @returns {ReturnObject}\n       */\n      fetchHistory: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.date, set to default today/now\n        if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n        const path = `/${pathPrefix}/${coinId}/history`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n       * @function coins.fetchMarketChart()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChart: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n        const path = `/${pathPrefix}/${coinId}/market_chart`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n       *   Minutely data will be used for duration within 1 day.\n       *   Hourly data will be used for duration between 1 day and 90 days.\n       *   Daily data will be used for duration above 90 days.\n       * @function coins.fetchMarketChartRange()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChartRange: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n        if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n        if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n        const path = `/${pathPrefix}/${coinId}/market_chart/range`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get status updates for a given coin\n       * @function coins.fetchStatusUpdates()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: function (coinId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${coinId}/status_updates`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get coin info from contract address\n       * @function coins.fetchCoinContractInfo()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractInfo: function (contractAddress) {\n        let assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}`;\n        return _this._request(path);\n      },\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n       * @function coins.fetchCoinContractMarketChart()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChart: function (contractAddress) {\n        let assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n        let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart`;\n        return _this._request(path, params);\n      },\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n       * @function coins.fetchCoinContractMarketChartRange()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChartRange: function (contractAddress) {\n        let assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n        let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart/range`;\n        return _this._request(path, params);\n      }\n    };\n  }\n  /**\n   * @description Calls related to exchanges\n   */\n  get exchanges() {\n    var _this2 = this;\n    const pathPrefix = 'exchanges';\n    return {\n      /**\n       * @description List all exchanges\n       * @function exchanges.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/${pathPrefix}`;\n        return this._request(path);\n      },\n      /**\n       * @description List all supported markets id and name\n       * @function exchanges.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      },\n      /**\n       * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n       * @function exchanges.fetch()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @returns {ReturnObject}\n       */\n      fetch: exchangeId => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}`;\n        return this._request(path);\n      },\n      /**\n       * @description Get tickers for a given exchange\n       * @function exchanges.fetchTickers()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.page - Page through results\n       * @param {number} params.coin_ids - Filter tickers by coin_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: function (exchangeId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['coin_ids'])) {\n          params.coin_ids = params.coin_ids.join(',');\n        }\n        const path = `/${pathPrefix}/${exchangeId}/tickers`;\n        return _this2._request(path, params);\n      },\n      /**\n       * @description Get status updates for a given exchange\n       * @function exchanges.fetchStatusUpdates()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: function (exchangeId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}/status_updates`;\n        return _this2._request(path, params);\n      },\n      /**\n       * @description Get volume chart data for a given exchange, returned in BTC\n       * @function exchanges.fetchVolumeChart()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n       * @returns {ReturnObject}\n       */\n      fetchVolumeChart: function (exchangeId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${exchangeId}/volume_chart`;\n        return _this2._request(path, params);\n      }\n    };\n  }\n  /**\n   * @description Calls related to status updates\n   */\n  get statusUpdates() {\n    var _this3 = this;\n    return {\n      /**\n       * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n       * @function statusUpdates.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n       * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      all: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/status_updates`;\n        return _this3._request(path, params);\n      }\n    };\n  }\n  /**\n   * @description Calls related to events\n   */\n  get events() {\n    var _this4 = this;\n    const pathPrefix = 'events';\n    return {\n      /**\n       * @description Get events, paginated by 100\n       * @function events.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n       * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n       * @param {number} params.page - Page of results (paginated by 100)\n       * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n       * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n       * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n       * @returns {ReturnObject}\n       */\n      all: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/${pathPrefix}`;\n        return _this4._request(path, params);\n      },\n      /**\n       * @description Get list of event countries\n       * @function events.fetchCountries()\n       * @returns {ReturnObject}\n       */\n      fetchCountries: () => {\n        const path = `/${pathPrefix}/countries`;\n        return this._request(path);\n      },\n      /**\n       * @description Get list of event types\n       * @function events.fetchTypes()\n       * @returns {ReturnObject}\n       */\n      fetchTypes: () => {\n        const path = `/${pathPrefix}/types`;\n        return this._request(path);\n      }\n    };\n  }\n  /**\n   * @description Calls related to exchange rates\n   */\n  get exchangeRates() {\n    return {\n      /**\n       * @description Get BTC-to-Currency exchange rates\n       * @function exchangeRates.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/exchange_rates`;\n        return this._request(path);\n      }\n    };\n  }\n  /**\n   * @description Calls related to \"simple\" endpoints\n   */\n  get simple() {\n    var _this5 = this;\n    return {\n      /**\n       * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n       * @function simple.price()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n       * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n       * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n       * @returns {ReturnObject}\n       */\n      price: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Check the params.vs_currencies\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n          params.vs_currencies = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        //Must have params.ids\n        if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.');\n\n        //\n\n        const path = `/simple/price`;\n        return _this5._request(path, params);\n      },\n      /**\n       * @description Get list of supported vs/comparisons currencies\n       * @function simple.supportedVsCurrencies()\n       * @returns {ReturnObject}\n       */\n      supportedVsCurrencies: () => {\n        const path = `/simple/supported_vs_currencies`;\n        return this._request(path);\n      },\n      /**\n       * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n       * @function simple.fetchTokenPrice()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n       * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n       * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n       * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n       * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n       * @returns {ReturnObject}\n       */\n      fetchTokenPrice: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let assetPlatform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ethereum';\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Must have assetPlatform\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must have contract_addresses, vs_currencies\n        if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n        if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object');\n\n        //If are arrays, convert to string\n        if (Utils.isArray(params['contract_addresses'])) {\n          params.contract_addresses = params.contract_addresses.join(',');\n        }\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n        const path = `/simple/token_price/${assetPlatform}`;\n        return _this5._request(path, params);\n      }\n    };\n  }\n  /**\n   * @description Calls related to finance endpoints\n   */\n  get finance() {\n    var _this6 = this;\n    return {\n      /**\n       * @description List all finance platforms\n       * @function finance.fetchPlatforms()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @returns {ReturnObject}\n       */\n      fetchPlatforms: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/finance_platforms`;\n        return _this6._request(path, params);\n      },\n      /**\n       * @description List all finance products\n       * @function finance.fetchProducts()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @param {string} params.start_at - Start date of the financial products\n       * @param {string} params.end_at - End date of the financial products\n       * @returns {ReturnObject}\n       */\n      fetchProducts: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/finance_products`;\n        return _this6._request(path, params);\n      }\n    };\n  }\n  /**\n   * @description Calls related to index endpoints\n   */\n  get indexes() {\n    var _this7 = this;\n    const pathPrefix = 'indexes';\n    return {\n      /**\n       * @description List all market indexes\n       * @function indexes.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      all: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/${pathPrefix}`;\n        return _this7._request(path, params);\n      },\n      /**\n       * @description Fetch market index by id\n       * @function indexes.fetch()\n       * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n       * @returns {ReturnObject}\n       */\n      fetch: indexId => {\n        //Must have indexId\n        if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/${indexId}`;\n        return this._request(path);\n      },\n      /**\n       * @description List market indexes id and name\n       * @function indexes.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n        return this._request(path);\n      }\n    };\n  }\n  /**\n   * @description Calls related to derivative endpoints\n   */\n  get derivatives() {\n    var _this8 = this;\n    const pathPrefix = 'derivatives';\n    return {\n      /**\n       * @description List all derivative tickers\n       * @function derivatives.fetchTickers()\n       * @returns {ReturnObject}\n       */\n      fetchTickers: () => {\n        const path = `/${pathPrefix}`;\n        return this._request(path);\n      },\n      /**\n       * @description List all derivative exchanges\n       * @function derivatives.allExchanges()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      allExchanges: function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const path = `/${pathPrefix}/exchanges`;\n        return _this8._request(path, params);\n      },\n      /**\n       * @description Show derivative exchange data\n       * @function derivatives.fetchExchange()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n       * @returns {ReturnObject}\n       */\n      fetchExchange: function (exchangeId) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n        const path = `/${pathPrefix}/exchanges/${exchangeId}`;\n        return _this8._request(path, params);\n      },\n      /**\n       * @description List all derivative exchanges name and identifier\n       * @function derivatives.listExchanges()\n       * @returns {ReturnObject}\n       */\n      listExchanges: () => {\n        const path = `/${pathPrefix}/exchanges/list`;\n        return this._request(path);\n      }\n    };\n  }\n  /**\n   * @description Build options for https.request\n   * @function _buildRequestOptions\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Object} - {path, method, host, port} Options for request\n   */\n  _buildRequestOptions(path, params) {\n    //Stringify object params if exist\n    if (Utils.isObject(params)) params = querystring.stringify(params);else params = undefined;\n\n    //Make relative path\n    //Check if has params, append accordingly\n    if (params == undefined) path = `/api/v${Constants.API_VERSION}${path}`;else path = `/api/v${Constants.API_VERSION}${path}?${params}`;\n\n    //Return options\n    return {\n      path,\n      method: 'GET',\n      host: Constants.HOST,\n      port: 443,\n      timeout: CoinGecko.TIMEOUT\n    };\n  }\n  /**\n   * @description Perform https request\n   * @function _request\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Promise} Body of https request data results\n   */\n  _request(path, params) {\n    let options = this._buildRequestOptions(path, params);\n    return new Promise((resolve, reject) => {\n      //Perform request\n      let req = https.request(options, res => {\n        let body = [];\n\n        //Set body on data\n        res.on('data', chunk => {\n          body.push(chunk);\n        });\n\n        //On end, end the Promise\n        res.on('end', () => {\n          try {\n            body = Buffer.concat(body);\n            body = body.toString();\n\n            //Check if page is returned instead of JSON\n            if (body.startsWith('<!DOCTYPE html>')) {\n              Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n            } else if (body.startsWith('Throttled')) {\n              Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n            }\n\n            //Attempt to parse\n            body = JSON.parse(body);\n          } catch (error) {\n            reject(error);\n          }\n          ;\n\n          //Create return object\n          resolve(ReturnObject(!(res.statusCode < 200 || res.statusCode >= 300), res.statusMessage, res.statusCode, body));\n        });\n      });\n\n      //On error, reject the Promise\n      req.on('error', error => reject(error));\n\n      //On timeout, reject the Promise\n      req.on('timeout', () => {\n        req.abort();\n        reject(new Error(`CoinGecko API request timed out. Current timeout is: ${CoinGecko.TIMEOUT} milliseconds`));\n      });\n\n      //End request\n      req.end();\n    });\n  }\n}\n;\n\n//Set Constants\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT;\n\n//\n\nmodule.exports = exports = CoinGecko;","map":{"version":3,"names":["https","require","querystring","Utils","Constants","ReturnObject","CoinGecko","ping","path","_request","global","coins","pathPrefix","all","params","list","markets","isObject","_WARN_","isString","isStringEmpty","vs_currency","isArray","ids","join","fetch","coinId","fetchTickers","exchange_ids","fetchHistory","fetchMarketChart","undefined","days","fetchMarketChartRange","isNumber","fetchStatusUpdates","fetchCoinContractInfo","contractAddress","assetPlatform","fetchCoinContractMarketChart","fetchCoinContractMarketChartRange","exchanges","exchangeId","coin_ids","fetchVolumeChart","statusUpdates","events","fetchCountries","fetchTypes","exchangeRates","simple","price","vs_currencies","supportedVsCurrencies","fetchTokenPrice","contract_addresses","finance","fetchPlatforms","fetchProducts","indexes","indexId","derivatives","allExchanges","fetchExchange","listExchanges","_buildRequestOptions","stringify","API_VERSION","method","host","HOST","port","timeout","TIMEOUT","options","Promise","resolve","reject","req","request","res","body","on","chunk","push","Buffer","concat","toString","startsWith","JSON","parse","error","statusCode","statusMessage","abort","Error","end","REQUESTS_PER_SECOND","ORDER","STATUS_UPDATE_CATEGORY","STATUS_UPDATE_PROJECT_TYPE","EVENT_TYPE","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/coingecko-api/lib/CoinGecko.js"],"sourcesContent":["'use strict';\n\n//Modules\nconst https = require('https');\nconst querystring = require('querystring');\n\n//Helpers\nconst Utils = require('./helpers/utilities');\nconst Constants = require('./helpers/constants');\nconst ReturnObject = require('./helpers/ReturnObject');\n\n/**\n * @class CoinGecko\n * @author Mark Miscavage <markmiscavage@protonmail.com>\n * @description A Node.js wrapper for the CoinGecko API with no dependencies. For more information, visit: https://www.coingecko.com/api/docs/v3\n * @example\n *     const CoinGecko = require('coingecko-api');\n *     const CoinGeckoClient = new CoinGecko();\n * @public\n * @version 1.0.10\n * @license MIT\n * @kind class\n */\nclass CoinGecko {\n\n  /**\n   * @description Check API server status\n   * @function ping\n   * @returns {ReturnObject}\n   */\n  ping() {\n    const path = `/ping`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Get cryptocurrency global data\n   * @function global\n   * @returns {ReturnObject}\n   */\n  global() {\n    const path = `/global`;\n\n    return this._request(path);\n  };\n\n  /**\n   * @description Calls related to coins\n   */\n  get coins() {\n    const pathPrefix = 'coins';\n\n    return {\n\n      /**\n       * @description List all coins with data (name, price, market, developer, community, etc) - paginated by 50\n       * @function coins.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Use this to obtain all the coins’ id in order to make API calls\n       * @function coins.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Use this to obtain all the coins market data (price, market cap, volume)\n       * @function coins.markets()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - The target currency of market data (usd, eur, jpy, etc.)\n       * @param {array|string} params.ids - List of coin id to filter if you want specific results\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      markets: (params = {}) => {\n        const path = `/${pathPrefix}/markets`;\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get current data (name, price, market, … including exchange tickers) for a coin.\n       * @function coins.fetch()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.tickers [default: true] - Include ticker data\n       * @param {boolean} params.market_data [default: true] - Include market data\n       * @param {boolean} params.community_data [default: true] - Include community data\n       * @param {boolean} params.developer_data [default: true] - Include developer data\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @param {boolean} params.sparkline [default: false] - Include sparkline 7 days data (true/false)\n       * @returns {ReturnObject}\n       */\n      fetch: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin tickers (paginated to 100 items).\n       * @function coins.fetchTickers()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.page - Page through results\n       * @param {number} params.exchange_ids - Filter tickers by exchange_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['exchange_ids'])) {\n          params.exchange_ids = params.exchange_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${coinId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical data (name, price, market, stats) at a given date for a coin\n       * @function coins.fetchHistory()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.date - (Required) The date of data snapshot in dd-mm-yyyy eg. 30-12-2017\n       * @param {boolean} params.localization [default: true] - Set to false to exclude localized languages in response\n       * @returns {ReturnObject}\n       */\n      fetchHistory: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.date, set to default today/now\n        if (!Utils.isString(params['date']) || Utils.isStringEmpty(params['date'])) Utils._WARN_('Missing parameter', 'params must include `date` and be a string in format: `dd-mm-yyyy`');\n\n        const path = `/${pathPrefix}/${coinId}/history`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto)\n       * @function coins.fetchMarketChart()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChart: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${coinId}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto).\n       *   Minutely data will be used for duration within 1 day.\n       *   Hourly data will be used for duration between 1 day and 90 days.\n       *   Daily data will be used for duration above 90 days.\n       * @function coins.fetchMarketChartRange()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchMarketChartRange: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        if (!Utils.isNumber(params['from'])) Utils._WARN_('Missing parameter', 'params must include `from` and be a UNIX timestamp.');\n        if (!Utils.isNumber(params['to'])) Utils._WARN_('Missing parameter', 'params must include `to` and be a UNIX timestamp.');\n\n        const path = `/${pathPrefix}/${coinId}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given coin\n       * @function coins.fetchStatusUpdates()\n       * @param {string} coinId - (Required) The coin id (can be obtained from coins.list()) eg. bitcoin\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (coinId, params = {}) => {\n        //Must have coinId\n        if (!Utils.isString(coinId) || Utils.isStringEmpty(coinId)) Utils._WARN_('Invalid parameter', 'coinId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${coinId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get coin info from contract address\n       * @function coins.fetchCoinContractInfo()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractInfo: (contractAddress, assetPlatform = 'ethereum') => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address\n       * @function coins.fetchCoinContractMarketChart()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {string} params.days [default: 1] - (Required) Data up to number of days ago (eg. 1,14,30,max)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChart: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)\n       * @function coins.fetchCoinContractMarketChartRange()\n       * @param {object} contractAddress - (Required) Token’s contract address\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.vs_currency [default: usd] - (Required) The target currency of market data (usd, eur, jpy, etc.)\n       * @param {number} params.from - (Required) From date in UNIX Timestamp (eg. 1392577232)\n       * @param {number} params.to - (Required) To date in UNIX Timestamp (eg. 1422577232)\n       * @returns {ReturnObject}\n       */\n      fetchCoinContractMarketChartRange: (contractAddress, assetPlatform = 'ethereum', params = {}) => {\n        //Must have contractAddress, assetPlatform\n        if (!Utils.isString(contractAddress) || Utils.isStringEmpty(contractAddress)) Utils._WARN_('Invalid parameter', 'contractAddress must be of type: String and greater than 0 characters.');\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currency']) || Utils.isStringEmpty(params['vs_currency'])) {\n          params.vs_currency = 'usd';\n        }\n\n        //If no params.days, set to default: 1\n        if (params['days'] == undefined) {\n          params.days = 1;\n        }\n\n        const path = `/${pathPrefix}/${assetPlatform}/contract/${contractAddress}/market_chart/range`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchanges\n   */\n  get exchanges() {\n    const pathPrefix = 'exchanges';\n\n    return {\n\n      /**\n       * @description List all exchanges\n       * @function exchanges.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all supported markets id and name\n       * @function exchanges.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get exchange volume in BTC and top 100 tickers only for a given exchange\n       * @function exchanges.fetch()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @returns {ReturnObject}\n       */\n      fetch: (exchangeId) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get tickers for a given exchange\n       * @function exchanges.fetchTickers()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.page - Page through results\n       * @param {number} params.coin_ids - Filter tickers by coin_ids\n       * @param {string} params.order [default: trust_score_desc] - Order results by CoinGecko.ORDER.TRUST_SCORE_DESC or CoinGecko.ORDER.VOLUME_DESC\n       * @returns {ReturnObject}\n       */\n      fetchTickers: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        //Convert array to string\n        if (Utils.isArray(params['coin_ids'])) {\n          params.coin_ids = params.coin_ids.join(',');\n        }\n\n        const path = `/${pathPrefix}/${exchangeId}/tickers`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get status updates for a given exchange\n       * @function exchanges.fetchStatusUpdates()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      fetchStatusUpdates: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/status_updates`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get volume chart data for a given exchange, returned in BTC\n       * @function exchanges.fetchVolumeChart()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from exchanges.all()) eg. binance\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.days - Data up to number of days ago (eg. 1, 14, 30)\n       * @returns {ReturnObject}\n       */\n      fetchVolumeChart: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${exchangeId}/volume_chart`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to status updates\n   */\n  get statusUpdates() {\n    return {\n\n      /**\n       * @description List all status_updates with data (description, category, created_at, user, user_title and pin)\n       * @function statusUpdates.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.category - Filter results by CoinGecko.STATUS_UPDATE_CATEGORY[*]\n       * @param {number} params.project_type - Filter results by CoinGecko.STATUS_UPDATE_PROJECT_TYPE[*] (If left empty returns both status from coins and markets)\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page through results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/status_updates`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to events\n   */\n  get events() {\n    const pathPrefix = 'events';\n\n    return {\n\n      /**\n       * @description Get events, paginated by 100\n       * @function events.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.country_code - country_code of event (eg. ‘US’). Use events.fetchHistory() for list of country_codes\n       * @param {string} params.type - Type of event (eg.‘Conference’). Use events.fetchTypes() for list of types. Or use CoinGecko.EVENT_TYPE[*]\n       * @param {number} params.page - Page of results (paginated by 100)\n       * @param {boolean} params.upcoming_events_only [default: true] - Lists only upcoming events\n       * @param {string} params.from_date - Lists events after this date yyyy-mm-dd\n       * @param {string} params.to_date - Lists events before this date yyyy-mm-dd (set upcoming_events_only to false if fetching past events)\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of event countries\n       * @function events.fetchCountries()\n       * @returns {ReturnObject}\n       */\n      fetchCountries: () => {\n        const path = `/${pathPrefix}/countries`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get list of event types\n       * @function events.fetchTypes()\n       * @returns {ReturnObject}\n       */\n      fetchTypes: () => {\n        const path = `/${pathPrefix}/types`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to exchange rates\n   */\n  get exchangeRates() {\n    return {\n\n      /**\n       * @description Get BTC-to-Currency exchange rates\n       * @function exchangeRates.all()\n       * @returns {ReturnObject}\n       */\n      all: () => {\n        const path = `/exchange_rates`;\n\n        return this._request(path);\n      }\n    };\n  };\n\n  /**\n   * @description Calls related to \"simple\" endpoints\n   */\n  get simple() {\n    return {\n\n      /**\n       * @description Get the current price of any cryptocurrencies in any other supported currencies that you need\n       * @function simple.price()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {array|string} params.ids - (Required) A single id or a list of coin ids to filter if you want specific results. Use coins.list() for a list of coin ids.\n       * @param {array|string} params.vs_currencies [default: usd] - A single id or a list of ids. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_24hr_vol [default: false] - To include 24hr_vol (true/false)\n       * @param {boolean} params.include_last_updated_at [default: false] - To include last_updated_at of price (true/false)\n       * @returns {ReturnObject}\n       */\n      price: (params = {}) => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Check the params.vs_currencies\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        //If no params.vs_currency, set to default: 'usd'\n        if (!Utils.isString(params['vs_currencies']) || Utils.isStringEmpty(params['vs_currencies'])) {\n          params.vs_currencies = 'usd';\n        }\n\n        //Check the params.ids\n        //If is string, ok. If is array, convert to string\n        if (Utils.isArray(params['ids'])) {\n          params.ids = params.ids.join(',');\n        }\n\n        //Must have params.ids\n        if (!Utils.isString(params['ids']) || Utils.isStringEmpty(params['ids'])) Utils._WARN_('Invalid parameter', 'params.ids must be of type: String or Array and greater than 0 characters.');\n\n        //\n\n        const path = `/simple/price`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Get list of supported vs/comparisons currencies\n       * @function simple.supportedVsCurrencies()\n       * @returns {ReturnObject}\n       */\n      supportedVsCurrencies: () => {\n        const path = `/simple/supported_vs_currencies`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description Get current price of tokens (using contract addresses) for a given platform in any other currency that you need\n       * @function simple.fetchTokenPrice()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} assetPlatform [default: ethereum] - (Required) Asset platform (only ethereum is supported at this moment)\n       * @param {string|array} params.contract_addresses - (Required) Token’s contract address\n       * @param {string|array} params.vs_currencies - (Required) vs_currency of coins. Use simple.supportedVsCurrencies() for a list of vsCurrency ids.\n       * @param {boolean} params.include_market_cap [default: false] - Include market cap in results or not\n       * @param {boolean} params.include_24hr_vol [default: false] - Include 24hr volume in results or not\n       * @param {boolean} params.include_24hr_change [default: false] - Include 24hr change in results or not\n       * @param {boolean} params.include_last_updated_at [default: false] - Include last updated date in results or not\n       * @returns {ReturnObject}\n       */\n      fetchTokenPrice: (params = {}, assetPlatform = 'ethereum') => {\n        //Must be object\n        if (!Utils.isObject(params)) Utils._WARN_('Invalid parameter', 'params must be of type: Object');\n\n        //Must have assetPlatform\n        if (!Utils.isString(assetPlatform) || Utils.isStringEmpty(assetPlatform)) Utils._WARN_('Invalid parameter', 'assetPlatform must be of type: String and greater than 0 characters.');\n\n        //Must have contract_addresses, vs_currencies\n        if (!params['contract_addresses']) Utils._WARN_('Missing parameter', 'params must include `contract_addresses` and be a of type: String or Object');\n        if (!params['vs_currencies']) Utils._WARN_('Missing parameter', 'params must include `vs_currencies` and be a of type: String or Object');\n\n        //If are arrays, convert to string\n        if (Utils.isArray(params['contract_addresses'])) {\n          params.contract_addresses = params.contract_addresses.join(',');\n        }\n\n        if (Utils.isArray(params['vs_currencies'])) {\n          params.vs_currencies = params.vs_currencies.join(',');\n        }\n\n        const path = `/simple/token_price/${assetPlatform}`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to finance endpoints\n   */\n  get finance() {\n    return {\n      /**\n       * @description List all finance platforms\n       * @function finance.fetchPlatforms()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @returns {ReturnObject}\n       */\n      fetchPlatforms: (params = {}) => {\n        const path = `/finance_platforms`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all finance products\n       * @function finance.fetchProducts()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results (paginated to 100 by default)\n       * @param {string} params.start_at - Start date of the financial products\n       * @param {string} params.end_at - End date of the financial products\n       * @returns {ReturnObject}\n       */\n      fetchProducts: (params = {}) => {\n        const path = `/finance_products`;\n\n        return this._request(path, params);\n      },\n    };\n  };\n\n  /**\n   * @description Calls related to index endpoints\n   */\n  get indexes() {\n    const pathPrefix = 'indexes';\n\n    return {\n      /**\n       * @description List all market indexes\n       * @function indexes.all()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      all: (params = {}) => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Fetch market index by id\n       * @function indexes.fetch()\n       * @param {string} indexId - (Required) The index id (can be obtained from indexes.list())\n       * @returns {ReturnObject}\n       */\n      fetch: (indexId) => {\n        //Must have indexId\n        if (!Utils.isString(indexId) || Utils.isStringEmpty(indexId)) Utils._WARN_('Invalid parameter', 'indexId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/${indexId}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List market indexes id and name\n       * @function indexes.list()\n       * @returns {ReturnObject}\n       */\n      list: () => {\n        const path = `/${pathPrefix}/list`;\n\n        return this._request(path);\n      },\n\n    };\n  };\n\n  /**\n   * @description Calls related to derivative endpoints\n   */\n  get derivatives() {\n    const pathPrefix = 'derivatives';\n\n    return {\n      /**\n       * @description List all derivative tickers\n       * @function derivatives.fetchTickers()\n       * @returns {ReturnObject}\n       */\n      fetchTickers: () => {\n        const path = `/${pathPrefix}`;\n\n        return this._request(path);\n      },\n\n      /**\n       * @description List all derivative exchanges\n       * @function derivatives.allExchanges()\n       * @param {object} params - Parameters to pass through to the request\n       * @param {string} params.order - Order results by CoinGecko.ORDER[*]\n       * @param {number} params.per_page - Total results per page\n       * @param {number} params.page - Page of results\n       * @returns {ReturnObject}\n       */\n      allExchanges: (params = {}) => {\n        const path = `/${pathPrefix}/exchanges`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description Show derivative exchange data\n       * @function derivatives.fetchExchange()\n       * @param {string} exchangeId - (Required) The exchange id (can be obtained from derivatives.listExchanges()) e.g. bitmex\n       * @param {object} params - Parameters to pass through to the request\n       * @param {boolean} params.include_tickers [default: false] - Include the tickers information\n       * @returns {ReturnObject}\n       */\n      fetchExchange: (exchangeId, params = {}) => {\n        //Must have exchangeId\n        if (!Utils.isString(exchangeId) || Utils.isStringEmpty(exchangeId)) Utils._WARN_('Invalid parameter', 'exchangeId must be of type: String and greater than 0 characters.');\n\n        const path = `/${pathPrefix}/exchanges/${exchangeId}`;\n\n        return this._request(path, params);\n      },\n\n      /**\n       * @description List all derivative exchanges name and identifier\n       * @function derivatives.listExchanges()\n       * @returns {ReturnObject}\n       */\n      listExchanges: () => {\n        const path = `/${pathPrefix}/exchanges/list`;\n\n        return this._request(path);\n      },\n    };\n  };\n\n  /**\n   * @description Build options for https.request\n   * @function _buildRequestOptions\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Object} - {path, method, host, port} Options for request\n   */\n  _buildRequestOptions(path, params) {\n    //Stringify object params if exist\n    if (Utils.isObject(params)) params = querystring.stringify(params);\n    else params = undefined;\n\n    //Make relative path\n    //Check if has params, append accordingly\n    if (params == undefined) path = `/api/v${Constants.API_VERSION}${path}`;\n    else path = `/api/v${Constants.API_VERSION}${path}?${params}`;\n\n    //Return options\n    return {\n      path,\n      method: 'GET',\n      host: Constants.HOST,\n      port: 443,\n      timeout: CoinGecko.TIMEOUT,\n    };\n  };\n\n  /**\n   * @description Perform https request\n   * @function _request\n   * @protected\n   * @param {string} path - Relative path for API\n   * @param {object} params - Object representing query strings for url parameters\n   * @returns {Promise} Body of https request data results\n   */\n  _request(path, params) {\n    let options = this._buildRequestOptions(path, params);\n\n    return new Promise((resolve, reject) => {\n      //Perform request\n      let req = https.request(options, (res) => {\n        let body = [];\n\n        //Set body on data\n        res.on('data', (chunk) => {\n          body.push(chunk);\n        });\n\n        //On end, end the Promise\n        res.on('end', () => {\n          try {\n            body = Buffer.concat(body);\n            body = body.toString();\n\n            //Check if page is returned instead of JSON\n            if (body.startsWith('<!DOCTYPE html>')) {\n              Utils._WARN_('Invalid request', 'There was a problem with your request. The parameter(s) you gave are missing or incorrect.');\n            } else if (body.startsWith('Throttled')) {\n              Utils._WARN_('Throttled request', 'There was a problem with request limit.');\n            }\n\n            //Attempt to parse\n            body = JSON.parse(body);\n          }\n          catch (error) {\n            reject(error);\n          };\n\n          //Create return object\n          resolve(\n            ReturnObject(\n              !(res.statusCode < 200 || res.statusCode >= 300),\n              res.statusMessage,\n              res.statusCode,\n              body\n            )\n          );\n        });\n      });\n\n      //On error, reject the Promise\n      req.on('error', (error) => reject(error));\n\n      //On timeout, reject the Promise\n      req.on('timeout', () => {\n        req.abort();\n        reject(new Error(`CoinGecko API request timed out. Current timeout is: ${CoinGecko.TIMEOUT} milliseconds`));\n      });\n\n      //End request\n      req.end();\n    });\n  };\n};\n\n//Set Constants\nCoinGecko.API_VERSION = Constants.API_VERSION;\nCoinGecko.REQUESTS_PER_SECOND = Constants.REQUESTS_PER_SECOND;\nCoinGecko.ORDER = Constants.ORDER;\nCoinGecko.STATUS_UPDATE_CATEGORY = Constants.STATUS_UPDATE_CATEGORY;\nCoinGecko.STATUS_UPDATE_PROJECT_TYPE = Constants.STATUS_UPDATE_PROJECT_TYPE;\nCoinGecko.EVENT_TYPE = Constants.EVENT_TYPE;\nCoinGecko.TIMEOUT = Constants.TIMEOUT;\n\n//\n\nmodule.exports = exports = CoinGecko;"],"mappings":"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"},"metadata":{},"sourceType":"script"}