{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConnectMessage = exports.ClientMessageTypes = void 0;\nconst AppMessages_1 = require(\"./AppMessages\");\nvar ClientMessageTypes;\n(function (ClientMessageTypes) {\n  ClientMessageTypes[\"Connect\"] = \"Connect\";\n  ClientMessageTypes[\"GetInfo\"] = \"GetInfo\";\n  ClientMessageTypes[\"GetPendingRequests\"] = \"GetPendingRequests\";\n  ClientMessageTypes[\"ResolveSignTransaction\"] = \"ResolveSignTransaction\";\n  ClientMessageTypes[\"ResolveSignMessage\"] = \"ResolveSignMessage\";\n  ClientMessageTypes[\"RejectRequest\"] = \"RejectRequest\";\n  ClientMessageTypes[\"EndSession\"] = \"EndSession\";\n  ClientMessageTypes[\"GetSessions\"] = \"GetSessions\";\n})(ClientMessageTypes = exports.ClientMessageTypes || (exports.ClientMessageTypes = {}));\nconst createConnectMessage = (publicKey, sessionId, token, notificationEndpoint, device, metadata) => {\n  return {\n    type: ClientMessageTypes.Connect,\n    version: AppMessages_1.Version.V1,\n    publicKey,\n    sessionId,\n    token,\n    notificationEndpoint,\n    device,\n    metadata\n  };\n};\nexports.createConnectMessage = createConnectMessage;","map":{"version":3,"names":["Object","defineProperty","exports","value","createConnectMessage","ClientMessageTypes","AppMessages_1","require","publicKey","sessionId","token","notificationEndpoint","device","metadata","type","Connect","version","Version","V1"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/lib/nightlyConnect/connect/sdk/src/types/ClientMessages.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConnectMessage = exports.ClientMessageTypes = void 0;\nconst AppMessages_1 = require(\"./AppMessages\");\nvar ClientMessageTypes;\n(function (ClientMessageTypes) {\n    ClientMessageTypes[\"Connect\"] = \"Connect\";\n    ClientMessageTypes[\"GetInfo\"] = \"GetInfo\";\n    ClientMessageTypes[\"GetPendingRequests\"] = \"GetPendingRequests\";\n    ClientMessageTypes[\"ResolveSignTransaction\"] = \"ResolveSignTransaction\";\n    ClientMessageTypes[\"ResolveSignMessage\"] = \"ResolveSignMessage\";\n    ClientMessageTypes[\"RejectRequest\"] = \"RejectRequest\";\n    ClientMessageTypes[\"EndSession\"] = \"EndSession\";\n    ClientMessageTypes[\"GetSessions\"] = \"GetSessions\";\n})(ClientMessageTypes = exports.ClientMessageTypes || (exports.ClientMessageTypes = {}));\nconst createConnectMessage = (publicKey, sessionId, token, notificationEndpoint, device, metadata) => {\n    return {\n        type: ClientMessageTypes.Connect,\n        version: AppMessages_1.Version.V1,\n        publicKey,\n        sessionId,\n        token,\n        notificationEndpoint,\n        device,\n        metadata\n    };\n};\nexports.createConnectMessage = createConnectMessage;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,kBAAkB,GAAG,KAAK,CAAC;AAClE,MAAMC,aAAa,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC9C,IAAIF,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,SAAS,CAAC,GAAG,SAAS;EACzCA,kBAAkB,CAAC,SAAS,CAAC,GAAG,SAAS;EACzCA,kBAAkB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC/DA,kBAAkB,CAAC,wBAAwB,CAAC,GAAG,wBAAwB;EACvEA,kBAAkB,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC/DA,kBAAkB,CAAC,eAAe,CAAC,GAAG,eAAe;EACrDA,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY;EAC/CA,kBAAkB,CAAC,aAAa,CAAC,GAAG,aAAa;AACrD,CAAC,EAAEA,kBAAkB,GAAGH,OAAO,CAACG,kBAAkB,KAAKH,OAAO,CAACG,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AACxF,MAAMD,oBAAoB,GAAG,CAACI,SAAS,EAAEC,SAAS,EAAEC,KAAK,EAAEC,oBAAoB,EAAEC,MAAM,EAAEC,QAAQ,KAAK;EAClG,OAAO;IACHC,IAAI,EAAET,kBAAkB,CAACU,OAAO;IAChCC,OAAO,EAAEV,aAAa,CAACW,OAAO,CAACC,EAAE;IACjCV,SAAS;IACTC,SAAS;IACTC,KAAK;IACLC,oBAAoB;IACpBC,MAAM;IACNC;EACJ,CAAC;AACL,CAAC;AACDX,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB"},"metadata":{},"sourceType":"script"}