{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.receiveAPDU = void 0;\nvar _errors = require(\"@ledgerhq/errors\");\nvar _rxjs = require(\"rxjs\");\nvar _logs = require(\"@ledgerhq/logs\");\nvar TagId = 0x05; // operator that transform the input raw stream into one apdu response and finishes\n\nvar receiveAPDU = function receiveAPDU(rawStream) {\n  return _rxjs.Observable.create(function (o) {\n    var notifiedIndex = 0;\n    var notifiedDataLength = 0;\n    var notifiedData = Buffer.alloc(0);\n    var sub = rawStream.subscribe({\n      complete: function complete() {\n        o.error(new _errors.DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: function error(e) {\n        (0, _logs.log)(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: function next(value) {\n        var tag = value.readUInt8(0);\n        var index = value.readUInt16BE(1);\n        var data = value.slice(3);\n        if (tag !== TagId) {\n          o.error(new _errors.TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\"));\n          return;\n        }\n        if (notifiedIndex !== index) {\n          o.error(new _errors.TransportError(\"BLE: Invalid sequence number. discontinued chunk. Received \" + index + \" but expected \" + notifiedIndex, \"InvalidSequence\"));\n          return;\n        }\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(new _errors.TransportError(\"BLE: received too much data. discontinued chunk. Received \" + notifiedData.length + \" but expected \" + notifiedDataLength, \"BLETooMuchData\"));\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      }\n    });\n    return function () {\n      sub.unsubscribe();\n    };\n  });\n};\nexports.receiveAPDU = receiveAPDU;","map":{"version":3,"sources":["../../src/ble/receiveAPDU.js"],"names":["TagId","receiveAPDU","rawStream","create","o","notifiedIndex","notifiedDataLength","notifiedData","Buffer","alloc","sub","subscribe","complete","error","DisconnectedDevice","unsubscribe","e","String","next","value","tag","readUInt8","index","readUInt16BE","data","slice","TransportError","toString","concat","length"],"mappings":";;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA,IAAMA,KAAK,GAAG,IAAd,C,CAEA;;AACO,IAAMC,WAAW,GACtBC,SADWD,WAAW,CACtBC,SADyB;EAAA,OAGzB,KAAA,CAAA,UAAA,CAAWC,MAAX,CAAmBC,UAAAA,CAAD,EAAO;IACvB,IAAIC,aAAa,GAAG,CAApB;IACA,IAAIC,kBAAkB,GAAG,CAAzB;IACA,IAAIC,YAAY,GAAGC,MAAM,CAACC,KAAPD,CAAa,CAAbA,CAAnB;IAEA,IAAME,GAAG,GAAG,SAAS,CAACC,SAAV,CAAoB;MAC9BC,QAAQ,EAAE,oBAAM;QACdR,CAAC,CAACS,KAAFT,CAAQ,IAAIU,OAAAA,CAAAA,kBAAJ,EAARV,CAAAA;QACAM,GAAG,CAACK,WAAJL,EAAAA;MACD,CAJ6B;MAK9BG,KAAK,EAAGG,eAAAA,CAAD,EAAO;QACZ,CAAA,CAAA,EAAA,KAAA,CAAA,GAAA,EAAI,WAAJ,EAAiB,iBAAA,GAAoBC,MAAM,CAACD,CAAD,CAA3C,CAAA;QACAZ,CAAC,CAACS,KAAFT,CAAQY,CAARZ,CAAAA;QACAM,GAAG,CAACK,WAAJL,EAAAA;MACD,CAT6B;MAU9BQ,IAAI,EAAGC,cAAAA,KAAD,EAAW;QACf,IAAMC,GAAG,GAAGD,KAAK,CAACE,SAANF,CAAgB,CAAhBA,CAAZ;QACA,IAAMG,KAAK,GAAGH,KAAK,CAACI,YAANJ,CAAmB,CAAnBA,CAAd;QACA,IAAIK,IAAI,GAAGL,KAAK,CAACM,KAANN,CAAY,CAAZA,CAAX;QAEA,IAAIC,GAAG,KAAKpB,KAAZ,EAAmB;UACjBI,CAAC,CAACS,KAAFT,CACE,IAAIsB,OAAAA,CAAAA,cAAJ,CAAmB,cAAA,GAAiBN,GAAG,CAACO,QAAJP,CAAa,EAAbA,CAApC,EAAsD,YAAtD,CADFhB,CAAAA;UAGA;QACD;QAED,IAAIC,aAAa,KAAKiB,KAAtB,EAA6B;UAC3BlB,CAAC,CAACS,KAAFT,CACE,IAAIsB,OAAAA,CAAAA,cAAJ,CACE,6DAAA,GACEJ,KADF,GAEE,gBAFF,GAGEjB,aAJJ,EAKE,iBALF,CADFD,CAAAA;UASA;QACD;QAED,IAAIkB,KAAK,KAAK,CAAd,EAAiB;UACfhB,kBAAkB,GAAGkB,IAAI,CAACD,YAALC,CAAkB,CAAlBA,CAArBlB;UACAkB,IAAI,GAAGA,IAAI,CAACC,KAALD,CAAW,CAAXA,CAAPA;QACD;QACDnB,aAAa,EAAA;QACbE,YAAY,GAAGC,MAAM,CAACoB,MAAPpB,CAAc,CAACD,YAAD,EAAeiB,IAAf,CAAdhB,CAAfD;QACA,IAAIA,YAAY,CAACsB,MAAbtB,GAAsBD,kBAA1B,EAA8C;UAC5CF,CAAC,CAACS,KAAFT,CACE,IAAIsB,OAAAA,CAAAA,cAAJ,CACE,4DAAA,GACEnB,YAAY,CAACsB,MADf,GAEE,gBAFF,GAGEvB,kBAJJ,EAKE,gBALF,CADFF,CAAAA;UASA;QACD;QACD,IAAIG,YAAY,CAACsB,MAAbtB,KAAwBD,kBAA5B,EAAgD;UAC9CF,CAAC,CAACc,IAAFd,CAAOG,YAAPH,CAAAA;UACAA,CAAC,CAACQ,QAAFR,EAAAA;UACAM,GAAG,CAACK,WAAJL,EAAAA;QACD;MACF;IA1D6B,CAApB,CAAZ;IA6DA,OAAO,YAAM;MACXA,GAAG,CAACK,WAAJL,EAAAA;IACD,CAFD;EAGD,CArED,CAHK;AAAA","sourcesContent":["// @flow\n\nimport { TransportError, DisconnectedDevice } from \"@ledgerhq/errors\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\n// operator that transform the input raw stream into one apdu response and finishes\nexport const receiveAPDU = (\n  rawStream: Observable<Buffer>\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    let notifiedIndex = 0;\n    let notifiedDataLength = 0;\n    let notifiedData = Buffer.alloc(0);\n\n    const sub = rawStream.subscribe({\n      complete: () => {\n        o.error(new DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: (e) => {\n        log(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: (value) => {\n        const tag = value.readUInt8(0);\n        const index = value.readUInt16BE(1);\n        let data = value.slice(3);\n\n        if (tag !== TagId) {\n          o.error(\n            new TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\")\n          );\n          return;\n        }\n\n        if (notifiedIndex !== index) {\n          o.error(\n            new TransportError(\n              \"BLE: Invalid sequence number. discontinued chunk. Received \" +\n                index +\n                \" but expected \" +\n                notifiedIndex,\n              \"InvalidSequence\"\n            )\n          );\n          return;\n        }\n\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(\n            new TransportError(\n              \"BLE: received too much data. discontinued chunk. Received \" +\n                notifiedData.length +\n                \" but expected \" +\n                notifiedDataLength,\n              \"BLETooMuchData\"\n            )\n          );\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      },\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  });\n"]},"metadata":{},"sourceType":"script"}