{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hmac = void 0;\nclass Hmac {\n  constructor(hashFunctionConstructor, originalKey) {\n    // This implementation is based on https://en.wikipedia.org/wiki/HMAC#Implementation\n    // with the addition of incremental hashing support. Thus part of the algorithm\n    // is in the constructor and the rest in digest().\n    const blockSize = new hashFunctionConstructor().blockSize;\n    this.hash = data => new hashFunctionConstructor().update(data).digest();\n    let key = originalKey;\n    if (key.length > blockSize) {\n      key = this.hash(key);\n    }\n    if (key.length < blockSize) {\n      const zeroPadding = new Uint8Array(blockSize - key.length);\n      key = new Uint8Array([...key, ...zeroPadding]);\n    }\n    // eslint-disable-next-line no-bitwise\n    this.oKeyPad = key.map(keyByte => keyByte ^ 0x5c);\n    // eslint-disable-next-line no-bitwise\n    this.iKeyPad = key.map(keyByte => keyByte ^ 0x36);\n    this.messageHasher = new hashFunctionConstructor();\n    this.blockSize = blockSize;\n    this.update(this.iKeyPad);\n  }\n  update(data) {\n    this.messageHasher.update(data);\n    return this;\n  }\n  digest() {\n    const innerHash = this.messageHasher.digest();\n    return this.hash(new Uint8Array([...this.oKeyPad, ...innerHash]));\n  }\n}\nexports.Hmac = Hmac;","map":{"version":3,"sources":["../src/hmac.ts"],"names":[],"mappings":";;;;;;AAEA,MAAa,IAAI,CAAA;EAQf,WAAA,CAAmB,uBAAoC,EAAE,WAAuB,EAAA;IAC9E;IACA;IACA;IAEA,MAAM,SAAS,GAAG,IAAI,uBAAuB,EAAE,CAAC,SAAS;IAEzD,IAAI,CAAC,IAAI,GAAI,IAAI,IAAK,IAAI,uBAAuB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;IAEzE,IAAI,GAAG,GAAG,WAAW;IACrB,IAAI,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE;MAC1B,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACrB;IAED,IAAI,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE;MAC1B,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC;MAC1D,GAAG,GAAG,IAAI,UAAU,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,WAAW,CAAC,CAAC;IAC/C;IAED;IACA,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,CAAE,OAAO,IAAK,OAAO,GAAG,IAAI,CAAC;IACnD;IACA,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,CAAE,OAAO,IAAK,OAAO,GAAG,IAAI,CAAC;IACnD,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAuB,EAAE;IAClD,IAAI,CAAC,SAAS,GAAG,SAAS;IAE1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;EAC3B;EAEO,MAAM,CAAC,IAAgB,EAAA;IAC5B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;IAC/B,OAAO,IAAI;EACb;EAEO,MAAM,GAAA;IACX,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;IAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;EACnE;AACD;AA9CD,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hmac = void 0;\nclass Hmac {\n    constructor(hashFunctionConstructor, originalKey) {\n        // This implementation is based on https://en.wikipedia.org/wiki/HMAC#Implementation\n        // with the addition of incremental hashing support. Thus part of the algorithm\n        // is in the constructor and the rest in digest().\n        const blockSize = new hashFunctionConstructor().blockSize;\n        this.hash = (data) => new hashFunctionConstructor().update(data).digest();\n        let key = originalKey;\n        if (key.length > blockSize) {\n            key = this.hash(key);\n        }\n        if (key.length < blockSize) {\n            const zeroPadding = new Uint8Array(blockSize - key.length);\n            key = new Uint8Array([...key, ...zeroPadding]);\n        }\n        // eslint-disable-next-line no-bitwise\n        this.oKeyPad = key.map((keyByte) => keyByte ^ 0x5c);\n        // eslint-disable-next-line no-bitwise\n        this.iKeyPad = key.map((keyByte) => keyByte ^ 0x36);\n        this.messageHasher = new hashFunctionConstructor();\n        this.blockSize = blockSize;\n        this.update(this.iKeyPad);\n    }\n    update(data) {\n        this.messageHasher.update(data);\n        return this;\n    }\n    digest() {\n        const innerHash = this.messageHasher.digest();\n        return this.hash(new Uint8Array([...this.oKeyPad, ...innerHash]));\n    }\n}\nexports.Hmac = Hmac;\n//# sourceMappingURL=hmac.js.map"]},"metadata":{},"sourceType":"script"}