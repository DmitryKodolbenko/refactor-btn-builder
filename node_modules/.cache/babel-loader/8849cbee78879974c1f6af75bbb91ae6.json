{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nvar tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nvar long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(function (_ref) {\n    var pubkey = _ref.pubkey,\n      sequence = _ref.sequence;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit) {\n  var signMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  var authInfo = {\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: _toConsumableArray(feeAmount),\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes(_ref2) {\n  var accountNumber = _ref2.accountNumber,\n    authInfoBytes = _ref2.authInfoBytes,\n    bodyBytes = _ref2.bodyBytes,\n    chainId = _ref2.chainId;\n  var signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"sources":["../src/signing.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,gDAAA,CAAA;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAEA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA;;;;AAIG;AACH,SAAS,eAAe,CACtB,OAA2E,EAC3E,QAAkB,EAAA;EAElB,OAAO,OAAO,CAAC,GAAG,CAChB;IAAA,IAAG,MAAM,QAAN,MAAM;MAAE,QAAQ,QAAR,QAAQ;IAAA,OAAoB;MACrC,SAAS,EAAE,MAAM;MACjB,QAAQ,EAAE;QACR,MAAM,EAAE;UAAE,IAAI,EAAE;QAAQ;OACzB;MACD,QAAQ,EAAE,MAAA,CAAA,OAAI,CAAC,UAAU,CAAC,QAAQ;KACnC;EAAA,CAAC,CACH;AACH;AAEA;;;;AAIG;AACH,SAAgB,iBAAiB,CAC/B,OAA2E,EAC3E,SAA0B,EAC1B,QAAgB,EACoB;EAAA,IAApC,QAAQ,uEAAG,SAAA,CAAA,QAAQ,CAAC,gBAAgB;EAEpC,IAAM,QAAQ,GAAG;IACf,WAAW,EAAE,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC/C,GAAG,EAAE;MACH,MAAM,qBAAM,SAAS,CAAC;MACtB,QAAQ,EAAE,MAAA,CAAA,OAAI,CAAC,UAAU,CAAC,QAAQ;IACnC;GACF;EACD,OAAO,IAAA,CAAA,QAAQ,CAAC,MAAM,CAAC,IAAA,CAAA,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE;AACjE;AAdA,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAgBA,SAAgB,WAAW,CACzB,SAAqB,EACrB,aAAyB,EACzB,OAAe,EACf,aAAqB,EAAA;EAErB,OAAO;IACL,SAAS,EAAE,SAAS;IACpB,aAAa,EAAE,aAAa;IAC5B,OAAO,EAAE,OAAO;IAChB,aAAa,EAAE,MAAA,CAAA,OAAI,CAAC,UAAU,CAAC,aAAa;GAC7C;AACH;AAZA,OAAA,CAAA,WAAA,GAAA,WAAA;AAcA,SAAgB,aAAa,QAA8D;EAAA,IAA3D,aAAa,SAAb,aAAa;IAAE,aAAa,SAAb,aAAa;IAAE,SAAS,SAAT,SAAS;IAAE,OAAO,SAAP,OAAO;EAC9E,IAAM,OAAO,GAAG,IAAA,CAAA,OAAO,CAAC,WAAW,CAAC;IAClC,aAAa,EAAE,aAAa;IAC5B,aAAa,EAAE,aAAa;IAC5B,SAAS,EAAE,SAAS;IACpB,OAAO,EAAE;GACV,CAAC;EACF,OAAO,IAAA,CAAA,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;AACzC;AARA,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n    return signers.map(({ pubkey, sequence }) => ({\n        publicKey: pubkey,\n        modeInfo: {\n            single: { mode: signMode },\n        },\n        sequence: long_1.default.fromNumber(sequence),\n    }));\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n    const authInfo = {\n        signerInfos: makeSignerInfos(signers, signMode),\n        fee: {\n            amount: [...feeAmount],\n            gasLimit: long_1.default.fromNumber(gasLimit),\n        },\n    };\n    return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n    return {\n        bodyBytes: bodyBytes,\n        authInfoBytes: authInfoBytes,\n        chainId: chainId,\n        accountNumber: long_1.default.fromNumber(accountNumber),\n    };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }) {\n    const signDoc = tx_1.SignDoc.fromPartial({\n        accountNumber: accountNumber,\n        authInfoBytes: authInfoBytes,\n        bodyBytes: bodyBytes,\n        chainId: chainId,\n    });\n    return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;\n//# sourceMappingURL=signing.js.map"]},"metadata":{},"sourceType":"script"}