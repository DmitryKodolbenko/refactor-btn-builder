{"ast":null,"code":"var bip39 = require('bip39-light');\nvar _require = require('near-hd-key'),\n  derivePath = _require.derivePath;\nvar bs58 = require('bs58');\nvar nacl = require('tweetnacl');\nvar KEY_DERIVATION_PATH = \"m/44'/397'/0'\";\nvar generateSeedPhrase = function generateSeedPhrase(entropy) {\n  return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic());\n};\nvar normalizeSeedPhrase = function normalizeSeedPhrase(seedPhrase) {\n  return seedPhrase.trim().split(/\\s+/).map(function (part) {\n    return part.toLowerCase();\n  }).join(' ');\n};\nvar parseSeedPhrase = function parseSeedPhrase(seedPhrase, derivationPath) {\n  var seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase));\n  var _derivePath = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex')),\n    key = _derivePath.key;\n  var keyPair = nacl.sign.keyPair.fromSeed(key);\n  var publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey));\n  var secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey));\n  return {\n    seedPhrase: seedPhrase,\n    secretKey: secretKey,\n    publicKey: publicKey\n  };\n};\nvar findSeedPhraseKey = function findSeedPhraseKey(seedPhrase, publicKeys) {\n  // TODO: Need to iterate through multiple possible derivation paths?\n  var keyInfo = parseSeedPhrase(seedPhrase);\n  if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n    return {};\n  }\n  return keyInfo;\n};\nmodule.exports = {\n  KEY_DERIVATION_PATH: KEY_DERIVATION_PATH,\n  generateSeedPhrase: generateSeedPhrase,\n  normalizeSeedPhrase: normalizeSeedPhrase,\n  parseSeedPhrase: parseSeedPhrase,\n  findSeedPhraseKey: findSeedPhraseKey\n};","map":{"version":3,"names":["bip39","require","derivePath","bs58","nacl","KEY_DERIVATION_PATH","generateSeedPhrase","entropy","parseSeedPhrase","undefined","entropyToMnemonic","generateMnemonic","normalizeSeedPhrase","seedPhrase","trim","split","map","part","toLowerCase","join","derivationPath","seed","mnemonicToSeed","toString","key","keyPair","sign","fromSeed","publicKey","encode","Buffer","from","secretKey","findSeedPhraseKey","publicKeys","keyInfo","indexOf","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-seed-phrase/index.js"],"sourcesContent":["const bip39 = require('bip39-light');\nconst { derivePath } = require('near-hd-key');\nconst bs58 = require('bs58');\nconst nacl = require('tweetnacl');\n\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\"\n\nconst generateSeedPhrase = (entropy) => {\n    return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic())\n}\n\nconst normalizeSeedPhrase = (seedPhrase) => seedPhrase.trim().split(/\\s+/).map(part => part.toLowerCase()).join(' ')\n\nconst parseSeedPhrase = (seedPhrase, derivationPath) => {\n    const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase))\n    const { key } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex'))\n    const keyPair = nacl.sign.keyPair.fromSeed(key)\n    const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey))\n    const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey))\n    return { seedPhrase, secretKey, publicKey }\n}\n\nconst findSeedPhraseKey = (seedPhrase, publicKeys) => {\n    // TODO: Need to iterate through multiple possible derivation paths?\n    const keyInfo = parseSeedPhrase(seedPhrase)\n    if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n        return {}\n    }\n    return keyInfo\n}\n\nmodule.exports = {\n    KEY_DERIVATION_PATH,\n    generateSeedPhrase,\n    normalizeSeedPhrase,\n    parseSeedPhrase,\n    findSeedPhraseKey\n}\n"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,eAAuBA,OAAO,CAAC,aAAa,CAAC;EAArCC,UAAU,YAAVA,UAAU;AAClB,IAAMC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAMG,IAAI,GAAGH,OAAO,CAAC,WAAW,CAAC;AAEjC,IAAMI,mBAAmB,GAAG,eAAe;AAE3C,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,OAAO,EAAK;EACpC,OAAOC,eAAe,CAACD,OAAO,KAAKE,SAAS,GAAGT,KAAK,CAACU,iBAAiB,CAACH,OAAO,CAAC,GAAGP,KAAK,CAACW,gBAAgB,EAAE,CAAC;AAC/G,CAAC;AAED,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,UAAU;EAAA,OAAKA,UAAU,CAACC,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,GAAG,CAAC,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACC,WAAW,EAAE;EAAA,EAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAAA;AAEpH,IAAMX,eAAe,GAAG,SAAlBA,eAAe,CAAIK,UAAU,EAAEO,cAAc,EAAK;EACpD,IAAMC,IAAI,GAAGrB,KAAK,CAACsB,cAAc,CAACV,mBAAmB,CAACC,UAAU,CAAC,CAAC;EAClE,kBAAgBX,UAAU,CAACkB,cAAc,IAAIf,mBAAmB,EAAEgB,IAAI,CAACE,QAAQ,CAAC,KAAK,CAAC,CAAC;IAA/EC,GAAG,eAAHA,GAAG;EACX,IAAMC,OAAO,GAAGrB,IAAI,CAACsB,IAAI,CAACD,OAAO,CAACE,QAAQ,CAACH,GAAG,CAAC;EAC/C,IAAMI,SAAS,GAAG,UAAU,GAAGzB,IAAI,CAAC0B,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAACG,SAAS,CAAC,CAAC;EAC1E,IAAMI,SAAS,GAAG,UAAU,GAAG7B,IAAI,CAAC0B,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAACO,SAAS,CAAC,CAAC;EAC1E,OAAO;IAAEnB,UAAU,EAAVA,UAAU;IAAEmB,SAAS,EAATA,SAAS;IAAEJ,SAAS,EAATA;EAAU,CAAC;AAC/C,CAAC;AAED,IAAMK,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIpB,UAAU,EAAEqB,UAAU,EAAK;EAClD;EACA,IAAMC,OAAO,GAAG3B,eAAe,CAACK,UAAU,CAAC;EAC3C,IAAIqB,UAAU,CAACE,OAAO,CAACD,OAAO,CAACP,SAAS,CAAC,GAAG,CAAC,EAAE;IAC3C,OAAO,CAAC,CAAC;EACb;EACA,OAAOO,OAAO;AAClB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACbjC,mBAAmB,EAAnBA,mBAAmB;EACnBC,kBAAkB,EAAlBA,kBAAkB;EAClBM,mBAAmB,EAAnBA,mBAAmB;EACnBJ,eAAe,EAAfA,eAAe;EACfyB,iBAAiB,EAAjBA;AACJ,CAAC"},"metadata":{},"sourceType":"script"}