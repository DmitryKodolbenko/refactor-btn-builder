{"ast":null,"code":"\"use strict\";\n\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar _toConsumableArray = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nvar utils_1 = require(\"@cosmjs/utils\");\nvar libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nfunction isArgon2idOptions(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.outputLength !== \"number\") return false;\n  if (typeof thing.opsLimit !== \"number\") return false;\n  if (typeof thing.memLimitKib !== \"number\") return false;\n  return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nvar Argon2id = /*#__PURE__*/function () {\n  function Argon2id() {\n    _classCallCheck(this, Argon2id);\n  }\n  _createClass(Argon2id, null, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(password, salt, options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                return _context.abrupt(\"return\", libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt,\n                // libsodium only supports 16 byte salts and will throw when you don't respect that\n                options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function execute(_x, _x2, _x3) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n  return Argon2id;\n}();\nexports.Argon2id = Argon2id;\nvar Ed25519Keypair = /*#__PURE__*/function () {\n  function Ed25519Keypair(privkey, pubkey) {\n    _classCallCheck(this, Ed25519Keypair);\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n  _createClass(Ed25519Keypair, [{\n    key: \"toLibsodiumPrivkey\",\n    value: function toLibsodiumPrivkey() {\n      return new Uint8Array([].concat(_toConsumableArray(this.privkey), _toConsumableArray(this.pubkey)));\n    }\n  }], [{\n    key: \"fromLibsodiumPrivkey\",\n    value: function fromLibsodiumPrivkey(libsodiumPrivkey) {\n      if (libsodiumPrivkey.length !== 64) {\n        throw new Error(\"Unexpected key length \".concat(libsodiumPrivkey.length, \". Must be 64.\"));\n      }\n      return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n  }]);\n  return Ed25519Keypair;\n}();\nexports.Ed25519Keypair = Ed25519Keypair;\nvar Ed25519 = /*#__PURE__*/function () {\n  function Ed25519() {\n    _classCallCheck(this, Ed25519);\n  }\n  _createClass(Ed25519, null, [{\n    key: \"makeKeypair\",\n    value:\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    function () {\n      var _makeKeypair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seed) {\n        var keypair;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n                return _context2.abrupt(\"return\", Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function makeKeypair(_x4) {\n        return _makeKeypair.apply(this, arguments);\n      }\n      return makeKeypair;\n    }()\n  }, {\n    key: \"createSignature\",\n    value: function () {\n      var _createSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message, keyPair) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                return _context3.abrupt(\"return\", libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey()));\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function createSignature(_x5, _x6) {\n        return _createSignature.apply(this, arguments);\n      }\n      return createSignature;\n    }()\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(signature, message, pubkey) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                return _context4.abrupt(\"return\", libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey));\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function verifySignature(_x7, _x8, _x9) {\n        return _verifySignature.apply(this, arguments);\n      }\n      return verifySignature;\n    }()\n  }]);\n  return Ed25519;\n}();\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nvar Xchacha20poly1305Ietf = /*#__PURE__*/function () {\n  function Xchacha20poly1305Ietf() {\n    _classCallCheck(this, Xchacha20poly1305Ietf);\n  }\n  _createClass(Xchacha20poly1305Ietf, null, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message, key, nonce) {\n        var additionalData;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                additionalData = null;\n                return _context5.abrupt(\"return\", libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null,\n                // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n                nonce, key));\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      function encrypt(_x10, _x11, _x12) {\n        return _encrypt.apply(this, arguments);\n      }\n      return encrypt;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(ciphertext, key, nonce) {\n        var additionalData;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return libsodium_wrappers_1.default.ready;\n              case 2:\n                additionalData = null;\n                return _context6.abrupt(\"return\", libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null,\n                // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n                ciphertext, additionalData, nonce, key));\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      function decrypt(_x13, _x14, _x15) {\n        return _decrypt.apply(this, arguments);\n      }\n      return decrypt;\n    }()\n  }]);\n  return Xchacha20poly1305Ietf;\n}();\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"sources":["../src/libsodium.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nfunction isArgon2idOptions(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.outputLength !== \"number\")\n        return false;\n    if (typeof thing.opsLimit !== \"number\")\n        return false;\n    if (typeof thing.memLimitKib !== \"number\")\n        return false;\n    return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nclass Argon2id {\n    static async execute(password, salt, options) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n        options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n    }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n    static fromLibsodiumPrivkey(libsodiumPrivkey) {\n        if (libsodiumPrivkey.length !== 64) {\n            throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n        }\n        return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n    toLibsodiumPrivkey() {\n        return new Uint8Array([...this.privkey, ...this.pubkey]);\n    }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    static async makeKeypair(seed) {\n        await libsodium_wrappers_1.default.ready;\n        const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n        return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n    }\n    static async createSignature(message, keyPair) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n    }\n    static async verifySignature(signature, message, pubkey) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n    }\n}\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nclass Xchacha20poly1305Ietf {\n    static async encrypt(message, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        nonce, key);\n    }\n    static async decrypt(ciphertext, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        ciphertext, additionalData, nonce, key);\n    }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;\n//# sourceMappingURL=libsodium.js.map"]},"metadata":{},"sourceType":"script"}