{"ast":null,"code":"const utils = require(\"./utils\");\nconst Address = utils.Address;\nconst boc = require(\"./boc\");\nconst AppTon = require(\"./ledger/AppTon\");\nconst HttpProvider = require(\"./providers\").default;\nconst {\n  Contract\n} = require(\"./contract\");\nconst Wallets = require(\"./contract/wallet\").default;\nconst LockupWallets = require(\"./contract/lockup\").default;\nconst NFT = require(\"./contract/token/nft\").default;\nconst JETTON = require(\"./contract/token/ft\").default;\nconst {\n  BlockSubscription,\n  InMemoryBlockStorage\n} = require(\"./providers/blockSubscription\");\nconst {\n  SubscriptionContract\n} = require(\"./contract/subscription/index\");\nconst TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\nconst TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\nconst BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\nconst version = '0.0.35';\nclass TonWeb {\n  constructor(provider) {\n    this.version = version;\n    this.utils = utils;\n    this.Address = Address;\n    this.boc = boc;\n    this.Contract = Contract;\n    this.BlockSubscription = BlockSubscription;\n    this.InMemoryBlockStorage = InMemoryBlockStorage;\n    this.provider = provider || new HttpProvider();\n    this.wallet = new Wallets(this.provider);\n    this.lockupWallet = LockupWallets;\n  }\n\n  /**\n   * Use this method to get transaction history of a given address.\n   * @param address   {Address | string}\n   * @param limit?    {number}\n   * @param lt?    {number}\n   * @param txhash?    {string}   in HEX\n   * @param to_lt?    {number}\n   * @return array of transaction objects\n   */\n  async getTransactions(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    let lt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    let txhash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n    let to_lt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    return this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt);\n  }\n  /**\n   * @param address   {Address | string}\n   * @return {Promise<string>} - The current balance for the given address in nanograms.\n   */\n  async getBalance(address) {\n    return this.provider.getBalance(address.toString());\n  }\n\n  /**\n   * Use this method to send serialized boc file: fully packed and serialized external message.\n   * @param bytes {Uint8Array}\n   */\n  async sendBoc(bytes) {\n    return this.provider.sendBoc(utils.bytesToBase64(bytes));\n  }\n\n  /**\n   * Invoke get-method of smart contract\n   * @param address   {Address | string}    contract address\n   * @param method   {string | number}        method name or method id\n   * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n   */\n  async call(address, method) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return this.provider.call(address.toString(), method, params);\n  }\n}\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n  TransportWebUSB,\n  TransportWebHID,\n  BluetoothTransport,\n  AppTon\n};\nTonWeb.token = {\n  nft: NFT,\n  ft: JETTON,\n  jetton: JETTON\n};\nmodule.exports = TonWeb;","map":{"version":3,"names":["utils","require","Address","boc","AppTon","HttpProvider","default","Contract","Wallets","LockupWallets","NFT","JETTON","BlockSubscription","InMemoryBlockStorage","SubscriptionContract","TransportWebUSB","TransportWebHID","BluetoothTransport","version","TonWeb","constructor","provider","wallet","lockupWallet","getTransactions","address","limit","lt","undefined","txhash","to_lt","toString","getBalance","sendBoc","bytes","bytesToBase64","call","method","params","ledger","token","nft","ft","jetton","module","exports"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/tonweb/src/index.js"],"sourcesContent":["const utils = require(\"./utils\");\nconst Address = utils.Address;\nconst boc = require(\"./boc\");\nconst AppTon = require(\"./ledger/AppTon\");\nconst HttpProvider = require(\"./providers\").default;\nconst {Contract} = require(\"./contract\");\nconst Wallets = require(\"./contract/wallet\").default;\nconst LockupWallets = require(\"./contract/lockup\").default;\nconst NFT = require(\"./contract/token/nft\").default;\nconst JETTON = require(\"./contract/token/ft\").default;\nconst {BlockSubscription, InMemoryBlockStorage} = require(\"./providers/blockSubscription\");\nconst {SubscriptionContract} = require(\"./contract/subscription/index\");\nconst TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\nconst TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\nconst BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\nconst version = '0.0.35';\n\nclass TonWeb {\n    constructor(provider) {\n        this.version = version;\n        this.utils = utils;\n        this.Address = Address;\n        this.boc = boc;\n        this.Contract = Contract;\n        this.BlockSubscription = BlockSubscription;\n        this.InMemoryBlockStorage = InMemoryBlockStorage;\n\n        this.provider = provider || new HttpProvider();\n        this.wallet = new Wallets(this.provider);\n        this.lockupWallet = LockupWallets;\n    }\n\n    /**\n     * Use this method to get transaction history of a given address.\n     * @param address   {Address | string}\n     * @param limit?    {number}\n     * @param lt?    {number}\n     * @param txhash?    {string}   in HEX\n     * @param to_lt?    {number}\n     * @return array of transaction objects\n     */\n    async getTransactions(address, limit = 20, lt = undefined, txhash = undefined, to_lt = undefined) {\n        return this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt);\n    };\n\n    /**\n     * @param address   {Address | string}\n     * @return {Promise<string>} - The current balance for the given address in nanograms.\n     */\n    async getBalance(address) {\n        return this.provider.getBalance(address.toString());\n    }\n\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param bytes {Uint8Array}\n     */\n    async sendBoc(bytes) {\n        return this.provider.sendBoc(utils.bytesToBase64(bytes));\n    }\n\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {Address | string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    async call(address, method, params = []) {\n        return this.provider.call(address.toString(), method, params);\n    }\n}\n\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n    TransportWebUSB,\n    TransportWebHID,\n    BluetoothTransport,\n    AppTon,\n};\nTonWeb.token = {\n    nft: NFT,\n    ft: JETTON,\n    jetton: JETTON,\n}\n\nmodule.exports = TonWeb;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAO;AAC7B,MAAMC,GAAG,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAMG,MAAM,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAMI,YAAY,GAAGJ,OAAO,CAAC,aAAa,CAAC,CAACK,OAAO;AACnD,MAAM;EAACC;AAAQ,CAAC,GAAGN,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAmB,CAAC,CAACK,OAAO;AACpD,MAAMG,aAAa,GAAGR,OAAO,CAAC,mBAAmB,CAAC,CAACK,OAAO;AAC1D,MAAMI,GAAG,GAAGT,OAAO,CAAC,sBAAsB,CAAC,CAACK,OAAO;AACnD,MAAMK,MAAM,GAAGV,OAAO,CAAC,qBAAqB,CAAC,CAACK,OAAO;AACrD,MAAM;EAACM,iBAAiB;EAAEC;AAAoB,CAAC,GAAGZ,OAAO,CAAC,+BAA+B,CAAC;AAC1F,MAAM;EAACa;AAAoB,CAAC,GAAGb,OAAO,CAAC,+BAA+B,CAAC;AACvE,MAAMc,eAAe,GAAGd,OAAO,CAAC,+BAA+B,CAAC,CAACK,OAAO;AACxE,MAAMU,eAAe,GAAGf,OAAO,CAAC,+BAA+B,CAAC,CAACK,OAAO;AACxE,MAAMW,kBAAkB,GAAGhB,OAAO,CAAC,gCAAgC,CAAC,CAACK,OAAO;AAC5E,MAAMY,OAAO,GAAG,QAAQ;AAExB,MAAMC,MAAM,CAAC;EACTC,WAAW,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAClB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACK,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAEhD,IAAI,CAACQ,QAAQ,GAAGA,QAAQ,IAAI,IAAIhB,YAAY,EAAE;IAC9C,IAAI,CAACiB,MAAM,GAAG,IAAId,OAAO,CAAC,IAAI,CAACa,QAAQ,CAAC;IACxC,IAAI,CAACE,YAAY,GAAGd,aAAa;EACrC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMe,eAAe,CAACC,OAAO,EAAqE;IAAA,IAAnEC,KAAK,uEAAG,EAAE;IAAA,IAAEC,EAAE,uEAAGC,SAAS;IAAA,IAAEC,MAAM,uEAAGD,SAAS;IAAA,IAAEE,KAAK,uEAAGF,SAAS;IAC5F,OAAO,IAAI,CAACP,QAAQ,CAACG,eAAe,CAACC,OAAO,CAACM,QAAQ,EAAE,EAAEL,KAAK,EAAEC,EAAE,EAAEE,MAAM,EAAEC,KAAK,CAAC;EACtF;EAEA;AACJ;AACA;AACA;EACI,MAAME,UAAU,CAACP,OAAO,EAAE;IACtB,OAAO,IAAI,CAACJ,QAAQ,CAACW,UAAU,CAACP,OAAO,CAACM,QAAQ,EAAE,CAAC;EACvD;;EAEA;AACJ;AACA;AACA;EACI,MAAME,OAAO,CAACC,KAAK,EAAE;IACjB,OAAO,IAAI,CAACb,QAAQ,CAACY,OAAO,CAACjC,KAAK,CAACmC,aAAa,CAACD,KAAK,CAAC,CAAC;EAC5D;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,IAAI,CAACX,OAAO,EAAEY,MAAM,EAAe;IAAA,IAAbC,MAAM,uEAAG,EAAE;IACnC,OAAO,IAAI,CAACjB,QAAQ,CAACe,IAAI,CAACX,OAAO,CAACM,QAAQ,EAAE,EAAEM,MAAM,EAAEC,MAAM,CAAC;EACjE;AACJ;AAEAnB,MAAM,CAACD,OAAO,GAAGA,OAAO;AACxBC,MAAM,CAACnB,KAAK,GAAGA,KAAK;AACpBmB,MAAM,CAACjB,OAAO,GAAGA,OAAO;AACxBiB,MAAM,CAAChB,GAAG,GAAGA,GAAG;AAChBgB,MAAM,CAACd,YAAY,GAAGA,YAAY;AAClCc,MAAM,CAACZ,QAAQ,GAAGA,QAAQ;AAC1BY,MAAM,CAACX,OAAO,GAAGA,OAAO;AACxBW,MAAM,CAACV,aAAa,GAAGA,aAAa;AACpCU,MAAM,CAACL,oBAAoB,GAAGA,oBAAoB;AAClDK,MAAM,CAACP,iBAAiB,GAAGA,iBAAiB;AAC5CO,MAAM,CAACN,oBAAoB,GAAGA,oBAAoB;AAClDM,MAAM,CAACoB,MAAM,GAAG;EACZxB,eAAe;EACfC,eAAe;EACfC,kBAAkB;EAClBb;AACJ,CAAC;AACDe,MAAM,CAACqB,KAAK,GAAG;EACXC,GAAG,EAAE/B,GAAG;EACRgC,EAAE,EAAE/B,MAAM;EACVgC,MAAM,EAAEhC;AACZ,CAAC;AAEDiC,MAAM,CAACC,OAAO,GAAG1B,MAAM"},"metadata":{},"sourceType":"script"}