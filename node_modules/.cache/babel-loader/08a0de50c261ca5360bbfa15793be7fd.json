{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeKeyStore = void 0;\nvar keystore_1 = require(\"./keystore\");\nvar MergeKeyStore = /*#__PURE__*/function (_keystore_1$KeyStore) {\n  _inherits(MergeKeyStore, _keystore_1$KeyStore);\n  var _super = _createSuper(MergeKeyStore);\n  /**\n   * @param keyStores read calls are attempted from start to end of array\n   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n   */\n  function MergeKeyStore(keyStores) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      writeKeyStoreIndex: 0\n    };\n    _classCallCheck(this, MergeKeyStore);\n    _this = _super.call(this);\n    _this.options = options;\n    _this.keyStores = keyStores;\n    return _this;\n  }\n  /**\n   * Store a {@link KeyPain} to the first index of a key store array\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  _createClass(MergeKeyStore, [{\n    key: \"setKey\",\n    value: function () {\n      var _setKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(networkId, accountId, keyPair) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function setKey(_x, _x2, _x3) {\n        return _setKey.apply(this, arguments);\n      }\n      return setKey;\n    }()\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n  }, {\n    key: \"getKey\",\n    value: function () {\n      var _getKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(networkId, accountId) {\n        var _iterator, _step, keyStore, keyPair;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.keyStores);\n                _context2.prev = 1;\n                _iterator.s();\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 12;\n                  break;\n                }\n                keyStore = _step.value;\n                _context2.next = 7;\n                return keyStore.getKey(networkId, accountId);\n              case 7:\n                keyPair = _context2.sent;\n                if (!keyPair) {\n                  _context2.next = 10;\n                  break;\n                }\n                return _context2.abrupt(\"return\", keyPair);\n              case 10:\n                _context2.next = 3;\n                break;\n              case 12:\n                _context2.next = 17;\n                break;\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](1);\n                _iterator.e(_context2.t0);\n              case 17:\n                _context2.prev = 17;\n                _iterator.f();\n                return _context2.finish(17);\n              case 20:\n                return _context2.abrupt(\"return\", null);\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 14, 17, 20]]);\n      }));\n      function getKey(_x4, _x5) {\n        return _getKey.apply(this, arguments);\n      }\n      return getKey;\n    }()\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n  }, {\n    key: \"removeKey\",\n    value: function () {\n      var _removeKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(networkId, accountId) {\n        var _iterator2, _step2, keyStore;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(this.keyStores);\n                _context3.prev = 1;\n                _iterator2.s();\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 9;\n                  break;\n                }\n                keyStore = _step2.value;\n                _context3.next = 7;\n                return keyStore.removeKey(networkId, accountId);\n              case 7:\n                _context3.next = 3;\n                break;\n              case 9:\n                _context3.next = 14;\n                break;\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](1);\n                _iterator2.e(_context3.t0);\n              case 14:\n                _context3.prev = 14;\n                _iterator2.f();\n                return _context3.finish(14);\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 11, 14, 17]]);\n      }));\n      function removeKey(_x6, _x7) {\n        return _removeKey.apply(this, arguments);\n      }\n      return removeKey;\n    }()\n    /**\n     * Removes all items from each key store\n     */\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _iterator3, _step3, keyStore;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(this.keyStores);\n                _context4.prev = 1;\n                _iterator3.s();\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 9;\n                  break;\n                }\n                keyStore = _step3.value;\n                _context4.next = 7;\n                return keyStore.clear();\n              case 7:\n                _context4.next = 3;\n                break;\n              case 9:\n                _context4.next = 14;\n                break;\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](1);\n                _iterator3.e(_context4.t0);\n              case 14:\n                _context4.prev = 14;\n                _iterator3.f();\n                return _context4.finish(14);\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 11, 14, 17]]);\n      }));\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n      return clear;\n    }()\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n  }, {\n    key: \"getNetworks\",\n    value: function () {\n      var _getNetworks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var result, _iterator4, _step4, keyStore, _iterator5, _step5, network;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                result = new Set();\n                _iterator4 = _createForOfIteratorHelper(this.keyStores);\n                _context5.prev = 2;\n                _iterator4.s();\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context5.next = 14;\n                  break;\n                }\n                keyStore = _step4.value;\n                _context5.t0 = _createForOfIteratorHelper;\n                _context5.next = 9;\n                return keyStore.getNetworks();\n              case 9:\n                _context5.t1 = _context5.sent;\n                _iterator5 = (0, _context5.t0)(_context5.t1);\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    network = _step5.value;\n                    result.add(network);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              case 12:\n                _context5.next = 4;\n                break;\n              case 14:\n                _context5.next = 19;\n                break;\n              case 16:\n                _context5.prev = 16;\n                _context5.t2 = _context5[\"catch\"](2);\n                _iterator4.e(_context5.t2);\n              case 19:\n                _context5.prev = 19;\n                _iterator4.f();\n                return _context5.finish(19);\n              case 22:\n                return _context5.abrupt(\"return\", Array.from(result));\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 16, 19, 22]]);\n      }));\n      function getNetworks() {\n        return _getNetworks.apply(this, arguments);\n      }\n      return getNetworks;\n    }()\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(networkId) {\n        var result, _iterator6, _step6, keyStore, _iterator7, _step7, account;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                result = new Set();\n                _iterator6 = _createForOfIteratorHelper(this.keyStores);\n                _context6.prev = 2;\n                _iterator6.s();\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context6.next = 14;\n                  break;\n                }\n                keyStore = _step6.value;\n                _context6.t0 = _createForOfIteratorHelper;\n                _context6.next = 9;\n                return keyStore.getAccounts(networkId);\n              case 9:\n                _context6.t1 = _context6.sent;\n                _iterator7 = (0, _context6.t0)(_context6.t1);\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    account = _step7.value;\n                    result.add(account);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              case 12:\n                _context6.next = 4;\n                break;\n              case 14:\n                _context6.next = 19;\n                break;\n              case 16:\n                _context6.prev = 16;\n                _context6.t2 = _context6[\"catch\"](2);\n                _iterator6.e(_context6.t2);\n              case 19:\n                _context6.prev = 19;\n                _iterator6.f();\n                return _context6.finish(19);\n              case 22:\n                return _context6.abrupt(\"return\", Array.from(result));\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 16, 19, 22]]);\n      }));\n      function getAccounts(_x8) {\n        return _getAccounts.apply(this, arguments);\n      }\n      return getAccounts;\n    }() /** @hidden */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"MergeKeyStore(\".concat(this.keyStores.join(', '), \")\");\n    }\n  }]);\n  return MergeKeyStore;\n}(keystore_1.KeyStore);\nexports.MergeKeyStore = MergeKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","MergeKeyStore","keystore_1","require","keyStores","options","writeKeyStoreIndex","networkId","accountId","keyPair","setKey","keyStore","getKey","removeKey","clear","result","Set","getNetworks","network","add","Array","from","getAccounts","account","join","KeyStore"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/near-api-js/lib/key_stores/merge_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */\n    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link KeyPain} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n    }\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            const keyPair = await keyStore.getKey(networkId, accountId);\n            if (keyPair) {\n                return keyPair;\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            await keyStore.removeKey(networkId, accountId);\n        }\n    }\n    /**\n     * Removes all items from each key store\n     */\n    async clear() {\n        for (const keyStore of this.keyStores) {\n            await keyStore.clear();\n        }\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const network of await keyStore.getNetworks()) {\n                result.add(network);\n            }\n        }\n        return Array.from(result);\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const account of await keyStore.getAccounts(networkId)) {\n                result.add(account);\n            }\n        }\n        return Array.from(result);\n    }\n    /** @hidden */\n    toString() {\n        return `MergeKeyStore(${this.keyStores.join(', ')})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}