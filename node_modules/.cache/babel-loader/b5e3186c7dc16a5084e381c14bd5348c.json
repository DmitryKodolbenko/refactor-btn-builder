{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ripemd160 = exports.Ripemd160 = void 0;\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst utils_1 = require(\"./utils\");\nclass Ripemd160 {\n  constructor(firstData) {\n    this.blockSize = 512 / 8;\n    this.impl = ripemd160_1.ripemd160.create();\n    if (firstData) {\n      this.update(firstData);\n    }\n  }\n  update(data) {\n    this.impl.update((0, utils_1.toRealUint8Array)(data));\n    return this;\n  }\n  digest() {\n    return this.impl.digest();\n  }\n}\nexports.Ripemd160 = Ripemd160;\n/** Convenience function equivalent to `new Ripemd160(data).digest()` */\nfunction ripemd160(data) {\n  return new Ripemd160(data).digest();\n}\nexports.ripemd160 = ripemd160;","map":{"version":3,"sources":["../src/ripemd.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA,MAAa,SAAS,CAAA;EAKpB,WAAA,CAAmB,SAAsB,EAAA;IAJzB,IAAA,CAAA,SAAS,GAAG,GAAG,GAAG,CAAC;IAElB,IAAA,CAAA,IAAI,GAAG,WAAA,CAAA,SAAc,CAAC,MAAM,EAAE;IAG7C,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IACvB;EACH;EAEO,MAAM,CAAC,IAAgB,EAAA;IAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,gBAAgB,EAAC,IAAI,CAAC,CAAC;IACxC,OAAO,IAAI;EACb;EAEO,MAAM,GAAA;IACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;EAC3B;AACD;AAnBD,OAAA,CAAA,SAAA,GAAA,SAAA;AAqBA;AACA,SAAgB,SAAS,CAAC,IAAgB,EAAA;EACxC,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;AACrC;AAFA,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.Ripemd160 = void 0;\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst utils_1 = require(\"./utils\");\nclass Ripemd160 {\n    constructor(firstData) {\n        this.blockSize = 512 / 8;\n        this.impl = ripemd160_1.ripemd160.create();\n        if (firstData) {\n            this.update(firstData);\n        }\n    }\n    update(data) {\n        this.impl.update((0, utils_1.toRealUint8Array)(data));\n        return this;\n    }\n    digest() {\n        return this.impl.digest();\n    }\n}\nexports.Ripemd160 = Ripemd160;\n/** Convenience function equivalent to `new Ripemd160(data).digest()` */\nfunction ripemd160(data) {\n    return new Ripemd160(data).digest();\n}\nexports.ripemd160 = ripemd160;\n//# sourceMappingURL=ripemd.js.map"]},"metadata":{},"sourceType":"script"}