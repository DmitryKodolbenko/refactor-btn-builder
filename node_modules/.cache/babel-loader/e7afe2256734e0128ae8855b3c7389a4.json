{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ADNLKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst ADNLAddress_1 = require(\"../address/ADNLAddress\");\nconst KEY_PREFIX = Buffer.from('17236849', 'hex');\nclass ADNLKey {\n  constructor(address, keyPair) {\n    this.address = address;\n    this.keyPair = keyPair;\n  }\n  static async fromKey(src) {\n    if (src.length !== 36) {\n      throw Error('Invalid key');\n    }\n    if (!src.slice(0, 4).equals(KEY_PREFIX)) {\n      throw Error('Invalid key');\n    }\n    const keySeed = src.slice(4);\n    // Create keypair\n    const keyPair = (0, ton_crypto_1.keyPairFromSeed)(keySeed);\n    // Create address\n    const address = await (0, ton_crypto_1.sha256)(Buffer.concat([Buffer.from([0xC6, 0xB4, 0x13, 0x48]), keyPair.publicKey]));\n    return new ADNLKey(new ADNLAddress_1.ADNLAddress(address), keyPair);\n  }\n}\nexports.ADNLKey = ADNLKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","ADNLKey","ton_crypto_1","require","ADNLAddress_1","KEY_PREFIX","Buffer","from","constructor","address","keyPair","fromKey","src","length","Error","slice","equals","keySeed","keyPairFromSeed","sha256","concat","publicKey","ADNLAddress"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/keystore/ADNLKey.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ADNLKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst ADNLAddress_1 = require(\"../address/ADNLAddress\");\nconst KEY_PREFIX = Buffer.from('17236849', 'hex');\nclass ADNLKey {\n    constructor(address, keyPair) {\n        this.address = address;\n        this.keyPair = keyPair;\n    }\n    static async fromKey(src) {\n        if (src.length !== 36) {\n            throw Error('Invalid key');\n        }\n        if (!src.slice(0, 4).equals(KEY_PREFIX)) {\n            throw Error('Invalid key');\n        }\n        const keySeed = src.slice(4);\n        // Create keypair\n        const keyPair = (0, ton_crypto_1.keyPairFromSeed)(keySeed);\n        // Create address\n        const address = await (0, ton_crypto_1.sha256)(Buffer.concat([Buffer.from([0xC6, 0xB4, 0x13, 0x48]), keyPair.publicKey]));\n        return new ADNLKey(new ADNLAddress_1.ADNLAddress(address), keyPair);\n    }\n}\nexports.ADNLKey = ADNLKey;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,YAAY,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC1C,MAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAME,UAAU,GAAGC,MAAM,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;AACjD,MAAMN,OAAO,CAAC;EACVO,WAAW,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC1B,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACA,aAAaC,OAAO,CAACC,GAAG,EAAE;IACtB,IAAIA,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE;MACnB,MAAMC,KAAK,CAAC,aAAa,CAAC;IAC9B;IACA,IAAI,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAACX,UAAU,CAAC,EAAE;MACrC,MAAMS,KAAK,CAAC,aAAa,CAAC;IAC9B;IACA,MAAMG,OAAO,GAAGL,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;IAC5B;IACA,MAAML,OAAO,GAAG,CAAC,CAAC,EAAER,YAAY,CAACgB,eAAe,EAAED,OAAO,CAAC;IAC1D;IACA,MAAMR,OAAO,GAAG,MAAM,CAAC,CAAC,EAAEP,YAAY,CAACiB,MAAM,EAAEb,MAAM,CAACc,MAAM,CAAC,CAACd,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,EAAEG,OAAO,CAACW,SAAS,CAAC,CAAC,CAAC;IACzH,OAAO,IAAIpB,OAAO,CAAC,IAAIG,aAAa,CAACkB,WAAW,CAACb,OAAO,CAAC,EAAEC,OAAO,CAAC;EACvE;AACJ;AACAX,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script"}