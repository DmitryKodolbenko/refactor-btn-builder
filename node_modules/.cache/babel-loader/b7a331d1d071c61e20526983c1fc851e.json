{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _inherits = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemorySigner = exports.Signer = void 0;\nvar js_sha256_1 = __importDefault(require(\"js-sha256\"));\nvar key_pair_1 = require(\"./utils/key_pair\");\nvar in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nvar Signer = /*#__PURE__*/_createClass(function Signer() {\n  _classCallCheck(this, Signer);\n});\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nvar InMemorySigner = /*#__PURE__*/function (_Signer) {\n  _inherits(InMemorySigner, _Signer);\n  var _super = _createSuper(InMemorySigner);\n  function InMemorySigner(keyStore) {\n    var _this;\n    _classCallCheck(this, InMemorySigner);\n    _this = _super.call(this);\n    _this.keyStore = keyStore;\n    return _this;\n  }\n  /**\n   * Creates a single account Signer instance with account, network and keyPair provided.\n   *\n   * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n   *\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account to assign the key pair to\n   * @param keyPair The keyPair to use for signing\n   */\n  _createClass(InMemorySigner, [{\n    key: \"createKey\",\n    value:\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    function () {\n      var _createKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accountId, networkId) {\n        var keyPair;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n                _context.next = 3;\n                return this.keyStore.setKey(networkId, accountId, keyPair);\n              case 3:\n                return _context.abrupt(\"return\", keyPair.getPublicKey());\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function createKey(_x, _x2) {\n        return _createKey.apply(this, arguments);\n      }\n      return createKey;\n    }()\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accountId, networkId) {\n        var keyPair;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.keyStore.getKey(networkId, accountId);\n              case 2:\n                keyPair = _context2.sent;\n                if (!(keyPair === null)) {\n                  _context2.next = 5;\n                  break;\n                }\n                return _context2.abrupt(\"return\", null);\n              case 5:\n                return _context2.abrupt(\"return\", keyPair.getPublicKey());\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getPublicKey(_x3, _x4) {\n        return _getPublicKey.apply(this, arguments);\n      }\n      return getPublicKey;\n    }()\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message, accountId, networkId) {\n        var hash, keyPair;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n                if (accountId) {\n                  _context3.next = 3;\n                  break;\n                }\n                throw new Error('InMemorySigner requires provided account id');\n              case 3:\n                _context3.next = 5;\n                return this.keyStore.getKey(networkId, accountId);\n              case 5:\n                keyPair = _context3.sent;\n                if (!(keyPair === null)) {\n                  _context3.next = 8;\n                  break;\n                }\n                throw new Error(\"Key for \".concat(accountId, \" not found in \").concat(networkId));\n              case 8:\n                return _context3.abrupt(\"return\", keyPair.sign(hash));\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function signMessage(_x5, _x6, _x7) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }()\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"InMemorySigner(\".concat(this.keyStore, \")\");\n    }\n  }], [{\n    key: \"fromKeyPair\",\n    value: function () {\n      var _fromKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(networkId, accountId, keyPair) {\n        var keyStore;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n                _context4.next = 3;\n                return keyStore.setKey(networkId, accountId, keyPair);\n              case 3:\n                return _context4.abrupt(\"return\", new InMemorySigner(keyStore));\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function fromKeyPair(_x8, _x9, _x10) {\n        return _fromKeyPair.apply(this, arguments);\n      }\n      return fromKeyPair;\n    }()\n  }]);\n  return InMemorySigner;\n}(Signer);\nexports.InMemorySigner = InMemorySigner;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","InMemorySigner","Signer","js_sha256_1","require","key_pair_1","in_memory_key_store_1","keyStore","accountId","networkId","keyPair","KeyPair","fromRandom","setKey","getPublicKey","getKey","message","hash","Uint8Array","default","sha256","array","Error","sign","InMemoryKeyStore"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/@nightlylabs/connect-near/node_modules/near-api-js/lib/signer.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InMemorySigner = exports.Signer = void 0;\nconst js_sha256_1 = __importDefault(require(\"js-sha256\"));\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst in_memory_key_store_1 = require(\"./key_stores/in_memory_key_store\");\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */\nclass Signer {\n}\nexports.Signer = Signer;\n/**\n * Signs using in memory key store.\n */\nclass InMemorySigner extends Signer {\n    constructor(keyStore) {\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */\n    static async fromKeyPair(networkId, accountId, keyPair) {\n        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();\n        await keyStore.setKey(networkId, accountId, keyPair);\n        return new InMemorySigner(keyStore);\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */\n    async createKey(accountId, networkId) {\n        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');\n        await this.keyStore.setKey(networkId, accountId, keyPair);\n        return keyPair.getPublicKey();\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */\n    async getPublicKey(accountId, networkId) {\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            return null;\n        }\n        return keyPair.getPublicKey();\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */\n    async signMessage(message, accountId, networkId) {\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        if (!accountId) {\n            throw new Error('InMemorySigner requires provided account id');\n        }\n        const keyPair = await this.keyStore.getKey(networkId, accountId);\n        if (keyPair === null) {\n            throw new Error(`Key for ${accountId} not found in ${networkId}`);\n        }\n        return keyPair.sign(hash);\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}