{"ast":null,"code":"import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { let as let__, bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as NEA from './NonEmptyArray';\nimport * as RA from './ReadonlyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n * assert.strictEqual(isEmpty(['a']), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isEmpty = function (as) {\n  return as.length === 0;\n};\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @example\n * import { isNonEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isNonEmpty([]), false)\n * assert.strictEqual(isNonEmpty(['a']), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNonEmpty = NEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @example\n * import { prependW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prependW(\"a\")), [\"a\", 2, 3, 4]);\n *\n * @since 2.11.0\n */\nexport var prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @example\n * import { appendW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], appendW(\"d\")), [1, 2, 3, \"d\"]);\n *\n * @since 2.11.0\n */\nexport var appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (i: number): number => i * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n * assert.deepStrictEqual(makeBy(-3, double), [])\n * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var makeBy = function (n, f) {\n  return n <= 0 ? [] : NEA.makeBy(f)(n);\n};\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n * assert.deepStrictEqual(replicate(-3, 'a'), [])\n * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var replicate = function (n, a) {\n  return makeBy(n, function () {\n    return a;\n  });\n};\nexport function fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? [a] : [];\n  };\n}\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * Create an array from an `Option`. The resulting array will contain the content of the\n * `Option` if it is `Some` and it will be empty if the `Option` is `None`.\n *\n * @example\n * import { fromOption } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(option.some(\"a\"), fromOption),[\"a\"])\n * assert.deepStrictEqual(pipe(option.none, fromOption),[])\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromOption = function (ma) {\n  return _.isNone(ma) ? [] : [ma.value];\n};\n/**\n * Create an array from an `Either`. The resulting array will contain the content of the\n * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.\n *\n * @example\n * import { fromEither } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(either.right(\"r\"), fromEither), [\"r\"]);\n * assert.deepStrictEqual(pipe(either.left(\"l\"), fromEither), []);\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromEither = function (e) {\n  return _.isLeft(e) ? [] : [e.right];\n};\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @example\n * import { matchW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcherW = matchW(\n *   () => \"No elements\",\n *   (as) => as.length\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);\n * assert.deepStrictEqual(pipe([], matcherW), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` and returns the result.\n *\n * @example\n * import { match } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcher = match(\n *   () => \"No elements\",\n *   (as) => `Found ${as.length} element(s)`\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), \"Found 4 element(s)\");\n * assert.deepStrictEqual(pipe([], matcher), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchLeftW } from 'fp-ts/Array'\n *\n * const f = matchLeftW(\n *   () => 0,\n *   (head: string, tail: string[]) => `Found \"${head}\" followed by ${tail.length} elements`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found \"a\" followed by 2 elements');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchRightW } from 'fp-ts/Array'\n *\n * const f = matchRightW(\n *   () => 0,\n *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by \"${tail}\"`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found 2 elements folllowed by \"c\"');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) {\n  return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty();\n  };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.\n *\n * @example\n * import { matchRight } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchRight(\n *   () => 0,\n *   (head, _) => 1 + len(head)\n * );\n * assert.strictEqual(len([1, 2, 3]), 3);\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Same as [`chain`](#chain), but passing also the index to the iterating function.\n *\n * @example\n * import { chainWithIndex, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (index: number, x: string) => replicate(2, `${x}${index}`);\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], chainWithIndex(f)), [\"a0\", \"a0\", \"b1\", \"b1\", \"c2\", \"c2\"]);\n *\n * @category sequencing\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) {\n  return function (as) {\n    var out = [];\n    for (var i = 0; i < as.length; i++) {\n      out.push.apply(out, f(i, as[i]));\n    }\n    return out;\n  };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.0.0\n */\nexport var scanLeft = function (b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[0] = b;\n    for (var i = 0; i < len; i++) {\n      out[i + 1] = f(out[i], as[i]);\n    }\n    return out;\n  };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.0.0\n */\nexport var scanRight = function (b, f) {\n  return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[len] = b;\n    for (var i = len - 1; i >= 0; i--) {\n      out[i] = f(as[i], out[i + 1]);\n    }\n    return out;\n  };\n};\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @example\n * import { size } from 'fp-ts/Array'\n *\n * assert.strictEqual(size([\"a\",\"b\",\"c\"]),3)\n *\n * @since 2.10.0\n */\nexport var size = function (as) {\n  return as.length;\n};\n/**\n * Test whether an array contains a particular index\n *\n * @example\n * import { isOutOfBound } from 'fp-ts/Array'\n *\n * assert.strictEqual(isOutOfBound(1,[\"a\",\"b\",\"c\"]),false)\n * assert.strictEqual(isOutOfBound(-1,[\"a\",\"b\",\"c\"]),true)\n * assert.strictEqual(isOutOfBound(3,[\"a\",\"b\",\"c\"]),true)\n *\n * @since 2.0.0\n */\nexport var isOutOfBound = NEA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array.\n * It returns a `none` if the index is out of bounds, and a `some` of the element if the\n * index is valid.\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexport var lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.0.0\n */\nexport var head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.0.0\n */\nexport var last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.0.0\n */\nexport var tail = function (as) {\n  return isNonEmpty(as) ? _.some(NEA.tail(as)) : _.none;\n};\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.0.0\n */\nexport var init = function (as) {\n  return isNonEmpty(as) ? _.some(NEA.init(as)) : _.none;\n};\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);\n * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeLeft = function (n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? copy(as) : as.slice(0, n);\n  };\n};\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);\n * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeRight = function (n) {\n  return function (as) {\n    return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);\n  };\n};\nexport function takeLeftWhile(predicate) {\n  return function (as) {\n    var out = [];\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n      var a = as_1[_i];\n      if (!predicate(a)) {\n        break;\n      }\n      out.push(a);\n    }\n    return out;\n  };\n}\nvar spanLeftIndex = function (as, predicate) {\n  var l = as.length;\n  var i = 0;\n  for (; i < l; i++) {\n    if (!predicate(as[i])) {\n      break;\n    }\n  }\n  return i;\n};\nexport function spanLeft(predicate) {\n  return function (as) {\n    var _a = splitAt(spanLeftIndex(as, predicate))(as),\n      init = _a[0],\n      rest = _a[1];\n    return {\n      init: init,\n      rest: rest\n    };\n  };\n}\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);\n * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropLeft = function (n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);\n  };\n};\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);\n * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropRight = function (n) {\n  return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n  };\n};\nexport function dropLeftWhile(predicate) {\n  return function (as) {\n    return as.slice(spanLeftIndex(as, predicate));\n  };\n}\n/**\n * `findIndex` returns an `Option` containing the first index for which a predicate holds.\n * It returns `None` if no element satisfies the predicate.\n * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexport var findIndex = RA.findIndex;\nexport function findFirst(predicate) {\n  return RA.findFirst(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array and\n * returns the first `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some(\"Mary\"));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findFirstMap = RA.findFirstMap;\nexport function findLast(predicate) {\n  return RA.findLast(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array starting from the\n * end and returns the last `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some(\"Joey\"));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate.\n * It returns an `Option` containing the index or `None` if not found.\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n * @since 2.0.0\n */\nexport var findLastIndex = RA.findLastIndex;\n/**\n * This function takes an array and makes a new array containing the same elements.\n *\n * @since 2.0.0\n */\nexport var copy = function (as) {\n  return as.slice();\n};\n/**\n * Insert an element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) {\n  return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n  };\n};\n/**\n * Change the element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) {\n  return modifyAt(i, function () {\n    return a;\n  });\n};\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nexport var deleteAt = function (i) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n  };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds.\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) {\n  return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n  };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.0.0\n */\nexport var reverse = function (as) {\n  return isEmpty(as) ? [] : as.slice().reverse();\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Right` elements in the same order.\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var rights = function (as) {\n  var r = [];\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n    if (a._tag === 'Right') {\n      r.push(a.right);\n    }\n  }\n  return r;\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Left` elements in the same order.\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.0.0\n */\nexport var lefts = function (as) {\n  var r = [];\n  for (var i = 0; i < as.length; i++) {\n    var a = as[i];\n    if (a._tag === 'Left') {\n      r.push(a.left);\n    }\n  }\n  return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var sort = function (O) {\n  return function (as) {\n    return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);\n  };\n};\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.0.0\n */\nexport var zipWith = function (fa, fb, f) {\n  var fc = [];\n  var len = Math.min(fa.length, fb.length);\n  for (var i = 0; i < len; i++) {\n    fc[i] = f(fa[i], fb[i]);\n  }\n  return fc;\n};\nexport function zip(as, bs) {\n  if (bs === undefined) {\n    return function (bs) {\n      return zip(bs, as);\n    };\n  }\n  return zipWith(as, bs, function (a, b) {\n    return [a, b];\n  });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport var unzip = function (as) {\n  var fa = [];\n  var fb = [];\n  for (var i = 0; i < as.length; i++) {\n    fa[i] = as[i][0];\n    fb[i] = as[i][1];\n  }\n  return [fa, fb];\n};\n/**\n * Creates a new `Array`, prepending an element to every member of the input `Array`.\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n  var f = NEA.prependAll(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : [];\n  };\n};\n/**\n * Creates a new `Array` placing an element in between members of the input `Array`.\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n  var f = NEA.intersperse(middle);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * Creates a new `Array` rotating the input `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var rotate = function (n) {\n  var f = NEA.rotate(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\nexport var elem = RA.elem;\n/**\n * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,\n * based on a `Eq<A>`.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var uniq = function (E) {\n  var f = NEA.uniq(E);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.0.0\n */\nexport var sortBy = function (ords) {\n  var f = NEA.sortBy(ords);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : copy(as);\n  };\n};\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.0.0\n */\nexport var chop = function (f) {\n  var g = NEA.chop(f);\n  return function (as) {\n    return isNonEmpty(as) ? g(as) : [];\n  };\n};\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\nexport var splitAt = function (n) {\n  return function (as) {\n    return n >= 1 && isNonEmpty(as) ? NEA.splitAt(n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];\n  };\n};\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\nexport var chunksOf = function (n) {\n  var f = NEA.chunksOf(n);\n  return function (as) {\n    return isNonEmpty(as) ? f(as) : [];\n  };\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) {\n  return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n    return fromOption(f.apply(void 0, a));\n  };\n};\nexport function comprehension(input, f, g) {\n  if (g === void 0) {\n    g = function () {\n      return true;\n    };\n  }\n  var go = function (scope, input) {\n    return isNonEmpty(input) ? pipe(NEA.head(input), chain(function (x) {\n      return go(pipe(scope, append(x)), NEA.tail(input));\n    })) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : [];\n  };\n  return go([], input);\n}\n/**\n * @since 2.11.0\n */\nexport var concatW = function (second) {\n  return function (first) {\n    return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);\n  };\n};\n/**\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n  var unionE = NEA.union(E);\n  return function (first, second) {\n    if (second === undefined) {\n      var unionE_1 = union(E);\n      return function (second) {\n        return unionE_1(second, first);\n      };\n    }\n    return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? copy(first) : copy(second);\n  };\n}\nexport function intersection(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var intersectionE_1 = intersection(E);\n      return function (ys) {\n        return intersectionE_1(ys, xs);\n      };\n    }\n    return xs.filter(function (a) {\n      return elemE(a, ys);\n    });\n  };\n}\nexport function difference(E) {\n  var elemE = elem(E);\n  return function (xs, ys) {\n    if (ys === undefined) {\n      var differenceE_1 = difference(E);\n      return function (ys) {\n        return differenceE_1(ys, xs);\n      };\n    }\n    return xs.filter(function (a) {\n      return !elemE(a, ys);\n    });\n  };\n}\nvar _map = function (fa, f) {\n  return pipe(fa, map(f));\n};\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) {\n  return pipe(fa, mapWithIndex(f));\n};\nvar _ap = function (fab, fa) {\n  return pipe(fab, ap(fa));\n};\nvar _chain = function (ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) {\n  return pipe(fa, filter(predicate));\n};\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) {\n  return pipe(fa, filterMap(f));\n};\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n  return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) {\n  return pipe(fa, partitionMap(f));\n};\n/* istanbul ignore next */\nvar _partitionWithIndex = function (fa, predicateWithIndex) {\n  return pipe(fa, partitionWithIndex(predicateWithIndex));\n};\n/* istanbul ignore next */\nvar _partitionMapWithIndex = function (fa, f) {\n  return pipe(fa, partitionMapWithIndex(f));\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) {\n  return pipe(fa, alt(that));\n};\nvar _reduce = function (fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n  var foldMapM = foldMap(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n  return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n  var foldMapWithIndexM = foldMapWithIndex(M);\n  return function (fa, f) {\n    return pipe(fa, foldMapWithIndexM(f));\n  };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n  return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _filterMapWithIndex = function (fa, f) {\n  return pipe(fa, filterMapWithIndex(f));\n};\n/* istanbul ignore next */\nvar _filterWithIndex = function (fa, predicateWithIndex) {\n  return pipe(fa, filterWithIndex(predicateWithIndex));\n};\n/* istanbul ignore next */\nvar _extend = function (fa, f) {\n  return pipe(fa, extend(f));\n};\n/* istanbul ignore next */\nvar _traverse = function (F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (ta, f) {\n    return pipe(ta, traverseWithIndexF(f));\n  };\n};\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst;\n/**\n * Given an element of the base type, `of` builds an `Array` containing just that\n * element of the base type (this is useful for building a `Monad`).\n *\n * @example\n * import { of } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(of(\"a\"), [\"a\"]);\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var of = NEA.of;\n/**\n * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)\n *\n * @since 2.7.0\n */\nexport var zero = function () {\n  return [];\n};\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.\n * In practice it applies the base function to each element of the array and collects the\n * results in a new array.\n *\n * @example\n * import { map } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => n * 2;\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) {\n  return function (fa) {\n    return fa.map(function (a) {\n      return f(a);\n    });\n  };\n};\n/**\n * @example\n * import { ap, map, of } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * // a curried function with 3 input parameteres\n * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;\n *\n * // let's use `ap` to iterate `f` over an array for each input parameter\n * assert.deepStrictEqual(pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])), [\n *   \"a1😀\", \"a1😫\", \"a1😎\",\n *   \"a2😀\", \"a2😫\", \"a2😎\",\n *   \"b1😀\", \"b1😫\", \"b1😎\",\n *   \"b2😀\", \"b2😫\", \"b2😎\",\n * ]);\n *\n * // given Array implements the Applicative interface with the `of` method,\n * // we can write exactly the same thing in a more symmetric way\n * // using `of` on `f` and `ap` on each array in input\n * assert.deepStrictEqual(\n *   pipe(of(f), ap([\"a\", \"b\"]), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])),\n *   pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"]))\n * );\n *\n * @since 2.0.0\n */\nexport var ap = function (fa) {\n  return chain(function (f) {\n    return pipe(fa, map(f));\n  });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to\n * determine the next computation.\n *\n * In other words it takes a function `f` that produces an array from a single element of\n * the base type `A` and returns a new function which applies `f` to each element of the\n * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the\n * results into a single array (like [`flatten`](#flatten)).\n *\n * This is the `chain` component of the array `Monad`.\n *\n * @example\n * import { chain, map, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => replicate(n, `${n}`);\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [[\"1\"], [\"2\", \"2\"], [\"3\", \"3\", \"3\"]]);\n * assert.deepStrictEqual(pipe([1, 2, 3], chain(f)), [\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chain = function (f) {\n  return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) {\n      return f(a);\n    }));\n  };\n};\n/**\n * Takes an array of arrays of `A` and flattens them into an array of `A`\n * by concatenating the elements of each array in order.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[\"a\"], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]]), [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * Same as [`map`](#map), but the iterating function takes both the index and the value\n * of the element.\n *\n * @example\n * import { mapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (i: number, s: string) => `${s} - ${i}`;\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], mapWithIndex(f)), [\"a - 0\", \"b - 1\", \"c - 2\"]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) {\n  return function (fa) {\n    return fa.map(function (a, i) {\n      return f(i, a);\n    });\n  };\n};\n/**\n * Maps an array with an iterating function that takes the index and the value of\n * each element and returns an `Option`. It keeps only the `Some` values discarding\n * the `None`s.\n *\n * Same as [`filterMap`](#filterMap), but with an iterating function which takes also\n * the index as input.\n *\n * @example\n * import { filterMapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMapWithIndex(f)), [\"NO\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMapWithIndex = function (f) {\n  return function (fa) {\n    var out = [];\n    for (var i = 0; i < fa.length; i++) {\n      var optionB = f(i, fa[i]);\n      if (_.isSome(optionB)) {\n        out.push(optionB.value);\n      }\n    }\n    return out;\n  };\n};\n/**\n * Maps an array with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMap(f)), [\"A\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) {\n  return filterMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Compact an array of `Option`s discarding the `None` values and\n * keeping the `Some` values. It returns a new array containing the values of\n * the `Some` options.\n *\n * @example\n * import { compact } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n *\n * assert.deepStrictEqual(compact([option.some(\"a\"), option.none, option.some(\"b\")]), [\"a\", \"b\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/filterMap(identity);\n/**\n * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:\n * one containing all the left values and one containing all the right values.\n *\n * @example\n * import { separate } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n *\n * assert.deepStrictEqual(separate([either.right(\"r1\"), either.left(\"l1\"), either.right(\"r2\")]), {\n *   left: [\"l1\"],\n *   right: [\"r1\", \"r2\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n  var left = [];\n  var right = [];\n  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n    var e = fa_1[_i];\n    if (e._tag === 'Left') {\n      left.push(e.left);\n    } else {\n      right.push(e.right);\n    }\n  }\n  return separated(left, right);\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `filter` creates a new `Array` containing the elements of the original\n * `Array` for which the iterating function is `true`.\n *\n * @example\n * import { filter } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(filter(isString)([\"a\", 1, {}, \"b\", 5]), [\"a\", \"b\"]);\n * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n  return function (as) {\n    return as.filter(predicate);\n  };\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `partition` creates two new `Array`s: `right` containing the elements of the original\n * `Array` for which the iterating function is `true`, `left` containing the elements\n * for which it is false.\n *\n * @example\n * import { partition } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(partition(isString)([\"a\", 1, {}, \"b\", 5]), { left: [1, {}, 5], right: [\"a\", \"b\"] });\n * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n  return partitionWithIndex(function (_, a) {\n    return predicate(a);\n  });\n};\n/**\n * Same as [`partition`](#partition), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionWithIndex } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {\n *   left: [-2, 7],\n *   right: [5, 6],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) {\n  return function (as) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < as.length; i++) {\n      var b = as[i];\n      if (predicateWithIndex(i, b)) {\n        right.push(b);\n      } else {\n        left.push(b);\n      }\n    }\n    return separated(left, right);\n  };\n};\n/**\n * Given an iterating function that returns an `Either`,\n * `partitionMap` applies the iterating function to each element and it creates two `Array`s:\n * `right` containing the values of `Right` results, `left` containing the values of `Left` results.\n *\n * @example\n * import { partitionMap } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfString = <B>(x: B): Either<B, string> =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMap(upperIfString)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7],\n *   right: [ 'HELLO', 'WORLD' ],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) {\n  return partitionMapWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionMapWithIndex } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>\n *   index < 3 && typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7, \"world\"],\n *   right: [\"HELLO\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMapWithIndex = function (f) {\n  return function (fa) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < fa.length; i++) {\n      var e = f(i, fa[i]);\n      if (e._tag === 'Left') {\n        left.push(e.left);\n      } else {\n        right.push(e.right);\n      }\n    }\n    return separated(left, right);\n  };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n  return function (fa) {\n    return fa.concat(that());\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Array` concatenates the inputs into a single array.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * Same as [`filter`](#filter), but passing also the index to the iterating function.\n *\n * @example\n * import { filterWithIndex } from 'fp-ts/Array';\n *\n * const f = (index: number, x: number) => x > 0 && index <= 2;\n * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterWithIndex = function (predicateWithIndex) {\n  return function (as) {\n    return as.filter(function (b, i) {\n      return predicateWithIndex(i, b);\n    });\n  };\n};\n/**\n * Given an iterating function that takes `Array<A>` as input, `extend` returns\n * an array containing the results of the iterating function applied to the whole input\n * `Array`, then to the input `Array` without the first element, then to the input\n * `Array` without the first two elements, etc.\n *\n * @example\n * import { extend } from 'fp-ts/Array'\n *\n * const f = (a: string[]) => a.join(\",\");\n * assert.deepStrictEqual(extend(f)([\"a\", \"b\", \"c\"]), [\"a,b,c\", \"b,c\", \"c\"]);\n *\n * @since 2.0.0\n */\nexport var extend = function (f) {\n  return function (wa) {\n    return wa.map(function (_, i) {\n      return f(wa.slice(i));\n    });\n  };\n};\n/**\n * `duplicate` returns an array containing the whole input `Array`,\n * then to the input `Array` dropping the first element, then to the input\n * `Array` dropping the first two elements, etc.\n *\n * @example\n * import { duplicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(duplicate([\"a\", \"b\", \"c\"]), [[\"a\", \"b\", \"c\"], [\"b\", \"c\"], [\"c\"]]);\n *\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Map and fold an `Array`.\n * Map the `Array` passing each value to the iterating function.\n * Then fold the results using the provided `Monoid`.\n *\n * @example\n * import { foldMap } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (s: string) => s.toUpperCase()\n * assert.deepStrictEqual(foldMap(monoid)(f)([\"a\", \"b\", \"c\"]), \"ABC\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RA.foldMap;\n/**\n * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.\n *\n * @example\n * import { foldMapWithIndex } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`\n * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)([\"a\", \"b\", \"c\"]), \"A(0)B(1)C(2)\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * Reduces an `Array`.\n *\n * `reduce` executes the supplied iterating function on each element of the array,\n * in order, passing in the element and the return value from the calculation on the preceding element.\n *\n * The first time that the iterating function is called there is no \"return value of the\n * previous calculation\", the initial value is used in its place.\n *\n * @example\n * import { reduce } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RA.reduce;\n/**\n * Same as [`reduce`](#reduce) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, acc: string, cur: unknown) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"A1B2\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceWithIndex = RA.reduceWithIndex;\n/**\n * Same as [`reduce`](#reduce) but applied from the end to the start.\n *\n * *Note*: the iterating function in this case takes the accumulator as the last argument.\n *\n * @example\n * import { reduceRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduceRight(\"\", (cur: string, acc: string) => acc + cur)([\"a\", \"b\", \"c\"]), \"cba\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = RA.reduceRight;\n/**\n * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceRightWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, cur: unknown, acc: string) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceRightWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"B2A1\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`\n * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s\n * the results using the provided `Applicative`.\n *\n * E.g. suppose you have an `Array` and you want to format each element with a function\n * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`\n * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`\n * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results\n * are `Error`s.\n *\n * @example\n * import { traverse } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (x: unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", \"b\"]), right([\"A\", \"B\"]));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n  var traverseWithIndexF = traverseWithIndex(F);\n  return function (f) {\n    return traverseWithIndexF(function (_, a) {\n      return f(a);\n    });\n  };\n};\n/**\n * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,\n * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.\n * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.\n *\n * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an\n * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an\n * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,\n * it needs an `Applicative` for `Option`.\n *\n * @example\n * import { sequence } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * assert.deepStrictEqual(sequence(Applicative)([right(\"a\"), right(\"b\")]), right([\"a\", \"b\"]));\n * assert.deepStrictEqual(\n *   sequence(Applicative)([right(\"a\"), left(new Error(\"not a string\"))]),\n *   left(new Error(\"not a string\"))\n * );\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n  return function (ta) {\n    return _reduce(ta, F.of(zero()), function (fas, fa) {\n      return F.ap(F.map(fas, function (as) {\n        return function (a) {\n          return pipe(as, append(a));\n        };\n      }), fa);\n    });\n  };\n};\n/**\n * Same as [`traverse`](#traverse) but passing also the index to the iterating function.\n *\n * @example\n * import { traverseWithIndex } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (index:number, x:unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase() + index) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", \"b\"]), right([\"A0\", \"B1\"]));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n  return function (f) {\n    return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n      return F.ap(F.map(fbs, function (bs) {\n        return function (b) {\n          return pipe(bs, append(b));\n        };\n      }), f(i, a));\n    });\n  };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n  var _witherF = _wither(F);\n  return function (f) {\n    return function (fa) {\n      return _witherF(fa, f);\n    };\n  };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n  var _wiltF = _wilt(F);\n  return function (f) {\n    return function (fa) {\n      return _wiltF(fa, f);\n    };\n  };\n};\n/**\n * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome\n * value and an input for the following iteration.\n * `unfold` applies `f` to the initial value `b` and then recursively to the second\n * element of the tuple contained in the returned `option` of the previous\n * calculation until `f` returns `Option.none`.\n *\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { option } from 'fp-ts'\n *\n * const f = (n: number) => {\n *   if (n <= 0) return option.none;\n *   const returnValue = n * 2;\n *   const inputForNextRound = n - 1;\n *   return option.some([returnValue, inputForNextRound] as const);\n * };\n * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);\n *\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n  var out = [];\n  var bb = b;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var mt = f(bb);\n    if (_.isSome(mt)) {\n      var _a = mt.value,\n        a = _a[0],\n        b_1 = _a[1];\n      out.push(a);\n      bb = b_1;\n    } else {\n      break;\n    }\n  }\n  return out;\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Array';\n/**\n * `getShow` makes a `Show` for an `Array<A>` from a `Show` for\n * an `A`.\n *\n * @example\n * import { getShow } from 'fp-ts/Array'\n *\n * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };\n * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), \"[(2), (1), 0, 1]\");\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RA.getShow;\n/**\n * Get a `Semigroup` based on the concatenation of `Array`s.\n * See also [`getMonoid`](#getMonoid).\n *\n * @example\n * import { getSemigroup } from 'fp-ts/Array'\n *\n * const S = getSemigroup<number>();\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function () {\n  return {\n    concat: function (first, second) {\n      return first.concat(second);\n    }\n  };\n};\n/**\n * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function () {\n  return {\n    concat: getSemigroup().concat,\n    empty: []\n  };\n};\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = RA.getOrd;\n/**\n * Get a `Semigroup` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n * See also [`getUnionMonoid`](#getUnionMonoid).\n *\n * @example\n * import { getUnionSemigroup } from 'fp-ts/Array';\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getUnionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n  var unionE = union(E);\n  return {\n    concat: function (first, second) {\n      return unionE(second)(first);\n    }\n  };\n};\n/**\n * Get a `Monoid` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n *\n * @example\n * import { getUnionMonoid } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const M = getUnionMonoid<number>(Eq);\n * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(M.empty,[]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) {\n  return {\n    concat: getUnionSemigroup(E).concat,\n    empty: []\n  };\n};\n/**\n * Get a `Semigroup` based on the intersection of the elements of `Array`s.\n * Only elements present in the two arrays which are equal according to the\n * provided `Eq` are included in the result.\n *\n * @example\n * import { getIntersectionSemigroup } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getIntersectionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n  var intersectionE = intersection(E);\n  return {\n    concat: function (first, second) {\n      return intersectionE(second)(first);\n    }\n  };\n};\n/**\n * Get a `Magma` for `Array` where the `concat` function is the differnce between\n * the first and the second array, i.e. the result contains all the elements of the\n * first array for which their is no equal element in the second array according\n * to the `Eq` provided.\n *\n *\n * @example\n * import { getDifferenceMagma } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getDifferenceMagma<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n  var differenceE = difference(E);\n  return {\n    concat: function (first, second) {\n      return differenceE(second)(first);\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Given an input an `Array` of functions, `flap` returns an `Array` containing\n * the results of applying each function to the given input.\n *\n * @example\n * import { flap } from 'fp-ts/Array'\n *\n * const funs = [\n *   (n: number) => `Double: ${n * 2}`,\n *   (n: number) => `Triple: ${n * 3}`,\n *   (n: number) => `Square: ${n * n}`,\n * ];\n * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n  URI: URI,\n  unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n  URI: URI,\n  zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  alt: _alt,\n  zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n  URI: URI,\n  map: _map,\n  extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n  URI: URI,\n  compact: compact,\n  separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n  URI: URI,\n  map: _map,\n  mapWithIndex: _mapWithIndex,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverse: _traverse,\n  sequence: sequence,\n  traverseWithIndex: _traverseWithIndex\n};\nvar _wither = /*#__PURE__*/witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n  URI: URI,\n  map: _map,\n  compact: compact,\n  separate: separate,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  wither: _wither,\n  wilt: _wilt\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\nexport var filterE = /*#__PURE__*/filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n  URI: URI,\n  fromEither: fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n  return isNonEmpty(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n  var xs = as.slice();\n  xs.splice(i, 1);\n  return xs;\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * `every` tells if the provided predicate holds true for every element in the `Array`.\n *\n * @example\n * import { every } from 'fp-ts/Array'\n *\n * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var every = RA.every;\n/**\n * `some` tells if the provided predicate holds true at least for one element in the `Array`.\n *\n * @example\n * import { some } from 'fp-ts/Array'\n *\n * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var some = function (predicate) {\n  return function (as) {\n    return as.some(predicate);\n  };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n/**\n * Places an element in between members of an `Array`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = RA.intercalate;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\nvar let_ = /*#__PURE__*/let__(Functor);\nexport {\n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/apS_(Apply);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `A.Functor` instead of `A.array`\n * (where `A` is from `import A from 'fp-ts/Array'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var array = {\n  URI: URI,\n  compact: compact,\n  separate: separate,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain,\n  filter: _filter,\n  filterMap: _filterMap,\n  partition: _partition,\n  partitionMap: _partitionMap,\n  mapWithIndex: _mapWithIndex,\n  partitionMapWithIndex: _partitionMapWithIndex,\n  partitionWithIndex: _partitionWithIndex,\n  filterMapWithIndex: _filterMapWithIndex,\n  filterWithIndex: _filterWithIndex,\n  alt: _alt,\n  zero: zero,\n  unfold: unfold,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  reduceWithIndex: _reduceWithIndex,\n  foldMapWithIndex: _foldMapWithIndex,\n  reduceRightWithIndex: _reduceRightWithIndex,\n  traverseWithIndex: _traverseWithIndex,\n  extend: _extend,\n  wither: _wither,\n  wilt: _wilt\n};","map":{"version":3,"names":["apFirst","apFirst_","apS","apS_","apSecond","apSecond_","bind","bind_","chainFirst","chainFirst_","fromEitherK","fromEitherK_","identity","pipe","let","let__","bindTo","bindTo_","flap","flap_","_","NEA","RA","separated","filterE","filterE_","wiltDefault","witherDefault","guard","guard_","isEmpty","as","length","isNonEmpty","prepend","prependW","append","appendW","makeBy","n","f","replicate","a","fromPredicate","predicate","fromOption","ma","isNone","value","fromEither","e","isLeft","right","matchW","onEmpty","onNonEmpty","match","matchLeftW","head","tail","matchLeft","foldLeft","matchRightW","init","last","matchRight","foldRight","chainWithIndex","out","i","push","apply","scanLeft","b","len","Array","scanRight","size","isOutOfBound","lookup","some","none","takeLeft","copy","slice","takeRight","takeLeftWhile","_i","as_1","spanLeftIndex","l","spanLeft","_a","splitAt","rest","dropLeft","dropRight","dropLeftWhile","findIndex","findFirst","findFirstMap","findLast","findLastMap","findLastIndex","insertAt","unsafeInsertAt","updateAt","modifyAt","deleteAt","unsafeDeleteAt","unsafeUpdateAt","reverse","rights","r","_tag","lefts","left","sort","O","compare","zipWith","fa","fb","fc","Math","min","zip","bs","undefined","unzip","prependAll","middle","intersperse","rotate","elem","uniq","E","sortBy","ords","chop","g","chunksOf","fromOptionK","arguments","comprehension","input","go","scope","chain","x","concatW","second","first","concat","union","unionE","unionE_1","intersection","elemE","xs","ys","intersectionE_1","filter","difference","differenceE_1","_map","map","_mapWithIndex","mapWithIndex","_ap","fab","ap","_chain","_filter","_filterMap","filterMap","_partition","partition","_partitionMap","partitionMap","_partitionWithIndex","predicateWithIndex","partitionWithIndex","_partitionMapWithIndex","partitionMapWithIndex","_alt","that","alt","_reduce","reduce","_foldMap","M","foldMapM","foldMap","_reduceRight","reduceRight","_reduceWithIndex","reduceWithIndex","_foldMapWithIndex","foldMapWithIndexM","foldMapWithIndex","_reduceRightWithIndex","reduceRightWithIndex","_filterMapWithIndex","filterMapWithIndex","_filterWithIndex","filterWithIndex","_extend","extend","_traverse","F","traverseF","traverse","ta","_traverseWithIndex","traverseWithIndexF","traverseWithIndex","_chainRecDepthFirst","_chainRecBreadthFirst","of","zero","flatten","optionB","isSome","compact","separate","fa_1","altW","wa","duplicate","sequence","fas","fbs","wither","_witherF","_wither","wilt","_wiltF","_wilt","unfold","bb","mt","b_1","URI","getShow","getSemigroup","getMonoid","empty","getEq","getOrd","getUnionSemigroup","getUnionMonoid","getIntersectionSemigroup","intersectionE","getDifferenceMagma","differenceE","Functor","Pointed","FunctorWithIndex","Apply","Applicative","Chain","Monad","Unfoldable","Alt","Zero","Alternative","Extend","Compactable","Filterable","FilterableWithIndex","Foldable","FoldableWithIndex","Traversable","TraversableWithIndex","Witherable","chainRecDepthFirst","ChainRecDepthFirst","chainRec","chainRecBreadthFirst","ChainRecBreadthFirst","FromEither","splice","every","exists","intercalate","Do","emptyRecord","let_","range","cons","snoc","prependToAll","array"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/fp-ts/es6/Array.js"],"sourcesContent":["import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { let as let__, bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as NEA from './NonEmptyArray';\nimport * as RA from './ReadonlyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n * assert.strictEqual(isEmpty(['a']), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isEmpty = function (as) { return as.length === 0; };\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @example\n * import { isNonEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isNonEmpty([]), false)\n * assert.strictEqual(isNonEmpty(['a']), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNonEmpty = NEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @example\n * import { prependW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prependW(\"a\")), [\"a\", 2, 3, 4]);\n *\n * @since 2.11.0\n */\nexport var prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexport var append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @example\n * import { appendW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], appendW(\"d\")), [1, 2, 3, \"d\"]);\n *\n * @since 2.11.0\n */\nexport var appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (i: number): number => i * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n * assert.deepStrictEqual(makeBy(-3, double), [])\n * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var makeBy = function (n, f) { return (n <= 0 ? [] : NEA.makeBy(f)(n)); };\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n * assert.deepStrictEqual(replicate(-3, 'a'), [])\n * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var replicate = function (n, a) { return makeBy(n, function () { return a; }); };\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : []); };\n}\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * Create an array from an `Option`. The resulting array will contain the content of the\n * `Option` if it is `Some` and it will be empty if the `Option` is `None`.\n *\n * @example\n * import { fromOption } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(option.some(\"a\"), fromOption),[\"a\"])\n * assert.deepStrictEqual(pipe(option.none, fromOption),[])\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromOption = function (ma) { return (_.isNone(ma) ? [] : [ma.value]); };\n/**\n * Create an array from an `Either`. The resulting array will contain the content of the\n * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.\n *\n * @example\n * import { fromEither } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(either.right(\"r\"), fromEither), [\"r\"]);\n * assert.deepStrictEqual(pipe(either.left(\"l\"), fromEither), []);\n *\n * @category conversions\n * @since 2.11.0\n */\nexport var fromEither = function (e) { return (_.isLeft(e) ? [] : [e.right]); };\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @example\n * import { matchW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcherW = matchW(\n *   () => \"No elements\",\n *   (as) => as.length\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);\n * assert.deepStrictEqual(pipe([], matcherW), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` and returns the result.\n *\n * @example\n * import { match } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcher = match(\n *   () => \"No elements\",\n *   (as) => `Found ${as.length} element(s)`\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), \"Found 4 element(s)\");\n * assert.deepStrictEqual(pipe([], matcher), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchLeftW } from 'fp-ts/Array'\n *\n * const f = matchLeftW(\n *   () => 0,\n *   (head: string, tail: string[]) => `Found \"${head}\" followed by ${tail.length} elements`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found \"a\" followed by 2 elements');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchRightW } from 'fp-ts/Array'\n *\n * const f = matchRightW(\n *   () => 0,\n *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by \"${tail}\"`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found 2 elements folllowed by \"c\"');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return isNonEmpty(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty();\n    };\n};\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.\n *\n * @example\n * import { matchRight } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchRight(\n *   () => 0,\n *   (head, _) => 1 + len(head)\n * );\n * assert.strictEqual(len([1, 2, 3]), 3);\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Same as [`chain`](#chain), but passing also the index to the iterating function.\n *\n * @example\n * import { chainWithIndex, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (index: number, x: string) => replicate(2, `${x}${index}`);\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], chainWithIndex(f)), [\"a0\", \"a0\", \"b1\", \"b1\", \"c2\", \"c2\"]);\n *\n * @category sequencing\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) {\n    return function (as) {\n        var out = [];\n        for (var i = 0; i < as.length; i++) {\n            out.push.apply(out, f(i, as[i]));\n        }\n        return out;\n    };\n};\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.0.0\n */\nexport var scanLeft = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[0] = b;\n        for (var i = 0; i < len; i++) {\n            out[i + 1] = f(out[i], as[i]);\n        }\n        return out;\n    };\n};\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.0.0\n */\nexport var scanRight = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[len] = b;\n        for (var i = len - 1; i >= 0; i--) {\n            out[i] = f(as[i], out[i + 1]);\n        }\n        return out;\n    };\n};\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @example\n * import { size } from 'fp-ts/Array'\n *\n * assert.strictEqual(size([\"a\",\"b\",\"c\"]),3)\n *\n * @since 2.10.0\n */\nexport var size = function (as) { return as.length; };\n/**\n * Test whether an array contains a particular index\n *\n * @example\n * import { isOutOfBound } from 'fp-ts/Array'\n *\n * assert.strictEqual(isOutOfBound(1,[\"a\",\"b\",\"c\"]),false)\n * assert.strictEqual(isOutOfBound(-1,[\"a\",\"b\",\"c\"]),true)\n * assert.strictEqual(isOutOfBound(3,[\"a\",\"b\",\"c\"]),true)\n *\n * @since 2.0.0\n */\nexport var isOutOfBound = NEA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array.\n * It returns a `none` if the index is out of bounds, and a `some` of the element if the\n * index is valid.\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexport var lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.0.0\n */\nexport var head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.0.0\n */\nexport var last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.0.0\n */\nexport var tail = function (as) { return (isNonEmpty(as) ? _.some(NEA.tail(as)) : _.none); };\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.0.0\n */\nexport var init = function (as) { return (isNonEmpty(as) ? _.some(NEA.init(as)) : _.none); };\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);\n * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeLeft = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? copy(as) : as.slice(0, n);\n    };\n};\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);\n * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nexport var takeRight = function (n) {\n    return function (as) {\n        return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);\n    };\n};\nexport function takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        return out;\n    };\n}\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nexport function spanLeft(predicate) {\n    return function (as) {\n        var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);\n * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropLeft = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);\n    };\n};\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);\n * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nexport var dropRight = function (n) {\n    return function (as) {\n        return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n    };\n};\nexport function dropLeftWhile(predicate) {\n    return function (as) { return as.slice(spanLeftIndex(as, predicate)); };\n}\n/**\n * `findIndex` returns an `Option` containing the first index for which a predicate holds.\n * It returns `None` if no element satisfies the predicate.\n * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexport var findIndex = RA.findIndex;\nexport function findFirst(predicate) {\n    return RA.findFirst(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array and\n * returns the first `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some(\"Mary\"));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findFirstMap = RA.findFirstMap;\nexport function findLast(predicate) {\n    return RA.findLast(predicate);\n}\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array starting from the\n * end and returns the last `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some(\"Joey\"));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexport var findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate.\n * It returns an `Option` containing the index or `None` if not found.\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n * @since 2.0.0\n */\nexport var findLastIndex = RA.findLastIndex;\n/**\n * This function takes an array and makes a new array containing the same elements.\n *\n * @since 2.0.0\n */\nexport var copy = function (as) { return as.slice(); };\n/**\n * Insert an element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n    };\n};\n/**\n * Change the element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) { return modifyAt(i, function () { return a; }); };\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nexport var deleteAt = function (i) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n    };\n};\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds.\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) {\n    return function (as) {\n        return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n    };\n};\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.0.0\n */\nexport var reverse = function (as) { return (isEmpty(as) ? [] : as.slice().reverse()); };\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Right` elements in the same order.\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Left` elements in the same order.\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.0.0\n */\nexport var lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var sort = function (O) {\n    return function (as) {\n        return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);\n    };\n};\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.0.0\n */\nexport var zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport var unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Creates a new `Array`, prepending an element to every member of the input `Array`.\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    var f = NEA.prependAll(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * Creates a new `Array` placing an element in between members of the input `Array`.\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    var f = NEA.intersperse(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Creates a new `Array` rotating the input `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.0.0\n */\nexport var rotate = function (n) {\n    var f = NEA.rotate(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\nexport var elem = RA.elem;\n/**\n * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,\n * based on a `Eq<A>`.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.0.0\n */\nexport var uniq = function (E) {\n    var f = NEA.uniq(E);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.0.0\n */\nexport var sortBy = function (ords) {\n    var f = NEA.sortBy(ords);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.0.0\n */\nexport var chop = function (f) {\n    var g = NEA.chop(f);\n    return function (as) { return (isNonEmpty(as) ? g(as) : []); };\n};\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\nexport var splitAt = function (n) {\n    return function (as) {\n        return n >= 1 && isNonEmpty(as) ? NEA.splitAt(n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];\n    };\n};\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\nexport var chunksOf = function (n) {\n    var f = NEA.chunksOf(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromOption(f.apply(void 0, a));\n    };\n};\nexport function comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return isNonEmpty(input)\n            ? pipe(NEA.head(input), chain(function (x) { return go(pipe(scope, append(x)), NEA.tail(input)); }))\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : [];\n    };\n    return go([], input);\n}\n/**\n * @since 2.11.0\n */\nexport var concatW = function (second) {\n    return function (first) {\n        return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);\n    };\n};\n/**\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n    var unionE = NEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return isNonEmpty(first) && isNonEmpty(second)\n            ? unionE(second)(first)\n            : isNonEmpty(first)\n                ? copy(first)\n                : copy(second);\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/* istanbul ignore next */\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _extend = function (fa, f) { return pipe(fa, extend(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst;\n/**\n * Given an element of the base type, `of` builds an `Array` containing just that\n * element of the base type (this is useful for building a `Monad`).\n *\n * @example\n * import { of } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(of(\"a\"), [\"a\"]);\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var of = NEA.of;\n/**\n * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)\n *\n * @since 2.7.0\n */\nexport var zero = function () { return []; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.\n * In practice it applies the base function to each element of the array and collects the\n * results in a new array.\n *\n * @example\n * import { map } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => n * 2;\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return fa.map(function (a) { return f(a); }); }; };\n/**\n * @example\n * import { ap, map, of } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * // a curried function with 3 input parameteres\n * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;\n *\n * // let's use `ap` to iterate `f` over an array for each input parameter\n * assert.deepStrictEqual(pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])), [\n *   \"a1😀\", \"a1😫\", \"a1😎\",\n *   \"a2😀\", \"a2😫\", \"a2😎\",\n *   \"b1😀\", \"b1😫\", \"b1😎\",\n *   \"b2😀\", \"b2😫\", \"b2😎\",\n * ]);\n *\n * // given Array implements the Applicative interface with the `of` method,\n * // we can write exactly the same thing in a more symmetric way\n * // using `of` on `f` and `ap` on each array in input\n * assert.deepStrictEqual(\n *   pipe(of(f), ap([\"a\", \"b\"]), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])),\n *   pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"]))\n * );\n *\n * @since 2.0.0\n */\nexport var ap = function (fa) { return chain(function (f) { return pipe(fa, map(f)); }); };\n/**\n * Composes computations in sequence, using the return value of one computation to\n * determine the next computation.\n *\n * In other words it takes a function `f` that produces an array from a single element of\n * the base type `A` and returns a new function which applies `f` to each element of the\n * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the\n * results into a single array (like [`flatten`](#flatten)).\n *\n * This is the `chain` component of the array `Monad`.\n *\n * @example\n * import { chain, map, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => replicate(n, `${n}`);\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [[\"1\"], [\"2\", \"2\"], [\"3\", \"3\", \"3\"]]);\n * assert.deepStrictEqual(pipe([1, 2, 3], chain(f)), [\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chain = function (f) { return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) { return f(a); }));\n}; };\n/**\n * Takes an array of arrays of `A` and flattens them into an array of `A`\n * by concatenating the elements of each array in order.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[\"a\"], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]]), [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n *\n * @category sequencing\n * @since 2.5.0\n */\nexport var flatten = /*#__PURE__*/ chain(identity);\n/**\n * Same as [`map`](#map), but the iterating function takes both the index and the value\n * of the element.\n *\n * @example\n * import { mapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (i: number, s: string) => `${s} - ${i}`;\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], mapWithIndex(f)), [\"a - 0\", \"b - 1\", \"c - 2\"]);\n *\n * @category mapping\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\n/**\n * Maps an array with an iterating function that takes the index and the value of\n * each element and returns an `Option`. It keeps only the `Some` values discarding\n * the `None`s.\n *\n * Same as [`filterMap`](#filterMap), but with an iterating function which takes also\n * the index as input.\n *\n * @example\n * import { filterMapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMapWithIndex(f)), [\"NO\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMapWithIndex = function (f) {\n    return function (fa) {\n        var out = [];\n        for (var i = 0; i < fa.length; i++) {\n            var optionB = f(i, fa[i]);\n            if (_.isSome(optionB)) {\n                out.push(optionB.value);\n            }\n        }\n        return out;\n    };\n};\n/**\n * Maps an array with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMap(f)), [\"A\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterMap = function (f) {\n    return filterMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * Compact an array of `Option`s discarding the `None` values and\n * keeping the `Some` values. It returns a new array containing the values of\n * the `Some` options.\n *\n * @example\n * import { compact } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n *\n * assert.deepStrictEqual(compact([option.some(\"a\"), option.none, option.some(\"b\")]), [\"a\", \"b\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var compact = /*#__PURE__*/ filterMap(identity);\n/**\n * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:\n * one containing all the left values and one containing all the right values.\n *\n * @example\n * import { separate } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n *\n * assert.deepStrictEqual(separate([either.right(\"r1\"), either.left(\"l1\"), either.right(\"r2\")]), {\n *   left: [\"l1\"],\n *   right: [\"r1\", \"r2\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `filter` creates a new `Array` containing the elements of the original\n * `Array` for which the iterating function is `true`.\n *\n * @example\n * import { filter } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(filter(isString)([\"a\", 1, {}, \"b\", 5]), [\"a\", \"b\"]);\n * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filter = function (predicate) {\n    return function (as) {\n        return as.filter(predicate);\n    };\n};\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `partition` creates two new `Array`s: `right` containing the elements of the original\n * `Array` for which the iterating function is `true`, `left` containing the elements\n * for which it is false.\n *\n * @example\n * import { partition } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(partition(isString)([\"a\", 1, {}, \"b\", 5]), { left: [1, {}, 5], right: [\"a\", \"b\"] });\n * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * Same as [`partition`](#partition), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionWithIndex } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {\n *   left: [-2, 7],\n *   right: [5, 6],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < as.length; i++) {\n            var b = as[i];\n            if (predicateWithIndex(i, b)) {\n                right.push(b);\n            }\n            else {\n                left.push(b);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * Given an iterating function that returns an `Either`,\n * `partitionMap` applies the iterating function to each element and it creates two `Array`s:\n * `right` containing the values of `Right` results, `left` containing the values of `Left` results.\n *\n * @example\n * import { partitionMap } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfString = <B>(x: B): Either<B, string> =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMap(upperIfString)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7],\n *   right: [ 'HELLO', 'WORLD' ],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return partitionMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionMapWithIndex } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>\n *   index < 3 && typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7, \"world\"],\n *   right: [\"HELLO\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < fa.length; i++) {\n            var e = f(i, fa[i]);\n            if (e._tag === 'Left') {\n                left.push(e.left);\n            }\n            else {\n                right.push(e.right);\n            }\n        }\n        return separated(left, right);\n    };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nexport var altW = function (that) {\n    return function (fa) {\n        return fa.concat(that());\n    };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Array` concatenates the inputs into a single array.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * Same as [`filter`](#filter), but passing also the index to the iterating function.\n *\n * @example\n * import { filterWithIndex } from 'fp-ts/Array';\n *\n * const f = (index: number, x: number) => x > 0 && index <= 2;\n * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport var filterWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        return as.filter(function (b, i) { return predicateWithIndex(i, b); });\n    };\n};\n/**\n * Given an iterating function that takes `Array<A>` as input, `extend` returns\n * an array containing the results of the iterating function applied to the whole input\n * `Array`, then to the input `Array` without the first element, then to the input\n * `Array` without the first two elements, etc.\n *\n * @example\n * import { extend } from 'fp-ts/Array'\n *\n * const f = (a: string[]) => a.join(\",\");\n * assert.deepStrictEqual(extend(f)([\"a\", \"b\", \"c\"]), [\"a,b,c\", \"b,c\", \"c\"]);\n *\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\n/**\n * `duplicate` returns an array containing the whole input `Array`,\n * then to the input `Array` dropping the first element, then to the input\n * `Array` dropping the first two elements, etc.\n *\n * @example\n * import { duplicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(duplicate([\"a\", \"b\", \"c\"]), [[\"a\", \"b\", \"c\"], [\"b\", \"c\"], [\"c\"]]);\n *\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/ extend(identity);\n/**\n * Map and fold an `Array`.\n * Map the `Array` passing each value to the iterating function.\n * Then fold the results using the provided `Monoid`.\n *\n * @example\n * import { foldMap } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (s: string) => s.toUpperCase()\n * assert.deepStrictEqual(foldMap(monoid)(f)([\"a\", \"b\", \"c\"]), \"ABC\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMap = RA.foldMap;\n/**\n * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.\n *\n * @example\n * import { foldMapWithIndex } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`\n * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)([\"a\", \"b\", \"c\"]), \"A(0)B(1)C(2)\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * Reduces an `Array`.\n *\n * `reduce` executes the supplied iterating function on each element of the array,\n * in order, passing in the element and the return value from the calculation on the preceding element.\n *\n * The first time that the iterating function is called there is no \"return value of the\n * previous calculation\", the initial value is used in its place.\n *\n * @example\n * import { reduce } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduce = RA.reduce;\n/**\n * Same as [`reduce`](#reduce) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, acc: string, cur: unknown) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"A1B2\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceWithIndex = RA.reduceWithIndex;\n/**\n * Same as [`reduce`](#reduce) but applied from the end to the start.\n *\n * *Note*: the iterating function in this case takes the accumulator as the last argument.\n *\n * @example\n * import { reduceRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduceRight(\"\", (cur: string, acc: string) => acc + cur)([\"a\", \"b\", \"c\"]), \"cba\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRight = RA.reduceRight;\n/**\n * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceRightWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, cur: unknown, acc: string) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceRightWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"B2A1\");\n *\n * @category folding\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`\n * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s\n * the results using the provided `Applicative`.\n *\n * E.g. suppose you have an `Array` and you want to format each element with a function\n * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`\n * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`\n * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results\n * are `Error`s.\n *\n * @example\n * import { traverse } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (x: unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", \"b\"]), right([\"A\", \"B\"]));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,\n * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.\n * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.\n *\n * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an\n * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an\n * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,\n * it needs an `Applicative` for `Option`.\n *\n * @example\n * import { sequence } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * assert.deepStrictEqual(sequence(Applicative)([right(\"a\"), right(\"b\")]), right([\"a\", \"b\"]));\n * assert.deepStrictEqual(\n *   sequence(Applicative)([right(\"a\"), left(new Error(\"not a string\"))]),\n *   left(new Error(\"not a string\"))\n * );\n *\n * @category traversing\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n    return function (ta) {\n        return _reduce(ta, F.of(zero()), function (fas, fa) {\n            return F.ap(F.map(fas, function (as) { return function (a) { return pipe(as, append(a)); }; }), fa);\n        });\n    };\n};\n/**\n * Same as [`traverse`](#traverse) but passing also the index to the iterating function.\n *\n * @example\n * import { traverseWithIndex } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (index:number, x:unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase() + index) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", \"b\"]), right([\"A0\", \"B1\"]));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category sequencing\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) {\n    return function (f) {\n        return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n            return F.ap(F.map(fbs, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, a));\n        });\n    };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category filtering\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome\n * value and an input for the following iteration.\n * `unfold` applies `f` to the initial value `b` and then recursively to the second\n * element of the tuple contained in the returned `option` of the previous\n * calculation until `f` returns `Option.none`.\n *\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { option } from 'fp-ts'\n *\n * const f = (n: number) => {\n *   if (n <= 0) return option.none;\n *   const returnValue = n * 2;\n *   const inputForNextRound = n - 1;\n *   return option.some([returnValue, inputForNextRound] as const);\n * };\n * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);\n *\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport var URI = 'Array';\n/**\n * `getShow` makes a `Show` for an `Array<A>` from a `Show` for\n * an `A`.\n *\n * @example\n * import { getShow } from 'fp-ts/Array'\n *\n * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };\n * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), \"[(2), (1), 0, 1]\");\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RA.getShow;\n/**\n * Get a `Semigroup` based on the concatenation of `Array`s.\n * See also [`getMonoid`](#getMonoid).\n *\n * @example\n * import { getSemigroup } from 'fp-ts/Array'\n *\n * const S = getSemigroup<number>();\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return first.concat(second); }\n}); };\n/**\n * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: []\n}); };\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = RA.getOrd;\n/**\n * Get a `Semigroup` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n * See also [`getUnionMonoid`](#getUnionMonoid).\n *\n * @example\n * import { getUnionSemigroup } from 'fp-ts/Array';\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getUnionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * Get a `Monoid` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n *\n * @example\n * import { getUnionMonoid } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const M = getUnionMonoid<number>(Eq);\n * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(M.empty,[]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: []\n}); };\n/**\n * Get a `Semigroup` based on the intersection of the elements of `Array`s.\n * Only elements present in the two arrays which are equal according to the\n * provided `Eq` are included in the result.\n *\n * @example\n * import { getIntersectionSemigroup } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getIntersectionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\n/**\n * Get a `Magma` for `Array` where the `concat` function is the differnce between\n * the first and the second array, i.e. the result contains all the elements of the\n * first array for which their is no equal element in the second array according\n * to the `Eq` provided.\n *\n *\n * @example\n * import { getDifferenceMagma } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getDifferenceMagma<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);\n *\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Given an input an `Array` of functions, `flap` returns an `Array` containing\n * the results of applying each function to the given input.\n *\n * @example\n * import { flap } from 'fp-ts/Array'\n *\n * const funs = [\n *   (n: number) => `Double: ${n * 2}`,\n *   (n: number) => `Triple: ${n * 3}`,\n *   (n: number) => `Square: ${n * n}`,\n * ];\n * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);\n *\n * @category mapping\n * @since 2.10.0\n */\nexport var flap = /*#__PURE__*/ flap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexport var apFirst = /*#__PURE__*/ apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexport var apSecond = /*#__PURE__*/ apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/ chainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n    URI: URI,\n    unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexport var guard = /*#__PURE__*/ guard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex\n};\nvar _wither = /*#__PURE__*/ witherDefault(Traversable, Compactable);\nvar _wilt = /*#__PURE__*/ wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\nexport var filterE = /*#__PURE__*/ filterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexport var fromEitherK = /*#__PURE__*/ fromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    return isNonEmpty(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * `every` tells if the provided predicate holds true for every element in the `Array`.\n *\n * @example\n * import { every } from 'fp-ts/Array'\n *\n * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var every = RA.every;\n/**\n * `some` tells if the provided predicate holds true at least for one element in the `Array`.\n *\n * @example\n * import { some } from 'fp-ts/Array'\n *\n * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexport var some = function (predicate) {\n    return function (as) {\n        return as.some(predicate);\n    };\n};\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n/**\n * Places an element in between members of an `Array`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexport var intercalate = RA.intercalate;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/ of(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bindTo = /*#__PURE__*/ bindTo_(Functor);\nvar let_ = /*#__PURE__*/ let__(Functor);\nexport { \n/**\n * @category do notation\n * @since 2.13.0\n */\nlet_ as let };\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var bind = /*#__PURE__*/ bind_(Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexport var apS = /*#__PURE__*/ apS_(Apply);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `A.Functor` instead of `A.array`\n * (where `A` is from `import A from 'fp-ts/Array'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport var array = {\n    URI: URI,\n    compact: compact,\n    separate: separate,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: zero,\n    unfold: unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n"],"mappings":"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UxB,EAAE,EAAE;IACjB,OAAOE,UAAU,CAACF,EAAE,CAAC,GAAGwB,UAAU,CAACxB,EAAE,CAAC,GAAGuB,OAAO,EAAE;EACtD,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,KAAK,GAAGH,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,UAAU,GAAG,UAAUH,OAAO,EAAEC,UAAU,EAAE;EACnD,OAAO,UAAUxB,EAAE,EAAE;IACjB,OAAOE,UAAU,CAACF,EAAE,CAAC,GAAGwB,UAAU,CAAClC,GAAG,CAACqC,IAAI,CAAC3B,EAAE,CAAC,EAAEV,GAAG,CAACsC,IAAI,CAAC5B,EAAE,CAAC,CAAC,GAAGuB,OAAO,EAAE;EAC9E,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIM,SAAS,GAAGH,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,QAAQ,GAAGD,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,WAAW,GAAG,UAAUR,OAAO,EAAEC,UAAU,EAAE;EACpD,OAAO,UAAUxB,EAAE,EAAE;IACjB,OAAOE,UAAU,CAACF,EAAE,CAAC,GAAGwB,UAAU,CAAClC,GAAG,CAAC0C,IAAI,CAAChC,EAAE,CAAC,EAAEV,GAAG,CAAC2C,IAAI,CAACjC,EAAE,CAAC,CAAC,GAAGuB,OAAO,EAAE;EAC9E,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIW,UAAU,GAAGH,WAAW;AACnC;AACA;AACA;AACA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ACL,CAAC;AACD,OAAO,SAAS0D,aAAa,CAACrD,SAAS,EAAE;EACrC,OAAO,UAAUb,EAAE,EAAE;IAAE,OAAOA,EAAE,CAACqD,KAAK,CAACK,aAAa,CAAC1D,EAAE,EAAEa,SAAS,CAAC,CAAC;EAAE,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIsD,SAAS,GAAG5E,EAAE,CAAC4E,SAAS;AACnC,OAAO,SAASC,SAAS,CAACvD,SAAS,EAAE;EACjC,OAAOtB,EAAE,CAAC6E,SAAS,CAACvD,SAAS,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIwD,YAAY,GAAG9E,EAAE,CAAC8E,YAAY;AACzC,OAAO,SAASC,QAAQ,CAACzD,SAAS,EAAE;EAChC,OAAOtB,EAAE,CAAC+E,QAAQ,CAACzD,SAAS,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI0D,WAAW,GAAGhF,EAAE,CAACgF,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAGjF,EAAE,CAACiF,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIpB,IAAI,GAAG,UAAUpD,EAAE,EAAE;EAAE,OAAOA,EAAE,CAACqD,KAAK,EAAE;AAAE,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIoB,QAAQ,GAAG,UAAUnC,CAAC,EAAE3B,CAAC,EAAE;EAClC,OAA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C,CAAC;EAC7D,CAAC;AAAE,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIgK,SAAS,GAAG,aAAcrB,MAAM,CAACpM,QAAQ,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIqL,OAAO,GAAG3K,EAAE,CAAC2K,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIO,gBAAgB,GAAGlL,EAAE,CAACkL,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIX,MAAM,GAAGvK,EAAE,CAACuK,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIQ,eAAe,GAAG/K,EAAE,CAAC+K,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIF,WAAW,GAAG7K,EAAE,CAAC6K,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIO,oBAAoB,GAAGpL,EAAE,CAACoL,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIU,QAAQ,GAAG,UAAUF,CAAC,EAAE;EAC/B,IAAIK,kBAAkB,GAAGC,iBAAiB,CAACN,CAAC,CAAC;EAC7C,OAAO,UAAU1K,CAAC,EAAE;IAAE,OAAO+K,kBAAkB,CAAC,UAAUnM,CAAC,EAAEsB,CAAC,EAAE;MAAE,OAAOF,CAAC,CAACE,CAAC,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC;AACxF,C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Y,GAAG,YAAY;EAAE,OAAQ;IAC5C5F,MAAM,EAAE,UAAUD,KAAK,EAAED,MAAM,EAAE;MAAE,OAAOC,KAAK,CAACC,MAAM,CAACF,MAAM,CAAC;IAAE;EACpE,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI+F,SAAS,GAAG,YAAY;EAAE,OAAQ;IACzC7F,MAAM,EAAE4F,YAAY,EAAE,CAAC5F,MAAM;IAC7B8F,KAAK,EAAE;EACX,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAGlO,EAAE,CAACkO,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAGnO,EAAE,CAACmO,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUlH,CAAC,EAAE;EACxC,IAAImB,MAAM,GAAGD,KAAK,CAAClB,CAAC,CAAC;EACrB,OAAO;IACHiB,MAAM,EAAE,UAAUD,KAAK,EAAED,MAAM,EAAE;MAAE,OAAOI,MAAM,CAACJ,MAAM,CAAC,CAACC,KAAK,CAAC;IAAE;EACrE,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAImG,cAAc,GAAG,UAAUnH,CAAC,EAAE;EAAE,OAAQ;IAC/CiB,MAAM,EAAEiG,iBAAiB,CAAClH,CAAC,CAAC,CAACiB,MAAM;IACnC8F,KAAK,EAAE;EACX,CAAC;AAAG,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIK,w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"},"metadata":{},"sourceType":"module"}