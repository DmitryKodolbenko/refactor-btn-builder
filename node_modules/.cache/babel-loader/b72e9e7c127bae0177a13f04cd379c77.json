{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n    };\n  }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"sources":["../src/secp256k1wallet.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAGA;;;;AAIG;AACH,MAAa,eAAe,CAAA;EAgB1B,WAAA,CAAoB,OAAmB,EAAE,MAAkB,EAAE,MAAc,EAAA;IACzE,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,IAAI,CAAC,MAAM,GAAG,MAAM;EACtB;EAnBA;;;;;AAKG;EACI,aAAa,OAAO,CAAC,OAAmB,EAAmB;IAAA,IAAjB,MAAM,uEAAG,QAAQ;IAChE,MAAM,YAAY,GAAG,CAAC,MAAM,QAAA,CAAA,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,MAAM;IAClE,OAAO,IAAI,eAAe,CAAC,OAAO,EAAE,QAAA,CAAA,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;EACrF;EAYA,IAAY,OAAO,GAAA;IACjB,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,IAAI,CAAC,MAAM,EAAE,CAAA,CAAA,EAAA,WAAA,CAAA,8BAA8B,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAM,WAAW,GAAA;IACtB,OAAO,CACL;MACE,IAAI,EAAE,WAAW;MACjB,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,MAAM,EAAE,IAAI,CAAC;KACd,CACF;EACH;EAEO,MAAM,SAAS,CAAC,aAAqB,EAAE,OAAmB,EAAA;IAC/D,IAAI,aAAa,KAAK,IAAI,CAAC,OAAO,EAAE;MAClC,MAAM,IAAI,KAAK,CAAC,WAAW,aAAa,sBAAsB,CAAC;IAChE;IACD,MAAM,OAAO,GAAG,IAAI,QAAA,CAAA,MAAM,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,gBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE;IAC9D,MAAM,SAAS,GAAG,MAAM,QAAA,CAAA,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;IACxE,MAAM,cAAc,GAAG,IAAI,UAAU,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,OAAO;MACL,MAAM,EAAE,OAAO;MACf,SAAS,EAAE,CAAA,CAAA,EAAA,WAAA,CAAA,wBAAwB,EAAC,IAAI,CAAC,MAAM,EAAE,cAAc;KAChE;EACH;AACD;AAhDD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    /**\n     * Creates a Secp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signAmino(signerAddress, signDoc) {\n        if (signerAddress !== this.address) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes),\n        };\n    }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;\n//# sourceMappingURL=secp256k1wallet.js.map"]},"metadata":{},"sourceType":"script"}