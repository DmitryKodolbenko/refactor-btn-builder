{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ADNLKey = void 0;\nvar ton_crypto_1 = require(\"ton-crypto\");\nvar ADNLAddress_1 = require(\"../address/ADNLAddress\");\nvar KEY_PREFIX = Buffer.from('17236849', 'hex');\nvar ADNLKey = /*#__PURE__*/function () {\n  function ADNLKey(address, keyPair) {\n    _classCallCheck(this, ADNLKey);\n    this.address = address;\n    this.keyPair = keyPair;\n  }\n  _createClass(ADNLKey, null, [{\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(src) {\n        var keySeed, keyPair, address;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(src.length !== 36)) {\n                  _context.next = 2;\n                  break;\n                }\n                throw Error('Invalid key');\n              case 2:\n                if (src.slice(0, 4).equals(KEY_PREFIX)) {\n                  _context.next = 4;\n                  break;\n                }\n                throw Error('Invalid key');\n              case 4:\n                keySeed = src.slice(4); // Create keypair\n                keyPair = (0, ton_crypto_1.keyPairFromSeed)(keySeed); // Create address\n                _context.next = 8;\n                return (0, ton_crypto_1.sha256)(Buffer.concat([Buffer.from([0xC6, 0xB4, 0x13, 0x48]), keyPair.publicKey]));\n              case 8:\n                address = _context.sent;\n                return _context.abrupt(\"return\", new ADNLKey(new ADNLAddress_1.ADNLAddress(address), keyPair));\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function fromKey(_x) {\n        return _fromKey.apply(this, arguments);\n      }\n      return fromKey;\n    }()\n  }]);\n  return ADNLKey;\n}();\nexports.ADNLKey = ADNLKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","ADNLKey","ton_crypto_1","require","ADNLAddress_1","KEY_PREFIX","Buffer","from","address","keyPair","src","length","Error","slice","equals","keySeed","keyPairFromSeed","sha256","concat","publicKey","ADNLAddress"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/keystore/ADNLKey.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ADNLKey = void 0;\nconst ton_crypto_1 = require(\"ton-crypto\");\nconst ADNLAddress_1 = require(\"../address/ADNLAddress\");\nconst KEY_PREFIX = Buffer.from('17236849', 'hex');\nclass ADNLKey {\n    constructor(address, keyPair) {\n        this.address = address;\n        this.keyPair = keyPair;\n    }\n    static async fromKey(src) {\n        if (src.length !== 36) {\n            throw Error('Invalid key');\n        }\n        if (!src.slice(0, 4).equals(KEY_PREFIX)) {\n            throw Error('Invalid key');\n        }\n        const keySeed = src.slice(4);\n        // Create keypair\n        const keyPair = (0, ton_crypto_1.keyPairFromSeed)(keySeed);\n        // Create address\n        const address = await (0, ton_crypto_1.sha256)(Buffer.concat([Buffer.from([0xC6, 0xB4, 0x13, 0x48]), keyPair.publicKey]));\n        return new ADNLKey(new ADNLAddress_1.ADNLAddress(address), keyPair);\n    }\n}\nexports.ADNLKey = ADNLKey;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAMC,YAAY,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC1C,IAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACvD,IAAME,UAAU,GAAGC,MAAM,CAACC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;AAAC,IAC5CN,OAAO;EACT,iBAAYO,OAAO,EAAEC,OAAO,EAAE;IAAA;IAC1B,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EAAC;IAAA;IAAA;MAAA,0EACD,iBAAqBC,GAAG;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAChBA,GAAG,CAACC,MAAM,KAAK,EAAE;kBAAA;kBAAA;gBAAA;gBAAA,MACXC,KAAK,CAAC,aAAa,CAAC;cAAA;gBAAA,IAEzBF,GAAG,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAACT,UAAU,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,MAC7BO,KAAK,CAAC,aAAa,CAAC;cAAA;gBAExBG,OAAO,GAAGL,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC,EAC5B;gBACMJ,OAAO,GAAG,CAAC,CAAC,EAAEP,YAAY,CAACc,eAAe,EAAED,OAAO,CAAC,EAC1D;gBAAA;gBAAA,OACsB,CAAC,CAAC,EAAEb,YAAY,CAACe,MAAM,EAAEX,MAAM,CAACY,MAAM,CAAC,CAACZ,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,EAAEE,OAAO,CAACU,SAAS,CAAC,CAAC,CAAC;cAAA;gBAAnHX,OAAO;gBAAA,iCACN,IAAIP,OAAO,CAAC,IAAIG,aAAa,CAACgB,WAAW,CAACZ,OAAO,CAAC,EAAEC,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtE;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAELV,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script"}