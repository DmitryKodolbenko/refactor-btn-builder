{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _BitString_instances, _BitString_length, _BitString_cursor, _BitString_buffer, _BitString_checkRange, _a, _b;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitString = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nvar __1 = require(\"..\");\nvar BitString = /*#__PURE__*/function () {\n  function BitString(buffer, length, cursor) {\n    var _this = this;\n    _classCallCheck(this, BitString);\n    _BitString_instances.add(this);\n    _BitString_length.set(this, void 0);\n    _BitString_cursor.set(this, void 0);\n    _BitString_buffer.set(this, void 0);\n    this[_a] = function () {\n      var offset = 0;\n      var end = __classPrivateFieldGet(_this, _BitString_cursor, \"f\");\n      return {\n        next: function next() {\n          if (offset < end) {\n            var v = _this.get(offset);\n            offset++;\n            return {\n              done: false,\n              value: v\n            };\n          } else {\n            return {\n              done: true\n            };\n          }\n        }\n      };\n    };\n    this.get = function (n) {\n      __classPrivateFieldGet(_this, _BitString_instances, \"m\", _BitString_checkRange).call(_this, n);\n      return (__classPrivateFieldGet(_this, _BitString_buffer, \"f\")[n / 8 | 0] & 1 << 7 - n % 8) > 0;\n    };\n    this.on = function (n) {\n      __classPrivateFieldGet(_this, _BitString_instances, \"m\", _BitString_checkRange).call(_this, n);\n      __classPrivateFieldGet(_this, _BitString_buffer, \"f\")[n / 8 | 0] |= 1 << 7 - n % 8;\n    };\n    this.off = function (n) {\n      __classPrivateFieldGet(_this, _BitString_instances, \"m\", _BitString_checkRange).call(_this, n);\n      __classPrivateFieldGet(_this, _BitString_buffer, \"f\")[n / 8 | 0] &= ~(1 << 7 - n % 8);\n    };\n    this.toggle = function (n) {\n      __classPrivateFieldGet(_this, _BitString_instances, \"m\", _BitString_checkRange).call(_this, n);\n      __classPrivateFieldGet(_this, _BitString_buffer, \"f\")[n / 8 | 0] ^= 1 << 7 - n % 8;\n    };\n    this.writeBit = function (value) {\n      var _c;\n      if (value === true || value > 0) {\n        _this.on(__classPrivateFieldGet(_this, _BitString_cursor, \"f\"));\n      } else {\n        _this.off(__classPrivateFieldGet(_this, _BitString_cursor, \"f\"));\n      }\n      __classPrivateFieldSet(_this, _BitString_cursor, (_c = __classPrivateFieldGet(_this, _BitString_cursor, \"f\"), _c++, _c), \"f\");\n    };\n    this.writeUint = function (value, bitLength) {\n      var v = new bn_js_1.default(value);\n      if (bitLength == 0 || value.toString(2).length > bitLength) {\n        if (v.isZero()) {\n          return;\n        }\n        throw Error(\"bitLength is too small for a value \".concat(v.toString(), \". Got \").concat(bitLength, \", expected >= \").concat(value.toString(2).length));\n      }\n      var s = v.toString(2, bitLength);\n      for (var i = 0; i < bitLength; i++) {\n        _this.writeBit(s[i] === '1');\n      }\n    };\n    this.writeInt = function (value, bitLength) {\n      var v = new bn_js_1.default(value);\n      if (bitLength == 1) {\n        if (v.eq(new bn_js_1.default(-1))) {\n          _this.writeBit(true);\n          return;\n        }\n        if (v.isZero()) {\n          _this.writeBit(false);\n          return;\n        }\n        throw Error(\"bitlength is too small for a value \".concat(v));\n      } else {\n        if (v.isNeg()) {\n          _this.writeBit(true);\n          var b = new bn_js_1.default(2);\n          var nb = b.pow(new bn_js_1.default(bitLength - 1));\n          _this.writeUint(nb.add(v), bitLength - 1);\n        } else {\n          _this.writeBit(false);\n          _this.writeUint(v, bitLength - 1);\n        }\n      }\n    };\n    this.writeUint8 = function (value) {\n      _this.writeUint(value, 8);\n    };\n    this.writeBuffer = function (buffer) {\n      for (var i = 0; i < buffer.length; i++) {\n        _this.writeUint8(buffer[i]);\n      }\n    };\n    this.writeCoins = function (amount) {\n      if (amount == 0) {\n        _this.writeUint(0, 4);\n      } else {\n        amount = new bn_js_1.default(amount);\n        var l = Math.ceil(amount.toString(16).length / 2);\n        _this.writeUint(l, 4);\n        _this.writeUint(amount, l * 8);\n      }\n    };\n    this.writeAddress = function (address) {\n      if (address === null) {\n        _this.writeUint(0, 2);\n      } else {\n        _this.writeUint(2, 2);\n        _this.writeUint(0, 1);\n        _this.writeInt(address.workChain, 8);\n        _this.writeBuffer(address.hash);\n      }\n    };\n    this.writeBitString = function (value) {\n      var _iterator = _createForOfIteratorHelper(value),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var v = _step.value;\n          _this.writeBit(v);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    this[_b] = function () {\n      return _this.toFiftHex();\n    };\n    __classPrivateFieldSet(this, _BitString_buffer, buffer, \"f\");\n    __classPrivateFieldSet(this, _BitString_length, length, \"f\");\n    __classPrivateFieldSet(this, _BitString_cursor, cursor, \"f\");\n  }\n  _createClass(BitString, [{\n    key: \"available\",\n    get: function get() {\n      return this.length - this.cursor;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _BitString_length, \"f\");\n    }\n  }, {\n    key: \"cursor\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return __classPrivateFieldGet(this, _BitString_buffer, \"f\");\n    }\n  }, {\n    key: \"writeBitArray\",\n    value: function writeBitArray(value) {\n      var _iterator2 = _createForOfIteratorHelper(value),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var v = _step2.value;\n          this.writeBit(v);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"writeVarUInt\",\n    value: function writeVarUInt(value, headerBits) {\n      var v = new bn_js_1.default(value);\n      if (v.eq(new bn_js_1.default(0))) {\n        this.writeUint(0, headerBits);\n      } else {\n        var h = v.toString('hex');\n        while (h.length % 2 !== 0) {\n          h = '0' + h;\n        }\n        var l = Math.ceil(h.length / 2);\n        this.writeUint(l, headerBits);\n        this.writeBuffer(Buffer.from(h, 'hex'));\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var buf = Buffer.alloc(__classPrivateFieldGet(this, _BitString_buffer, \"f\").length);\n      __classPrivateFieldGet(this, _BitString_buffer, \"f\").copy(buf);\n      return new BitString(buf, __classPrivateFieldGet(this, _BitString_length, \"f\"), __classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = '';\n      var _iterator3 = _createForOfIteratorHelper(this),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var v = _step3.value;\n          if (v) {\n            res = res + '1';\n          } else {\n            res = res + '0';\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return res;\n    }\n  }, {\n    key: \"toFiftHex\",\n    value: function toFiftHex() {\n      if (this.cursor % 4 === 0) {\n        var s = __classPrivateFieldGet(this, _BitString_buffer, \"f\").slice(0, Math.ceil(this.cursor / 8)).toString('hex').toUpperCase();\n        if (this.cursor % 8 === 0) {\n          return s;\n        } else {\n          return s.substr(0, s.length - 1);\n        }\n      } else {\n        var temp = this.clone();\n        temp.writeBit(1);\n        while (temp.cursor % 4 !== 0) {\n          temp.writeBit(0);\n        }\n        var hex = temp.toFiftHex().toUpperCase();\n        return hex + '_';\n      }\n    }\n  }, {\n    key: \"setTopUppedArray\",\n    value: function setTopUppedArray(array) {\n      var fullfilledBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      __classPrivateFieldSet(this, _BitString_length, array.length * 8, \"f\");\n      __classPrivateFieldSet(this, _BitString_buffer, Buffer.alloc(array.length), \"f\");\n      array.copy(__classPrivateFieldGet(this, _BitString_buffer, \"f\"));\n      __classPrivateFieldSet(this, _BitString_cursor, this.length, \"f\");\n      if (fullfilledBytes || !this.length) {\n        return;\n      } else {\n        var foundEndBit = false;\n        for (var c = 0; c < 7; c++) {\n          __classPrivateFieldSet(this, _BitString_cursor, __classPrivateFieldGet(this, _BitString_cursor, \"f\") - 1, \"f\");\n          if (this.get(this.cursor)) {\n            foundEndBit = true;\n            this.off(this.cursor);\n            break;\n          }\n        }\n        if (!foundEndBit) {\n          throw new Error(\"Incorrect TopUppedArray\");\n        }\n      }\n    }\n  }, {\n    key: \"getTopUppedArray\",\n    value: function getTopUppedArray() {\n      var ret = this.clone();\n      var tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n      if (tu > 0) {\n        tu = tu - 1;\n        ret.writeBit(true);\n        while (tu > 0) {\n          tu = tu - 1;\n          ret.writeBit(false);\n        }\n      }\n      __classPrivateFieldSet(ret, _BitString_buffer, __classPrivateFieldGet(ret, _BitString_buffer, \"f\").slice(0, Math.ceil(ret.cursor / 8)), \"f\");\n      return __classPrivateFieldGet(ret, _BitString_buffer, \"f\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(src) {\n      if (src.cursor !== this.cursor) {\n        return false;\n      }\n      if (src.length !== this.length) {\n        return false;\n      }\n      var sr = new __1.BitStringReader(src);\n      var tr = new __1.BitStringReader(this);\n      for (var i = 0; i < src.cursor; i++) {\n        if (sr.readBit() !== tr.readBit()) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }], [{\n    key: \"alloc\",\n    value: function alloc(length) {\n      return new BitString(Buffer.alloc(Math.ceil(length / 8), 0), length, 0);\n    }\n  }]);\n  return BitString;\n}();\nexports.BitString = BitString;\n_BitString_length = new WeakMap(), _BitString_cursor = new WeakMap(), _BitString_buffer = new WeakMap(), _BitString_instances = new WeakSet(), _a = Symbol.iterator, _b = symbol_inspect_1.default, _BitString_checkRange = function _BitString_checkRange(n) {\n  if (n > this.length) {\n    throw Error('Invalid index: ' + n);\n  }\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","__importDefault","mod","__esModule","_BitString_instances","_BitString_length","_BitString_cursor","_BitString_buffer","_BitString_checkRange","_a","_b","Object","defineProperty","exports","BitString","bn_js_1","require","symbol_inspect_1","__1","buffer","length","cursor","add","offset","end","next","v","done","n","on","off","toggle","writeBit","_c","writeUint","bitLength","default","toString","isZero","Error","s","i","writeInt","eq","isNeg","b","nb","pow","writeUint8","writeBuffer","writeCoins","amount","l","Math","ceil","writeAddress","address","workChain","hash","writeBitString","toFiftHex","headerBits","h","Buffer","from","buf","alloc","copy","res","slice","toUpperCase","substr","temp","clone","hex","array","fullfilledBytes","foundEndBit","c","ret","tu","src","sr","BitStringReader","tr","readBit","WeakMap","WeakSet","Symbol","iterator"],"sources":["/Users/sepezho/Work/tonana/fe/node_modules/ton/dist/boc/BitString.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _BitString_instances, _BitString_length, _BitString_cursor, _BitString_buffer, _BitString_checkRange, _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitString = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst __1 = require(\"..\");\nclass BitString {\n    constructor(buffer, length, cursor) {\n        _BitString_instances.add(this);\n        _BitString_length.set(this, void 0);\n        _BitString_cursor.set(this, void 0);\n        _BitString_buffer.set(this, void 0);\n        this[_a] = () => {\n            let offset = 0;\n            let end = __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n            return {\n                next: () => {\n                    if (offset < end) {\n                        let v = this.get(offset);\n                        offset++;\n                        return {\n                            done: false,\n                            value: v\n                        };\n                    }\n                    else {\n                        return {\n                            done: true\n                        };\n                    }\n                }\n            };\n        };\n        this.get = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            return (__classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] & (1 << (7 - (n % 8)))) > 0;\n        };\n        this.on = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] |= 1 << (7 - (n % 8));\n        };\n        this.off = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] &= ~(1 << (7 - (n % 8)));\n        };\n        this.toggle = (n) => {\n            __classPrivateFieldGet(this, _BitString_instances, \"m\", _BitString_checkRange).call(this, n);\n            __classPrivateFieldGet(this, _BitString_buffer, \"f\")[(n / 8) | 0] ^= 1 << (7 - (n % 8));\n        };\n        this.writeBit = (value) => {\n            var _c;\n            if (value === true || value > 0) {\n                this.on(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n            }\n            else {\n                this.off(__classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n            }\n            __classPrivateFieldSet(this, _BitString_cursor, (_c = __classPrivateFieldGet(this, _BitString_cursor, \"f\"), _c++, _c), \"f\");\n        };\n        this.writeUint = (value, bitLength) => {\n            let v = new bn_js_1.default(value);\n            if (bitLength == 0 || (value.toString(2).length > bitLength)) {\n                if (v.isZero()) {\n                    return;\n                }\n                throw Error(`bitLength is too small for a value ${v.toString()}. Got ${bitLength}, expected >= ${value.toString(2).length}`);\n            }\n            const s = v.toString(2, bitLength);\n            for (let i = 0; i < bitLength; i++) {\n                this.writeBit(s[i] === '1');\n            }\n        };\n        this.writeInt = (value, bitLength) => {\n            let v = new bn_js_1.default(value);\n            if (bitLength == 1) {\n                if (v.eq(new bn_js_1.default(-1))) {\n                    this.writeBit(true);\n                    return;\n                }\n                if (v.isZero()) {\n                    this.writeBit(false);\n                    return;\n                }\n                throw Error(`bitlength is too small for a value ${v}`);\n            }\n            else {\n                if (v.isNeg()) {\n                    this.writeBit(true);\n                    const b = new bn_js_1.default(2);\n                    const nb = b.pow(new bn_js_1.default(bitLength - 1));\n                    this.writeUint(nb.add(v), bitLength - 1);\n                }\n                else {\n                    this.writeBit(false);\n                    this.writeUint(v, bitLength - 1);\n                }\n            }\n        };\n        this.writeUint8 = (value) => {\n            this.writeUint(value, 8);\n        };\n        this.writeBuffer = (buffer) => {\n            for (let i = 0; i < buffer.length; i++) {\n                this.writeUint8(buffer[i]);\n            }\n        };\n        this.writeCoins = (amount) => {\n            if (amount == 0) {\n                this.writeUint(0, 4);\n            }\n            else {\n                amount = new bn_js_1.default(amount);\n                const l = Math.ceil((amount.toString(16).length) / 2);\n                this.writeUint(l, 4);\n                this.writeUint(amount, l * 8);\n            }\n        };\n        this.writeAddress = (address) => {\n            if (address === null) {\n                this.writeUint(0, 2);\n            }\n            else {\n                this.writeUint(2, 2);\n                this.writeUint(0, 1);\n                this.writeInt(address.workChain, 8);\n                this.writeBuffer(address.hash);\n            }\n        };\n        this.writeBitString = (value) => {\n            for (let v of value) {\n                this.writeBit(v);\n            }\n        };\n        this[_b] = () => this.toFiftHex();\n        __classPrivateFieldSet(this, _BitString_buffer, buffer, \"f\");\n        __classPrivateFieldSet(this, _BitString_length, length, \"f\");\n        __classPrivateFieldSet(this, _BitString_cursor, cursor, \"f\");\n    }\n    static alloc(length) {\n        return new BitString(Buffer.alloc(Math.ceil(length / 8), 0), length, 0);\n    }\n    get available() {\n        return this.length - this.cursor;\n    }\n    get length() {\n        return __classPrivateFieldGet(this, _BitString_length, \"f\");\n    }\n    get cursor() {\n        return __classPrivateFieldGet(this, _BitString_cursor, \"f\");\n    }\n    get buffer() {\n        return __classPrivateFieldGet(this, _BitString_buffer, \"f\");\n    }\n    writeBitArray(value) {\n        for (let v of value) {\n            this.writeBit(v);\n        }\n    }\n    writeVarUInt(value, headerBits) {\n        let v = new bn_js_1.default(value);\n        if (v.eq(new bn_js_1.default(0))) {\n            this.writeUint(0, headerBits);\n        }\n        else {\n            let h = v.toString('hex');\n            while (h.length % 2 !== 0) {\n                h = '0' + h;\n            }\n            const l = Math.ceil((h.length) / 2);\n            this.writeUint(l, headerBits);\n            this.writeBuffer(Buffer.from(h, 'hex'));\n        }\n    }\n    clone() {\n        let buf = Buffer.alloc(__classPrivateFieldGet(this, _BitString_buffer, \"f\").length);\n        __classPrivateFieldGet(this, _BitString_buffer, \"f\").copy(buf);\n        return new BitString(buf, __classPrivateFieldGet(this, _BitString_length, \"f\"), __classPrivateFieldGet(this, _BitString_cursor, \"f\"));\n    }\n    toString() {\n        let res = '';\n        for (let v of this) {\n            if (v) {\n                res = res + '1';\n            }\n            else {\n                res = res + '0';\n            }\n        }\n        return res;\n    }\n    toFiftHex() {\n        if (this.cursor % 4 === 0) {\n            const s = __classPrivateFieldGet(this, _BitString_buffer, \"f\").slice(0, Math.ceil(this.cursor / 8)).toString('hex').toUpperCase();\n            if (this.cursor % 8 === 0) {\n                return s;\n            }\n            else {\n                return s.substr(0, s.length - 1);\n            }\n        }\n        else {\n            const temp = this.clone();\n            temp.writeBit(1);\n            while (temp.cursor % 4 !== 0) {\n                temp.writeBit(0);\n            }\n            const hex = temp.toFiftHex().toUpperCase();\n            return hex + '_';\n        }\n    }\n    setTopUppedArray(array, fullfilledBytes = true) {\n        __classPrivateFieldSet(this, _BitString_length, array.length * 8, \"f\");\n        __classPrivateFieldSet(this, _BitString_buffer, Buffer.alloc(array.length), \"f\");\n        array.copy(__classPrivateFieldGet(this, _BitString_buffer, \"f\"));\n        __classPrivateFieldSet(this, _BitString_cursor, this.length, \"f\");\n        if (fullfilledBytes || !this.length) {\n            return;\n        }\n        else {\n            let foundEndBit = false;\n            for (let c = 0; c < 7; c++) {\n                __classPrivateFieldSet(this, _BitString_cursor, __classPrivateFieldGet(this, _BitString_cursor, \"f\") - 1, \"f\");\n                if (this.get(this.cursor)) {\n                    foundEndBit = true;\n                    this.off(this.cursor);\n                    break;\n                }\n            }\n            if (!foundEndBit) {\n                throw new Error(\"Incorrect TopUppedArray\");\n            }\n        }\n    }\n    getTopUppedArray() {\n        const ret = this.clone();\n        let tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n        if (tu > 0) {\n            tu = tu - 1;\n            ret.writeBit(true);\n            while (tu > 0) {\n                tu = tu - 1;\n                ret.writeBit(false);\n            }\n        }\n        __classPrivateFieldSet(ret, _BitString_buffer, __classPrivateFieldGet(ret, _BitString_buffer, \"f\").slice(0, Math.ceil(ret.cursor / 8)), \"f\");\n        return __classPrivateFieldGet(ret, _BitString_buffer, \"f\");\n    }\n    equals(src) {\n        if (src.cursor !== this.cursor) {\n            return false;\n        }\n        if (src.length !== this.length) {\n            return false;\n        }\n        let sr = new __1.BitStringReader(src);\n        let tr = new __1.BitStringReader(this);\n        for (let i = 0; i < src.cursor; i++) {\n            if (sr.readBit() !== tr.readBit()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.BitString = BitString;\n_BitString_length = new WeakMap(), _BitString_cursor = new WeakMap(), _BitString_buffer = new WeakMap(), _BitString_instances = new WeakSet(), _a = Symbol.iterator, _b = symbol_inspect_1.default, _BitString_checkRange = function _BitString_checkRange(n) {\n    if (n > this.length) {\n        throw Error('Invalid index: ' + n);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}