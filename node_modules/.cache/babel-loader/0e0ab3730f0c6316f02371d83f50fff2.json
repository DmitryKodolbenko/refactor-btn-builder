{"ast":null,"code":"const getSOLMaxAmount = async setSOLMaxAmount => {\n  try {\n    console.log(1);\n    (async () => {\n      const rs = await fetch(\"https://solana-mainnet.g.alchemy.com/v2/B9sqdnSJnFWSdKlCTFqEQjMr8pnj7RAb\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\"\n          // 'x-api-key':\n        },\n\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 1,\n          method: \"getAccountInfo\",\n          params: [process.env.REACT_APP_BACK_SOL_WALLET, {\n            encoding: \"base58\"\n          }]\n        })\n      });\n      rs.json().then(res => {\n        try {\n          var _res$result, _res$result2;\n          console.log(2);\n          console.log(res.result);\n          setSOLMaxAmount((_res$result = res.result) !== null && _res$result !== void 0 && _res$result.value ? ((_res$result2 = res.result) === null || _res$result2 === void 0 ? void 0 : _res$result2.value.lamports) / 1000000000 : 0);\n        } catch (e) {\n          console.log(e);\n        }\n      });\n    })();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport default getSOLMaxAmount;","map":{"version":3,"names":["getSOLMaxAmount","setSOLMaxAmount","console","log","rs","fetch","method","headers","Accept","body","JSON","stringify","jsonrpc","id","params","process","env","REACT_APP_BACK_SOL_WALLET","encoding","json","then","res","result","value","lamports","e"],"sources":["/Users/sepezho/Work/tonana/fe/src/logic/fetch/getSOLMaxAmount.ts"],"sourcesContent":["const getSOLMaxAmount = async (setSOLMaxAmount: any) => {\n\ttry {\n\t\tconsole.log(1);\n\t\t(async () => {\n\t\t\tconst rs = await fetch(\n\t\t\t\t\"https://solana-mainnet.g.alchemy.com/v2/B9sqdnSJnFWSdKlCTFqEQjMr8pnj7RAb\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: \"application/json, text/plain, */*\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t// 'x-api-key':\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tjsonrpc: \"2.0\",\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tmethod: \"getAccountInfo\",\n\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\tprocess.env.REACT_APP_BACK_SOL_WALLET,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tencoding: \"base58\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}),\n\t\t\t\t}\n\t\t\t);\n\t\t\trs.json().then((res) => {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log(2);\n\n\t\t\t\t\tconsole.log(res.result);\n\t\t\t\t\tsetSOLMaxAmount(\n\t\t\t\t\t\tres.result?.value ? res.result?.value.lamports / 1000000000 : 0\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t});\n\t\t})();\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n};\nexport default getSOLMaxAmount;\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAOC,eAAoB,IAAK;EACvD,IAAI;IACHC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,CAAC,YAAY;MACZ,MAAMC,EAAE,GAAG,MAAMC,KAAK,CACrB,0EAA0E,EAC1E;QACCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACRC,MAAM,EAAE,mCAAmC;UAC3C,cAAc,EAAE;UAChB;QACD,CAAC;;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACpBC,OAAO,EAAE,KAAK;UACdC,EAAE,EAAE,CAAC;UACLP,MAAM,EAAE,gBAAgB;UACxBQ,MAAM,EAAE,CACPC,OAAO,CAACC,GAAG,CAACC,yBAAyB,EACrC;YACCC,QAAQ,EAAE;UACX,CAAC;QAEH,CAAC;MACF,CAAC,CACD;MACDd,EAAE,CAACe,IAAI,EAAE,CAACC,IAAI,CAAEC,GAAG,IAAK;QACvB,IAAI;UAAA;UACHnB,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;UAEdD,OAAO,CAACC,GAAG,CAACkB,GAAG,CAACC,MAAM,CAAC;UACvBrB,eAAe,CACd,eAAAoB,GAAG,CAACC,MAAM,wCAAV,YAAYC,KAAK,GAAG,iBAAAF,GAAG,CAACC,MAAM,iDAAV,aAAYC,KAAK,CAACC,QAAQ,IAAG,UAAU,GAAG,CAAC,CAC/D;QACF,CAAC,CAAC,OAAOC,CAAC,EAAE;UACXvB,OAAO,CAACC,GAAG,CAACsB,CAAC,CAAC;QACf;MACD,CAAC,CAAC;IACH,CAAC,GAAG;EACL,CAAC,CAAC,OAAOA,CAAC,EAAE;IACXvB,OAAO,CAACC,GAAG,CAACsB,CAAC,CAAC;EACf;AACD,CAAC;AACD,eAAezB,eAAe"},"metadata":{},"sourceType":"module"}