{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupMintExtension = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/mint/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupMintExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    mint: {\n      params: async () => {\n        const {\n          params\n        } = await queryService.Params({});\n        (0, utils_1.assert)(params);\n        return {\n          blocksPerYear: params.blocksPerYear,\n          goalBonded: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.goalBonded),\n          inflationMin: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMin),\n          inflationMax: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMax),\n          inflationRateChange: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationRateChange),\n          mintDenom: params.mintDenom\n        };\n      },\n      inflation: async () => {\n        const {\n          inflation\n        } = await queryService.Inflation({});\n        return (0, queryclient_1.decodeCosmosSdkDecFromProto)(inflation);\n      },\n      annualProvisions: async () => {\n        const {\n          annualProvisions\n        } = await queryService.AnnualProvisions({});\n        return (0, queryclient_1.decodeCosmosSdkDecFromProto)(annualProvisions);\n      }\n    }\n  };\n}\nexports.setupMintExtension = setupMintExtension;","map":{"version":3,"sources":["../../../src/modules/mint/queries.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAqBA,SAAgB,kBAAkB,CAAC,IAAiB,EAAA;EAClD,MAAM,GAAG,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,uBAAuB,EAAC,IAAI,CAAC;EACzC;EACA;EACA,MAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAe,CAAC,GAAG,CAAC;EAE7C,OAAO;IACL,IAAI,EAAE;MACJ,MAAM,EAAE,YAAgC;QACtC,MAAM;UAAE;QAAM,CAAE,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAA,CAAE,CAAC;QAChD,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAC,MAAM,CAAC;QAEd,OAAO;UACL,aAAa,EAAE,MAAM,CAAC,aAAa;UACnC,UAAU,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,UAAU,CAAC;UAC1D,YAAY,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,YAAY,CAAC;UAC9D,YAAY,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,YAAY,CAAC;UAC9D,mBAAmB,EAAE,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,MAAM,CAAC,mBAAmB,CAAC;UAC5E,SAAS,EAAE,MAAM,CAAC;SACnB;MACH,CAAC;MACD,SAAS,EAAE,YAAW;QACpB,MAAM;UAAE;QAAS,CAAE,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,CAAA,CAAE,CAAC;QACtD,OAAO,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,SAAS,CAAC;MAC/C,CAAC;MACD,gBAAgB,EAAE,YAAW;QAC3B,MAAM;UAAE;QAAgB,CAAE,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,CAAA,CAAE,CAAC;QACpE,OAAO,CAAA,CAAA,EAAA,aAAA,CAAA,2BAA2B,EAAC,gBAAgB,CAAC;MACtD;IACD;GACF;AACH;AA/BA,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupMintExtension = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/mint/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupMintExtension(base) {\n    const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        mint: {\n            params: async () => {\n                const { params } = await queryService.Params({});\n                (0, utils_1.assert)(params);\n                return {\n                    blocksPerYear: params.blocksPerYear,\n                    goalBonded: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.goalBonded),\n                    inflationMin: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMin),\n                    inflationMax: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMax),\n                    inflationRateChange: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationRateChange),\n                    mintDenom: params.mintDenom,\n                };\n            },\n            inflation: async () => {\n                const { inflation } = await queryService.Inflation({});\n                return (0, queryclient_1.decodeCosmosSdkDecFromProto)(inflation);\n            },\n            annualProvisions: async () => {\n                const { annualProvisions } = await queryService.AnnualProvisions({});\n                return (0, queryclient_1.decodeCosmosSdkDecFromProto)(annualProvisions);\n            },\n        },\n    };\n}\nexports.setupMintExtension = setupMintExtension;\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"script"}