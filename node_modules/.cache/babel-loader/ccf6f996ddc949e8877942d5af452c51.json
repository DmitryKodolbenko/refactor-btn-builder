{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/sepezho/Work/tonana/fe/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueueingStreamingSocket = exports.ConnectionStatus = void 0;\nvar stream_1 = require(\"@cosmjs/stream\");\nvar xstream_1 = require(\"xstream\");\nvar streamingsocket_1 = require(\"./streamingsocket\");\nvar ConnectionStatus;\n(function (ConnectionStatus) {\n  ConnectionStatus[ConnectionStatus[\"Unconnected\"] = 0] = \"Unconnected\";\n  ConnectionStatus[ConnectionStatus[\"Connecting\"] = 1] = \"Connecting\";\n  ConnectionStatus[ConnectionStatus[\"Connected\"] = 2] = \"Connected\";\n  ConnectionStatus[ConnectionStatus[\"Disconnected\"] = 3] = \"Disconnected\";\n})(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));\n/**\n * A wrapper around StreamingSocket that can queue requests.\n */\nvar QueueingStreamingSocket = /*#__PURE__*/function () {\n  function QueueingStreamingSocket(url) {\n    var _this = this;\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n    var reconnectedHandler = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, QueueingStreamingSocket);\n    this.queue = [];\n    this.isProcessingQueue = false;\n    this.url = url;\n    this.timeout = timeout;\n    this.reconnectedHandler = reconnectedHandler;\n    var eventProducer = {\n      start: function start(listener) {\n        return _this.eventProducerListener = listener;\n      },\n      stop: function stop() {\n        return _this.eventProducerListener = undefined;\n      }\n    };\n    this.events = xstream_1.Stream.create(eventProducer);\n    this.connectionStatusProducer = new stream_1.DefaultValueProducer(ConnectionStatus.Unconnected);\n    this.connectionStatus = new stream_1.ValueAndUpdates(this.connectionStatusProducer);\n    this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n    this.socket.events.subscribe({\n      next: function next(event) {\n        if (!_this.eventProducerListener) throw new Error(\"No event producer listener set\");\n        _this.eventProducerListener.next(event);\n      },\n      error: function error() {\n        return _this.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      }\n    });\n  }\n  _createClass(QueueingStreamingSocket, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n      this.connectionStatusProducer.update(ConnectionStatus.Connecting);\n      this.socket.connected.then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this2.connectionStatusProducer.update(ConnectionStatus.Connected);\n                return _context.abrupt(\"return\", _this2.processQueue());\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })), function () {\n        return _this2.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      });\n      this.socket.connect();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n      this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n      this.socket.events.subscribe({\n        next: function next(event) {\n          if (!_this3.eventProducerListener) throw new Error(\"No event producer listener set\");\n          _this3.eventProducerListener.next(event);\n        },\n        error: function error() {\n          return _this3.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n        }\n      });\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.socket.connected.then(function () {\n        if (_this3.reconnectedHandler) {\n          _this3.reconnectedHandler();\n        }\n      });\n      this.connect();\n    }\n  }, {\n    key: \"getQueueLength\",\n    value: function getQueueLength() {\n      return this.queue.length;\n    }\n  }, {\n    key: \"queueRequest\",\n    value: function queueRequest(request) {\n      this.queue.push(request);\n      // We donâ€™t need to wait for the queue to be processed.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.processQueue();\n    }\n  }, {\n    key: \"processQueue\",\n    value: function () {\n      var _processQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var request;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.isProcessingQueue || this.connectionStatus.value !== ConnectionStatus.Connected)) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 2:\n                this.isProcessingQueue = true;\n              case 3:\n                if (!(request = this.queue.shift())) {\n                  _context2.next = 17;\n                  break;\n                }\n                _context2.prev = 4;\n                _context2.next = 7;\n                return this.socket.send(request);\n              case 7:\n                this.isProcessingQueue = false;\n                _context2.next = 15;\n                break;\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](4);\n                // Probably the connection is down; will try again automatically when reconnected.\n                this.queue.unshift(request);\n                this.isProcessingQueue = false;\n                return _context2.abrupt(\"return\");\n              case 15:\n                _context2.next = 3;\n                break;\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 10]]);\n      }));\n      function processQueue() {\n        return _processQueue.apply(this, arguments);\n      }\n      return processQueue;\n    }()\n  }]);\n  return QueueingStreamingSocket;\n}();\nexports.QueueingStreamingSocket = QueueingStreamingSocket;","map":{"version":3,"sources":["../src/queueingstreamingsocket.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueueingStreamingSocket = exports.ConnectionStatus = void 0;\nconst stream_1 = require(\"@cosmjs/stream\");\nconst xstream_1 = require(\"xstream\");\nconst streamingsocket_1 = require(\"./streamingsocket\");\nvar ConnectionStatus;\n(function (ConnectionStatus) {\n    ConnectionStatus[ConnectionStatus[\"Unconnected\"] = 0] = \"Unconnected\";\n    ConnectionStatus[ConnectionStatus[\"Connecting\"] = 1] = \"Connecting\";\n    ConnectionStatus[ConnectionStatus[\"Connected\"] = 2] = \"Connected\";\n    ConnectionStatus[ConnectionStatus[\"Disconnected\"] = 3] = \"Disconnected\";\n})(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));\n/**\n * A wrapper around StreamingSocket that can queue requests.\n */\nclass QueueingStreamingSocket {\n    constructor(url, timeout = 10000, reconnectedHandler) {\n        this.queue = [];\n        this.isProcessingQueue = false;\n        this.url = url;\n        this.timeout = timeout;\n        this.reconnectedHandler = reconnectedHandler;\n        const eventProducer = {\n            start: (listener) => (this.eventProducerListener = listener),\n            stop: () => (this.eventProducerListener = undefined),\n        };\n        this.events = xstream_1.Stream.create(eventProducer);\n        this.connectionStatusProducer = new stream_1.DefaultValueProducer(ConnectionStatus.Unconnected);\n        this.connectionStatus = new stream_1.ValueAndUpdates(this.connectionStatusProducer);\n        this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n        this.socket.events.subscribe({\n            next: (event) => {\n                if (!this.eventProducerListener)\n                    throw new Error(\"No event producer listener set\");\n                this.eventProducerListener.next(event);\n            },\n            error: () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected),\n        });\n    }\n    connect() {\n        this.connectionStatusProducer.update(ConnectionStatus.Connecting);\n        this.socket.connected.then(async () => {\n            this.connectionStatusProducer.update(ConnectionStatus.Connected);\n            return this.processQueue();\n        }, () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected));\n        this.socket.connect();\n    }\n    disconnect() {\n        this.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n        this.socket.disconnect();\n    }\n    reconnect() {\n        this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n        this.socket.events.subscribe({\n            next: (event) => {\n                if (!this.eventProducerListener)\n                    throw new Error(\"No event producer listener set\");\n                this.eventProducerListener.next(event);\n            },\n            error: () => this.connectionStatusProducer.update(ConnectionStatus.Disconnected),\n        });\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.socket.connected.then(() => {\n            if (this.reconnectedHandler) {\n                this.reconnectedHandler();\n            }\n        });\n        this.connect();\n    }\n    getQueueLength() {\n        return this.queue.length;\n    }\n    queueRequest(request) {\n        this.queue.push(request);\n        // We donâ€™t need to wait for the queue to be processed.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.processQueue();\n    }\n    async processQueue() {\n        if (this.isProcessingQueue || this.connectionStatus.value !== ConnectionStatus.Connected) {\n            return;\n        }\n        this.isProcessingQueue = true;\n        let request;\n        while ((request = this.queue.shift())) {\n            try {\n                await this.socket.send(request);\n                this.isProcessingQueue = false;\n            }\n            catch (error) {\n                // Probably the connection is down; will try again automatically when reconnected.\n                this.queue.unshift(request);\n                this.isProcessingQueue = false;\n                return;\n            }\n        }\n    }\n}\nexports.QueueingStreamingSocket = QueueingStreamingSocket;\n//# sourceMappingURL=queueingstreamingsocket.js.map"]},"metadata":{},"sourceType":"script"}