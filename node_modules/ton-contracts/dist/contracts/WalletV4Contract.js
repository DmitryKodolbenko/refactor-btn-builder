"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletV4Contract = void 0;
const ton_1 = require("ton");
const ton_crypto_1 = require("ton-crypto");
class WalletV4SigningMessage {
    timeout;
    seqno;
    walletId;
    order;
    sendMode;
    constructor(args) {
        this.order = args.order;
        this.sendMode = args.sendMode;
        if (args.timeout !== undefined && args.timeout !== null) {
            this.timeout = args.timeout;
        }
        else {
            this.timeout = Math.floor(Date.now() / 1e3) + 60; // Default timeout: 60 seconds
        }
        if (args.seqno !== undefined && args.seqno !== null) {
            this.seqno = args.seqno;
        }
        else {
            this.seqno = 0;
        }
        if (args.walletId !== null && args.walletId !== undefined) {
            this.walletId = args.walletId;
        }
        else {
            this.walletId = 698983191;
        }
    }
    writeTo(cell) {
        cell.bits.writeUint(this.walletId, 32);
        if (this.seqno === 0) {
            for (let i = 0; i < 32; i++) {
                cell.bits.writeBit(1);
            }
        }
        else {
            cell.bits.writeUint(this.timeout, 32);
        }
        cell.bits.writeUint(this.seqno, 32);
        cell.bits.writeUint8(0); // Simple order
        // Write order
        if (this.order) {
            cell.bits.writeUint8(this.sendMode);
            let orderCell = new ton_1.Cell();
            this.order.writeTo(orderCell);
            cell.refs.push(orderCell);
        }
    }
}
class WalletV4Contract {
    static create(source) {
        let address = (0, ton_1.contractAddress)(source);
        return new WalletV4Contract(address, source);
    }
    address;
    source;
    constructor(address, source) {
        this.address = address;
        this.source = source;
    }
    async getSeqNo(client) {
        if (await client.isContractDeployed(this.address)) {
            let res = await client.callGetMethod(this.address, 'seqno');
            return parseInt(res.stack[0][1], 16);
        }
        else {
            return 0;
        }
    }
    async createTransfer(args) {
        let signingMessage = new WalletV4SigningMessage({
            timeout: args.timeout,
            walletId: args.walletId,
            seqno: args.seqno,
            sendMode: args.sendMode,
            order: args.order
        });
        // Sign message
        const cell = new ton_1.Cell();
        signingMessage.writeTo(cell);
        let signature;
        if (args.secretKey) {
            signature = (0, ton_crypto_1.sign)(cell.hash(), args.secretKey);
        }
        else {
            signature = Buffer.alloc(64);
        }
        // Body
        const body = new ton_1.Cell();
        body.bits.writeBuffer(signature);
        signingMessage.writeTo(body);
        return body;
    }
}
exports.WalletV4Contract = WalletV4Contract;
