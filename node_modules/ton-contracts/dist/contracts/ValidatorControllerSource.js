"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidatorControllerSource = void 0;
const ton_1 = require("ton");
class ValidatorControllerSource {
    static SOURCE = Buffer.from('te6ccgECCwEAAVoAART/APSkE/S88sgLAQIBIAIDAgFIBAUB8PLtRNDTH9P/0//6QCH6RALTH/gjAdEIgwjXGCDTH1EauvKhAfkBVHAo+RBROPkQUSKx8qIBs46YUoKhgQEsufJmUwDXSvKlkyDXSorobCLRkmwx4vgABKTIyx8Ty//L/wHPFhLLH8ntVPgPkyDXSpbTB9QC+wDo0QoABNAwAgEgBgcCASAICQBBvll/aiaGmPmOn/mOn/mP0gGOmP6PwRgNDAgJYA0LhbBMABm7Oc7UTQgCDXIdcL/4ABG4yX7UTQ1wsfgA9tMHAYEA/LDyZNQB0NMA0wDTANMA+kAx+kAB+kQC+gAx02nTAFICwAGUMdTR0JEw4tMfMAfyYwXyowPyowHyY1EWulEXurDyo/JjIIIQTnN0S7qRMI4kIIIQR2V0JLqRMI4XIIIQUmdDcLqRMJuCEFZ0Q3C6kvIj3+Li4g==', 'base64');
    static create(opts) {
        // Resolve parameters
        let masterKey = opts.masterKey;
        let restrictedKey = opts.restrictedKey;
        let workchain = opts.workchain;
        let whitelistedAddress = opts.whitelistedAddress;
        // Build initial code and data
        let initialCode = ton_1.Cell.fromBoc(ValidatorControllerSource.SOURCE)[0];
        let initialData = new ton_1.Cell();
        initialData.bits.writeUint(0, 32); // SeqNo
        initialData.bits.writeBuffer(restrictedKey); // Restricted key
        initialData.bits.writeBuffer(masterKey); // Master key
        initialData.bits.writeAddress(whitelistedAddress); // Whitelisted address
        initialData.bits.writeUint(0, 32); // Last restricted tx
        return new ValidatorControllerSource({ masterKey, restrictedKey, whitelistedAddress, initialCode, initialData, workchain });
    }
    static restore(backup) {
        const store = new ton_1.ConfigStore(backup);
        return ValidatorControllerSource.create({
            workchain: store.getInt('wc'),
            restrictedKey: store.getBuffer('pk'),
            masterKey: store.getBuffer('mk'),
            whitelistedAddress: store.getAddress('wa')
        });
    }
    masterKey;
    restrictedKey;
    whitelistedAddress;
    initialCode;
    initialData;
    workchain;
    type = 'org.ton.validator.controller';
    walletVersion = 'v1'; // Conformance to wallet interface
    constructor(opts) {
        this.masterKey = opts.masterKey;
        this.restrictedKey = opts.restrictedKey;
        this.whitelistedAddress = opts.whitelistedAddress;
        this.initialCode = opts.initialCode;
        this.initialData = opts.initialData;
        this.workchain = opts.workchain;
        Object.freeze(this);
    }
    backup = () => {
        const config = new ton_1.ConfigStore();
        config.setInt('wc', this.workchain);
        config.setBuffer('pk', this.restrictedKey);
        config.setBuffer('mk', this.masterKey);
        config.setAddress('wa', this.whitelistedAddress);
        return config.save();
    };
    describe = () => {
        return 'Validator Controller. Address: ' + this.whitelistedAddress.toFriendly() + ', Master Key: ' + this.masterKey.toString('hex') + ', Default Key: ' + this.restrictedKey.toString('hex');
    };
}
exports.ValidatorControllerSource = ValidatorControllerSource;
