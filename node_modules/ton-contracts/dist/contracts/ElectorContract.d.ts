/// <reference types="node" />
import BN from "bn.js";
import { Address, ADNLAddress, Contract, ContractSource, Message, TonClient } from "ton";
export declare class ElectorContract implements Contract {
    /**
     * Create election request message to be signed
     */
    static createElectionRequest(args: {
        validator: Address;
        electionTime: number;
        maxFactor: number;
        adnlAddress: ADNLAddress;
    }): Buffer;
    /**
     * Signing election request
     */
    static signElectionRequest(args: {
        request: Buffer;
        key: Buffer;
    }): Buffer;
    /**
     * Create election request message
     */
    static createElectionRequestSigned(args: {
        validator: Address;
        electionTime: number;
        maxFactor: number;
        adnlAddress: ADNLAddress;
        publicKey: Buffer;
        signature: Buffer;
        queryId: BN;
    }): Message;
    /**
     * Create recover stake message
     */
    static createRecoverStakeMessage(args: {
        queryId: BN;
    }): Buffer;
    /**
     * Parsing complaints
     * @param src source object
     */
    static parseComplaints(src: any[]): {
        id: BN;
        publicKey: Buffer;
        createdAt: number;
        severity: number;
        paid: BN;
        suggestedFine: BN;
        suggestedFinePart: BN;
        rewardAddress: Address;
        votes: number[];
        remainingWeight: BN;
        vsetId: BN;
    }[];
    readonly address: Address;
    readonly source: ContractSource;
    private readonly client;
    constructor(client: TonClient);
    getReturnedStake(addres: Address): Promise<BN>;
    getPastElectionsList(): Promise<{
        id: number;
        unfreezeAt: number;
        stakeHeld: number;
    }[]>;
    getPastElections(): Promise<{
        id: number;
        unfreezeAt: number;
        stakeHeld: number;
        totalStake: BN;
        bonuses: BN;
        frozen: Map<string, {
            address: Address;
            weight: BN;
            stake: BN;
        }>;
    }[]>;
    getElectionEntities(): Promise<{
        minStake: number;
        allStakes: number;
        endElectionsTime: number;
        startWorkTime: number;
        entities: {
            pubkey: Buffer;
            stake: BN;
            address: Address;
            adnl: Buffer;
        }[];
    }>;
    getActiveElectionId(): Promise<number | null>;
    getComplaints(electionId: number): Promise<{
        id: BN;
        publicKey: Buffer;
        createdAt: number;
        severity: number;
        paid: BN;
        suggestedFine: BN;
        suggestedFinePart: BN;
        rewardAddress: Address;
        votes: number[];
        remainingWeight: BN;
        vsetId: BN;
    }[]>;
}
