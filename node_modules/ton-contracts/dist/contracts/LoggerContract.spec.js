"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ton_1 = require("ton");
const LoggerContract_1 = require("./LoggerContract");
const createStringCell_1 = require("./tests/createStringCell");
const topUpAddress_1 = require("./tests/topUpAddress");
const fs = __importStar(require("fs"));
const LoggerContractSource_1 = require("./LoggerContractSource");
const awaitCondition_1 = require("ton/dist/tests/awaitCondition");
const client = new ton_1.TonClient({ endpoint: 'https://testnet.toncenter.com/api/v2/jsonRPC' });
describe('LoggerContract', () => {
    it('should conform to sources', () => {
        let source = fs.readFileSync(__dirname + '/../../contracts/logger.cell');
        expect(LoggerContractSource_1.LoggerContractSource.SOURCE.toString('base64')).toEqual(source.toString('base64'));
    });
    it('should create logger contract', async () => {
        // Create logger
        let logger = await LoggerContract_1.LoggerContract.createRandom(client);
        console.warn(logger.address.toFriendly());
        await (0, topUpAddress_1.topUpAddress)(client, logger.address, (0, ton_1.toNano)(0.1));
        // Send external
        const data = (0, createStringCell_1.createStringCell)('Hello world!');
        await client.sendExternalMessage(logger, data);
        await (0, awaitCondition_1.awaitCondition)(12000, async () => (await logger.getSeqno()) > 0);
        // Get external messages
        let res = await logger.getExternalMessages();
        expect(res.length).toBe(1);
        expect(res[0].inMessage).not.toBeNull();
        expect(res[0].inMessage.body).not.toBeNull();
        expect(res[0].inMessage.body.type).toBe('data');
        expect(ton_1.Cell.fromBoc(res[0].inMessage.body.data)[0].bits.toFiftHex()).toEqual(data.bits.toFiftHex());
        // Get internal messages
        res = await logger.getInternalMessages();
        expect(res.length).toBe(1);
        expect(res[0].inMessage).not.toBeNull();
        expect(res[0].inMessage.body).not.toBeNull();
        expect(res[0].inMessage.body.type).toBe('data');
        expect(ton_1.Cell.fromBoc(res[0].inMessage.body.data)[0].bits.toFiftHex()).toEqual('');
    }, 120000);
});
