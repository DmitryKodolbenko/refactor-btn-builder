"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HighloadWalletSource_1 = require("./HighloadWalletSource");
const ton_contract_executor_1 = require("ton-contract-executor");
const createWalletKey_1 = require("./tests/createWalletKey");
const ton_1 = require("ton");
const HighloadWalletContract_1 = require("./HighloadWalletContract");
const bn_js_1 = __importDefault(require("bn.js"));
const parseActionsList_1 = require("./tests/parseActionsList");
const client = new ton_1.TonClient({ endpoint: 'https://testnet.toncenter.com/api/v2/jsonRPC' });
describe('HighloadWalletContract', () => {
    it('should perform transfers', async () => {
        const walletKey = await (0, createWalletKey_1.createWalletKey)();
        const source = HighloadWalletSource_1.HighloadWalletSource.create({ workchain: 0, publicKey: walletKey.publicKey });
        const address = await (0, ton_1.contractAddress)(source);
        const contractInterface = new HighloadWalletContract_1.HighloadWalletContract(address, client);
        const contract = await ton_contract_executor_1.SmartContract.fromCell(source.initialCode, source.initialData);
        const result = await contract.sendExternalMessage(new ton_1.ExternalMessage({
            to: address,
            body: new ton_1.CommonMessageInfo({
                body: new ton_1.CellMessage(await contractInterface.createTransfer({
                    seqno: 0,
                    walletId: 0,
                    timeout: Math.floor(Date.now() / 1000 + 1000),
                    secretKey: walletKey.secretKey,
                    messages: [{
                            sendMode: ton_1.SendMode.IGNORE_ERRORS,
                            order: new ton_1.InternalMessage({
                                to: address,
                                value: new bn_js_1.default(1),
                                bounce: true,
                                body: new ton_1.CommonMessageInfo({ body: new ton_1.EmptyMessage() })
                            })
                        }]
                }))
            })
        }));
        expect(result.type).toBe('success');
        expect(result.exit_code).toBe(0);
        if (result.type === 'success') {
            const res = (0, parseActionsList_1.parseActionsList)(result.action_list_cell);
            expect(res.length).toBe(1);
            expect(res[0].type).toEqual('send_msg');
            if (res[0].type === 'send_msg') {
                expect(res[0].mode).toBe(ton_1.SendMode.IGNORE_ERRORS);
                expect(res[0].message.info.dest.equals(address)).toBe(true);
            }
        }
    });
});
