"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createWalletKey_1 = require("./tests/createWalletKey");
const WalletV4Contract_1 = require("./WalletV4Contract");
const WalletV4Source_1 = require("./WalletV4Source");
const ton_contract_executor_1 = require("ton-contract-executor");
const bn_js_1 = __importDefault(require("bn.js"));
const ton_1 = require("ton");
const parseActionsList_1 = require("./tests/parseActionsList");
describe('WalletV4Contract', () => {
    it('should perform transfers', async () => {
        const walletKey = await (0, createWalletKey_1.createWalletKey)();
        const source = WalletV4Source_1.WalletV4Source.create({ workchain: 0, publicKey: walletKey.publicKey });
        const contract = await WalletV4Contract_1.WalletV4Contract.create(source);
        const instance = await ton_contract_executor_1.SmartContract.fromCell(contract.source.initialCode, contract.source.initialData);
        // Check seqno
        let res = await instance.invokeGetMethod('seqno', []);
        expect(res.type).toEqual('success');
        if (res.type === 'success') {
            expect(res.result.length).toBe(1);
            expect(res.result[0].eq(new bn_js_1.default(0))).toBe(true);
        }
        // Send external
        res = await instance.sendExternalMessage(new ton_1.ExternalMessage({
            to: contract.address,
            body: new ton_1.CommonMessageInfo({
                body: new ton_1.CellMessage(await contract.createTransfer({
                    seqno: 0,
                    sendMode: ton_1.SendMode.IGNORE_ERRORS,
                    walletId: source.walletId,
                    secretKey: walletKey.secretKey,
                    order: new ton_1.InternalMessage({
                        to: contract.address,
                        value: new bn_js_1.default(1123),
                        bounce: true,
                        body: new ton_1.CommonMessageInfo({
                            body: new ton_1.EmptyMessage()
                        })
                    })
                }))
            })
        }));
        expect(res.type).toEqual('success');
        if (res.type === 'success') {
            expect(res.action_list_cell).not.toBeUndefined();
            expect(res.action_list_cell).not.toBeNull();
            const actions = (0, parseActionsList_1.parseActionsList)(res.action_list_cell);
            expect(actions.length).toBe(1);
            expect(actions[0].type).toEqual('send_msg');
            if (actions[0].type === 'send_msg') {
                expect(actions[0].mode).toBe(ton_1.SendMode.IGNORE_ERRORS);
                expect(actions[0].message.info.dest.equals(contract.address)).toBe(true);
                expect(actions[0].message.info.type).toEqual('internal');
                if (actions[0].message.info.type === 'internal') {
                    expect(actions[0].message.info.value.coins.eq(new bn_js_1.default(1123))).toBe(true);
                }
            }
        }
    });
});
