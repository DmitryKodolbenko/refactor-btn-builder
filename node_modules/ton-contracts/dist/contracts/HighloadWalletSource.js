"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HighloadWalletSource = void 0;
const ton_1 = require("ton");
class HighloadWalletSource {
    static SOURCE = Buffer.from('te6ccgEBCAEAlwABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQC48oMI1xgg0x/TH9MfAvgju/Jj7UTQ0x/TH9P/0VEyuvKhUUS68qIE+QFUEFX5EPKj9ATR+AB/jhYhgBD0eG+lIJgC0wfUMAH7AJEy4gGz5lsBpMjLH8sfy//J7VQABNAwAgFIBgcAF7s5ztRNDTPzHXC/+AARuMl+1E0NcLH4', 'base64');
    static create(opts) {
        // Build initial code and data
        const walletId = opts.walletId ? opts.walletId : 0;
        let initialCode = ton_1.Cell.fromBoc(HighloadWalletSource.SOURCE)[0];
        let initialData = new ton_1.Cell();
        initialData.bits.writeUint(0, 32);
        initialData.bits.writeUint(walletId, 32);
        initialData.bits.writeBuffer(opts.publicKey);
        return new HighloadWalletSource({ initialCode, initialData, workchain: opts.workchain, walletId, publicKey: opts.publicKey });
    }
    static restore(backup) {
        const store = new ton_1.ConfigStore(backup);
        return HighloadWalletSource.create({
            workchain: store.getInt('wc'),
            publicKey: store.getBuffer('pk'),
            walletId: store.getInt('walletId'),
        });
    }
    initialCode;
    initialData;
    walletId;
    workchain;
    publicKey;
    type = 'org.ton.wallets.highload';
    constructor(args) {
        this.initialCode = args.initialCode;
        this.initialData = args.initialData;
        this.workchain = args.workchain;
        this.walletId = args.walletId;
        this.publicKey = args.publicKey;
    }
    describe() {
        return 'Highload Wallet #' + this.walletId;
    }
    backup() {
        const config = new ton_1.ConfigStore();
        config.setInt('wc', this.workchain);
        config.setBuffer('pk', this.publicKey);
        config.setInt('walletId', this.walletId);
        return config.save();
    }
}
exports.HighloadWalletSource = HighloadWalletSource;
