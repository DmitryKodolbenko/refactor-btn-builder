"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MnemonicProvider = void 0;
const ton_1 = require("ton");
const ton_contracts_1 = require("ton-contracts");
const ton_crypto_1 = require("ton-crypto");
const internal_utils_1 = require("./internal_utils");
// TODO - fix wallet version handling
class MnemonicProvider {
    constructor(mnemonic, rpcApi) {
        this._mnemonic = mnemonic;
        this._tonClient = new ton_1.TonClient({ endpoint: rpcApi });
    }
    requestTransaction(request, onSuccess) {
        return __awaiter(this, void 0, void 0, function* () {
            const wk = yield (0, ton_crypto_1.mnemonicToWalletKey)(this._mnemonic);
            const walletContract = ton_contracts_1.WalletV4Contract.create(ton_contracts_1.WalletV4Source.create({
                publicKey: wk.publicKey,
                workchain: 0,
            }));
            // const walletContract = WalletContract.create(
            //   this._tonClient,
            //   //TODO VER
            //   WalletV4Source.create({
            //     publicKey: wk.publicKey,
            //     workchain: 0,
            //   })
            // );
            const seqno = yield walletContract.getSeqNo(this._tonClient);
            const ENC = {
                "+": "-",
                "/": "_",
                "=": ".",
            };
            const stateInitMessage = request.stateInit
                ? new ton_1.CellMessage(ton_1.Cell.fromBoc(Buffer.from((0, internal_utils_1.stateInitToBuffer)(request.stateInit)
                    .toString("base64")
                    .replace(/[+/=]/g, (m) => {
                    return ENC[m];
                })))[0])
                : undefined;
            const transfer = yield walletContract.createTransfer({
                walletId: 698983191,
                secretKey: wk.secretKey,
                seqno: seqno,
                sendMode: ton_1.SendMode.PAY_GAS_SEPARATLY,
                order: new ton_1.InternalMessage({
                    to: request.to,
                    value: request.value,
                    bounce: true,
                    body: new ton_1.CommonMessageInfo({
                        stateInit: stateInitMessage,
                        body: request.message && new ton_1.CellMessage(request.message),
                    }),
                }),
            });
            yield this._tonClient.sendExternalMessage(walletContract, transfer);
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            const wk = yield (0, ton_crypto_1.mnemonicToWalletKey)(this._mnemonic);
            const walletContract = ton_contracts_1.WalletV4Contract.create(ton_contracts_1.WalletV4Source.create({
                publicKey: wk.publicKey,
                workchain: 0,
            }));
            // const walletContract = WalletContract.create(
            //   this._tonClient,
            //   //TODO VER
            //   WalletV3R2Source.create({
            //     publicKey: wk.publicKey,
            //     workchain: 0,
            //   })
            // );
            return {
                address: walletContract.address.toFriendly(),
                publicKey: wk.publicKey.toString("hex"),
                walletVersion: "PROBLEM",
            };
        });
    }
}
exports.MnemonicProvider = MnemonicProvider;
