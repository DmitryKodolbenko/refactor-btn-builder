import { Address, Cell, StateInit, TonClient } from "ton";
import BN from "bn.js";
export interface Wallet {
    address: string;
    publicKey: string;
    walletVersion: string;
}
export interface TonWalletProvider {
    connect(): Promise<Wallet>;
    requestTransaction(request: TransactionDetails, onSuccess?: () => void): Promise<void>;
}
export interface TransactionDetails {
    to: Address;
    value: BN;
    stateInit?: StateInit;
    message?: Cell;
}
export declare type GetResponseValue = Cell | BN | null;
export declare class TonConnection {
    #private;
    private _provider;
    _tonClient: TonClient;
    constructor(provider: TonWalletProvider | null, rpcApi: string, apiKey?: string);
    requestTransaction(request: TransactionDetails, onSuccess?: () => void): Promise<void>;
    connect(): Promise<Wallet>;
    makeGetCall<T>(contract: Address, method: string, params: Cell[], parser: (stack: GetResponseValue[]) => T): Promise<T>;
}
