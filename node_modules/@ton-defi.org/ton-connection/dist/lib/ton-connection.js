"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TonConnection_instances, _TonConnection_parseGetMethodCall, _TonConnection_prepareParams;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonConnection = void 0;
const ton_1 = require("ton");
const bn_js_1 = __importDefault(require("bn.js"));
class TonConnection {
    constructor(provider, rpcApi, apiKey) {
        _TonConnection_instances.add(this);
        this._provider = provider;
        this._tonClient = new ton_1.TonClient({ endpoint: rpcApi, apiKey });
    }
    requestTransaction(request, onSuccess) {
        if (!this._provider)
            throw new Error("Cannot request transactions without a wallet provider");
        return this._provider.requestTransaction(request, onSuccess);
    }
    connect() {
        if (!this._provider)
            throw new Error("Cannot connect without a wallet provider");
        return this._provider.connect();
    }
    // TODO support other params than Cell
    makeGetCall(contract, method, params, parser) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this._tonClient.callGetMethod(contract, method, __classPrivateFieldGet(this, _TonConnection_instances, "m", _TonConnection_prepareParams).call(this, params));
            return parser(__classPrivateFieldGet(this, _TonConnection_instances, "m", _TonConnection_parseGetMethodCall).call(this, res.stack));
        });
    }
}
exports.TonConnection = TonConnection;
_TonConnection_instances = new WeakSet(), _TonConnection_parseGetMethodCall = function _TonConnection_parseGetMethodCall(stack) {
    return stack.map(([type, val]) => {
        switch (type) {
            case "num":
                return new bn_js_1.default(val.replace("0x", ""), "hex");
            case "cell":
                return ton_1.Cell.fromBoc(Buffer.from(val.bytes, "base64"))[0];
            case "list":
                if (val.elements.length === 0) {
                    return null;
                }
                else {
                    throw new Error("list parsing not supported");
                }
            default:
                throw new Error(`unknown type: ${type}, val: ${JSON.stringify(val)}`);
        }
    });
}, _TonConnection_prepareParams = function _TonConnection_prepareParams(params = []) {
    return params.map((p) => {
        if (p instanceof ton_1.Cell) {
            // TODO what's idx:false
            return ["tvm.Slice", p.toBoc({ idx: false }).toString("base64")];
        }
        throw new Error("unknown type!");
    });
};
